------- FILE E:\BatariBasic\Projects\Reaper\DeathMatch_NTSC_0.40.bas.asm LEVEL 1 PASS 3
      1  8ffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  9000 ????				      include	"vcs.h"
      1  9000 ????						; VCS.H
      2  9000 ????						; Version 1.05, 13/November/2003
      3  9000 ????
      4  9000 ????	       00 69	   VERSION_VCS =	105
      5  9000 ????
      6  9000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  9000 ????						;
     10  9000 ????						; This file defines hardware registers and memory mapping for the
     11  9000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  9000 ????						; available at at http://www.atari2600.org/dasm
     14  9000 ????						;
     15  9000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  9000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  9000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  9000 ????						; with your views.  Please contribute, if you think you can improve this
     19  9000 ????						; file!
     20  9000 ????						;
     21  9000 ????						; Latest Revisions...
     22  9000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  9000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  9000 ????						;			    This will allow conditional code to verify VCS.H being
     25  9000 ????						;			    used for code assembly.
     26  9000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  9000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  9000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  9000 ????						;			 readability issue, and binary compatibility with disassembled
     30  9000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  9000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  9000 ????						;			 which was broken by the use of segments in this file, as
     33  9000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  9000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  9000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  9000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  9000 ????						;						   it is safe to leave it undefined, and the base address will
     38  9000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  9000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  9000 ????						;			  - register definitions are now generated through assignment
     41  9000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  9000 ????						;			    address architecture.
     43  9000 ????						; 1.0	22/MAR/2003		Initial release
     44  9000 ????
     45  9000 ????
     46  9000 ????						;-------------------------------------------------------------------------------
     47  9000 ????
     48  9000 ????						; TIA_BASE_ADDRESS
     49  9000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  9000 ????						; Normally 0, the base address should (externally, before including this file)
     51  9000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  9000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  9000 ????						; < $40 as a bankswitch.
     54  9000 ????
     55  9000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  9000 ????			  -TIA_BASE_ADDRESS =	0
     57  9000 ????				      ENDIF
     58  9000 ????
     59  9000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  9000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  9000 ????						; *OR* by declaring the label before including this file, eg:
     62  9000 ????						; TIA_BASE_ADDRESS = $40
     63  9000 ????						;   include "vcs.h"
     64  9000 ????
     65  9000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  9000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  9000 ????						; for the mirrored ROM hardware registers.
     68  9000 ????
     69  9000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  9000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  9000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  9000 ????
     73  9000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  9000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  9000 ????				      ENDIF
     76  9000 ????
     77  9000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  9000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  9000 ????				      ENDIF
     80  9000 ????
     81  9000 ????						;-------------------------------------------------------------------------------
     82  9000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  9000 ????				      SEG
    199  9000 ????
    200  9000 ????						; EOF
------- FILE E:\BatariBasic\Projects\Reaper\DeathMatch_NTSC_0.40.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  9000 ????				      include	"macro.h"
      1  9000 ????						; MACRO.H
      2  9000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  9000 ????
      4  9000 ????	       00 69	   VERSION_MACRO =	105
      5  9000 ????
      6  9000 ????						;
      7  9000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  9000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  9000 ????						;
     10  9000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  9000 ????						; It is distributed as a companion machine-specific support package
     12  9000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  9000 ????						; available at at http://www.atari2600.org/dasm
     14  9000 ????						;
     15  9000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  9000 ????						; contents, or would like to add something, please write to me
     17  9000 ????						; (atari2600@taswegian.com) with your contribution.
     18  9000 ????						;
     19  9000 ????						; Latest Revisions...
     20  9000 ????						;
     21  9000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  9000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  9000 ????						;			    used for code assembly.
     24  9000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  9000 ????						;
     26  9000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  9000 ????						;
     28  9000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  9000 ????						;			   (standardised macro for vertical synch code)
     30  9000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  9000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  9000 ????						; 1.0	22/MAR/2003		Initial release
     33  9000 ????
     34  9000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  9000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  9000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  9000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  9000 ????						;   registers and require them to be defined first).
     39  9000 ????
     40  9000 ????						; Available macros...
     41  9000 ????						;   SLEEP n		 - sleep for n cycles
     42  9000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  9000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  9000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  9000 ????
     46  9000 ????						;-------------------------------------------------------------------------------
     47  9000 ????						; SLEEP duration
     48  9000 ????						; Original author: Thomas Jentzsch
     49  9000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  9000 ????						; useful for code where precise timing is required.
     51  9000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  9000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  9000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  9000 ????
     55  9000 ????				      MAC	sleep
     56  9000 ????			   .CYCLES    SET	{1}
     57  9000 ????
     58  9000 ????				      IF	.CYCLES < 2
     59  9000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  9000 ????				      ERR
     61  9000 ????				      ENDIF
     62  9000 ????
     63  9000 ????				      IF	.CYCLES & 1
     64  9000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     65  9000 ????				      nop	0
     66  9000 ????				      ELSE
     67  9000 ????				      bit	VSYNC
     68  9000 ????				      ENDIF
     69  9000 ????			   .CYCLES    SET	.CYCLES - 3
     70  9000 ????				      ENDIF
     71  9000 ????
     72  9000 ????				      REPEAT	.CYCLES / 2
     73  9000 ????				      nop
     74  9000 ????				      REPEND
     75  9000 ????				      ENDM		;usage: SLEEP n (n>1)
     76  9000 ????
     77  9000 ????						;-------------------------------------------------------------------------------
     78  9000 ????						; VERTICAL_SYNC
     79  9000 ????						; Original author: Manuel Polik
     80  9000 ????						; Inserts the code required for a proper 3 scannline 
     81  9000 ????						; vertical sync sequence
     82  9000 ????						;
     83  9000 ????						; Note: Alters the accumulator
     84  9000 ????						;
     85  9000 ????						; IN:
     86  9000 ????						; OUT: A = 1
     87  9000 ????
     88  9000 ????				      MAC	vertical_sync
     89  9000 ????				      LDA	#$02	; A = VSYNC enable
     90  9000 ????				      STA	WSYNC	; Finish current line
     91  9000 ????				      STA	VSYNC	; Start vertical sync
     92  9000 ????				      STA	WSYNC	; 1st line vertical sync
     93  9000 ????				      STA	WSYNC	; 2nd line vertical sync
     94  9000 ????				      LSR		; A = VSYNC disable
     95  9000 ????				      STA	WSYNC	; 3rd line vertical sync
     96  9000 ????				      STA	VSYNC	; Stop vertical sync
     97  9000 ????				      ENDM
     98  9000 ????
     99  9000 ????						;-------------------------------------------------------------------------------
    100  9000 ????						; CLEAN_START
    101  9000 ????						; Original author: Andrew Davie
    102  9000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  9000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  9000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  9000 ????						; Use as very first section of code on boot (ie: at reset)
    106  9000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  9000 ????
    108  9000 ????				      MAC	clean_start
    109  9000 ????				      sei
    110  9000 ????				      cld
    111  9000 ????
    112  9000 ????				      ldx	#0
    113  9000 ????				      txa
    114  9000 ????				      tay
    115  9000 ????			   .CLEAR_STACK dex
    116  9000 ????				      txs
    117  9000 ????				      pha
    118  9000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  9000 ????
    120  9000 ????				      ENDM
    121  9000 ????
    122  9000 ????						;-------------------------------------------------------
    123  9000 ????						; SET_POINTER
    124  9000 ????						; Original author: Manuel Rotschkar
    125  9000 ????						;
    126  9000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  9000 ????						;
    128  9000 ????						; Usage: SET_POINTER pointer, address
    129  9000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  9000 ????						;
    131  9000 ????						; Note: Alters the accumulator, NZ flags
    132  9000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  9000 ????						; IN 2: absolute address
    134  9000 ????
    135  9000 ????				      MAC	set_pointer
    136  9000 ????			   .POINTER   SET	{1}
    137  9000 ????			   .ADDRESS   SET	{2}
    138  9000 ????
    139  9000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  9000 ????				      STA	.POINTER	; Store in pointer
    141  9000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    142  9000 ????				      STA	.POINTER+1	; Store in pointer+1
    143  9000 ????
    144  9000 ????				      ENDM
    145  9000 ????
    146  9000 ????						; EOF
------- FILE E:\BatariBasic\Projects\Reaper\DeathMatch_NTSC_0.40.bas.asm
------- FILE multisprite.h LEVEL 2 PASS 3
      0  9000 ????				      include	"multisprite.h"
      1  9000 ????	       00 80	   missile0x  =	$80
      2  9000 ????	       00 81	   missile1x  =	$81
      3  9000 ????	       00 82	   ballx      =	$82
      4  9000 ????
      5  9000 ????						; multisprite stuff below - 5 bytes each starting with spritex
      6  9000 ????
      7  9000 ????	       00 83	   SpriteIndex =	$83
      8  9000 ????
      9  9000 ????	       00 84	   player0x   =	$84
     10  9000 ????	       00 85	   NewSpriteX =	$85	;		X position
     11  9000 ????	       00 85	   player1x   =	$85
     12  9000 ????	       00 86	   player2x   =	$86
     13  9000 ????	       00 87	   player3x   =	$87
     14  9000 ????	       00 88	   player4x   =	$88
     15  9000 ????	       00 89	   player5x   =	$89
     16  9000 ????
     17  9000 ????	       00 8a	   objecty    =	$8A
     18  9000 ????	       00 8a	   missile0y  =	$8A
     19  9000 ????	       00 8b	   missile1y  =	$8B
     20  9000 ????	       00 8c	   bally      =	$8C
     21  9000 ????
     22  9000 ????	       00 8d	   player0y   =	$8D
     23  9000 ????	       00 8e	   NewSpriteY =	$8E	;		Y position
     24  9000 ????	       00 8e	   player1y   =	$8E
     25  9000 ????	       00 8f	   player2y   =	$8F
     26  9000 ????	       00 90	   player3y   =	$90
     27  9000 ????	       00 91	   player4y   =	$91
     28  9000 ????	       00 92	   player5y   =	$92
     29  9000 ????
     30  9000 ????	       00 93	   NewNUSIZ   =	$93
     31  9000 ????	       00 93	   _NUSIZ1    =	$93
     32  9000 ????	       00 94	   NUSIZ2     =	$94
     33  9000 ????	       00 95	   NUSIZ3     =	$95
     34  9000 ????	       00 96	   NUSIZ4     =	$96
     35  9000 ????	       00 97	   NUSIZ5     =	$97
     36  9000 ????
     37  9000 ????	       00 98	   NewCOLUP1  =	$98
     38  9000 ????	       00 98	   _COLUP1    =	$98
     39  9000 ????	       00 99	   COLUP2     =	$99
     40  9000 ????	       00 9a	   COLUP3     =	$9A
     41  9000 ????	       00 9b	   COLUP4     =	$9B
     42  9000 ????	       00 9c	   COLUP5     =	$9C
     43  9000 ????
     44  9000 ????	       00 9d	   SpriteGfxIndex =	$9D
     45  9000 ????
     46  9000 ????	       00 a2	   player0pointer =	$A2
     47  9000 ????	       00 a2	   player0pointerlo =	$A2
     48  9000 ????	       00 a3	   player0pointerhi =	$A3
     49  9000 ????
     50  9000 ????						;P0Top = temp5
     51  9000 ????	       00 cf	   P0Top      =	$CF	; changed to hard value to avoid dasm issues
     52  9000 ????	       00 a4	   P0Bottom   =	$A4
     53  9000 ????	       00 a5	   P1Bottom   =	$A5
     54  9000 ????
     55  9000 ????	       00 a6	   player1pointerlo =	$A6
     56  9000 ????	       00 a7	   player2pointerlo =	$A7
     57  9000 ????	       00 a8	   player3pointerlo =	$A8
     58  9000 ????	       00 a9	   player4pointerlo =	$A9
     59  9000 ????	       00 aa	   player5pointerlo =	$AA
     60  9000 ????
     61  9000 ????	       00 ab	   player1pointerhi =	$AB
     62  9000 ????	       00 ac	   player2pointerhi =	$AC
     63  9000 ????	       00 ad	   player3pointerhi =	$AD
     64  9000 ????	       00 ae	   player4pointerhi =	$AE
     65  9000 ????	       00 af	   player5pointerhi =	$AF
     66  9000 ????
     67  9000 ????	       00 b0	   player0height =	$B0
     68  9000 ????	       00 b1	   spriteheight =	$B1	; heights of multiplexed player sprite
     69  9000 ????	       00 b1	   player1height =	$B1
     70  9000 ????	       00 b2	   player2height =	$B2
     71  9000 ????	       00 b3	   player3height =	$B3
     72  9000 ????	       00 b4	   player4height =	$B4
     73  9000 ????	       00 b5	   player5height =	$B5
     74  9000 ????
     75  9000 ????	       00 b6	   PF1temp1   =	$B6
     76  9000 ????	       00 b7	   PF1temp2   =	$B7
     77  9000 ????	       00 b8	   PF2temp1   =	$B8
     78  9000 ????	       00 b9	   PF2temp2   =	$B9
     79  9000 ????
     80  9000 ????	       00 ba	   pfpixelheight =	$BA
     81  9000 ????
     82  9000 ????						; playfield is now a pointer to graphics
     83  9000 ????	       00 bb	   playfield  =	$BB
     84  9000 ????	       00 bb	   PF1pointer =	$BB
     85  9000 ????
     86  9000 ????	       00 bd	   PF2pointer =	$BD
     87  9000 ????
     88  9000 ????	       00 bf	   statusbarlength =	$BF
     89  9000 ????	       00 bf	   aux3       =	$BF
     90  9000 ????
     91  9000 ????	       00 c0	   lifecolor  =	$C0
     92  9000 ????	       00 c0	   pfscorecolor =	$C0
     93  9000 ????	       00 c0	   aux4       =	$C0
     94  9000 ????
     95  9000 ????						;P1display = temp2 ; temp2 and temp3
     96  9000 ????	       00 cc	   P1display  =	$cc	; changed to hard value to avoid dasm issues
     97  9000 ????	       00 c1	   lifepointer =	$c1
     98  9000 ????	       00 c2	   lives      =	$c2
     99  9000 ????	       00 c1	   pfscore1   =	$c1
    100  9000 ????	       00 c2	   pfscore2   =	$c2
    101  9000 ????	       00 c1	   aux5       =	$c1
    102  9000 ????	       00 c2	   aux6       =	$c2
    103  9000 ????
    104  9000 ????	       00 c3	   playfieldpos =	$C3
    105  9000 ????
    106  9000 ????						;RepoLine = temp4
    107  9000 ????	       00 ce	   RepoLine   =	$ce	; changed to hard value to avoid dasm issues
    108  9000 ????
    109  9000 ????	       00 c4	   pfheight   =	$C4
    110  9000 ????	       00 c5	   scorepointers =	$C5
    111  9000 ????
    112  9000 ????	       00 cb	   temp1      =	$CB	;used by kernel.  can be used in program too, but
    113  9000 ????	       00 cc	   temp2      =	$CC	;are obliterated when drawscreen is called.
    114  9000 ????	       00 cd	   temp3      =	$CD
    115  9000 ????	       00 ce	   temp4      =	$CE
    116  9000 ????	       00 cf	   temp5      =	$CF
    117  9000 ????	       00 d0	   temp6      =	$D0
    118  9000 ????	       00 d1	   temp7      =	$D1	; This is used to aid in bankswitching
    119  9000 ????
    120  9000 ????	       00 d2	   score      =	$D2
    121  9000 ????	       00 d5	   scorecolor =	$D5	;need to find other places for these, possibly...
    122  9000 ????	       00 d6	   rand       =	$D6
    123  9000 ????
    124  9000 ????
    125  9000 ????
    126  9000 ????	       00 d7	   A	      =	$d7
    127  9000 ????	       00 d7	   a	      =	$d7
    128  9000 ????	       00 d8	   B	      =	$d8
    129  9000 ????	       00 d8	   b	      =	$d8
    130  9000 ????	       00 d9	   C	      =	$d9
    131  9000 ????	       00 d9	   c	      =	$d9
    132  9000 ????	       00 da	   D	      =	$da
    133  9000 ????	       00 da	   d	      =	$da
    134  9000 ????	       00 db	   E	      =	$db
    135  9000 ????	       00 db	   e	      =	$db
    136  9000 ????	       00 dc	   F	      =	$dc
    137  9000 ????	       00 dc	   f	      =	$dc
    138  9000 ????	       00 dd	   G	      =	$dd
    139  9000 ????	       00 dd	   g	      =	$dd
    140  9000 ????	       00 de	   H	      =	$de
    141  9000 ????	       00 de	   h	      =	$de
    142  9000 ????	       00 df	   I	      =	$df
    143  9000 ????	       00 df	   i	      =	$df
    144  9000 ????	       00 e0	   J	      =	$e0
    145  9000 ????	       00 e0	   j	      =	$e0
    146  9000 ????	       00 e1	   K	      =	$e1
    147  9000 ????	       00 e1	   k	      =	$e1
    148  9000 ????	       00 e2	   L	      =	$e2
    149  9000 ????	       00 e2	   l	      =	$e2
    150  9000 ????	       00 e3	   M	      =	$e3
    151  9000 ????	       00 e3	   m	      =	$e3
    152  9000 ????	       00 e4	   N	      =	$e4
    153  9000 ????	       00 e4	   n	      =	$e4
    154  9000 ????	       00 e5	   O	      =	$e5
    155  9000 ????	       00 e5	   o	      =	$e5
    156  9000 ????	       00 e6	   P	      =	$e6
    157  9000 ????	       00 e6	   p	      =	$e6
    158  9000 ????	       00 e7	   Q	      =	$e7
    159  9000 ????	       00 e7	   q	      =	$e7
    160  9000 ????	       00 e8	   R	      =	$e8
    161  9000 ????	       00 e8	   r	      =	$e8
    162  9000 ????	       00 e9	   S	      =	$e9
    163  9000 ????	       00 e9	   s	      =	$e9
    164  9000 ????	       00 ea	   T	      =	$ea
    165  9000 ????	       00 ea	   t	      =	$ea
    166  9000 ????	       00 eb	   U	      =	$eb
    167  9000 ????	       00 eb	   u	      =	$eb
    168  9000 ????	       00 ec	   V	      =	$ec
    169  9000 ????	       00 ec	   v	      =	$ec
    170  9000 ????	       00 ed	   W	      =	$ed
    171  9000 ????	       00 ed	   w	      =	$ed
    172  9000 ????	       00 ee	   X	      =	$ee
    173  9000 ????	       00 ee	   x	      =	$ee
    174  9000 ????	       00 ef	   Y	      =	$ef
    175  9000 ????	       00 ef	   y	      =	$ef
    176  9000 ????	       00 f0	   Z	      =	$f0
    177  9000 ????	       00 f0	   z	      =	$f0
    178  9000 ????
    179  9000 ????	       00 f1	   spritesort =	$f1	; helps with flickersort
    180  9000 ????	       00 f2	   spritesort2 =	$f2	; helps with flickersort
    181  9000 ????	       00 f3	   spritesort3 =	$f3
    182  9000 ????	       00 f4	   spritesort4 =	$f4
    183  9000 ????	       00 f5	   spritesort5 =	$f5
    184  9000 ????
    185  9000 ????	       00 f6	   stack1     =	$f6
    186  9000 ????	       00 f7	   stack2     =	$f7
    187  9000 ????	       00 f8	   stack3     =	$f8
    188  9000 ????	       00 f9	   stack4     =	$f9
    189  9000 ????						; the stack bytes above may be used in the kernel
    190  9000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    191  9000 ????
    192  9000 ????				      MAC	return
    193  9000 ????				      ifnconst	bankswitch
    194  9000 ????				      rts
    195  9000 ????				      else
    196  9000 ????				      jmp	BS_return
    197  9000 ????				      endif
    198  9000 ????				      ENDM		; auto-return from either a regular or bankswitched module
------- FILE E:\BatariBasic\Projects\Reaper\DeathMatch_NTSC_0.40.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  9000 ????				      include	"2600basic_variable_redefs.h"
      1  9000 ????						; This file contains variable mapping and other information for the current project.
      2  9000 ????
      3  9000 ????	       00 d7	   Music2     =	a
      4  9000 ????	       00 d7	   Music4     =	a
      5  9000 ????	       00 20	   bscode_length =	32
      6  9000 ????	       00 d7	   Title_Music =	a
      7  9000 ????	       00 e1	   HowWhite   =	k
      8  9000 ????
      9  9000 ????	       00 db	   AddToColor =	e
     10  9000 ????
     11  9000 ????	       00 da	   ColorForText =	d
     12  9000 ????
     13  9000 ????	       00 de	   Delay      =	h
     14  9000 ????
     15  9000 ????	       00 dd	   StormPower =	g
     16  9000 ????
     17  9000 ????	       00 dc	   ThunderCount =	f
     18  9000 ????
     19  9000 ????	       00 d5	   Dash_Delay =	scorecolor
     20  9000 ????
     21  9000 ????	       00 81	   PowerUp_Type =	missile1x
     22  9000 ????
     23  9000 ????	       00 ef	   PowerUp_Counter =	y
     24  9000 ????
     25  9000 ????	       00 ee	   Enemy_Sprite_Counter =	x
     26  9000 ????
     27  9000 ????	       00 eb	   Player2Counter_Sprite =	u
     28  9000 ????
     29  9000 ????	       00 ea	   Player1Counter_Sprite =	t
     30  9000 ????
     31  9000 ????	       00 e8	   Player2Counter_Jump =	r
     32  9000 ????
     33  9000 ????	       00 e7	   Player1Counter_Jump =	q
     34  9000 ????
     35  9000 ????	       00 e6	   Player2Counter_1 =	p
     36  9000 ????
     37  9000 ????	       00 ec	   Player1Counter_1 =	v
     38  9000 ????
     39  9000 ????	       00 e4	   Shoot2_Y   =	n
     40  9000 ????
     41  9000 ????	       00 e3	   Shoot2_X   =	m
     42  9000 ????
     43  9000 ????	       00 e2	   Shoot1_Y   =	l
     44  9000 ????
     45  9000 ????	       00 e1	   Shoot1_X   =	k
     46  9000 ????
     47  9000 ????	       00 de	   Reaper2_Y  =	h
     48  9000 ????
     49  9000 ????	       00 dd	   Reaper2_X  =	g
     50  9000 ????
     51  9000 ????	       00 dc	   Reaper1_Y  =	f
     52  9000 ????
     53  9000 ????	       00 da	   Reaper1_X  =	d
     54  9000 ????
     55  9000 ????	       00 dd	   ShitCounter =	g
     56  9000 ????
     57  9000 ????	       00 dc	   SoundCounter =	f
     58  9000 ????
     59  9000 ????	       00 f0	   HouseHeight =	z
     60  9000 ????
     61  9000 ????	       00 e1	   Selection  =	k
     62  9000 ????
     63  9000 ????	       00 df	   MaxLife    =	i
     64  9000 ????
     65  9000 ????	       00 e0	   MaxKill    =	j
     66  9000 ????
     67  9000 ????	       00 d3	   Kills2     =	player3score
     68  9000 ????
     69  9000 ????	       00 d2	   Kills1     =	player2score
     70  9000 ????
     71  9000 ????	       00 c2	   Life2      =	player1score
     72  9000 ????
     73  9000 ????	       00 c1	   Life1      =	player0score
     74  9000 ????
     75  9000 ????	       00 de	   back       =	h
     76  9000 ????
     77  9000 ????	       00 dd	   space      =	g
     78  9000 ????
     79  9000 ????	       00 dc	   bmp_48x1_1_color =	f
     80  9000 ????
     81  9000 ????	       00 da	   titlescreencolor =	d
     82  9000 ????
     83  9000 ????	       00 d9	   duration   =	c
     84  9000 ????
     85  9000 ????	       00 04	   playerscores =	4
     86  9000 ????
     87  9000 ????	       00 01	   noscore    =	1
     88  9000 ????
     89  9000 ????	       00 2b	   vblank_time =	43
     90  9000 ????	       00 25	   overscan_time =	37
     91  9000 ????	       00 07	   bs_mask    =	7
     92  9000 ????	       00 20	   bankswitch =	32
     93  9000 ????	       1f f4	   bankswitch_hotspot =	$1FF4
     94  9000 ????	       00 01	   multisprite =	1
------- FILE E:\BatariBasic\Projects\Reaper\DeathMatch_NTSC_0.40.bas.asm
      6  9000 ????				      ifconst	bankswitch
      7  9000 ????			  -	      if	bankswitch == 8
      8  9000 ????			  -	      ORG	$1000
      9  9000 ????			  -	      RORG	$D000
     10  9000 ????				      endif
     11  9000 ????			  -	      if	bankswitch == 16
     12  9000 ????			  -	      ORG	$1000
     13  9000 ????			  -	      RORG	$9000
     14  9000 ????				      endif
     15  9000 ????				      if	bankswitch == 32
     16  1000					      ORG	$1000
     17  1000					      RORG	$1000
     18  1000					      endif
     19  1000				  -	      if	bankswitch == 64
     20  1000				  -	      ORG	$1000
     21  1000				  -	      RORG	$1000
     22  1000					      endif
     23  1000				  -	      else
     24  1000				  -	      ORG	$F000
     25  1000					      endif
     26  1000
     27  1000					      ifconst	bankswitch_hotspot
     28  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  1000				  -	      .byte	234	; stop unexpected bankswitches
     30  1000					      endif
     31  1000					      endif
     32  1000				   game
     33  1000				   .L00 		;  includesfile multisprite_bankswitch.inc
     34  1000
     35  1000				   .L01 		;  set kernel multisprite
     36  1000
     37  1000				   .L02 		;  set romsize 32k
     38  1000
     39  1000				   .L03 		;  set smartbranching on
     40  1000
     41  1000				   .L04 		;  set tv ntsc
     42  1000
     43  1000				   .L05 		;  set optimization speed
     44  1000
     45  1000				   .L06 		;  set optimization inlinerand
     46  1000
     47  1000				   .L07 		;  const noscore = 1
     48  1000
     49  1000				   .L08 		;  pfheight = 3
     50  1000
     51  1000		       a9 03		      LDA	#3
     52  1002		       85 c4		      STA	pfheight
     53  1004				   .L09 		;  const playerscores	=  4
     54  1004
     55  1004				   .
     56  1004							; 
     57  1004
     58  1004				   .L010		;  asm
     59  1004
     60  1004		       a9 00		      lda	#0
     61  1006
     62  1006		       85 c1		      sta	player0score
     63  1008
     64  1008		       85 c2		      sta	player1score
     65  100a
     66  100a		       85 d2		      sta	player2score
     67  100c
     68  100c		       85 d3		      sta	player3score
     69  100e
     70  100e		       85 19		      sta	AUDV0
     71  1010
     72  1010		       85 1a		      sta	AUDV1
     73  1012
     74  1012		       85 1f		      sta	$1F
     75  1014
     76  1014		       85 1f		      sta	ENABL
     77  1016
     78  1016		       85 1e		      sta	$1E
     79  1018
     80  1018		       85 1e		      sta	ENAM1
     81  101a
     82  101a				   .
     83  101a							; 
     84  101a
     85  101a				   .
     86  101a							; 
     87  101a
     88  101a				   .
     89  101a							; 
     90  101a
     91  101a				   .L011		;  scorecolor = $00
     92  101a
     93  101a		       a9 00		      LDA	#$00
     94  101c		       85 d5		      STA	scorecolor
     95  101e				   .L012		;  dim duration = c
     96  101e
     97  101e				   .L013		;  dim titlescreencolor = d
     98  101e
     99  101e				   .L014		;  dim bmp_48x1_1_color = f
    100  101e
    101  101e				   .L015		;  dim space = g
    102  101e
    103  101e				   .L016		;  dim back = h
    104  101e
    105  101e				   .L017		;  duration = 1
    106  101e
    107  101e		       a9 01		      LDA	#1
    108  1020		       85 d9		      STA	duration
    109  1022				   .L018		;  space = 1
    110  1022
    111  1022		       a9 01		      LDA	#1
    112  1024		       85 dd		      STA	space
    113  1026				   .L019		;  dim Life1 = player0score
    114  1026
    115  1026				   .L020		;  dim Life2 = player1score
    116  1026
    117  1026				   .L021		;  dim Kills1 = player2score
    118  1026
    119  1026				   .L022		;  dim Kills2 = player3score
    120  1026
    121  1026				   .L023		;  dim MaxKill = j
    122  1026
    123  1026				   .L024		;  dim MaxLife = i
    124  1026
    125  1026				   .L025		;  MaxKill = $50
    126  1026
    127  1026		       a9 50		      LDA	#$50
    128  1028		       85 e0		      STA	MaxKill
    129  102a				   .L026		;  MaxLife = $30
    130  102a
    131  102a		       a9 30		      LDA	#$30
    132  102c		       85 df		      STA	MaxLife
    133  102e				   .L027		;  dim Selection = k
    134  102e
    135  102e				   .
    136  102e							; 
    137  102e
    138  102e				   .L028		;  dim HouseHeight = z
    139  102e
    140  102e				   .L029		;  dim SoundCounter = f
    141  102e
    142  102e				   .L030		;  dim ShitCounter = g
    143  102e
    144  102e				   .
    145  102e							; 
    146  102e
    147  102e				   .L031		;  dim Reaper1_X  =  d
    148  102e
    149  102e				   .L032		;  dim Reaper1_Y =  f
    150  102e
    151  102e				   .L033		;  dim Reaper2_X =  g
    152  102e
    153  102e				   .L034		;  dim Reaper2_Y =  h
    154  102e
    155  102e				   .L035		;  dim Shoot1_X =  k
    156  102e
    157  102e				   .L036		;  dim Shoot1_Y =  l
    158  102e
    159  102e				   .L037		;  dim Shoot2_X =  m
    160  102e
    161  102e				   .L038		;  dim Shoot2_Y =  n
    162  102e
    163  102e				   .L039		;  dim Player1Counter_1 = v
    164  102e
    165  102e				   .L040		;  dim Player2Counter_1 = p
    166  102e
    167  102e				   .L041		;  dim Player1Counter_Jump = q
    168  102e
    169  102e				   .L042		;  dim Player2Counter_Jump = r
    170  102e
    171  102e				   .L043		;  dim Player1Counter_Sprite = t
    172  102e
    173  102e				   .L044		;  dim Player2Counter_Sprite = u
    174  102e
    175  102e				   .L045		;  dim Enemy_Sprite_Counter = x
    176  102e
    177  102e				   .L046		;  dim PowerUp_Counter = y
    178  102e
    179  102e				   .L047		;  dim PowerUp_Type = missile1x
    180  102e
    181  102e				   .L048		;  dim Dash_Delay = scorecolor
    182  102e
    183  102e				   .
    184  102e							; 
    185  102e
    186  102e				   .
    187  102e							; 
    188  102e
    189  102e				   .L049		;  dim ThunderCount = f
    190  102e
    191  102e				   .L050		;  dim StormPower = g
    192  102e
    193  102e				   .L051		;  dim Delay = h
    194  102e
    195  102e				   .L052		;  dim ColorForText = d
    196  102e
    197  102e				   .L053		;  dim AddToColor = e
    198  102e
    199  102e				   .L054		;  dim HowWhite = k
    200  102e
    201  102e				   .L055		;  goto MusicSetup1
    202  102e
    203  102e		       4c 2b 12 	      jmp	.MusicSetup1
    204  1031
    205  1031				   .test
    206  1031							; test
    207  1031
    208  1031				   .L056		;  e{0} = !e{0}
    209  1031
    210  1031		       a5 db		      LDA	e
    211  1033		       29 01		      AND	#1
    212  1035		       08		      PHP
    213  1036		       a5 db		      LDA	e
    214  1038		       29 fe		      AND	#254
    215  103a		       28		      PLP
    216  103b		       d0 02		      .byte.b	$D0, $02
    217  103d		       09 01		      ORA	#1
    218  103f		       85 db		      STA	e
    219  1041				   .L057		;  w{0} = 0
    220  1041
    221  1041		       a5 ed		      LDA	w
    222  1043		       29 fe		      AND	#254
    223  1045		       85 ed		      STA	w
    224  1047				   .L058		;  if e{0} then e{3} = !e{3}
    225  1047
    226  1047		       a5 db		      LDA	e
    227  1049		       4a		      LSR
    228  104a		       90 10		      BCC	.skipL058
    229  104c				   .condpart0
    230  104c		       a5 db		      LDA	e
    231  104e		       29 08		      AND	#8
    232  1050		       08		      PHP
    233  1051		       a5 db		      LDA	e
    234  1053		       29 f7		      AND	#247
    235  1055		       28		      PLP
    236  1056		       d0 02		      .byte.b	$D0, $02
    237  1058		       09 08		      ORA	#8
    238  105a		       85 db		      STA	e
    239  105c				   .skipL058
    240  105c				   .L059		;  if !e{2}  &&  e{3} then space = space + 1
    241  105c
    242  105c		       a5 db		      LDA	e
    243  105e		       29 04		      AND	#4
    244  1060		       d0 08		      BNE	.skipL059
    245  1062				   .condpart1
    246  1062		       a5 db		      LDA	e
    247  1064		       29 08		      AND	#8
    248  1066		       f0 02		      BEQ	.skip1then
    249  1068				   .condpart2
    250  1068		       e6 dd		      INC	space
    251  106a				   .skip1then
    252  106a				   .skipL059
    253  106a				   .L060		;  if e{2}  &&  e{3} then space = space - 1
    254  106a
    255  106a		       a5 db		      LDA	e
    256  106c		       29 04		      AND	#4
    257  106e		       f0 08		      BEQ	.skipL060
    258  1070				   .condpart3
    259  1070		       a5 db		      LDA	e
    260  1072		       29 08		      AND	#8
    261  1074		       f0 02		      BEQ	.skip3then
    262  1076				   .condpart4
    263  1076		       c6 dd		      DEC	space
    264  1078				   .skip3then
    265  1078				   .skipL060
    266  1078				   .L061		;  if space = 0 then space = 1
    267  1078
    268  1078		       a5 dd		      LDA	space
    269  107a		       c9 00		      CMP	#0
    270  107c		       d0 04		      BNE	.skipL061
    271  107e				   .condpart5
    272  107e		       a9 01		      LDA	#1
    273  1080		       85 dd		      STA	space
    274  1082				   .skipL061
    275  1082				   .L062		;  if space >	6 then space = 6
    276  1082
    277  1082		       a9 06		      LDA	#6
    278  1084		       c5 dd		      CMP	space
    279  1086		       b0 04		      BCS	.skipL062
    280  1088				   .condpart6
    281  1088		       a9 06		      LDA	#6
    282  108a		       85 dd		      STA	space
    283  108c				   .skipL062
    284  108c				   .L063		;  if space = 1 then e{2} = 0
    285  108c
    286  108c		       a5 dd		      LDA	space
    287  108e		       c9 01		      CMP	#1
    288  1090		       d0 06		      BNE	.skipL063
    289  1092				   .condpart7
    290  1092		       a5 db		      LDA	e
    291  1094		       29 fb		      AND	#251
    292  1096		       85 db		      STA	e
    293  1098				   .skipL063
    294  1098				   .L064		;  if space = 6 then e{2} = 1
    295  1098
    296  1098		       a5 dd		      LDA	space
    297  109a		       c9 06		      CMP	#6
    298  109c		       d0 06		      BNE	.skipL064
    299  109e				   .condpart8
    300  109e		       a5 db		      LDA	e
    301  10a0		       09 04		      ORA	#4
    302  10a2		       85 db		      STA	e
    303  10a4				   .skipL064
    304  10a4				   .
    305  10a4							; 
    306  10a4
    307  10a4				   .L065		;  if e{0}  &&  !e{7}	&&  titlescreencolor > 0 then titlescreencolor = titlescreencolor - $02
    308  10a4
    309  10a4		       a5 db		      LDA	e
    310  10a6		       4a		      LSR
    311  10a7		       90 11		      BCC	.skipL065
    312  10a9				   .condpart9
    313  10a9		       24 db		      BIT	e
    314  10ab		       30 0d		      BMI	.skip9then
    315  10ad				   .condpart10
    316  10ad		       a9 00		      LDA	#0
    317  10af		       c5 da		      CMP	titlescreencolor
    318  10b1		       b0 07		      BCS	.skip10then
    319  10b3				   .condpart11
    320  10b3		       a5 da		      LDA	titlescreencolor
    321  10b5		       38		      SEC
    322  10b6		       e9 02		      SBC	#$02
    323  10b8		       85 da		      STA	titlescreencolor
    324  10ba				   .skip10then
    325  10ba				   .skip9then
    326  10ba				   .skipL065
    327  10ba				   .L066		;  if e{7} then e{7} = 0
    328  10ba
    329  10ba		       24 db		      BIT	e
    330  10bc		       10 06		      BPL	.skipL066
    331  10be				   .condpart12
    332  10be		       a5 db		      LDA	e
    333  10c0		       29 7f		      AND	#127
    334  10c2		       85 db		      STA	e
    335  10c4				   .skipL066
    336  10c4				   .L067		;  if joy0fire  ||  joy1fire then Selection = 0 :  e{6} = 1 :	e{4}  =  1 :  back = $08
    337  10c4
    338  10c4		       24 0c		      bit	INPT4
    339  10c6		       30 03		      BMI	.skipL067
    340  10c8				   .condpart13
    341  10c8		       4c cf 10 	      jmp	.condpart14
    342  10cb				   .skipL067
    343  10cb		       24 0d		      bit	INPT5
    344  10cd		       30 14		      BMI	.skip4OR
    345  10cf				   .condpart14
    346  10cf		       a9 00		      LDA	#0
    347  10d1		       85 e1		      STA	Selection
    348  10d3		       a5 db		      LDA	e
    349  10d5		       09 40		      ORA	#64
    350  10d7		       85 db		      STA	e
    351  10d9		       a5 db		      LDA	e
    352  10db		       09 10		      ORA	#16
    353  10dd		       85 db		      STA	e
    354  10df		       a9 08		      LDA	#$08
    355  10e1		       85 de		      STA	back
    356  10e3				   .skip4OR
    357  10e3				   .L068		;  gosub titledrawscreen bank2
    358  10e3
    359  10e3		       85 d1		      sta	temp7
    360  10e5		       a9 10		      lda	#>(ret_point1-1)
    361  10e7		       48		      pha
    362  10e8		       a9 fa		      lda	#<(ret_point1-1)
    363  10ea		       48		      pha
    364  10eb		       a9 2f		      lda	#>(.titledrawscreen-1)
    365  10ed		       48		      pha
    366  10ee		       a9 ff		      lda	#<(.titledrawscreen-1)
    367  10f0		       48		      pha
    368  10f1		       a5 d1		      lda	temp7
    369  10f3		       48		      pha
    370  10f4		       8a		      txa
    371  10f5		       48		      pha
    372  10f6		       a2 02		      ldx	#2
    373  10f8		       4c eb ff 	      jmp	BS_jsr
    374  10fb				   ret_point1
    375  10fb				   .
    376  10fb							; 
    377  10fb
    378  10fb				   .Calculate_Duration
    379  10fb							; Calculate_Duration
    380  10fb
    381  10fb				   .L069		;  duration = duration - 1
    382  10fb
    383  10fb		       c6 d9		      DEC	duration
    384  10fd				   .L070		;  if duration  = 0 then goto DoMusic
    385  10fd
    386  10fd		       a5 d9		      LDA	duration
    387  10ff		       c9 00		      CMP	#0
    388  1101		       d0 03		      BNE	.skipL070
    389  1103				   .condpart15
    390  1103		       4c 15 11 	      jmp	.DoMusic
    391  1106
    392  1106				   .skipL070
    393  1106				   .L071		;  if e{4} then goto Main_Menu else goto test
    394  1106
    395  1106		       a5 db		      LDA	e
    396  1108		       29 10		      AND	#16
    397  110a		       f0 06		      BEQ	.skipL071
    398  110c				   .condpart16
    399  110c		       4c 57 1b 	      jmp	.Main_Menu
    400  110f		       4c 15 11 	      jmp	.skipelse0
    401  1112				   .skipL071
    402  1112		       4c 31 10 	      jmp	.test
    403  1115
    404  1115				   .skipelse0
    405  1115				   .DoMusic
    406  1115							; DoMusic
    407  1115
    408  1115				   .L072		;  titlescreencolor = $0e :  back = $08 :  e{7} = 1
    409  1115
    410  1115		       a9 0e		      LDA	#$0e
    411  1117		       85 da		      STA	titlescreencolor
    412  1119		       a9 08		      LDA	#$08
    413  111b		       85 de		      STA	back
    414  111d		       a5 db		      LDA	e
    415  111f		       09 80		      ORA	#128
    416  1121		       85 db		      STA	e
    417  1123				   .L073		;  e{5} = !e{5}
    418  1123
    419  1123		       a5 db		      LDA	e
    420  1125		       29 20		      AND	#32
    421  1127		       08		      PHP
    422  1128		       a5 db		      LDA	e
    423  112a		       29 df		      AND	#223
    424  112c		       28		      PLP
    425  112d		       d0 02		      .byte.b	$D0, $02
    426  112f		       09 20		      ORA	#32
    427  1131		       85 db		      STA	e
    428  1133				   .L074		;  if e{0}  &&  !e{1} then bmp_48x1_1_color = bmp_48x1_1_color + $02
    429  1133
    430  1133		       a5 db		      LDA	e
    431  1135		       4a		      LSR
    432  1136		       90 0d		      BCC	.skipL074
    433  1138				   .condpart17
    434  1138		       a5 db		      LDA	e
    435  113a		       29 02		      AND	#2
    436  113c		       d0 07		      BNE	.skip17then
    437  113e				   .condpart18
    438  113e		       a5 dc		      LDA	bmp_48x1_1_color
    439  1140		       18		      CLC
    440  1141		       69 02		      ADC	#$02
    441  1143		       85 dc		      STA	bmp_48x1_1_color
    442  1145				   .skip17then
    443  1145				   .skipL074
    444  1145				   .L075		;  if e{0}  &&  e{1} then bmp_48x1_1_color = bmp_48x1_1_color - $02
    445  1145
    446  1145		       a5 db		      LDA	e
    447  1147		       4a		      LSR
    448  1148		       90 0d		      BCC	.skipL075
    449  114a				   .condpart19
    450  114a		       a5 db		      LDA	e
    451  114c		       29 02		      AND	#2
    452  114e		       f0 07		      BEQ	.skip19then
    453  1150				   .condpart20
    454  1150		       a5 dc		      LDA	bmp_48x1_1_color
    455  1152		       38		      SEC
    456  1153		       e9 02		      SBC	#$02
    457  1155		       85 dc		      STA	bmp_48x1_1_color
    458  1157				   .skip19then
    459  1157				   .skipL075
    460  1157				   .L076		;  if bmp_48x1_1_color = $0e  &&  !e{1} then e{1}  =  1
    461  1157
    462  1157		       a5 dc		      LDA	bmp_48x1_1_color
    463  1159		       c9 0e		      CMP	#$0e
    464  115b		       d0 0c		      BNE	.skipL076
    465  115d				   .condpart21
    466  115d		       a5 db		      LDA	e
    467  115f		       29 02		      AND	#2
    468  1161		       d0 06		      BNE	.skip21then
    469  1163				   .condpart22
    470  1163		       a5 db		      LDA	e
    471  1165		       09 02		      ORA	#2
    472  1167		       85 db		      STA	e
    473  1169				   .skip21then
    474  1169				   .skipL076
    475  1169				   .L077		;  if bmp_48x1_1_color = $00  &&  e{1} then e{1}  =  0
    476  1169
    477  1169		       a5 dc		      LDA	bmp_48x1_1_color
    478  116b		       c9 00		      CMP	#$00
    479  116d		       d0 0c		      BNE	.skipL077
    480  116f				   .condpart23
    481  116f		       a5 db		      LDA	e
    482  1171		       29 02		      AND	#2
    483  1173		       f0 06		      BEQ	.skip23then
    484  1175				   .condpart24
    485  1175		       a5 db		      LDA	e
    486  1177		       29 fd		      AND	#253
    487  1179		       85 db		      STA	e
    488  117b				   .skip23then
    489  117b				   .skipL077
    490  117b				   .
    491  117b							; 
    492  117b
    493  117b				   .L078		;  temp4 = sread ( Title_Music ) 
    494  117b
    495  117b		       a2 d7		      ldx	#Title_Music
    496  117d		       a1 00		      lda	(0,x)
    497  117f		       f6 00		      inc	0,x
    498  1181		       d0 02		      bne	*+4
    499  1183		       f6 01		      inc	1,x
    500  1185		       85 ce		      STA	temp4
    501  1187				   .L079		;  if temp4 = 255 then duration = 1 :	goto MusicSetup1
    502  1187
    503  1187		       a5 ce		      LDA	temp4
    504  1189		       c9 ff		      CMP	#255
    505  118b		       d0 07		      BNE	.skipL079
    506  118d				   .condpart25
    507  118d		       a9 01		      LDA	#1
    508  118f		       85 d9		      STA	duration
    509  1191		       4c 2b 12 	      jmp	.MusicSetup1
    510  1194
    511  1194				   .skipL079
    512  1194				   .L080		;  if temp4 = 0 then AUDV0 = 0 :  AUDF0 = 0 :	goto Channel1
    513  1194
    514  1194		       a5 ce		      LDA	temp4
    515  1196		       c9 00		      CMP	#0
    516  1198		       d0 09		      BNE	.skipL080
    517  119a				   .condpart26
    518  119a		       a9 00		      LDA	#0
    519  119c		       85 19		      STA	AUDV0
    520  119e		       85 17		      STA	AUDF0
    521  11a0		       4c cb 11 	      jmp	.Channel1
    522  11a3
    523  11a3				   .skipL080
    524  11a3				   .L081		;  AUDV0 = temp4 :  if temp4 = 8  ||  temp4 = 2 then AUDC0 = 1 else AUDC0 = 7
    525  11a3
    526  11a3		       a5 ce		      LDA	temp4
    527  11a5		       85 19		      STA	AUDV0
    528  11a7		       c9 08		      CMP	#8
    529  11a9		       d0 03		      BNE	.skipL081
    530  11ab				   .condpart27
    531  11ab		       4c b4 11 	      jmp	.condpart28
    532  11ae				   .skipL081
    533  11ae		       a5 ce		      LDA	temp4
    534  11b0		       c9 02		      CMP	#2
    535  11b2		       d0 07		      BNE	.skip9OR
    536  11b4				   .condpart28
    537  11b4		       a9 01		      LDA	#1
    538  11b6		       85 15		      STA	AUDC0
    539  11b8		       4c bf 11 	      jmp	.skipelse1
    540  11bb				   .skip9OR
    541  11bb		       a9 07		      LDA	#7
    542  11bd		       85 15		      STA	AUDC0
    543  11bf				   .skipelse1
    544  11bf				   .
    545  11bf							; 
    546  11bf
    547  11bf				   .L082		;  AUDF0 = sread ( Title_Music ) 
    548  11bf
    549  11bf		       a2 d7		      ldx	#Title_Music
    550  11c1		       a1 00		      lda	(0,x)
    551  11c3		       f6 00		      inc	0,x
    552  11c5		       d0 02		      bne	*+4
    553  11c7		       f6 01		      inc	1,x
    554  11c9		       85 17		      STA	AUDF0
    555  11cb				   .Channel1
    556  11cb							; Channel1
    557  11cb
    558  11cb				   .L083		;  temp5 = sread ( Title_Music ) 
    559  11cb
    560  11cb		       a2 d7		      ldx	#Title_Music
    561  11cd		       a1 00		      lda	(0,x)
    562  11cf		       f6 00		      inc	0,x
    563  11d1		       d0 02		      bne	*+4
    564  11d3		       f6 01		      inc	1,x
    565  11d5		       85 cf		      STA	temp5
    566  11d7				   .L084		;  if temp5 = 0 then AUDV1 = 0 :  AUDF1 = 0 :	goto ChannelNO
    567  11d7
    568  11d7		       a5 cf		      LDA	temp5
    569  11d9		       c9 00		      CMP	#0
    570  11db		       d0 09		      BNE	.skipL084
    571  11dd				   .condpart29
    572  11dd		       a9 00		      LDA	#0
    573  11df		       85 1a		      STA	AUDV1
    574  11e1		       85 18		      STA	AUDF1
    575  11e3		       4c 10 12 	      jmp	.ChannelNO
    576  11e6
    577  11e6				   .skipL084
    578  11e6				   .L085		;  AUDV1 = temp5
    579  11e6
    580  11e6		       a5 cf		      LDA	temp5
    581  11e8		       85 1a		      STA	AUDV1
    582  11ea				   .L086		;  if temp5 = 8  ||  temp5 = 2 then AUDC1 = 1 else AUDC1 = 7
    583  11ea
    584  11ea		       a5 cf		      LDA	temp5
    585  11ec		       c9 08		      CMP	#8
    586  11ee		       d0 03		      BNE	.skipL086
    587  11f0				   .condpart30
    588  11f0		       4c f9 11 	      jmp	.condpart31
    589  11f3				   .skipL086
    590  11f3		       a5 cf		      LDA	temp5
    591  11f5		       c9 02		      CMP	#2
    592  11f7		       d0 07		      BNE	.skip10OR
    593  11f9				   .condpart31
    594  11f9		       a9 01		      LDA	#1
    595  11fb		       85 16		      STA	AUDC1
    596  11fd		       4c 04 12 	      jmp	.skipelse2
    597  1200				   .skip10OR
    598  1200		       a9 07		      LDA	#7
    599  1202		       85 16		      STA	AUDC1
    600  1204				   .skipelse2
    601  1204				   .
    602  1204							; 
    603  1204
    604  1204				   .
    605  1204							; 
    606  1204
    607  1204				   .L087		;  AUDF1 = sread ( Title_Music ) 
    608  1204
    609  1204		       a2 d7		      ldx	#Title_Music
    610  1206		       a1 00		      lda	(0,x)
    611  1208		       f6 00		      inc	0,x
    612  120a		       d0 02		      bne	*+4
    613  120c		       f6 01		      inc	1,x
    614  120e		       85 18		      STA	AUDF1
    615  1210				   .ChannelNO
    616  1210							; ChannelNO
    617  1210
    618  1210				   .L088		;  duration = sread ( Title_Music ) 
    619  1210
    620  1210		       a2 d7		      ldx	#Title_Music
    621  1212		       a1 00		      lda	(0,x)
    622  1214		       f6 00		      inc	0,x
    623  1216		       d0 02		      bne	*+4
    624  1218		       f6 01		      inc	1,x
    625  121a		       85 d9		      STA	duration
    626  121c				   .L089		;  if e{4} then goto Main_Menu else goto test
    627  121c
    628  121c		       a5 db		      LDA	e
    629  121e		       29 10		      AND	#16
    630  1220		       f0 06		      BEQ	.skipL089
    631  1222				   .condpart32
    632  1222		       4c 57 1b 	      jmp	.Main_Menu
    633  1225		       4c 2b 12 	      jmp	.skipelse3
    634  1228				   .skipL089
    635  1228		       4c 31 10 	      jmp	.test
    636  122b
    637  122b				   .skipelse3
    638  122b				   .
    639  122b							; 
    640  122b
    641  122b				   .
    642  122b							; 
    643  122b
    644  122b				   .MusicSetup1
    645  122b							; MusicSetup1
    646  122b
    647  122b				   .L090		;  sdata Title_Music  =  a
    648  122b
    649  122b		       a9 36		      lda	#<Title_Music_begin
    650  122d		       85 d7		      sta	a
    651  122f		       a9 12		      lda	#>Title_Music_begin
    652  1231		       85 d8		      sta	a+1
    653  1233		       4c 4e 1b 	      JMP	.skipL090
    654  1236				   Title_Music_begin
    655  1236		       07 18		      .byte.b	7,24
    656  1238
    657  1238		       00		      .byte.b	0
    658  1239
    659  1239		       0c		      .byte.b	12
    660  123a
    661  123a		       08 0a		      .byte.b	8,10
    662  123c
    663  123c		       07 18		      .byte.b	7,24
    664  123e
    665  123e		       0c		      .byte.b	12
    666  123f
    667  123f		       08 10		      .byte.b	8,16
    668  1241
    669  1241		       06 18		      .byte.b	6,24
    670  1243
    671  1243		       0c		      .byte.b	12
    672  1244
    673  1244		       05 18		      .byte.b	5,24
    674  1246
    675  1246		       00		      .byte.b	0
    676  1247
    677  1247		       0c		      .byte.b	12
    678  1248
    679  1248		       08 0b		      .byte.b	8,11
    680  124a
    681  124a		       04 18		      .byte.b	4,24
    682  124c
    683  124c		       0c		      .byte.b	12
    684  124d
    685  124d		       08 10		      .byte.b	8,16
    686  124f
    687  124f		       00		      .byte.b	0
    688  1250
    689  1250		       0c		      .byte.b	12
    690  1251
    691  1251		       03 18		      .byte.b	3,24
    692  1253
    693  1253		       00		      .byte.b	0
    694  1254
    695  1254		       0c		      .byte.b	12
    696  1255
    697  1255		       02 18		      .byte.b	2,24
    698  1257
    699  1257		       00		      .byte.b	0
    700  1258
    701  1258		       0c		      .byte.b	12
    702  1259
    703  1259		       07 18		      .byte.b	7,24
    704  125b
    705  125b		       00		      .byte.b	0
    706  125c
    707  125c		       0c		      .byte.b	12
    708  125d
    709  125d		       08 0a		      .byte.b	8,10
    710  125f
    711  125f		       07 18		      .byte.b	7,24
    712  1261
    713  1261		       0c		      .byte.b	12
    714  1262
    715  1262		       08 10		      .byte.b	8,16
    716  1264
    717  1264		       06 18		      .byte.b	6,24
    718  1266
    719  1266		       0c		      .byte.b	12
    720  1267
    721  1267		       05 18		      .byte.b	5,24
    722  1269
    723  1269		       00		      .byte.b	0
    724  126a
    725  126a		       0c		      .byte.b	12
    726  126b
    727  126b		       08 0b		      .byte.b	8,11
    728  126d
    729  126d		       04 18		      .byte.b	4,24
    730  126f
    731  126f		       0c		      .byte.b	12
    732  1270
    733  1270		       08 10		      .byte.b	8,16
    734  1272
    735  1272		       00		      .byte.b	0
    736  1273
    737  1273		       0c		      .byte.b	12
    738  1274
    739  1274		       03 18		      .byte.b	3,24
    740  1276
    741  1276		       00		      .byte.b	0
    742  1277
    743  1277		       0c		      .byte.b	12
    744  1278
    745  1278		       02 18		      .byte.b	2,24
    746  127a
    747  127a		       00		      .byte.b	0
    748  127b
    749  127b		       0c		      .byte.b	12
    750  127c
    751  127c		       07 18		      .byte.b	7,24
    752  127e
    753  127e		       00		      .byte.b	0
    754  127f
    755  127f		       0c		      .byte.b	12
    756  1280
    757  1280		       08 0a		      .byte.b	8,10
    758  1282
    759  1282		       07 18		      .byte.b	7,24
    760  1284
    761  1284		       0c		      .byte.b	12
    762  1285
    763  1285		       08 10		      .byte.b	8,16
    764  1287
    765  1287		       06 18		      .byte.b	6,24
    766  1289
    767  1289		       0c		      .byte.b	12
    768  128a
    769  128a		       05 18		      .byte.b	5,24
    770  128c
    771  128c		       00		      .byte.b	0
    772  128d
    773  128d		       0c		      .byte.b	12
    774  128e
    775  128e		       08 0b		      .byte.b	8,11
    776  1290
    777  1290		       04 18		      .byte.b	4,24
    778  1292
    779  1292		       0c		      .byte.b	12
    780  1293
    781  1293		       08 10		      .byte.b	8,16
    782  1295
    783  1295		       00		      .byte.b	0
    784  1296
    785  1296		       0c		      .byte.b	12
    786  1297
    787  1297		       03 18		      .byte.b	3,24
    788  1299
    789  1299		       00		      .byte.b	0
    790  129a
    791  129a		       0c		      .byte.b	12
    792  129b
    793  129b		       02 18		      .byte.b	2,24
    794  129d
    795  129d		       00		      .byte.b	0
    796  129e
    797  129e		       0c		      .byte.b	12
    798  129f
    799  129f		       07 18		      .byte.b	7,24
    800  12a1
    801  12a1		       00		      .byte.b	0
    802  12a2
    803  12a2		       0c		      .byte.b	12
    804  12a3
    805  12a3		       08 0a		      .byte.b	8,10
    806  12a5
    807  12a5		       07 18		      .byte.b	7,24
    808  12a7
    809  12a7		       0c		      .byte.b	12
    810  12a8
    811  12a8		       08 10		      .byte.b	8,16
    812  12aa
    813  12aa		       06 18		      .byte.b	6,24
    814  12ac
    815  12ac		       0c		      .byte.b	12
    816  12ad
    817  12ad		       05 18		      .byte.b	5,24
    818  12af
    819  12af		       00		      .byte.b	0
    820  12b0
    821  12b0		       0c		      .byte.b	12
    822  12b1
    823  12b1		       08 14		      .byte.b	8,20
    824  12b3
    825  12b3		       07 14		      .byte.b	7,20
    826  12b5
    827  12b5		       08		      .byte.b	8
    828  12b6
    829  12b6		       02 14		      .byte.b	2,20
    830  12b8
    831  12b8		       01 14		      .byte.b	1,20
    832  12ba
    833  12ba		       04		      .byte.b	4
    834  12bb
    835  12bb		       08 14		      .byte.b	8,20
    836  12bd
    837  12bd		       07 14		      .byte.b	7,20
    838  12bf
    839  12bf		       08		      .byte.b	8
    840  12c0
    841  12c0		       02 14		      .byte.b	2,20
    842  12c2
    843  12c2		       01 14		      .byte.b	1,20
    844  12c4
    845  12c4		       04		      .byte.b	4
    846  12c5
    847  12c5		       08 16		      .byte.b	8,22
    848  12c7
    849  12c7		       07 15		      .byte.b	7,21
    850  12c9
    851  12c9		       0c		      .byte.b	12
    852  12ca
    853  12ca		       07 18		      .byte.b	7,24
    854  12cc
    855  12cc		       00		      .byte.b	0
    856  12cd
    857  12cd		       08		      .byte.b	8
    858  12ce
    859  12ce		       01 18		      .byte.b	1,24
    860  12d0
    861  12d0		       00		      .byte.b	0
    862  12d1
    863  12d1		       04		      .byte.b	4
    864  12d2
    865  12d2		       07 18		      .byte.b	7,24
    866  12d4
    867  12d4		       00		      .byte.b	0
    868  12d5
    869  12d5		       08		      .byte.b	8
    870  12d6
    871  12d6		       01 18		      .byte.b	1,24
    872  12d8
    873  12d8		       00		      .byte.b	0
    874  12d9
    875  12d9		       04		      .byte.b	4
    876  12da
    877  12da		       07 18		      .byte.b	7,24
    878  12dc
    879  12dc		       08 0a		      .byte.b	8,10
    880  12de
    881  12de		       08		      .byte.b	8
    882  12df
    883  12df		       01 18		      .byte.b	1,24
    884  12e1
    885  12e1		       08 0a		      .byte.b	8,10
    886  12e3
    887  12e3		       04		      .byte.b	4
    888  12e4
    889  12e4		       07 18		      .byte.b	7,24
    890  12e6
    891  12e6		       08 10		      .byte.b	8,16
    892  12e8
    893  12e8		       08		      .byte.b	8
    894  12e9
    895  12e9		       01 18		      .byte.b	1,24
    896  12eb
    897  12eb		       08 10		      .byte.b	8,16
    898  12ed
    899  12ed		       04		      .byte.b	4
    900  12ee
    901  12ee		       07 18		      .byte.b	7,24
    902  12f0
    903  12f0		       00		      .byte.b	0
    904  12f1
    905  12f1		       08		      .byte.b	8
    906  12f2
    907  12f2		       01 18		      .byte.b	1,24
    908  12f4
    909  12f4		       00		      .byte.b	0
    910  12f5
    911  12f5		       04		      .byte.b	4
    912  12f6
    913  12f6		       07 18		      .byte.b	7,24
    914  12f8
    915  12f8		       08 0b		      .byte.b	8,11
    916  12fa
    917  12fa		       08		      .byte.b	8
    918  12fb
    919  12fb		       01 18		      .byte.b	1,24
    920  12fd
    921  12fd		       08 0b		      .byte.b	8,11
    922  12ff
    923  12ff		       04		      .byte.b	4
    924  1300
    925  1300		       07 18		      .byte.b	7,24
    926  1302
    927  1302		       08 10		      .byte.b	8,16
    928  1304
    929  1304		       08		      .byte.b	8
    930  1305
    931  1305		       01 18		      .byte.b	1,24
    932  1307
    933  1307		       08 10		      .byte.b	8,16
    934  1309
    935  1309		       04		      .byte.b	4
    936  130a
    937  130a		       07 18		      .byte.b	7,24
    938  130c
    939  130c		       00		      .byte.b	0
    940  130d
    941  130d		       08		      .byte.b	8
    942  130e
    943  130e		       01 18		      .byte.b	1,24
    944  1310
    945  1310		       00		      .byte.b	0
    946  1311
    947  1311		       04		      .byte.b	4
    948  1312
    949  1312		       07 18		      .byte.b	7,24
    950  1314
    951  1314		       00		      .byte.b	0
    952  1315
    953  1315		       08		      .byte.b	8
    954  1316
    955  1316		       01 18		      .byte.b	1,24
    956  1318
    957  1318		       00		      .byte.b	0
    958  1319
    959  1319		       04		      .byte.b	4
    960  131a
    961  131a		       07 18		      .byte.b	7,24
    962  131c
    963  131c		       08 0a		      .byte.b	8,10
    964  131e
    965  131e		       08		      .byte.b	8
    966  131f
    967  131f		       01 18		      .byte.b	1,24
    968  1321
    969  1321		       08 0a		      .byte.b	8,10
    970  1323
    971  1323		       04		      .byte.b	4
    972  1324
    973  1324		       07 18		      .byte.b	7,24
    974  1326
    975  1326		       08 10		      .byte.b	8,16
    976  1328
    977  1328		       08		      .byte.b	8
    978  1329
    979  1329		       01 18		      .byte.b	1,24
    980  132b
    981  132b		       08 10		      .byte.b	8,16
    982  132d
    983  132d		       04		      .byte.b	4
    984  132e
    985  132e		       07 18		      .byte.b	7,24
    986  1330
    987  1330		       00		      .byte.b	0
    988  1331
    989  1331		       08		      .byte.b	8
    990  1332
    991  1332		       01 18		      .byte.b	1,24
    992  1334
    993  1334		       00		      .byte.b	0
    994  1335
    995  1335		       04		      .byte.b	4
    996  1336
    997  1336		       07 16		      .byte.b	7,22
    998  1338
    999  1338		       08 0b		      .byte.b	8,11
   1000  133a
   1001  133a		       08		      .byte.b	8
   1002  133b
   1003  133b		       01 16		      .byte.b	1,22
   1004  133d
   1005  133d		       08 0b		      .byte.b	8,11
   1006  133f
   1007  133f		       04		      .byte.b	4
   1008  1340
   1009  1340		       08 10		      .byte.b	8,16
   1010  1342
   1011  1342		       00		      .byte.b	0
   1012  1343
   1013  1343		       0c		      .byte.b	12
   1014  1344
   1015  1344		       08 18		      .byte.b	8,24
   1016  1346
   1017  1346		       00		      .byte.b	0
   1018  1347
   1019  1347		       0c		      .byte.b	12
   1020  1348
   1021  1348		       08 14		      .byte.b	8,20
   1022  134a
   1023  134a		       07 14		      .byte.b	7,20
   1024  134c
   1025  134c		       08		      .byte.b	8
   1026  134d
   1027  134d		       02 14		      .byte.b	2,20
   1028  134f
   1029  134f		       01 14		      .byte.b	1,20
   1030  1351
   1031  1351		       04		      .byte.b	4
   1032  1352
   1033  1352		       08 14		      .byte.b	8,20
   1034  1354
   1035  1354		       07 14		      .byte.b	7,20
   1036  1356
   1037  1356		       08		      .byte.b	8
   1038  1357
   1039  1357		       02 14		      .byte.b	2,20
   1040  1359
   1041  1359		       01 14		      .byte.b	1,20
   1042  135b
   1043  135b		       04		      .byte.b	4
   1044  135c
   1045  135c		       08 16		      .byte.b	8,22
   1046  135e
   1047  135e		       07 15		      .byte.b	7,21
   1048  1360
   1049  1360		       0c		      .byte.b	12
   1050  1361
   1051  1361		       07 18		      .byte.b	7,24
   1052  1363
   1053  1363		       00		      .byte.b	0
   1054  1364
   1055  1364		       08		      .byte.b	8
   1056  1365
   1057  1365		       01 18		      .byte.b	1,24
   1058  1367
   1059  1367		       00		      .byte.b	0
   1060  1368
   1061  1368		       04		      .byte.b	4
   1062  1369
   1063  1369		       07 18		      .byte.b	7,24
   1064  136b
   1065  136b		       00		      .byte.b	0
   1066  136c
   1067  136c		       08		      .byte.b	8
   1068  136d
   1069  136d		       01 18		      .byte.b	1,24
   1070  136f
   1071  136f		       00		      .byte.b	0
   1072  1370
   1073  1370		       04		      .byte.b	4
   1074  1371
   1075  1371		       07 18		      .byte.b	7,24
   1076  1373
   1077  1373		       08 0a		      .byte.b	8,10
   1078  1375
   1079  1375		       08		      .byte.b	8
   1080  1376
   1081  1376		       01 18		      .byte.b	1,24
   1082  1378
   1083  1378		       08 0a		      .byte.b	8,10
   1084  137a
   1085  137a		       04		      .byte.b	4
   1086  137b
   1087  137b		       07 18		      .byte.b	7,24
   1088  137d
   1089  137d		       08 10		      .byte.b	8,16
   1090  137f
   1091  137f		       08		      .byte.b	8
   1092  1380
   1093  1380		       01 18		      .byte.b	1,24
   1094  1382
   1095  1382		       08 10		      .byte.b	8,16
   1096  1384
   1097  1384		       04		      .byte.b	4
   1098  1385
   1099  1385		       07 18		      .byte.b	7,24
   1100  1387
   1101  1387		       00		      .byte.b	0
   1102  1388
   1103  1388		       08		      .byte.b	8
   1104  1389
   1105  1389		       01 18		      .byte.b	1,24
   1106  138b
   1107  138b		       00		      .byte.b	0
   1108  138c
   1109  138c		       04		      .byte.b	4
   1110  138d
   1111  138d		       07 18		      .byte.b	7,24
   1112  138f
   1113  138f		       08 0b		      .byte.b	8,11
   1114  1391
   1115  1391		       08		      .byte.b	8
   1116  1392
   1117  1392		       01 18		      .byte.b	1,24
   1118  1394
   1119  1394		       08 0b		      .byte.b	8,11
   1120  1396
   1121  1396		       04		      .byte.b	4
   1122  1397
   1123  1397		       07 18		      .byte.b	7,24
   1124  1399
   1125  1399		       08 10		      .byte.b	8,16
   1126  139b
   1127  139b		       08		      .byte.b	8
   1128  139c
   1129  139c		       01 18		      .byte.b	1,24
   1130  139e
   1131  139e		       08 10		      .byte.b	8,16
   1132  13a0
   1133  13a0		       04		      .byte.b	4
   1134  13a1
   1135  13a1		       07 18		      .byte.b	7,24
   1136  13a3
   1137  13a3		       00		      .byte.b	0
   1138  13a4
   1139  13a4		       08		      .byte.b	8
   1140  13a5
   1141  13a5		       01 18		      .byte.b	1,24
   1142  13a7
   1143  13a7		       00		      .byte.b	0
   1144  13a8
   1145  13a8		       04		      .byte.b	4
   1146  13a9
   1147  13a9		       07 18		      .byte.b	7,24
   1148  13ab
   1149  13ab		       00		      .byte.b	0
   1150  13ac
   1151  13ac		       08		      .byte.b	8
   1152  13ad
   1153  13ad		       01 18		      .byte.b	1,24
   1154  13af
   1155  13af		       00		      .byte.b	0
   1156  13b0
   1157  13b0		       04		      .byte.b	4
   1158  13b1
   1159  13b1		       07 18		      .byte.b	7,24
   1160  13b3
   1161  13b3		       08 0a		      .byte.b	8,10
   1162  13b5
   1163  13b5		       08		      .byte.b	8
   1164  13b6
   1165  13b6		       01 18		      .byte.b	1,24
   1166  13b8
   1167  13b8		       08 0a		      .byte.b	8,10
   1168  13ba
   1169  13ba		       04		      .byte.b	4
   1170  13bb
   1171  13bb		       07 18		      .byte.b	7,24
   1172  13bd
   1173  13bd		       08 10		      .byte.b	8,16
   1174  13bf
   1175  13bf		       08		      .byte.b	8
   1176  13c0
   1177  13c0		       01 18		      .byte.b	1,24
   1178  13c2
   1179  13c2		       08 10		      .byte.b	8,16
   1180  13c4
   1181  13c4		       04		      .byte.b	4
   1182  13c5
   1183  13c5		       07 18		      .byte.b	7,24
   1184  13c7
   1185  13c7		       00		      .byte.b	0
   1186  13c8
   1187  13c8		       08		      .byte.b	8
   1188  13c9
   1189  13c9		       01 18		      .byte.b	1,24
   1190  13cb
   1191  13cb		       00		      .byte.b	0
   1192  13cc
   1193  13cc		       04		      .byte.b	4
   1194  13cd
   1195  13cd		       07 16		      .byte.b	7,22
   1196  13cf
   1197  13cf		       08 0b		      .byte.b	8,11
   1198  13d1
   1199  13d1		       08		      .byte.b	8
   1200  13d2
   1201  13d2		       01 16		      .byte.b	1,22
   1202  13d4
   1203  13d4		       08 0b		      .byte.b	8,11
   1204  13d6
   1205  13d6		       04		      .byte.b	4
   1206  13d7
   1207  13d7		       08 10		      .byte.b	8,16
   1208  13d9
   1209  13d9		       00		      .byte.b	0
   1210  13da
   1211  13da		       0c		      .byte.b	12
   1212  13db
   1213  13db		       08 18		      .byte.b	8,24
   1214  13dd
   1215  13dd		       00		      .byte.b	0
   1216  13de
   1217  13de		       0c		      .byte.b	12
   1218  13df
   1219  13df		       08 14		      .byte.b	8,20
   1220  13e1
   1221  13e1		       07 14		      .byte.b	7,20
   1222  13e3
   1223  13e3		       08		      .byte.b	8
   1224  13e4
   1225  13e4		       02 14		      .byte.b	2,20
   1226  13e6
   1227  13e6		       01 14		      .byte.b	1,20
   1228  13e8
   1229  13e8		       04		      .byte.b	4
   1230  13e9
   1231  13e9		       08 14		      .byte.b	8,20
   1232  13eb
   1233  13eb		       07 14		      .byte.b	7,20
   1234  13ed
   1235  13ed		       08		      .byte.b	8
   1236  13ee
   1237  13ee		       02 14		      .byte.b	2,20
   1238  13f0
   1239  13f0		       01 14		      .byte.b	1,20
   1240  13f2
   1241  13f2		       04		      .byte.b	4
   1242  13f3
   1243  13f3		       08 16		      .byte.b	8,22
   1244  13f5
   1245  13f5		       07 15		      .byte.b	7,21
   1246  13f7
   1247  13f7		       0c		      .byte.b	12
   1248  13f8
   1249  13f8		       07 18		      .byte.b	7,24
   1250  13fa
   1251  13fa		       00		      .byte.b	0
   1252  13fb
   1253  13fb		       08		      .byte.b	8
   1254  13fc
   1255  13fc		       01 18		      .byte.b	1,24
   1256  13fe
   1257  13fe		       00		      .byte.b	0
   1258  13ff
   1259  13ff		       04		      .byte.b	4
   1260  1400
   1261  1400		       07 18		      .byte.b	7,24
   1262  1402
   1263  1402		       00		      .byte.b	0
   1264  1403
   1265  1403		       08		      .byte.b	8
   1266  1404
   1267  1404		       01 18		      .byte.b	1,24
   1268  1406
   1269  1406		       00		      .byte.b	0
   1270  1407
   1271  1407		       04		      .byte.b	4
   1272  1408
   1273  1408		       07 18		      .byte.b	7,24
   1274  140a
   1275  140a		       08 0a		      .byte.b	8,10
   1276  140c
   1277  140c		       08		      .byte.b	8
   1278  140d
   1279  140d		       01 18		      .byte.b	1,24
   1280  140f
   1281  140f		       08 0a		      .byte.b	8,10
   1282  1411
   1283  1411		       04		      .byte.b	4
   1284  1412
   1285  1412		       07 18		      .byte.b	7,24
   1286  1414
   1287  1414		       08 10		      .byte.b	8,16
   1288  1416
   1289  1416		       08		      .byte.b	8
   1290  1417
   1291  1417		       01 18		      .byte.b	1,24
   1292  1419
   1293  1419		       08 10		      .byte.b	8,16
   1294  141b
   1295  141b		       04		      .byte.b	4
   1296  141c
   1297  141c		       07 18		      .byte.b	7,24
   1298  141e
   1299  141e		       00		      .byte.b	0
   1300  141f
   1301  141f		       08		      .byte.b	8
   1302  1420
   1303  1420		       01 18		      .byte.b	1,24
   1304  1422
   1305  1422		       00		      .byte.b	0
   1306  1423
   1307  1423		       04		      .byte.b	4
   1308  1424
   1309  1424		       07 18		      .byte.b	7,24
   1310  1426
   1311  1426		       08 0b		      .byte.b	8,11
   1312  1428
   1313  1428		       08		      .byte.b	8
   1314  1429
   1315  1429		       01 18		      .byte.b	1,24
   1316  142b
   1317  142b		       08 0b		      .byte.b	8,11
   1318  142d
   1319  142d		       04		      .byte.b	4
   1320  142e
   1321  142e		       07 18		      .byte.b	7,24
   1322  1430
   1323  1430		       08 10		      .byte.b	8,16
   1324  1432
   1325  1432		       08		      .byte.b	8
   1326  1433
   1327  1433		       01 18		      .byte.b	1,24
   1328  1435
   1329  1435		       08 10		      .byte.b	8,16
   1330  1437
   1331  1437		       04		      .byte.b	4
   1332  1438
   1333  1438		       07 18		      .byte.b	7,24
   1334  143a
   1335  143a		       00		      .byte.b	0
   1336  143b
   1337  143b		       08		      .byte.b	8
   1338  143c
   1339  143c		       01 18		      .byte.b	1,24
   1340  143e
   1341  143e		       00		      .byte.b	0
   1342  143f
   1343  143f		       04		      .byte.b	4
   1344  1440
   1345  1440		       07 18		      .byte.b	7,24
   1346  1442
   1347  1442		       00		      .byte.b	0
   1348  1443
   1349  1443		       08		      .byte.b	8
   1350  1444
   1351  1444		       01 18		      .byte.b	1,24
   1352  1446
   1353  1446		       00		      .byte.b	0
   1354  1447
   1355  1447		       04		      .byte.b	4
   1356  1448
   1357  1448		       07 18		      .byte.b	7,24
   1358  144a
   1359  144a		       08 0a		      .byte.b	8,10
   1360  144c
   1361  144c		       08		      .byte.b	8
   1362  144d
   1363  144d		       01 18		      .byte.b	1,24
   1364  144f
   1365  144f		       08 0a		      .byte.b	8,10
   1366  1451
   1367  1451		       04		      .byte.b	4
   1368  1452
   1369  1452		       07 18		      .byte.b	7,24
   1370  1454
   1371  1454		       08 10		      .byte.b	8,16
   1372  1456
   1373  1456		       08		      .byte.b	8
   1374  1457
   1375  1457		       01 18		      .byte.b	1,24
   1376  1459
   1377  1459		       08 10		      .byte.b	8,16
   1378  145b
   1379  145b		       04		      .byte.b	4
   1380  145c
   1381  145c		       07 18		      .byte.b	7,24
   1382  145e
   1383  145e		       00		      .byte.b	0
   1384  145f
   1385  145f		       08		      .byte.b	8
   1386  1460
   1387  1460		       01 18		      .byte.b	1,24
   1388  1462
   1389  1462		       00		      .byte.b	0
   1390  1463
   1391  1463		       04		      .byte.b	4
   1392  1464
   1393  1464		       07 16		      .byte.b	7,22
   1394  1466
   1395  1466		       08 0b		      .byte.b	8,11
   1396  1468
   1397  1468		       08		      .byte.b	8
   1398  1469
   1399  1469		       01 16		      .byte.b	1,22
   1400  146b
   1401  146b		       08 0b		      .byte.b	8,11
   1402  146d
   1403  146d		       04		      .byte.b	4
   1404  146e
   1405  146e		       08 10		      .byte.b	8,16
   1406  1470
   1407  1470		       00		      .byte.b	0
   1408  1471
   1409  1471		       0c		      .byte.b	12
   1410  1472
   1411  1472		       08 18		      .byte.b	8,24
   1412  1474
   1413  1474		       00		      .byte.b	0
   1414  1475
   1415  1475		       0c		      .byte.b	12
   1416  1476
   1417  1476		       08 14		      .byte.b	8,20
   1418  1478
   1419  1478		       07 14		      .byte.b	7,20
   1420  147a
   1421  147a		       08		      .byte.b	8
   1422  147b
   1423  147b		       02 14		      .byte.b	2,20
   1424  147d
   1425  147d		       01 14		      .byte.b	1,20
   1426  147f
   1427  147f		       04		      .byte.b	4
   1428  1480
   1429  1480		       08 14		      .byte.b	8,20
   1430  1482
   1431  1482		       07 14		      .byte.b	7,20
   1432  1484
   1433  1484		       08		      .byte.b	8
   1434  1485
   1435  1485		       02 14		      .byte.b	2,20
   1436  1487
   1437  1487		       01 14		      .byte.b	1,20
   1438  1489
   1439  1489		       04		      .byte.b	4
   1440  148a
   1441  148a		       08 16		      .byte.b	8,22
   1442  148c
   1443  148c		       07 15		      .byte.b	7,21
   1444  148e
   1445  148e		       0c		      .byte.b	12
   1446  148f
   1447  148f		       07 18		      .byte.b	7,24
   1448  1491
   1449  1491		       00		      .byte.b	0
   1450  1492
   1451  1492		       08		      .byte.b	8
   1452  1493
   1453  1493		       01 18		      .byte.b	1,24
   1454  1495
   1455  1495		       00		      .byte.b	0
   1456  1496
   1457  1496		       04		      .byte.b	4
   1458  1497
   1459  1497		       07 18		      .byte.b	7,24
   1460  1499
   1461  1499		       00		      .byte.b	0
   1462  149a
   1463  149a		       08		      .byte.b	8
   1464  149b
   1465  149b		       01 18		      .byte.b	1,24
   1466  149d
   1467  149d		       00		      .byte.b	0
   1468  149e
   1469  149e		       04		      .byte.b	4
   1470  149f
   1471  149f		       07 18		      .byte.b	7,24
   1472  14a1
   1473  14a1		       08 0a		      .byte.b	8,10
   1474  14a3
   1475  14a3		       08		      .byte.b	8
   1476  14a4
   1477  14a4		       01 18		      .byte.b	1,24
   1478  14a6
   1479  14a6		       08 0a		      .byte.b	8,10
   1480  14a8
   1481  14a8		       04		      .byte.b	4
   1482  14a9
   1483  14a9		       07 18		      .byte.b	7,24
   1484  14ab
   1485  14ab		       08 10		      .byte.b	8,16
   1486  14ad
   1487  14ad		       08		      .byte.b	8
   1488  14ae
   1489  14ae		       01 18		      .byte.b	1,24
   1490  14b0
   1491  14b0		       08 10		      .byte.b	8,16
   1492  14b2
   1493  14b2		       04		      .byte.b	4
   1494  14b3
   1495  14b3		       07 18		      .byte.b	7,24
   1496  14b5
   1497  14b5		       00		      .byte.b	0
   1498  14b6
   1499  14b6		       08		      .byte.b	8
   1500  14b7
   1501  14b7		       01 18		      .byte.b	1,24
   1502  14b9
   1503  14b9		       00		      .byte.b	0
   1504  14ba
   1505  14ba		       04		      .byte.b	4
   1506  14bb
   1507  14bb		       07 18		      .byte.b	7,24
   1508  14bd
   1509  14bd		       08 0b		      .byte.b	8,11
   1510  14bf
   1511  14bf		       08		      .byte.b	8
   1512  14c0
   1513  14c0		       01 18		      .byte.b	1,24
   1514  14c2
   1515  14c2		       08 0b		      .byte.b	8,11
   1516  14c4
   1517  14c4		       04		      .byte.b	4
   1518  14c5
   1519  14c5		       07 18		      .byte.b	7,24
   1520  14c7
   1521  14c7		       08 10		      .byte.b	8,16
   1522  14c9
   1523  14c9		       08		      .byte.b	8
   1524  14ca
   1525  14ca		       01 18		      .byte.b	1,24
   1526  14cc
   1527  14cc		       08 10		      .byte.b	8,16
   1528  14ce
   1529  14ce		       04		      .byte.b	4
   1530  14cf
   1531  14cf		       07 18		      .byte.b	7,24
   1532  14d1
   1533  14d1		       00		      .byte.b	0
   1534  14d2
   1535  14d2		       08		      .byte.b	8
   1536  14d3
   1537  14d3		       01 18		      .byte.b	1,24
   1538  14d5
   1539  14d5		       00		      .byte.b	0
   1540  14d6
   1541  14d6		       04		      .byte.b	4
   1542  14d7
   1543  14d7		       07 18		      .byte.b	7,24
   1544  14d9
   1545  14d9		       00		      .byte.b	0
   1546  14da
   1547  14da		       08		      .byte.b	8
   1548  14db
   1549  14db		       01 18		      .byte.b	1,24
   1550  14dd
   1551  14dd		       00		      .byte.b	0
   1552  14de
   1553  14de		       04		      .byte.b	4
   1554  14df
   1555  14df		       07 18		      .byte.b	7,24
   1556  14e1
   1557  14e1		       08 0a		      .byte.b	8,10
   1558  14e3
   1559  14e3		       08		      .byte.b	8
   1560  14e4
   1561  14e4		       01 18		      .byte.b	1,24
   1562  14e6
   1563  14e6		       08 0a		      .byte.b	8,10
   1564  14e8
   1565  14e8		       04		      .byte.b	4
   1566  14e9
   1567  14e9		       07 18		      .byte.b	7,24
   1568  14eb
   1569  14eb		       08 10		      .byte.b	8,16
   1570  14ed
   1571  14ed		       08		      .byte.b	8
   1572  14ee
   1573  14ee		       01 18		      .byte.b	1,24
   1574  14f0
   1575  14f0		       08 10		      .byte.b	8,16
   1576  14f2
   1577  14f2		       04		      .byte.b	4
   1578  14f3
   1579  14f3		       07 18		      .byte.b	7,24
   1580  14f5
   1581  14f5		       00		      .byte.b	0
   1582  14f6
   1583  14f6		       08		      .byte.b	8
   1584  14f7
   1585  14f7		       01 18		      .byte.b	1,24
   1586  14f9
   1587  14f9		       00		      .byte.b	0
   1588  14fa
   1589  14fa		       04		      .byte.b	4
   1590  14fb
   1591  14fb		       08 12		      .byte.b	8,18
   1592  14fd
   1593  14fd		       07 14		      .byte.b	7,20
   1594  14ff
   1595  14ff		       08		      .byte.b	8
   1596  1500
   1597  1500		       02 12		      .byte.b	2,18
   1598  1502
   1599  1502		       01 14		      .byte.b	1,20
   1600  1504
   1601  1504		       04		      .byte.b	4
   1602  1505
   1603  1505		       08 12		      .byte.b	8,18
   1604  1507
   1605  1507		       07 14		      .byte.b	7,20
   1606  1509
   1607  1509		       08		      .byte.b	8
   1608  150a
   1609  150a		       02 12		      .byte.b	2,18
   1610  150c
   1611  150c		       01 14		      .byte.b	1,20
   1612  150e
   1613  150e		       04		      .byte.b	4
   1614  150f
   1615  150f		       08 13		      .byte.b	8,19
   1616  1511
   1617  1511		       07 13		      .byte.b	7,19
   1618  1513
   1619  1513		       0c		      .byte.b	12
   1620  1514
   1621  1514		       07 0c		      .byte.b	7,12
   1622  1516
   1623  1516		       00		      .byte.b	0
   1624  1517
   1625  1517		       18		      .byte.b	24
   1626  1518
   1627  1518		       08 0c		      .byte.b	8,12
   1628  151a
   1629  151a		       06 0c		      .byte.b	6,12
   1630  151c
   1631  151c		       18		      .byte.b	24
   1632  151d
   1633  151d		       08 0a		      .byte.b	8,10
   1634  151f
   1635  151f		       05 0c		      .byte.b	5,12
   1636  1521
   1637  1521		       18		      .byte.b	24
   1638  1522
   1639  1522		       08 0d		      .byte.b	8,13
   1640  1524
   1641  1524		       04 0c		      .byte.b	4,12
   1642  1526
   1643  1526		       18		      .byte.b	24
   1644  1527
   1645  1527		       08 0c		      .byte.b	8,12
   1646  1529
   1647  1529		       03 0c		      .byte.b	3,12
   1648  152b
   1649  152b		       18		      .byte.b	24
   1650  152c
   1651  152c		       08 11		      .byte.b	8,17
   1652  152e
   1653  152e		       02 0c		      .byte.b	2,12
   1654  1530
   1655  1530		       18		      .byte.b	24
   1656  1531
   1657  1531		       08 16		      .byte.b	8,22
   1658  1533
   1659  1533		       01 0c		      .byte.b	1,12
   1660  1535
   1661  1535		       18		      .byte.b	24
   1662  1536
   1663  1536		       08 0d		      .byte.b	8,13
   1664  1538
   1665  1538		       00		      .byte.b	0
   1666  1539
   1667  1539		       18		      .byte.b	24
   1668  153a
   1669  153a		       07 0c		      .byte.b	7,12
   1670  153c
   1671  153c		       00		      .byte.b	0
   1672  153d
   1673  153d		       18		      .byte.b	24
   1674  153e
   1675  153e		       08 0c		      .byte.b	8,12
   1676  1540
   1677  1540		       07 0c		      .byte.b	7,12
   1678  1542
   1679  1542		       18		      .byte.b	24
   1680  1543
   1681  1543		       08 0a		      .byte.b	8,10
   1682  1545
   1683  1545		       06 0c		      .byte.b	6,12
   1684  1547
   1685  1547		       18		      .byte.b	24
   1686  1548
   1687  1548		       08 0d		      .byte.b	8,13
   1688  154a
   1689  154a		       05 0c		      .byte.b	5,12
   1690  154c
   1691  154c		       18		      .byte.b	24
   1692  154d
   1693  154d		       08 0c		      .byte.b	8,12
   1694  154f
   1695  154f		       04 0c		      .byte.b	4,12
   1696  1551
   1697  1551		       18		      .byte.b	24
   1698  1552
   1699  1552		       08 11		      .byte.b	8,17
   1700  1554
   1701  1554		       03 0c		      .byte.b	3,12
   1702  1556
   1703  1556		       18		      .byte.b	24
   1704  1557
   1705  1557		       08 10		      .byte.b	8,16
   1706  1559
   1707  1559		       02 0c		      .byte.b	2,12
   1708  155b
   1709  155b		       18		      .byte.b	24
   1710  155c
   1711  155c		       08 0d		      .byte.b	8,13
   1712  155e
   1713  155e		       07 0d		      .byte.b	7,13
   1714  1560
   1715  1560		       18		      .byte.b	24
   1716  1561
   1717  1561		       07 0c		      .byte.b	7,12
   1718  1563
   1719  1563		       00		      .byte.b	0
   1720  1564
   1721  1564		       18		      .byte.b	24
   1722  1565
   1723  1565		       08 0b		      .byte.b	8,11
   1724  1567
   1725  1567		       07 0c		      .byte.b	7,12
   1726  1569
   1727  1569		       18		      .byte.b	24
   1728  156a
   1729  156a		       08 0a		      .byte.b	8,10
   1730  156c
   1731  156c		       06 0c		      .byte.b	6,12
   1732  156e
   1733  156e		       18		      .byte.b	24
   1734  156f
   1735  156f		       08 0c		      .byte.b	8,12
   1736  1571
   1737  1571		       05 0c		      .byte.b	5,12
   1738  1573
   1739  1573		       18		      .byte.b	24
   1740  1574
   1741  1574		       08 0b		      .byte.b	8,11
   1742  1576
   1743  1576		       04 0c		      .byte.b	4,12
   1744  1578
   1745  1578		       18		      .byte.b	24
   1746  1579
   1747  1579		       08 10		      .byte.b	8,16
   1748  157b
   1749  157b		       03 0c		      .byte.b	3,12
   1750  157d
   1751  157d		       18		      .byte.b	24
   1752  157e
   1753  157e		       08 0f		      .byte.b	8,15
   1754  1580
   1755  1580		       02 0c		      .byte.b	2,12
   1756  1582
   1757  1582		       18		      .byte.b	24
   1758  1583
   1759  1583		       08 10		      .byte.b	8,16
   1760  1585
   1761  1585		       07 0d		      .byte.b	7,13
   1762  1587
   1763  1587		       18		      .byte.b	24
   1764  1588
   1765  1588		       07 0c		      .byte.b	7,12
   1766  158a
   1767  158a		       00		      .byte.b	0
   1768  158b
   1769  158b		       18		      .byte.b	24
   1770  158c
   1771  158c		       08 0b		      .byte.b	8,11
   1772  158e
   1773  158e		       07 0c		      .byte.b	7,12
   1774  1590
   1775  1590		       18		      .byte.b	24
   1776  1591
   1777  1591		       08 0a		      .byte.b	8,10
   1778  1593
   1779  1593		       06 0c		      .byte.b	6,12
   1780  1595
   1781  1595		       18		      .byte.b	24
   1782  1596
   1783  1596		       08 0c		      .byte.b	8,12
   1784  1598
   1785  1598		       05 0c		      .byte.b	5,12
   1786  159a
   1787  159a		       18		      .byte.b	24
   1788  159b
   1789  159b		       08 0b		      .byte.b	8,11
   1790  159d
   1791  159d		       04 0c		      .byte.b	4,12
   1792  159f
   1793  159f		       18		      .byte.b	24
   1794  15a0
   1795  15a0		       08 10		      .byte.b	8,16
   1796  15a2
   1797  15a2		       03 0c		      .byte.b	3,12
   1798  15a4
   1799  15a4		       18		      .byte.b	24
   1800  15a5
   1801  15a5		       08 14		      .byte.b	8,20
   1802  15a7
   1803  15a7		       02 0c		      .byte.b	2,12
   1804  15a9
   1805  15a9		       18		      .byte.b	24
   1806  15aa
   1807  15aa		       08 17		      .byte.b	8,23
   1808  15ac
   1809  15ac		       07 0d		      .byte.b	7,13
   1810  15ae
   1811  15ae		       18		      .byte.b	24
   1812  15af
   1813  15af		       08 0b		      .byte.b	8,11
   1814  15b1
   1815  15b1		       07 0d		      .byte.b	7,13
   1816  15b3
   1817  15b3		       18		      .byte.b	24
   1818  15b4
   1819  15b4		       07 0c		      .byte.b	7,12
   1820  15b6
   1821  15b6		       00		      .byte.b	0
   1822  15b7
   1823  15b7		       04		      .byte.b	4
   1824  15b8
   1825  15b8		       01 0c		      .byte.b	1,12
   1826  15ba
   1827  15ba		       00		      .byte.b	0
   1828  15bb
   1829  15bb		       02		      .byte.b	2
   1830  15bc
   1831  15bc		       07 0c		      .byte.b	7,12
   1832  15be
   1833  15be		       00		      .byte.b	0
   1834  15bf
   1835  15bf		       04		      .byte.b	4
   1836  15c0
   1837  15c0		       01 0c		      .byte.b	1,12
   1838  15c2
   1839  15c2		       00		      .byte.b	0
   1840  15c3
   1841  15c3		       02		      .byte.b	2
   1842  15c4
   1843  15c4		       07 0c		      .byte.b	7,12
   1844  15c6
   1845  15c6		       00		      .byte.b	0
   1846  15c7
   1847  15c7		       04		      .byte.b	4
   1848  15c8
   1849  15c8		       01 0c		      .byte.b	1,12
   1850  15ca
   1851  15ca		       00		      .byte.b	0
   1852  15cb
   1853  15cb		       02		      .byte.b	2
   1854  15cc
   1855  15cc		       07 0c		      .byte.b	7,12
   1856  15ce
   1857  15ce		       00		      .byte.b	0
   1858  15cf
   1859  15cf		       04		      .byte.b	4
   1860  15d0
   1861  15d0		       01 0c		      .byte.b	1,12
   1862  15d2
   1863  15d2		       00		      .byte.b	0
   1864  15d3
   1865  15d3		       02		      .byte.b	2
   1866  15d4
   1867  15d4		       07 0c		      .byte.b	7,12
   1868  15d6
   1869  15d6		       08 0c		      .byte.b	8,12
   1870  15d8
   1871  15d8		       04		      .byte.b	4
   1872  15d9
   1873  15d9		       01 0c		      .byte.b	1,12
   1874  15db
   1875  15db		       08 0c		      .byte.b	8,12
   1876  15dd
   1877  15dd		       02		      .byte.b	2
   1878  15de
   1879  15de		       07 0c		      .byte.b	7,12
   1880  15e0
   1881  15e0		       08 0c		      .byte.b	8,12
   1882  15e2
   1883  15e2		       04		      .byte.b	4
   1884  15e3
   1885  15e3		       01 0c		      .byte.b	1,12
   1886  15e5
   1887  15e5		       08 0c		      .byte.b	8,12
   1888  15e7
   1889  15e7		       02		      .byte.b	2
   1890  15e8
   1891  15e8		       07 0c		      .byte.b	7,12
   1892  15ea
   1893  15ea		       08 0c		      .byte.b	8,12
   1894  15ec
   1895  15ec		       04		      .byte.b	4
   1896  15ed
   1897  15ed		       01 0c		      .byte.b	1,12
   1898  15ef
   1899  15ef		       08 0c		      .byte.b	8,12
   1900  15f1
   1901  15f1		       02		      .byte.b	2
   1902  15f2
   1903  15f2		       07 0c		      .byte.b	7,12
   1904  15f4
   1905  15f4		       08 0c		      .byte.b	8,12
   1906  15f6
   1907  15f6		       04		      .byte.b	4
   1908  15f7
   1909  15f7		       01 0c		      .byte.b	1,12
   1910  15f9
   1911  15f9		       08 0c		      .byte.b	8,12
   1912  15fb
   1913  15fb		       02		      .byte.b	2
   1914  15fc
   1915  15fc		       07 0c		      .byte.b	7,12
   1916  15fe
   1917  15fe		       08 0a		      .byte.b	8,10
   1918  1600
   1919  1600		       04		      .byte.b	4
   1920  1601
   1921  1601		       01 0c		      .byte.b	1,12
   1922  1603
   1923  1603		       08 0a		      .byte.b	8,10
   1924  1605
   1925  1605		       02		      .byte.b	2
   1926  1606
   1927  1606		       07 0c		      .byte.b	7,12
   1928  1608
   1929  1608		       08 0a		      .byte.b	8,10
   1930  160a
   1931  160a		       04		      .byte.b	4
   1932  160b
   1933  160b		       01 0c		      .byte.b	1,12
   1934  160d
   1935  160d		       08 0a		      .byte.b	8,10
   1936  160f
   1937  160f		       02		      .byte.b	2
   1938  1610
   1939  1610		       07 0c		      .byte.b	7,12
   1940  1612
   1941  1612		       08 0a		      .byte.b	8,10
   1942  1614
   1943  1614		       04		      .byte.b	4
   1944  1615
   1945  1615		       01 0c		      .byte.b	1,12
   1946  1617
   1947  1617		       08 0a		      .byte.b	8,10
   1948  1619
   1949  1619		       02		      .byte.b	2
   1950  161a
   1951  161a		       07 0c		      .byte.b	7,12
   1952  161c
   1953  161c		       08 0a		      .byte.b	8,10
   1954  161e
   1955  161e		       04		      .byte.b	4
   1956  161f
   1957  161f		       01 0c		      .byte.b	1,12
   1958  1621
   1959  1621		       08 0a		      .byte.b	8,10
   1960  1623
   1961  1623		       02		      .byte.b	2
   1962  1624
   1963  1624		       07 0c		      .byte.b	7,12
   1964  1626
   1965  1626		       08 0d		      .byte.b	8,13
   1966  1628
   1967  1628		       04		      .byte.b	4
   1968  1629
   1969  1629		       01 0c		      .byte.b	1,12
   1970  162b
   1971  162b		       08 0d		      .byte.b	8,13
   1972  162d
   1973  162d		       02		      .byte.b	2
   1974  162e
   1975  162e		       07 0c		      .byte.b	7,12
   1976  1630
   1977  1630		       08 0d		      .byte.b	8,13
   1978  1632
   1979  1632		       04		      .byte.b	4
   1980  1633
   1981  1633		       01 0c		      .byte.b	1,12
   1982  1635
   1983  1635		       08 0d		      .byte.b	8,13
   1984  1637
   1985  1637		       02		      .byte.b	2
   1986  1638
   1987  1638		       07 0c		      .byte.b	7,12
   1988  163a
   1989  163a		       08 0d		      .byte.b	8,13
   1990  163c
   1991  163c		       04		      .byte.b	4
   1992  163d
   1993  163d		       01 0c		      .byte.b	1,12
   1994  163f
   1995  163f		       08 0d		      .byte.b	8,13
   1996  1641
   1997  1641		       02		      .byte.b	2
   1998  1642
   1999  1642		       07 0c		      .byte.b	7,12
   2000  1644
   2001  1644		       08 0d		      .byte.b	8,13
   2002  1646
   2003  1646		       04		      .byte.b	4
   2004  1647
   2005  1647		       01 0c		      .byte.b	1,12
   2006  1649
   2007  1649		       08 0d		      .byte.b	8,13
   2008  164b
   2009  164b		       02		      .byte.b	2
   2010  164c
   2011  164c		       07 0c		      .byte.b	7,12
   2012  164e
   2013  164e		       08 0c		      .byte.b	8,12
   2014  1650
   2015  1650		       04		      .byte.b	4
   2016  1651
   2017  1651		       01 0c		      .byte.b	1,12
   2018  1653
   2019  1653		       08 0c		      .byte.b	8,12
   2020  1655
   2021  1655		       02		      .byte.b	2
   2022  1656
   2023  1656		       07 0c		      .byte.b	7,12
   2024  1658
   2025  1658		       08 0c		      .byte.b	8,12
   2026  165a
   2027  165a		       04		      .byte.b	4
   2028  165b
   2029  165b		       01 0c		      .byte.b	1,12
   2030  165d
   2031  165d		       08 0c		      .byte.b	8,12
   2032  165f
   2033  165f		       02		      .byte.b	2
   2034  1660
   2035  1660		       07 0c		      .byte.b	7,12
   2036  1662
   2037  1662		       08 0c		      .byte.b	8,12
   2038  1664
   2039  1664		       04		      .byte.b	4
   2040  1665
   2041  1665		       01 0c		      .byte.b	1,12
   2042  1667
   2043  1667		       08 0c		      .byte.b	8,12
   2044  1669
   2045  1669		       02		      .byte.b	2
   2046  166a
   2047  166a		       07 0c		      .byte.b	7,12
   2048  166c
   2049  166c		       08 0c		      .byte.b	8,12
   2050  166e
   2051  166e		       04		      .byte.b	4
   2052  166f
   2053  166f		       01 0c		      .byte.b	1,12
   2054  1671
   2055  1671		       08 0c		      .byte.b	8,12
   2056  1673
   2057  1673		       02		      .byte.b	2
   2058  1674
   2059  1674		       07 0c		      .byte.b	7,12
   2060  1676
   2061  1676		       08 11		      .byte.b	8,17
   2062  1678
   2063  1678		       04		      .byte.b	4
   2064  1679
   2065  1679		       01 0c		      .byte.b	1,12
   2066  167b
   2067  167b		       08 11		      .byte.b	8,17
   2068  167d
   2069  167d		       02		      .byte.b	2
   2070  167e
   2071  167e		       07 0c		      .byte.b	7,12
   2072  1680
   2073  1680		       08 11		      .byte.b	8,17
   2074  1682
   2075  1682		       04		      .byte.b	4
   2076  1683
   2077  1683		       01 0c		      .byte.b	1,12
   2078  1685
   2079  1685		       08 11		      .byte.b	8,17
   2080  1687
   2081  1687		       02		      .byte.b	2
   2082  1688
   2083  1688		       07 0c		      .byte.b	7,12
   2084  168a
   2085  168a		       08 11		      .byte.b	8,17
   2086  168c
   2087  168c		       04		      .byte.b	4
   2088  168d
   2089  168d		       01 0c		      .byte.b	1,12
   2090  168f
   2091  168f		       08 11		      .byte.b	8,17
   2092  1691
   2093  1691		       02		      .byte.b	2
   2094  1692
   2095  1692		       07 0c		      .byte.b	7,12
   2096  1694
   2097  1694		       08 11		      .byte.b	8,17
   2098  1696
   2099  1696		       04		      .byte.b	4
   2100  1697
   2101  1697		       01 0c		      .byte.b	1,12
   2102  1699
   2103  1699		       08 11		      .byte.b	8,17
   2104  169b
   2105  169b		       02		      .byte.b	2
   2106  169c
   2107  169c		       07 0c		      .byte.b	7,12
   2108  169e
   2109  169e		       08 16		      .byte.b	8,22
   2110  16a0
   2111  16a0		       04		      .byte.b	4
   2112  16a1
   2113  16a1		       01 0c		      .byte.b	1,12
   2114  16a3
   2115  16a3		       08 16		      .byte.b	8,22
   2116  16a5
   2117  16a5		       02		      .byte.b	2
   2118  16a6
   2119  16a6		       07 0c		      .byte.b	7,12
   2120  16a8
   2121  16a8		       08 16		      .byte.b	8,22
   2122  16aa
   2123  16aa		       04		      .byte.b	4
   2124  16ab
   2125  16ab		       01 0c		      .byte.b	1,12
   2126  16ad
   2127  16ad		       08 16		      .byte.b	8,22
   2128  16af
   2129  16af		       02		      .byte.b	2
   2130  16b0
   2131  16b0		       07 0c		      .byte.b	7,12
   2132  16b2
   2133  16b2		       08 16		      .byte.b	8,22
   2134  16b4
   2135  16b4		       04		      .byte.b	4
   2136  16b5
   2137  16b5		       01 0c		      .byte.b	1,12
   2138  16b7
   2139  16b7		       08 16		      .byte.b	8,22
   2140  16b9
   2141  16b9		       02		      .byte.b	2
   2142  16ba
   2143  16ba		       07 0c		      .byte.b	7,12
   2144  16bc
   2145  16bc		       08 16		      .byte.b	8,22
   2146  16be
   2147  16be		       04		      .byte.b	4
   2148  16bf
   2149  16bf		       01 0c		      .byte.b	1,12
   2150  16c1
   2151  16c1		       08 16		      .byte.b	8,22
   2152  16c3
   2153  16c3		       02		      .byte.b	2
   2154  16c4
   2155  16c4		       07 0d		      .byte.b	7,13
   2156  16c6
   2157  16c6		       08 1c		      .byte.b	8,28
   2158  16c8
   2159  16c8		       04		      .byte.b	4
   2160  16c9
   2161  16c9		       01 0d		      .byte.b	1,13
   2162  16cb
   2163  16cb		       08 1c		      .byte.b	8,28
   2164  16cd
   2165  16cd		       02		      .byte.b	2
   2166  16ce
   2167  16ce		       07 0d		      .byte.b	7,13
   2168  16d0
   2169  16d0		       08 1c		      .byte.b	8,28
   2170  16d2
   2171  16d2		       04		      .byte.b	4
   2172  16d3
   2173  16d3		       01 0d		      .byte.b	1,13
   2174  16d5
   2175  16d5		       08 1c		      .byte.b	8,28
   2176  16d7
   2177  16d7		       02		      .byte.b	2
   2178  16d8
   2179  16d8		       07 0d		      .byte.b	7,13
   2180  16da
   2181  16da		       08 1c		      .byte.b	8,28
   2182  16dc
   2183  16dc		       04		      .byte.b	4
   2184  16dd
   2185  16dd		       01 0d		      .byte.b	1,13
   2186  16df
   2187  16df		       08 1c		      .byte.b	8,28
   2188  16e1
   2189  16e1		       02		      .byte.b	2
   2190  16e2
   2191  16e2		       07 0d		      .byte.b	7,13
   2192  16e4
   2193  16e4		       08 1c		      .byte.b	8,28
   2194  16e6
   2195  16e6		       04		      .byte.b	4
   2196  16e7
   2197  16e7		       01 0d		      .byte.b	1,13
   2198  16e9
   2199  16e9		       08 1c		      .byte.b	8,28
   2200  16eb
   2201  16eb		       02		      .byte.b	2
   2202  16ec
   2203  16ec		       07 0c		      .byte.b	7,12
   2204  16ee
   2205  16ee		       00		      .byte.b	0
   2206  16ef
   2207  16ef		       04		      .byte.b	4
   2208  16f0
   2209  16f0		       01 0c		      .byte.b	1,12
   2210  16f2
   2211  16f2		       00		      .byte.b	0
   2212  16f3
   2213  16f3		       02		      .byte.b	2
   2214  16f4
   2215  16f4		       07 0c		      .byte.b	7,12
   2216  16f6
   2217  16f6		       00		      .byte.b	0
   2218  16f7
   2219  16f7		       04		      .byte.b	4
   2220  16f8
   2221  16f8		       01 0c		      .byte.b	1,12
   2222  16fa
   2223  16fa		       00		      .byte.b	0
   2224  16fb
   2225  16fb		       02		      .byte.b	2
   2226  16fc
   2227  16fc		       07 0c		      .byte.b	7,12
   2228  16fe
   2229  16fe		       00		      .byte.b	0
   2230  16ff
   2231  16ff		       04		      .byte.b	4
   2232  1700
   2233  1700		       01 0c		      .byte.b	1,12
   2234  1702
   2235  1702		       00		      .byte.b	0
   2236  1703
   2237  1703		       02		      .byte.b	2
   2238  1704
   2239  1704		       07 0c		      .byte.b	7,12
   2240  1706
   2241  1706		       00		      .byte.b	0
   2242  1707
   2243  1707		       04		      .byte.b	4
   2244  1708
   2245  1708		       01 0c		      .byte.b	1,12
   2246  170a
   2247  170a		       00		      .byte.b	0
   2248  170b
   2249  170b		       02		      .byte.b	2
   2250  170c
   2251  170c		       07 0c		      .byte.b	7,12
   2252  170e
   2253  170e		       08 0c		      .byte.b	8,12
   2254  1710
   2255  1710		       04		      .byte.b	4
   2256  1711
   2257  1711		       01 0c		      .byte.b	1,12
   2258  1713
   2259  1713		       08 0c		      .byte.b	8,12
   2260  1715
   2261  1715		       02		      .byte.b	2
   2262  1716
   2263  1716		       07 0c		      .byte.b	7,12
   2264  1718
   2265  1718		       08 0c		      .byte.b	8,12
   2266  171a
   2267  171a		       04		      .byte.b	4
   2268  171b
   2269  171b		       01 0c		      .byte.b	1,12
   2270  171d
   2271  171d		       08 0c		      .byte.b	8,12
   2272  171f
   2273  171f		       02		      .byte.b	2
   2274  1720
   2275  1720		       07 0c		      .byte.b	7,12
   2276  1722
   2277  1722		       08 0c		      .byte.b	8,12
   2278  1724
   2279  1724		       04		      .byte.b	4
   2280  1725
   2281  1725		       01 0c		      .byte.b	1,12
   2282  1727
   2283  1727		       08 0c		      .byte.b	8,12
   2284  1729
   2285  1729		       02		      .byte.b	2
   2286  172a
   2287  172a		       07 0c		      .byte.b	7,12
   2288  172c
   2289  172c		       08 0c		      .byte.b	8,12
   2290  172e
   2291  172e		       04		      .byte.b	4
   2292  172f
   2293  172f		       01 0c		      .byte.b	1,12
   2294  1731
   2295  1731		       08 0c		      .byte.b	8,12
   2296  1733
   2297  1733		       02		      .byte.b	2
   2298  1734
   2299  1734		       07 0c		      .byte.b	7,12
   2300  1736
   2301  1736		       08 0a		      .byte.b	8,10
   2302  1738
   2303  1738		       04		      .byte.b	4
   2304  1739
   2305  1739		       01 0c		      .byte.b	1,12
   2306  173b
   2307  173b		       08 0a		      .byte.b	8,10
   2308  173d
   2309  173d		       02		      .byte.b	2
   2310  173e
   2311  173e		       07 0c		      .byte.b	7,12
   2312  1740
   2313  1740		       08 0a		      .byte.b	8,10
   2314  1742
   2315  1742		       04		      .byte.b	4
   2316  1743
   2317  1743		       01 0c		      .byte.b	1,12
   2318  1745
   2319  1745		       08 0a		      .byte.b	8,10
   2320  1747
   2321  1747		       02		      .byte.b	2
   2322  1748
   2323  1748		       07 0c		      .byte.b	7,12
   2324  174a
   2325  174a		       08 0a		      .byte.b	8,10
   2326  174c
   2327  174c		       04		      .byte.b	4
   2328  174d
   2329  174d		       01 0c		      .byte.b	1,12
   2330  174f
   2331  174f		       08 0a		      .byte.b	8,10
   2332  1751
   2333  1751		       02		      .byte.b	2
   2334  1752
   2335  1752		       07 0c		      .byte.b	7,12
   2336  1754
   2337  1754		       08 0a		      .byte.b	8,10
   2338  1756
   2339  1756		       04		      .byte.b	4
   2340  1757
   2341  1757		       01 0c		      .byte.b	1,12
   2342  1759
   2343  1759		       08 0a		      .byte.b	8,10
   2344  175b
   2345  175b		       02		      .byte.b	2
   2346  175c
   2347  175c		       07 0c		      .byte.b	7,12
   2348  175e
   2349  175e		       08 0d		      .byte.b	8,13
   2350  1760
   2351  1760		       04		      .byte.b	4
   2352  1761
   2353  1761		       01 0c		      .byte.b	1,12
   2354  1763
   2355  1763		       08 0d		      .byte.b	8,13
   2356  1765
   2357  1765		       02		      .byte.b	2
   2358  1766
   2359  1766		       07 0c		      .byte.b	7,12
   2360  1768
   2361  1768		       08 0d		      .byte.b	8,13
   2362  176a
   2363  176a		       04		      .byte.b	4
   2364  176b
   2365  176b		       01 0c		      .byte.b	1,12
   2366  176d
   2367  176d		       08 0d		      .byte.b	8,13
   2368  176f
   2369  176f		       02		      .byte.b	2
   2370  1770
   2371  1770		       07 0c		      .byte.b	7,12
   2372  1772
   2373  1772		       08 0d		      .byte.b	8,13
   2374  1774
   2375  1774		       04		      .byte.b	4
   2376  1775
   2377  1775		       01 0c		      .byte.b	1,12
   2378  1777
   2379  1777		       08 0d		      .byte.b	8,13
   2380  1779
   2381  1779		       02		      .byte.b	2
   2382  177a
   2383  177a		       07 0c		      .byte.b	7,12
   2384  177c
   2385  177c		       08 0d		      .byte.b	8,13
   2386  177e
   2387  177e		       04		      .byte.b	4
   2388  177f
   2389  177f		       01 0c		      .byte.b	1,12
   2390  1781
   2391  1781		       08 0d		      .byte.b	8,13
   2392  1783
   2393  1783		       02		      .byte.b	2
   2394  1784
   2395  1784		       07 0c		      .byte.b	7,12
   2396  1786
   2397  1786		       08 0c		      .byte.b	8,12
   2398  1788
   2399  1788		       04		      .byte.b	4
   2400  1789
   2401  1789		       01 0c		      .byte.b	1,12
   2402  178b
   2403  178b		       08 0c		      .byte.b	8,12
   2404  178d
   2405  178d		       02		      .byte.b	2
   2406  178e
   2407  178e		       07 0c		      .byte.b	7,12
   2408  1790
   2409  1790		       08 0c		      .byte.b	8,12
   2410  1792
   2411  1792		       04		      .byte.b	4
   2412  1793
   2413  1793		       01 0c		      .byte.b	1,12
   2414  1795
   2415  1795		       08 0c		      .byte.b	8,12
   2416  1797
   2417  1797		       02		      .byte.b	2
   2418  1798
   2419  1798		       07 0c		      .byte.b	7,12
   2420  179a
   2421  179a		       08 0c		      .byte.b	8,12
   2422  179c
   2423  179c		       04		      .byte.b	4
   2424  179d
   2425  179d		       01 0c		      .byte.b	1,12
   2426  179f
   2427  179f		       08 0c		      .byte.b	8,12
   2428  17a1
   2429  17a1		       02		      .byte.b	2
   2430  17a2
   2431  17a2		       07 0c		      .byte.b	7,12
   2432  17a4
   2433  17a4		       08 0c		      .byte.b	8,12
   2434  17a6
   2435  17a6		       04		      .byte.b	4
   2436  17a7
   2437  17a7		       01 0c		      .byte.b	1,12
   2438  17a9
   2439  17a9		       08 0c		      .byte.b	8,12
   2440  17ab
   2441  17ab		       02		      .byte.b	2
   2442  17ac
   2443  17ac		       07 0c		      .byte.b	7,12
   2444  17ae
   2445  17ae		       08 11		      .byte.b	8,17
   2446  17b0
   2447  17b0		       04		      .byte.b	4
   2448  17b1
   2449  17b1		       01 0c		      .byte.b	1,12
   2450  17b3
   2451  17b3		       08 11		      .byte.b	8,17
   2452  17b5
   2453  17b5		       02		      .byte.b	2
   2454  17b6
   2455  17b6		       07 0c		      .byte.b	7,12
   2456  17b8
   2457  17b8		       08 11		      .byte.b	8,17
   2458  17ba
   2459  17ba		       04		      .byte.b	4
   2460  17bb
   2461  17bb		       01 0c		      .byte.b	1,12
   2462  17bd
   2463  17bd		       08 11		      .byte.b	8,17
   2464  17bf
   2465  17bf		       02		      .byte.b	2
   2466  17c0
   2467  17c0		       07 0c		      .byte.b	7,12
   2468  17c2
   2469  17c2		       08 11		      .byte.b	8,17
   2470  17c4
   2471  17c4		       04		      .byte.b	4
   2472  17c5
   2473  17c5		       01 0c		      .byte.b	1,12
   2474  17c7
   2475  17c7		       08 11		      .byte.b	8,17
   2476  17c9
   2477  17c9		       02		      .byte.b	2
   2478  17ca
   2479  17ca		       07 0c		      .byte.b	7,12
   2480  17cc
   2481  17cc		       08 11		      .byte.b	8,17
   2482  17ce
   2483  17ce		       04		      .byte.b	4
   2484  17cf
   2485  17cf		       01 0c		      .byte.b	1,12
   2486  17d1
   2487  17d1		       08 11		      .byte.b	8,17
   2488  17d3
   2489  17d3		       02		      .byte.b	2
   2490  17d4
   2491  17d4		       07 0c		      .byte.b	7,12
   2492  17d6
   2493  17d6		       08 10		      .byte.b	8,16
   2494  17d8
   2495  17d8		       04		      .byte.b	4
   2496  17d9
   2497  17d9		       01 0c		      .byte.b	1,12
   2498  17db
   2499  17db		       08 10		      .byte.b	8,16
   2500  17dd
   2501  17dd		       02		      .byte.b	2
   2502  17de
   2503  17de		       07 0c		      .byte.b	7,12
   2504  17e0
   2505  17e0		       08 10		      .byte.b	8,16
   2506  17e2
   2507  17e2		       04		      .byte.b	4
   2508  17e3
   2509  17e3		       01 0c		      .byte.b	1,12
   2510  17e5
   2511  17e5		       08 10		      .byte.b	8,16
   2512  17e7
   2513  17e7		       02		      .byte.b	2
   2514  17e8
   2515  17e8		       07 0c		      .byte.b	7,12
   2516  17ea
   2517  17ea		       08 10		      .byte.b	8,16
   2518  17ec
   2519  17ec		       04		      .byte.b	4
   2520  17ed
   2521  17ed		       01 0c		      .byte.b	1,12
   2522  17ef
   2523  17ef		       08 10		      .byte.b	8,16
   2524  17f1
   2525  17f1		       02		      .byte.b	2
   2526  17f2
   2527  17f2		       07 0c		      .byte.b	7,12
   2528  17f4
   2529  17f4		       08 10		      .byte.b	8,16
   2530  17f6
   2531  17f6		       04		      .byte.b	4
   2532  17f7
   2533  17f7		       01 0c		      .byte.b	1,12
   2534  17f9
   2535  17f9		       08 10		      .byte.b	8,16
   2536  17fb
   2537  17fb		       02		      .byte.b	2
   2538  17fc
   2539  17fc		       07 0d		      .byte.b	7,13
   2540  17fe
   2541  17fe		       08 0d		      .byte.b	8,13
   2542  1800
   2543  1800		       04		      .byte.b	4
   2544  1801
   2545  1801		       01 0d		      .byte.b	1,13
   2546  1803
   2547  1803		       08 0d		      .byte.b	8,13
   2548  1805
   2549  1805		       02		      .byte.b	2
   2550  1806
   2551  1806		       07 0d		      .byte.b	7,13
   2552  1808
   2553  1808		       08 0d		      .byte.b	8,13
   2554  180a
   2555  180a		       04		      .byte.b	4
   2556  180b
   2557  180b		       01 0d		      .byte.b	1,13
   2558  180d
   2559  180d		       08 0d		      .byte.b	8,13
   2560  180f
   2561  180f		       02		      .byte.b	2
   2562  1810
   2563  1810		       07 0d		      .byte.b	7,13
   2564  1812
   2565  1812		       08 0d		      .byte.b	8,13
   2566  1814
   2567  1814		       04		      .byte.b	4
   2568  1815
   2569  1815		       01 0d		      .byte.b	1,13
   2570  1817
   2571  1817		       08 0d		      .byte.b	8,13
   2572  1819
   2573  1819		       02		      .byte.b	2
   2574  181a
   2575  181a		       07 0d		      .byte.b	7,13
   2576  181c
   2577  181c		       08 0d		      .byte.b	8,13
   2578  181e
   2579  181e		       04		      .byte.b	4
   2580  181f
   2581  181f		       01 0d		      .byte.b	1,13
   2582  1821
   2583  1821		       08 0d		      .byte.b	8,13
   2584  1823
   2585  1823		       02		      .byte.b	2
   2586  1824
   2587  1824		       07 0b		      .byte.b	7,11
   2588  1826
   2589  1826		       00		      .byte.b	0
   2590  1827
   2591  1827		       04		      .byte.b	4
   2592  1828
   2593  1828		       01 0b		      .byte.b	1,11
   2594  182a
   2595  182a		       00		      .byte.b	0
   2596  182b
   2597  182b		       02		      .byte.b	2
   2598  182c
   2599  182c		       07 0b		      .byte.b	7,11
   2600  182e
   2601  182e		       00		      .byte.b	0
   2602  182f
   2603  182f		       04		      .byte.b	4
   2604  1830
   2605  1830		       01 0b		      .byte.b	1,11
   2606  1832
   2607  1832		       00		      .byte.b	0
   2608  1833
   2609  1833		       02		      .byte.b	2
   2610  1834
   2611  1834		       07 0b		      .byte.b	7,11
   2612  1836
   2613  1836		       00		      .byte.b	0
   2614  1837
   2615  1837		       04		      .byte.b	4
   2616  1838
   2617  1838		       01 0b		      .byte.b	1,11
   2618  183a
   2619  183a		       00		      .byte.b	0
   2620  183b
   2621  183b		       02		      .byte.b	2
   2622  183c
   2623  183c		       07 0b		      .byte.b	7,11
   2624  183e
   2625  183e		       00		      .byte.b	0
   2626  183f
   2627  183f		       04		      .byte.b	4
   2628  1840
   2629  1840		       01 0b		      .byte.b	1,11
   2630  1842
   2631  1842		       00		      .byte.b	0
   2632  1843
   2633  1843		       02		      .byte.b	2
   2634  1844
   2635  1844		       07 0b		      .byte.b	7,11
   2636  1846
   2637  1846		       08 0b		      .byte.b	8,11
   2638  1848
   2639  1848		       04		      .byte.b	4
   2640  1849
   2641  1849		       01 0b		      .byte.b	1,11
   2642  184b
   2643  184b		       08 0b		      .byte.b	8,11
   2644  184d
   2645  184d		       02		      .byte.b	2
   2646  184e
   2647  184e		       07 0b		      .byte.b	7,11
   2648  1850
   2649  1850		       08 0b		      .byte.b	8,11
   2650  1852
   2651  1852		       04		      .byte.b	4
   2652  1853
   2653  1853		       01 0b		      .byte.b	1,11
   2654  1855
   2655  1855		       08 0b		      .byte.b	8,11
   2656  1857
   2657  1857		       02		      .byte.b	2
   2658  1858
   2659  1858		       07 0b		      .byte.b	7,11
   2660  185a
   2661  185a		       08 0b		      .byte.b	8,11
   2662  185c
   2663  185c		       04		      .byte.b	4
   2664  185d
   2665  185d		       01 0b		      .byte.b	1,11
   2666  185f
   2667  185f		       08 0b		      .byte.b	8,11
   2668  1861
   2669  1861		       02		      .byte.b	2
   2670  1862
   2671  1862		       07 0b		      .byte.b	7,11
   2672  1864
   2673  1864		       08 0b		      .byte.b	8,11
   2674  1866
   2675  1866		       04		      .byte.b	4
   2676  1867
   2677  1867		       01 0b		      .byte.b	1,11
   2678  1869
   2679  1869		       08 0b		      .byte.b	8,11
   2680  186b
   2681  186b		       02		      .byte.b	2
   2682  186c
   2683  186c		       07 0b		      .byte.b	7,11
   2684  186e
   2685  186e		       08 0a		      .byte.b	8,10
   2686  1870
   2687  1870		       04		      .byte.b	4
   2688  1871
   2689  1871		       01 0b		      .byte.b	1,11
   2690  1873
   2691  1873		       08 0a		      .byte.b	8,10
   2692  1875
   2693  1875		       02		      .byte.b	2
   2694  1876
   2695  1876		       07 0b		      .byte.b	7,11
   2696  1878
   2697  1878		       08 0a		      .byte.b	8,10
   2698  187a
   2699  187a		       04		      .byte.b	4
   2700  187b
   2701  187b		       01 0b		      .byte.b	1,11
   2702  187d
   2703  187d		       08 0a		      .byte.b	8,10
   2704  187f
   2705  187f		       02		      .byte.b	2
   2706  1880
   2707  1880		       07 0b		      .byte.b	7,11
   2708  1882
   2709  1882		       08 0a		      .byte.b	8,10
   2710  1884
   2711  1884		       04		      .byte.b	4
   2712  1885
   2713  1885		       01 0b		      .byte.b	1,11
   2714  1887
   2715  1887		       08 0a		      .byte.b	8,10
   2716  1889
   2717  1889		       02		      .byte.b	2
   2718  188a
   2719  188a		       07 0b		      .byte.b	7,11
   2720  188c
   2721  188c		       08 0a		      .byte.b	8,10
   2722  188e
   2723  188e		       04		      .byte.b	4
   2724  188f
   2725  188f		       01 0b		      .byte.b	1,11
   2726  1891
   2727  1891		       08 0a		      .byte.b	8,10
   2728  1893
   2729  1893		       02		      .byte.b	2
   2730  1894
   2731  1894		       07 0b		      .byte.b	7,11
   2732  1896
   2733  1896		       08 0c		      .byte.b	8,12
   2734  1898
   2735  1898		       04		      .byte.b	4
   2736  1899
   2737  1899		       01 0b		      .byte.b	1,11
   2738  189b
   2739  189b		       08 0c		      .byte.b	8,12
   2740  189d
   2741  189d		       02		      .byte.b	2
   2742  189e
   2743  189e		       07 0b		      .byte.b	7,11
   2744  18a0
   2745  18a0		       08 0c		      .byte.b	8,12
   2746  18a2
   2747  18a2		       04		      .byte.b	4
   2748  18a3
   2749  18a3		       01 0b		      .byte.b	1,11
   2750  18a5
   2751  18a5		       08 0c		      .byte.b	8,12
   2752  18a7
   2753  18a7		       02		      .byte.b	2
   2754  18a8
   2755  18a8		       07 0b		      .byte.b	7,11
   2756  18aa
   2757  18aa		       08 0c		      .byte.b	8,12
   2758  18ac
   2759  18ac		       04		      .byte.b	4
   2760  18ad
   2761  18ad		       01 0b		      .byte.b	1,11
   2762  18af
   2763  18af		       08 0c		      .byte.b	8,12
   2764  18b1
   2765  18b1		       02		      .byte.b	2
   2766  18b2
   2767  18b2		       07 0b		      .byte.b	7,11
   2768  18b4
   2769  18b4		       08 0c		      .byte.b	8,12
   2770  18b6
   2771  18b6		       04		      .byte.b	4
   2772  18b7
   2773  18b7		       01 0b		      .byte.b	1,11
   2774  18b9
   2775  18b9		       08 0c		      .byte.b	8,12
   2776  18bb
   2777  18bb		       02		      .byte.b	2
   2778  18bc
   2779  18bc		       07 0b		      .byte.b	7,11
   2780  18be
   2781  18be		       08 0b		      .byte.b	8,11
   2782  18c0
   2783  18c0		       04		      .byte.b	4
   2784  18c1
   2785  18c1		       01 0b		      .byte.b	1,11
   2786  18c3
   2787  18c3		       08 0b		      .byte.b	8,11
   2788  18c5
   2789  18c5		       02		      .byte.b	2
   2790  18c6
   2791  18c6		       07 0b		      .byte.b	7,11
   2792  18c8
   2793  18c8		       08 0b		      .byte.b	8,11
   2794  18ca
   2795  18ca		       04		      .byte.b	4
   2796  18cb
   2797  18cb		       01 0b		      .byte.b	1,11
   2798  18cd
   2799  18cd		       08 0b		      .byte.b	8,11
   2800  18cf
   2801  18cf		       02		      .byte.b	2
   2802  18d0
   2803  18d0		       07 0b		      .byte.b	7,11
   2804  18d2
   2805  18d2		       08 0b		      .byte.b	8,11
   2806  18d4
   2807  18d4		       04		      .byte.b	4
   2808  18d5
   2809  18d5		       01 0b		      .byte.b	1,11
   2810  18d7
   2811  18d7		       08 0b		      .byte.b	8,11
   2812  18d9
   2813  18d9		       02		      .byte.b	2
   2814  18da
   2815  18da		       07 0b		      .byte.b	7,11
   2816  18dc
   2817  18dc		       08 0b		      .byte.b	8,11
   2818  18de
   2819  18de		       04		      .byte.b	4
   2820  18df
   2821  18df		       01 0b		      .byte.b	1,11
   2822  18e1
   2823  18e1		       08 0b		      .byte.b	8,11
   2824  18e3
   2825  18e3		       02		      .byte.b	2
   2826  18e4
   2827  18e4		       07 0b		      .byte.b	7,11
   2828  18e6
   2829  18e6		       08 10		      .byte.b	8,16
   2830  18e8
   2831  18e8		       04		      .byte.b	4
   2832  18e9
   2833  18e9		       01 0b		      .byte.b	1,11
   2834  18eb
   2835  18eb		       08 10		      .byte.b	8,16
   2836  18ed
   2837  18ed		       02		      .byte.b	2
   2838  18ee
   2839  18ee		       07 0b		      .byte.b	7,11
   2840  18f0
   2841  18f0		       08 10		      .byte.b	8,16
   2842  18f2
   2843  18f2		       04		      .byte.b	4
   2844  18f3
   2845  18f3		       01 0b		      .byte.b	1,11
   2846  18f5
   2847  18f5		       08 10		      .byte.b	8,16
   2848  18f7
   2849  18f7		       02		      .byte.b	2
   2850  18f8
   2851  18f8		       07 0b		      .byte.b	7,11
   2852  18fa
   2853  18fa		       08 10		      .byte.b	8,16
   2854  18fc
   2855  18fc		       04		      .byte.b	4
   2856  18fd
   2857  18fd		       01 0b		      .byte.b	1,11
   2858  18ff
   2859  18ff		       08 10		      .byte.b	8,16
   2860  1901
   2861  1901		       02		      .byte.b	2
   2862  1902
   2863  1902		       07 0b		      .byte.b	7,11
   2864  1904
   2865  1904		       08 10		      .byte.b	8,16
   2866  1906
   2867  1906		       04		      .byte.b	4
   2868  1907
   2869  1907		       01 0b		      .byte.b	1,11
   2870  1909
   2871  1909		       08 10		      .byte.b	8,16
   2872  190b
   2873  190b		       02		      .byte.b	2
   2874  190c
   2875  190c		       07 0b		      .byte.b	7,11
   2876  190e
   2877  190e		       08 0f		      .byte.b	8,15
   2878  1910
   2879  1910		       04		      .byte.b	4
   2880  1911
   2881  1911		       01 0b		      .byte.b	1,11
   2882  1913
   2883  1913		       08 0f		      .byte.b	8,15
   2884  1915
   2885  1915		       02		      .byte.b	2
   2886  1916
   2887  1916		       07 0b		      .byte.b	7,11
   2888  1918
   2889  1918		       08 0f		      .byte.b	8,15
   2890  191a
   2891  191a		       04		      .byte.b	4
   2892  191b
   2893  191b		       01 0b		      .byte.b	1,11
   2894  191d
   2895  191d		       08 0f		      .byte.b	8,15
   2896  191f
   2897  191f		       02		      .byte.b	2
   2898  1920
   2899  1920		       07 0b		      .byte.b	7,11
   2900  1922
   2901  1922		       08 0f		      .byte.b	8,15
   2902  1924
   2903  1924		       04		      .byte.b	4
   2904  1925
   2905  1925		       01 0b		      .byte.b	1,11
   2906  1927
   2907  1927		       08 0f		      .byte.b	8,15
   2908  1929
   2909  1929		       02		      .byte.b	2
   2910  192a
   2911  192a		       07 0b		      .byte.b	7,11
   2912  192c
   2913  192c		       08 0f		      .byte.b	8,15
   2914  192e
   2915  192e		       04		      .byte.b	4
   2916  192f
   2917  192f		       01 0b		      .byte.b	1,11
   2918  1931
   2919  1931		       08 0f		      .byte.b	8,15
   2920  1933
   2921  1933		       02		      .byte.b	2
   2922  1934
   2923  1934		       07 0d		      .byte.b	7,13
   2924  1936
   2925  1936		       08 10		      .byte.b	8,16
   2926  1938
   2927  1938		       04		      .byte.b	4
   2928  1939
   2929  1939		       01 0d		      .byte.b	1,13
   2930  193b
   2931  193b		       08 10		      .byte.b	8,16
   2932  193d
   2933  193d		       02		      .byte.b	2
   2934  193e
   2935  193e		       07 0d		      .byte.b	7,13
   2936  1940
   2937  1940		       08 10		      .byte.b	8,16
   2938  1942
   2939  1942		       04		      .byte.b	4
   2940  1943
   2941  1943		       01 0d		      .byte.b	1,13
   2942  1945
   2943  1945		       08 10		      .byte.b	8,16
   2944  1947
   2945  1947		       02		      .byte.b	2
   2946  1948
   2947  1948		       07 0d		      .byte.b	7,13
   2948  194a
   2949  194a		       08 10		      .byte.b	8,16
   2950  194c
   2951  194c		       04		      .byte.b	4
   2952  194d
   2953  194d		       01 0d		      .byte.b	1,13
   2954  194f
   2955  194f		       08 10		      .byte.b	8,16
   2956  1951
   2957  1951		       02		      .byte.b	2
   2958  1952
   2959  1952		       07 0d		      .byte.b	7,13
   2960  1954
   2961  1954		       08 10		      .byte.b	8,16
   2962  1956
   2963  1956		       04		      .byte.b	4
   2964  1957
   2965  1957		       01 0d		      .byte.b	1,13
   2966  1959
   2967  1959		       08 10		      .byte.b	8,16
   2968  195b
   2969  195b		       02		      .byte.b	2
   2970  195c
   2971  195c		       07 0b		      .byte.b	7,11
   2972  195e
   2973  195e		       00		      .byte.b	0
   2974  195f
   2975  195f		       04		      .byte.b	4
   2976  1960
   2977  1960		       01 0b		      .byte.b	1,11
   2978  1962
   2979  1962		       00		      .byte.b	0
   2980  1963
   2981  1963		       02		      .byte.b	2
   2982  1964
   2983  1964		       07 0b		      .byte.b	7,11
   2984  1966
   2985  1966		       00		      .byte.b	0
   2986  1967
   2987  1967		       04		      .byte.b	4
   2988  1968
   2989  1968		       01 0b		      .byte.b	1,11
   2990  196a
   2991  196a		       00		      .byte.b	0
   2992  196b
   2993  196b		       02		      .byte.b	2
   2994  196c
   2995  196c		       07 0b		      .byte.b	7,11
   2996  196e
   2997  196e		       00		      .byte.b	0
   2998  196f
   2999  196f		       04		      .byte.b	4
   3000  1970
   3001  1970		       01 0b		      .byte.b	1,11
   3002  1972
   3003  1972		       00		      .byte.b	0
   3004  1973
   3005  1973		       02		      .byte.b	2
   3006  1974
   3007  1974		       07 0b		      .byte.b	7,11
   3008  1976
   3009  1976		       00		      .byte.b	0
   3010  1977
   3011  1977		       04		      .byte.b	4
   3012  1978
   3013  1978		       01 0b		      .byte.b	1,11
   3014  197a
   3015  197a		       00		      .byte.b	0
   3016  197b
   3017  197b		       02		      .byte.b	2
   3018  197c
   3019  197c		       07 0b		      .byte.b	7,11
   3020  197e
   3021  197e		       08 0b		      .byte.b	8,11
   3022  1980
   3023  1980		       04		      .byte.b	4
   3024  1981
   3025  1981		       01 0b		      .byte.b	1,11
   3026  1983
   3027  1983		       08 0b		      .byte.b	8,11
   3028  1985
   3029  1985		       02		      .byte.b	2
   3030  1986
   3031  1986		       07 0b		      .byte.b	7,11
   3032  1988
   3033  1988		       08 0b		      .byte.b	8,11
   3034  198a
   3035  198a		       04		      .byte.b	4
   3036  198b
   3037  198b		       01 0b		      .byte.b	1,11
   3038  198d
   3039  198d		       08 0b		      .byte.b	8,11
   3040  198f
   3041  198f		       02		      .byte.b	2
   3042  1990
   3043  1990		       07 0b		      .byte.b	7,11
   3044  1992
   3045  1992		       08 0b		      .byte.b	8,11
   3046  1994
   3047  1994		       04		      .byte.b	4
   3048  1995
   3049  1995		       01 0b		      .byte.b	1,11
   3050  1997
   3051  1997		       08 0b		      .byte.b	8,11
   3052  1999
   3053  1999		       02		      .byte.b	2
   3054  199a
   3055  199a		       07 0b		      .byte.b	7,11
   3056  199c
   3057  199c		       08 0b		      .byte.b	8,11
   3058  199e
   3059  199e		       04		      .byte.b	4
   3060  199f
   3061  199f		       01 0b		      .byte.b	1,11
   3062  19a1
   3063  19a1		       08 0b		      .byte.b	8,11
   3064  19a3
   3065  19a3		       02		      .byte.b	2
   3066  19a4
   3067  19a4		       07 0b		      .byte.b	7,11
   3068  19a6
   3069  19a6		       08 0a		      .byte.b	8,10
   3070  19a8
   3071  19a8		       04		      .byte.b	4
   3072  19a9
   3073  19a9		       01 0b		      .byte.b	1,11
   3074  19ab
   3075  19ab		       08 0a		      .byte.b	8,10
   3076  19ad
   3077  19ad		       02		      .byte.b	2
   3078  19ae
   3079  19ae		       07 0b		      .byte.b	7,11
   3080  19b0
   3081  19b0		       08 0a		      .byte.b	8,10
   3082  19b2
   3083  19b2		       04		      .byte.b	4
   3084  19b3
   3085  19b3		       01 0b		      .byte.b	1,11
   3086  19b5
   3087  19b5		       08 0a		      .byte.b	8,10
   3088  19b7
   3089  19b7		       02		      .byte.b	2
   3090  19b8
   3091  19b8		       07 0b		      .byte.b	7,11
   3092  19ba
   3093  19ba		       08 0a		      .byte.b	8,10
   3094  19bc
   3095  19bc		       04		      .byte.b	4
   3096  19bd
   3097  19bd		       01 0b		      .byte.b	1,11
   3098  19bf
   3099  19bf		       08 0a		      .byte.b	8,10
   3100  19c1
   3101  19c1		       02		      .byte.b	2
   3102  19c2
   3103  19c2		       07 0b		      .byte.b	7,11
   3104  19c4
   3105  19c4		       08 0a		      .byte.b	8,10
   3106  19c6
   3107  19c6		       04		      .byte.b	4
   3108  19c7
   3109  19c7		       01 0b		      .byte.b	1,11
   3110  19c9
   3111  19c9		       08 0a		      .byte.b	8,10
   3112  19cb
   3113  19cb		       02		      .byte.b	2
   3114  19cc
   3115  19cc		       07 0b		      .byte.b	7,11
   3116  19ce
   3117  19ce		       08 0c		      .byte.b	8,12
   3118  19d0
   3119  19d0		       04		      .byte.b	4
   3120  19d1
   3121  19d1		       01 0b		      .byte.b	1,11
   3122  19d3
   3123  19d3		       08 0c		      .byte.b	8,12
   3124  19d5
   3125  19d5		       02		      .byte.b	2
   3126  19d6
   3127  19d6		       07 0b		      .byte.b	7,11
   3128  19d8
   3129  19d8		       08 0c		      .byte.b	8,12
   3130  19da
   3131  19da		       04		      .byte.b	4
   3132  19db
   3133  19db		       01 0b		      .byte.b	1,11
   3134  19dd
   3135  19dd		       08 0c		      .byte.b	8,12
   3136  19df
   3137  19df		       02		      .byte.b	2
   3138  19e0
   3139  19e0		       07 0b		      .byte.b	7,11
   3140  19e2
   3141  19e2		       08 0c		      .byte.b	8,12
   3142  19e4
   3143  19e4		       04		      .byte.b	4
   3144  19e5
   3145  19e5		       01 0b		      .byte.b	1,11
   3146  19e7
   3147  19e7		       08 0c		      .byte.b	8,12
   3148  19e9
   3149  19e9		       02		      .byte.b	2
   3150  19ea
   3151  19ea		       07 0b		      .byte.b	7,11
   3152  19ec
   3153  19ec		       08 0c		      .byte.b	8,12
   3154  19ee
   3155  19ee		       04		      .byte.b	4
   3156  19ef
   3157  19ef		       01 0b		      .byte.b	1,11
   3158  19f1
   3159  19f1		       08 0c		      .byte.b	8,12
   3160  19f3
   3161  19f3		       02		      .byte.b	2
   3162  19f4
   3163  19f4		       07 0b		      .byte.b	7,11
   3164  19f6
   3165  19f6		       08 0b		      .byte.b	8,11
   3166  19f8
   3167  19f8		       04		      .byte.b	4
   3168  19f9
   3169  19f9		       01 0b		      .byte.b	1,11
   3170  19fb
   3171  19fb		       08 0b		      .byte.b	8,11
   3172  19fd
   3173  19fd		       02		      .byte.b	2
   3174  19fe
   3175  19fe		       07 0b		      .byte.b	7,11
   3176  1a00
   3177  1a00		       08 0b		      .byte.b	8,11
   3178  1a02
   3179  1a02		       04		      .byte.b	4
   3180  1a03
   3181  1a03		       01 0b		      .byte.b	1,11
   3182  1a05
   3183  1a05		       08 0b		      .byte.b	8,11
   3184  1a07
   3185  1a07		       02		      .byte.b	2
   3186  1a08
   3187  1a08		       07 0b		      .byte.b	7,11
   3188  1a0a
   3189  1a0a		       08 0b		      .byte.b	8,11
   3190  1a0c
   3191  1a0c		       04		      .byte.b	4
   3192  1a0d
   3193  1a0d		       01 0b		      .byte.b	1,11
   3194  1a0f
   3195  1a0f		       08 0b		      .byte.b	8,11
   3196  1a11
   3197  1a11		       02		      .byte.b	2
   3198  1a12
   3199  1a12		       07 0b		      .byte.b	7,11
   3200  1a14
   3201  1a14		       08 0b		      .byte.b	8,11
   3202  1a16
   3203  1a16		       04		      .byte.b	4
   3204  1a17
   3205  1a17		       01 0b		      .byte.b	1,11
   3206  1a19
   3207  1a19		       08 0b		      .byte.b	8,11
   3208  1a1b
   3209  1a1b		       02		      .byte.b	2
   3210  1a1c
   3211  1a1c		       07 0b		      .byte.b	7,11
   3212  1a1e
   3213  1a1e		       08 10		      .byte.b	8,16
   3214  1a20
   3215  1a20		       04		      .byte.b	4
   3216  1a21
   3217  1a21		       01 0b		      .byte.b	1,11
   3218  1a23
   3219  1a23		       08 10		      .byte.b	8,16
   3220  1a25
   3221  1a25		       02		      .byte.b	2
   3222  1a26
   3223  1a26		       07 0b		      .byte.b	7,11
   3224  1a28
   3225  1a28		       08 10		      .byte.b	8,16
   3226  1a2a
   3227  1a2a		       04		      .byte.b	4
   3228  1a2b
   3229  1a2b		       01 0b		      .byte.b	1,11
   3230  1a2d
   3231  1a2d		       08 10		      .byte.b	8,16
   3232  1a2f
   3233  1a2f		       02		      .byte.b	2
   3234  1a30
   3235  1a30		       07 0b		      .byte.b	7,11
   3236  1a32
   3237  1a32		       08 10		      .byte.b	8,16
   3238  1a34
   3239  1a34		       04		      .byte.b	4
   3240  1a35
   3241  1a35		       01 0b		      .byte.b	1,11
   3242  1a37
   3243  1a37		       08 10		      .byte.b	8,16
   3244  1a39
   3245  1a39		       02		      .byte.b	2
   3246  1a3a
   3247  1a3a		       07 0b		      .byte.b	7,11
   3248  1a3c
   3249  1a3c		       08 10		      .byte.b	8,16
   3250  1a3e
   3251  1a3e		       04		      .byte.b	4
   3252  1a3f
   3253  1a3f		       01 0b		      .byte.b	1,11
   3254  1a41
   3255  1a41		       08 10		      .byte.b	8,16
   3256  1a43
   3257  1a43		       02		      .byte.b	2
   3258  1a44
   3259  1a44		       07 0b		      .byte.b	7,11
   3260  1a46
   3261  1a46		       08 14		      .byte.b	8,20
   3262  1a48
   3263  1a48		       04		      .byte.b	4
   3264  1a49
   3265  1a49		       01 0b		      .byte.b	1,11
   3266  1a4b
   3267  1a4b		       08 14		      .byte.b	8,20
   3268  1a4d
   3269  1a4d		       02		      .byte.b	2
   3270  1a4e
   3271  1a4e		       07 0b		      .byte.b	7,11
   3272  1a50
   3273  1a50		       08 14		      .byte.b	8,20
   3274  1a52
   3275  1a52		       04		      .byte.b	4
   3276  1a53
   3277  1a53		       01 0b		      .byte.b	1,11
   3278  1a55
   3279  1a55		       08 14		      .byte.b	8,20
   3280  1a57
   3281  1a57		       02		      .byte.b	2
   3282  1a58
   3283  1a58		       07 0b		      .byte.b	7,11
   3284  1a5a
   3285  1a5a		       08 14		      .byte.b	8,20
   3286  1a5c
   3287  1a5c		       04		      .byte.b	4
   3288  1a5d
   3289  1a5d		       01 0b		      .byte.b	1,11
   3290  1a5f
   3291  1a5f		       08 14		      .byte.b	8,20
   3292  1a61
   3293  1a61		       02		      .byte.b	2
   3294  1a62
   3295  1a62		       07 0b		      .byte.b	7,11
   3296  1a64
   3297  1a64		       08 14		      .byte.b	8,20
   3298  1a66
   3299  1a66		       04		      .byte.b	4
   3300  1a67
   3301  1a67		       01 0b		      .byte.b	1,11
   3302  1a69
   3303  1a69		       08 14		      .byte.b	8,20
   3304  1a6b
   3305  1a6b		       02		      .byte.b	2
   3306  1a6c
   3307  1a6c		       07 0d		      .byte.b	7,13
   3308  1a6e
   3309  1a6e		       08 17		      .byte.b	8,23
   3310  1a70
   3311  1a70		       04		      .byte.b	4
   3312  1a71
   3313  1a71		       01 0d		      .byte.b	1,13
   3314  1a73
   3315  1a73		       08 17		      .byte.b	8,23
   3316  1a75
   3317  1a75		       02		      .byte.b	2
   3318  1a76
   3319  1a76		       07 0d		      .byte.b	7,13
   3320  1a78
   3321  1a78		       08 17		      .byte.b	8,23
   3322  1a7a
   3323  1a7a		       04		      .byte.b	4
   3324  1a7b
   3325  1a7b		       01 0d		      .byte.b	1,13
   3326  1a7d
   3327  1a7d		       08 17		      .byte.b	8,23
   3328  1a7f
   3329  1a7f		       02		      .byte.b	2
   3330  1a80
   3331  1a80		       07 0d		      .byte.b	7,13
   3332  1a82
   3333  1a82		       08 17		      .byte.b	8,23
   3334  1a84
   3335  1a84		       04		      .byte.b	4
   3336  1a85
   3337  1a85		       01 0d		      .byte.b	1,13
   3338  1a87
   3339  1a87		       08 17		      .byte.b	8,23
   3340  1a89
   3341  1a89		       02		      .byte.b	2
   3342  1a8a
   3343  1a8a		       07 0d		      .byte.b	7,13
   3344  1a8c
   3345  1a8c		       08 17		      .byte.b	8,23
   3346  1a8e
   3347  1a8e		       04		      .byte.b	4
   3348  1a8f
   3349  1a8f		       01 0d		      .byte.b	1,13
   3350  1a91
   3351  1a91		       08 17		      .byte.b	8,23
   3352  1a93
   3353  1a93		       02		      .byte.b	2
   3354  1a94
   3355  1a94		       08 1c		      .byte.b	8,28
   3356  1a96
   3357  1a96		       07 0d		      .byte.b	7,13
   3358  1a98
   3359  1a98		       18		      .byte.b	24
   3360  1a99
   3361  1a99		       08 0c		      .byte.b	8,12
   3362  1a9b
   3363  1a9b		       07 05		      .byte.b	7,5
   3364  1a9d
   3365  1a9d		       18		      .byte.b	24
   3366  1a9e
   3367  1a9e		       08 0d		      .byte.b	8,13
   3368  1aa0
   3369  1aa0		       07 06		      .byte.b	7,6
   3370  1aa2
   3371  1aa2		       18		      .byte.b	24
   3372  1aa3
   3373  1aa3		       08 1c		      .byte.b	8,28
   3374  1aa5
   3375  1aa5		       07 0d		      .byte.b	7,13
   3376  1aa7
   3377  1aa7		       18		      .byte.b	24
   3378  1aa8
   3379  1aa8		       08 0c		      .byte.b	8,12
   3380  1aaa
   3381  1aaa		       07 04		      .byte.b	7,4
   3382  1aac
   3383  1aac		       18		      .byte.b	24
   3384  1aad
   3385  1aad		       08 0d		      .byte.b	8,13
   3386  1aaf
   3387  1aaf		       07 05		      .byte.b	7,5
   3388  1ab1
   3389  1ab1		       18		      .byte.b	24
   3390  1ab2
   3391  1ab2		       08 1c		      .byte.b	8,28
   3392  1ab4
   3393  1ab4		       07 0d		      .byte.b	7,13
   3394  1ab6
   3395  1ab6		       18		      .byte.b	24
   3396  1ab7
   3397  1ab7		       08 0c		      .byte.b	8,12
   3398  1ab9
   3399  1ab9		       07 05		      .byte.b	7,5
   3400  1abb
   3401  1abb		       18		      .byte.b	24
   3402  1abc
   3403  1abc		       08 1c		      .byte.b	8,28
   3404  1abe
   3405  1abe		       07 0d		      .byte.b	7,13
   3406  1ac0
   3407  1ac0		       18		      .byte.b	24
   3408  1ac1
   3409  1ac1		       08 0c		      .byte.b	8,12
   3410  1ac3
   3411  1ac3		       07 05		      .byte.b	7,5
   3412  1ac5
   3413  1ac5		       18		      .byte.b	24
   3414  1ac6
   3415  1ac6		       08 0d		      .byte.b	8,13
   3416  1ac8
   3417  1ac8		       07 06		      .byte.b	7,6
   3418  1aca
   3419  1aca		       18		      .byte.b	24
   3420  1acb
   3421  1acb		       08 1c		      .byte.b	8,28
   3422  1acd
   3423  1acd		       07 0d		      .byte.b	7,13
   3424  1acf
   3425  1acf		       18		      .byte.b	24
   3426  1ad0
   3427  1ad0		       08 0b		      .byte.b	8,11
   3428  1ad2
   3429  1ad2		       07 04		      .byte.b	7,4
   3430  1ad4
   3431  1ad4		       18		      .byte.b	24
   3432  1ad5
   3433  1ad5		       08 0c		      .byte.b	8,12
   3434  1ad7
   3435  1ad7		       07 05		      .byte.b	7,5
   3436  1ad9
   3437  1ad9		       18		      .byte.b	24
   3438  1ada
   3439  1ada		       08 0b		      .byte.b	8,11
   3440  1adc
   3441  1adc		       07 04		      .byte.b	7,4
   3442  1ade
   3443  1ade		       0c		      .byte.b	12
   3444  1adf
   3445  1adf		       08 0c		      .byte.b	8,12
   3446  1ae1
   3447  1ae1		       07 05		      .byte.b	7,5
   3448  1ae3
   3449  1ae3		       0c		      .byte.b	12
   3450  1ae4
   3451  1ae4		       08 1c		      .byte.b	8,28
   3452  1ae6
   3453  1ae6		       07 0d		      .byte.b	7,13
   3454  1ae8
   3455  1ae8		       18		      .byte.b	24
   3456  1ae9
   3457  1ae9		       08 0c		      .byte.b	8,12
   3458  1aeb
   3459  1aeb		       07 05		      .byte.b	7,5
   3460  1aed
   3461  1aed		       18		      .byte.b	24
   3462  1aee
   3463  1aee		       08 0d		      .byte.b	8,13
   3464  1af0
   3465  1af0		       07 06		      .byte.b	7,6
   3466  1af2
   3467  1af2		       18		      .byte.b	24
   3468  1af3
   3469  1af3		       08 1c		      .byte.b	8,28
   3470  1af5
   3471  1af5		       07 0d		      .byte.b	7,13
   3472  1af7
   3473  1af7		       18		      .byte.b	24
   3474  1af8
   3475  1af8		       08 0c		      .byte.b	8,12
   3476  1afa
   3477  1afa		       07 04		      .byte.b	7,4
   3478  1afc
   3479  1afc		       18		      .byte.b	24
   3480  1afd
   3481  1afd		       08 0d		      .byte.b	8,13
   3482  1aff
   3483  1aff		       07 05		      .byte.b	7,5
   3484  1b01
   3485  1b01		       18		      .byte.b	24
   3486  1b02
   3487  1b02		       08 1c		      .byte.b	8,28
   3488  1b04
   3489  1b04		       07 0d		      .byte.b	7,13
   3490  1b06
   3491  1b06		       18		      .byte.b	24
   3492  1b07
   3493  1b07		       08 0c		      .byte.b	8,12
   3494  1b09
   3495  1b09		       07 05		      .byte.b	7,5
   3496  1b0b
   3497  1b0b		       18		      .byte.b	24
   3498  1b0c
   3499  1b0c		       08 1c		      .byte.b	8,28
   3500  1b0e
   3501  1b0e		       07 0d		      .byte.b	7,13
   3502  1b10
   3503  1b10		       18		      .byte.b	24
   3504  1b11
   3505  1b11		       08 0c		      .byte.b	8,12
   3506  1b13
   3507  1b13		       07 05		      .byte.b	7,5
   3508  1b15
   3509  1b15		       18		      .byte.b	24
   3510  1b16
   3511  1b16		       08 0d		      .byte.b	8,13
   3512  1b18
   3513  1b18		       07 06		      .byte.b	7,6
   3514  1b1a
   3515  1b1a		       18		      .byte.b	24
   3516  1b1b
   3517  1b1b		       08 1c		      .byte.b	8,28
   3518  1b1d
   3519  1b1d		       07 0d		      .byte.b	7,13
   3520  1b1f
   3521  1b1f		       18		      .byte.b	24
   3522  1b20
   3523  1b20		       08 0b		      .byte.b	8,11
   3524  1b22
   3525  1b22		       07 04		      .byte.b	7,4
   3526  1b24
   3527  1b24		       18		      .byte.b	24
   3528  1b25
   3529  1b25		       08 0c		      .byte.b	8,12
   3530  1b27
   3531  1b27		       07 05		      .byte.b	7,5
   3532  1b29
   3533  1b29		       18		      .byte.b	24
   3534  1b2a
   3535  1b2a		       08 0b		      .byte.b	8,11
   3536  1b2c
   3537  1b2c		       07 04		      .byte.b	7,4
   3538  1b2e
   3539  1b2e		       0c		      .byte.b	12
   3540  1b2f
   3541  1b2f		       08 0c		      .byte.b	8,12
   3542  1b31
   3543  1b31		       07 05		      .byte.b	7,5
   3544  1b33
   3545  1b33		       0c		      .byte.b	12
   3546  1b34
   3547  1b34		       08 0d		      .byte.b	8,13
   3548  1b36
   3549  1b36		       07 06		      .byte.b	7,6
   3550  1b38
   3551  1b38		       18		      .byte.b	24
   3552  1b39
   3553  1b39		       08 0b		      .byte.b	8,11
   3554  1b3b
   3555  1b3b		       07 04		      .byte.b	7,4
   3556  1b3d
   3557  1b3d		       18		      .byte.b	24
   3558  1b3e
   3559  1b3e		       08 0c		      .byte.b	8,12
   3560  1b40
   3561  1b40		       07 05		      .byte.b	7,5
   3562  1b42
   3563  1b42		       18		      .byte.b	24
   3564  1b43
   3565  1b43		       08 0b		      .byte.b	8,11
   3566  1b45
   3567  1b45		       07 04		      .byte.b	7,4
   3568  1b47
   3569  1b47		       0c		      .byte.b	12
   3570  1b48
   3571  1b48		       08 0c		      .byte.b	8,12
   3572  1b4a
   3573  1b4a		       07 05		      .byte.b	7,5
   3574  1b4c
   3575  1b4c		       0c		      .byte.b	12
   3576  1b4d
   3577  1b4d		       ff		      .byte.b	255
   3578  1b4e
   3579  1b4e				   .skipL090
   3580  1b4e				   .L091		;  if !e{4} then goto test
   3581  1b4e
   3582  1b4e		       a5 db		      LDA	e
   3583  1b50		       29 10		      AND	#16
   3584  1b52		       d0 03		      BNE	.skipL091
   3585  1b54				   .condpart33
   3586  1b54		       4c 31 10 	      jmp	.test
   3587  1b57
   3588  1b57				   .skipL091
   3589  1b57				   .
   3590  1b57							; 
   3591  1b57
   3592  1b57				   .Main_Menu
   3593  1b57							; Main_Menu
   3594  1b57
   3595  1b57				   .L092		;  w{0} = 0
   3596  1b57
   3597  1b57		       a5 ed		      LDA	w
   3598  1b59		       29 fe		      AND	#254
   3599  1b5b		       85 ed		      STA	w
   3600  1b5d				   .
   3601  1b5d							; 
   3602  1b5d
   3603  1b5d				   .L093		;  playfield:
   3604  1b5d
   3605  1b5d		       a9 de		      LDA	#<PF1_data0
   3606  1b5f		       85 bb		      STA	PF1pointer
   3607  1b61		       a9 fc		      LDA	#>PF1_data0
   3608  1b63		       85 bc		      STA	PF1pointer+1
   3609  1b65		       a9 00		      LDA	#<PF2_data0
   3610  1b67		       85 bd		      STA	PF2pointer
   3611  1b69		       a9 fd		      LDA	#>PF2_data0
   3612  1b6b		       85 be		      STA	PF2pointer+1
   3613  1b6d				   .L094		;  CTRLPF = $03 :  player0y = 160 :  player1y = 160 :	player2y = 160 :  player3y = 0 :  player4y = 160 :  player5y = 160
   3614  1b6d
   3615  1b6d		       a9 03		      LDA	#$03
   3616  1b6f		       85 0a		      STA	CTRLPF
   3617  1b71		       a9 a0		      LDA	#160
   3618  1b73		       85 8d		      STA	player0y
   3619  1b75		       85 8e		      STA	player1y
   3620  1b77		       85 8f		      STA	player2y
   3621  1b79		       a9 00		      LDA	#0
   3622  1b7b		       85 90		      STA	player3y
   3623  1b7d		       a9 a0		      LDA	#160
   3624  1b7f		       85 91		      STA	player4y
   3625  1b81		       85 92		      STA	player5y
   3626  1b83				   .
   3627  1b83							; 
   3628  1b83
   3629  1b83				   .L095		;  asm
   3630  1b83
   3631  1b83		       a9 0e		      lda	#$0e
   3632  1b85
   3633  1b85		       85 06		      sta	COLUP0
   3634  1b87
   3635  1b87		       85 08		      sta	COLUPF
   3636  1b89
   3637  1b89		       a9 00		      lda	#0
   3638  1b8b
   3639  1b8b		       85 07		      sta	COLUP1
   3640  1b8d
   3641  1b8d		       85 98		      sta	_COLUP1
   3642  1b8f
   3643  1b8f		       85 99		      sta	COLUP2
   3644  1b91
   3645  1b91		       85 9a		      sta	COLUP3
   3646  1b93
   3647  1b93		       85 9b		      sta	COLUP4
   3648  1b95
   3649  1b95		       85 9c		      sta	COLUP5
   3650  1b97
   3651  1b97
   3652  1b97
   3653  1b97				   .Dontdoit
   3654  1b97							; Dontdoit
   3655  1b97
   3656  1b97				   .L096		;  missile0y =  160 :	missile1y = 160 :  player0y = 120
   3657  1b97
   3658  1b97		       a9 a0		      LDA	#160
   3659  1b99		       85 8a		      STA	missile0y
   3660  1b9b		       85 8b		      STA	missile1y
   3661  1b9d		       a9 78		      LDA	#120
   3662  1b9f		       85 8d		      STA	player0y
   3663  1ba1				   .L097		;  playfieldpos = 8
   3664  1ba1
   3665  1ba1		       a9 08		      LDA	#8
   3666  1ba3		       85 c3		      STA	playfieldpos
   3667  1ba5				   .L098		;  if !e{5}  &&  back > $00 then back = back - $01
   3668  1ba5
   3669  1ba5		       a5 db		      LDA	e
   3670  1ba7		       29 20		      AND	#32
   3671  1ba9		       d0 0d		      BNE	.skipL098
   3672  1bab				   .condpart34
   3673  1bab		       a9 00		      LDA	#$00
   3674  1bad		       c5 de		      CMP	back
   3675  1baf		       b0 07		      BCS	.skip34then
   3676  1bb1				   .condpart35
   3677  1bb1		       a5 de		      LDA	back
   3678  1bb3		       38		      SEC
   3679  1bb4		       e9 01		      SBC	#$01
   3680  1bb6		       85 de		      STA	back
   3681  1bb8				   .skip34then
   3682  1bb8				   .skipL098
   3683  1bb8				   .L099		;  if e{5}  &&  back < $0e then back = back + $01
   3684  1bb8
   3685  1bb8		       a5 db		      LDA	e
   3686  1bba		       29 20		      AND	#32
   3687  1bbc		       f0 0d		      BEQ	.skipL099
   3688  1bbe				   .condpart36
   3689  1bbe		       a5 de		      LDA	back
   3690  1bc0		       c9 0e		      CMP	#$0e
   3691  1bc2		       b0 07		      BCS	.skip36then
   3692  1bc4				   .condpart37
   3693  1bc4		       a5 de		      LDA	back
   3694  1bc6		       18		      CLC
   3695  1bc7		       69 01		      ADC	#$01
   3696  1bc9		       85 de		      STA	back
   3697  1bcb				   .skip36then
   3698  1bcb				   .skipL099
   3699  1bcb				   .L0100		;  COLUBK = back
   3700  1bcb
   3701  1bcb		       a5 de		      LDA	back
   3702  1bcd		       85 09		      STA	COLUBK
   3703  1bcf				   .L0101		;  player0scorecolor = $08
   3704  1bcf
   3705  1bcf		       a9 08		      LDA	#$08
   3706  1bd1		       85 c0		      STA	player0scorecolor
   3707  1bd3				   .L0102		;  player1scorecolor = $08
   3708  1bd3
   3709  1bd3		       a9 08		      LDA	#$08
   3710  1bd5		       85 bf		      STA	player1scorecolor
   3711  1bd7				   .L0103		;  player2scorecolor = $08
   3712  1bd7
   3713  1bd7		       a9 08		      LDA	#$08
   3714  1bd9		       85 d4		      STA	player2scorecolor
   3715  1bdb				   .L0104		;  player3scorecolor = $08
   3716  1bdb
   3717  1bdb		       a9 08		      LDA	#$08
   3718  1bdd		       85 c9		      STA	player3scorecolor
   3719  1bdf				   .L0105		;  player0score = MaxLife
   3720  1bdf
   3721  1bdf		       a5 df		      LDA	MaxLife
   3722  1be1		       85 c1		      STA	player0score
   3723  1be3				   .L0106		;  player1score = MaxLife
   3724  1be3
   3725  1be3		       a5 df		      LDA	MaxLife
   3726  1be5		       85 c2		      STA	player1score
   3727  1be7				   .L0107		;  player2score = MaxKill
   3728  1be7
   3729  1be7		       a5 e0		      LDA	MaxKill
   3730  1be9		       85 d2		      STA	player2score
   3731  1beb				   .L0108		;  player3score = MaxKill
   3732  1beb
   3733  1beb		       a5 e0		      LDA	MaxKill
   3734  1bed		       85 d3		      STA	player3score
   3735  1bef				   .
   3736  1bef							; 
   3737  1bef
   3738  1bef				   .L0109		;  asm
   3739  1bef
   3740  1bef		       a9 00		      lda	#0
   3741  1bf1
   3742  1bf1		       85 1f		      sta	$1F
   3743  1bf3
   3744  1bf3		       85 1f		      sta	ENABL
   3745  1bf5
   3746  1bf5				   .L0110		;  bally = 160
   3747  1bf5
   3748  1bf5		       a9 a0		      LDA	#160
   3749  1bf7		       85 8c		      STA	bally
   3750  1bf9				   .
   3751  1bf9							; 
   3752  1bf9
   3753  1bf9				   .L0111		;  player1:
   3754  1bf9
   3755  1bf9		       a2 e2		      LDX	#<playerL0111_1
   3756  1bfb		       86 a6		      STX	player1pointerlo
   3757  1bfd		       a9 f4		      LDA	#>playerL0111_1
   3758  1bff		       85 ab		      STA	player1pointerhi
   3759  1c01		       a9 09		      LDA	#9
   3760  1c03		       85 b1		      STA	player1height
   3761  1c05				   .
   3762  1c05							; 
   3763  1c05
   3764  1c05				   .L0112		;  if !o{0} then player2:
   3765  1c05
   3766  1c05		       a5 e5		      LDA	o
   3767  1c07		       4a		      LSR
   3768  1c08		       b0 0c		      BCS	.skipL0112
   3769  1c0a				   .condpart38
   3770  1c0a		       a2 ea		      LDX	#<player38then_2
   3771  1c0c		       86 a7		      STX	player2pointerlo
   3772  1c0e		       a9 f4		      LDA	#>player38then_2
   3773  1c10		       85 ac		      STA	player2pointerhi
   3774  1c12		       a9 09		      LDA	#9
   3775  1c14		       85 b2		      STA	player2height
   3776  1c16				   .skipL0112
   3777  1c16				   .L0113		;  if o{0} then player2:
   3778  1c16
   3779  1c16		       a5 e5		      LDA	o
   3780  1c18		       4a		      LSR
   3781  1c19		       90 0c		      BCC	.skipL0113
   3782  1c1b				   .condpart39
   3783  1c1b		       a2 f2		      LDX	#<player39then_2
   3784  1c1d		       86 a7		      STX	player2pointerlo
   3785  1c1f		       a9 f4		      LDA	#>player39then_2
   3786  1c21		       85 ac		      STA	player2pointerhi
   3787  1c23		       a9 09		      LDA	#9
   3788  1c25		       85 b2		      STA	player2height
   3789  1c27				   .skipL0113
   3790  1c27				   .
   3791  1c27							; 
   3792  1c27
   3793  1c27				   .
   3794  1c27							; 
   3795  1c27
   3796  1c27				   .L0114		;  e{0} = !e{0}
   3797  1c27
   3798  1c27		       a5 db		      LDA	e
   3799  1c29		       29 01		      AND	#1
   3800  1c2b		       08		      PHP
   3801  1c2c		       a5 db		      LDA	e
   3802  1c2e		       29 fe		      AND	#254
   3803  1c30		       28		      PLP
   3804  1c31		       d0 02		      .byte.b	$D0, $02
   3805  1c33		       09 01		      ORA	#1
   3806  1c35		       85 db		      STA	e
   3807  1c37				   .L0115		;  if e{0} then e{3} = !e{3}
   3808  1c37
   3809  1c37		       a5 db		      LDA	e
   3810  1c39		       4a		      LSR
   3811  1c3a		       90 10		      BCC	.skipL0115
   3812  1c3c				   .condpart40
   3813  1c3c		       a5 db		      LDA	e
   3814  1c3e		       29 08		      AND	#8
   3815  1c40		       08		      PHP
   3816  1c41		       a5 db		      LDA	e
   3817  1c43		       29 f7		      AND	#247
   3818  1c45		       28		      PLP
   3819  1c46		       d0 02		      .byte.b	$D0, $02
   3820  1c48		       09 08		      ORA	#8
   3821  1c4a		       85 db		      STA	e
   3822  1c4c				   .skipL0115
   3823  1c4c				   .L0116		;  if !e{2}  &&  e{3} then space = space + 1
   3824  1c4c
   3825  1c4c		       a5 db		      LDA	e
   3826  1c4e		       29 04		      AND	#4
   3827  1c50		       d0 08		      BNE	.skipL0116
   3828  1c52				   .condpart41
   3829  1c52		       a5 db		      LDA	e
   3830  1c54		       29 08		      AND	#8
   3831  1c56		       f0 02		      BEQ	.skip41then
   3832  1c58				   .condpart42
   3833  1c58		       e6 dd		      INC	space
   3834  1c5a				   .skip41then
   3835  1c5a				   .skipL0116
   3836  1c5a				   .L0117		;  if e{2}  &&  e{3} then space = space - 1
   3837  1c5a
   3838  1c5a		       a5 db		      LDA	e
   3839  1c5c		       29 04		      AND	#4
   3840  1c5e		       f0 08		      BEQ	.skipL0117
   3841  1c60				   .condpart43
   3842  1c60		       a5 db		      LDA	e
   3843  1c62		       29 08		      AND	#8
   3844  1c64		       f0 02		      BEQ	.skip43then
   3845  1c66				   .condpart44
   3846  1c66		       c6 dd		      DEC	space
   3847  1c68				   .skip43then
   3848  1c68				   .skipL0117
   3849  1c68				   .L0118		;  if space = 0 then space = 1
   3850  1c68
   3851  1c68		       a5 dd		      LDA	space
   3852  1c6a		       c9 00		      CMP	#0
   3853  1c6c		       d0 04		      BNE	.skipL0118
   3854  1c6e				   .condpart45
   3855  1c6e		       a9 01		      LDA	#1
   3856  1c70		       85 dd		      STA	space
   3857  1c72				   .skipL0118
   3858  1c72				   .L0119		;  if space >	6 then space = 6
   3859  1c72
   3860  1c72		       a9 06		      LDA	#6
   3861  1c74		       c5 dd		      CMP	space
   3862  1c76		       b0 04		      BCS	.skipL0119
   3863  1c78				   .condpart46
   3864  1c78		       a9 06		      LDA	#6
   3865  1c7a		       85 dd		      STA	space
   3866  1c7c				   .skipL0119
   3867  1c7c				   .L0120		;  if space = 1 then e{2} = 0
   3868  1c7c
   3869  1c7c		       a5 dd		      LDA	space
   3870  1c7e		       c9 01		      CMP	#1
   3871  1c80		       d0 06		      BNE	.skipL0120
   3872  1c82				   .condpart47
   3873  1c82		       a5 db		      LDA	e
   3874  1c84		       29 fb		      AND	#251
   3875  1c86		       85 db		      STA	e
   3876  1c88				   .skipL0120
   3877  1c88				   .L0121		;  if space = 6 then e{2} = 1
   3878  1c88
   3879  1c88		       a5 dd		      LDA	space
   3880  1c8a		       c9 06		      CMP	#6
   3881  1c8c		       d0 06		      BNE	.skipL0121
   3882  1c8e				   .condpart48
   3883  1c8e		       a5 db		      LDA	e
   3884  1c90		       09 04		      ORA	#4
   3885  1c92		       85 db		      STA	e
   3886  1c94				   .skipL0121
   3887  1c94				   .
   3888  1c94							; 
   3889  1c94
   3890  1c94				   .L0122		;  player3:
   3891  1c94
   3892  1c94		       a2 5a		      LDX	#<playerL0122_3
   3893  1c96		       86 a8		      STX	player3pointerlo
   3894  1c98		       a9 f5		      LDA	#>playerL0122_3
   3895  1c9a		       85 ad		      STA	player3pointerhi
   3896  1c9c		       a9 09		      LDA	#9
   3897  1c9e		       85 b3		      STA	player3height
   3898  1ca0				   .
   3899  1ca0							; 
   3900  1ca0
   3901  1ca0				   .L0123		;  player4:
   3902  1ca0
   3903  1ca0		       a2 62		      LDX	#<playerL0123_4
   3904  1ca2		       86 a9		      STX	player4pointerlo
   3905  1ca4		       a9 f5		      LDA	#>playerL0123_4
   3906  1ca6		       85 ae		      STA	player4pointerhi
   3907  1ca8		       a9 09		      LDA	#9
   3908  1caa		       85 b4		      STA	player4height
   3909  1cac				   .
   3910  1cac							; 
   3911  1cac
   3912  1cac				   .L0124		;  if !e{0}  &&  !o{1} then player5:
   3913  1cac
   3914  1cac		       a5 db		      LDA	e
   3915  1cae		       4a		      LSR
   3916  1caf		       b0 12		      BCS	.skipL0124
   3917  1cb1				   .condpart49
   3918  1cb1		       a5 e5		      LDA	o
   3919  1cb3		       29 02		      AND	#2
   3920  1cb5		       d0 0c		      BNE	.skip49then
   3921  1cb7				   .condpart50
   3922  1cb7		       a2 6a		      LDX	#<player50then_5
   3923  1cb9		       86 aa		      STX	player5pointerlo
   3924  1cbb		       a9 f5		      LDA	#>player50then_5
   3925  1cbd		       85 af		      STA	player5pointerhi
   3926  1cbf		       a9 09		      LDA	#9
   3927  1cc1		       85 b5		      STA	player5height
   3928  1cc3				   .skip49then
   3929  1cc3				   .skipL0124
   3930  1cc3				   .
   3931  1cc3							; 
   3932  1cc3
   3933  1cc3				   .
   3934  1cc3							; 
   3935  1cc3
   3936  1cc3				   .L0125		;  if !e{0}  &&  o{1} then player5:
   3937  1cc3
   3938  1cc3		       a5 db		      LDA	e
   3939  1cc5		       4a		      LSR
   3940  1cc6		       b0 12		      BCS	.skipL0125
   3941  1cc8				   .condpart51
   3942  1cc8		       a5 e5		      LDA	o
   3943  1cca		       29 02		      AND	#2
   3944  1ccc		       f0 0c		      BEQ	.skip51then
   3945  1cce				   .condpart52
   3946  1cce		       a2 72		      LDX	#<player52then_5
   3947  1cd0		       86 aa		      STX	player5pointerlo
   3948  1cd2		       a9 f5		      LDA	#>player52then_5
   3949  1cd4		       85 af		      STA	player5pointerhi
   3950  1cd6		       a9 09		      LDA	#9
   3951  1cd8		       85 b5		      STA	player5height
   3952  1cda				   .skip51then
   3953  1cda				   .skipL0125
   3954  1cda				   .
   3955  1cda							; 
   3956  1cda
   3957  1cda				   .L0126		;  if e{0} then player5:
   3958  1cda
   3959  1cda		       a5 db		      LDA	e
   3960  1cdc		       4a		      LSR
   3961  1cdd		       90 0c		      BCC	.skipL0126
   3962  1cdf				   .condpart53
   3963  1cdf		       a2 7a		      LDX	#<player53then_5
   3964  1ce1		       86 aa		      STX	player5pointerlo
   3965  1ce3		       a9 f5		      LDA	#>player53then_5
   3966  1ce5		       85 af		      STA	player5pointerhi
   3967  1ce7		       a9 09		      LDA	#9
   3968  1ce9		       85 b5		      STA	player5height
   3969  1ceb				   .skipL0126
   3970  1ceb				   .L0127		;  player3x = 84 :  player4x = player3x :  player5x = player3x
   3971  1ceb
   3972  1ceb		       a9 54		      LDA	#84
   3973  1ced		       85 87		      STA	player3x
   3974  1cef		       a5 87		      LDA	player3x
   3975  1cf1		       85 88		      STA	player4x
   3976  1cf3		       85 89		      STA	player5x
   3977  1cf5				   .
   3978  1cf5							; 
   3979  1cf5
   3980  1cf5				   .L0128		;  if Selection = 1 then player3y = 65 - 3 + space else player3y = 65
   3981  1cf5
   3982  1cf5		       a5 e1		      LDA	Selection
   3983  1cf7		       c9 01		      CMP	#1
   3984  1cf9		       d0 0d		      BNE	.skipL0128
   3985  1cfb				   .condpart54
   3986  1cfb							; complex statement detected
   3987  1cfb		       a9 41		      LDA	#65
   3988  1cfd		       38		      SEC
   3989  1cfe		       e9 03		      SBC	#3
   3990  1d00		       18		      CLC
   3991  1d01		       65 dd		      ADC	space
   3992  1d03		       85 90		      STA	player3y
   3993  1d05		       4c 0c 1d 	      jmp	.skipelse4
   3994  1d08				   .skipL0128
   3995  1d08		       a9 41		      LDA	#65
   3996  1d0a		       85 90		      STA	player3y
   3997  1d0c				   .skipelse4
   3998  1d0c				   .L0129		;  if Selection = 2 then player4y = 50 - 3 + space else player4y = 50
   3999  1d0c
   4000  1d0c		       a5 e1		      LDA	Selection
   4001  1d0e		       c9 02		      CMP	#2
   4002  1d10		       d0 0d		      BNE	.skipL0129
   4003  1d12				   .condpart55
   4004  1d12							; complex statement detected
   4005  1d12		       a9 32		      LDA	#50
   4006  1d14		       38		      SEC
   4007  1d15		       e9 03		      SBC	#3
   4008  1d17		       18		      CLC
   4009  1d18		       65 dd		      ADC	space
   4010  1d1a		       85 91		      STA	player4y
   4011  1d1c		       4c 23 1d 	      jmp	.skipelse5
   4012  1d1f				   .skipL0129
   4013  1d1f		       a9 32		      LDA	#50
   4014  1d21		       85 91		      STA	player4y
   4015  1d23				   .skipelse5
   4016  1d23				   .L0130		;  if !e{0} then player5y = 35 else player5y = 20
   4017  1d23
   4018  1d23		       a5 db		      LDA	e
   4019  1d25		       4a		      LSR
   4020  1d26		       b0 07		      BCS	.skipL0130
   4021  1d28				   .condpart56
   4022  1d28		       a9 23		      LDA	#35
   4023  1d2a		       85 92		      STA	player5y
   4024  1d2c		       4c 33 1d 	      jmp	.skipelse6
   4025  1d2f				   .skipL0130
   4026  1d2f		       a9 14		      LDA	#20
   4027  1d31		       85 92		      STA	player5y
   4028  1d33				   .skipelse6
   4029  1d33				   .L0131		;  if Selection = 3  &&  !e{0} then player5y = 35 - 3 + space
   4030  1d33
   4031  1d33		       a5 e1		      LDA	Selection
   4032  1d35		       c9 03		      CMP	#3
   4033  1d37		       d0 0f		      BNE	.skipL0131
   4034  1d39				   .condpart57
   4035  1d39		       a5 db		      LDA	e
   4036  1d3b		       4a		      LSR
   4037  1d3c		       b0 0a		      BCS	.skip57then
   4038  1d3e				   .condpart58
   4039  1d3e							; complex statement detected
   4040  1d3e		       a9 23		      LDA	#35
   4041  1d40		       38		      SEC
   4042  1d41		       e9 03		      SBC	#3
   4043  1d43		       18		      CLC
   4044  1d44		       65 dd		      ADC	space
   4045  1d46		       85 92		      STA	player5y
   4046  1d48				   .skip57then
   4047  1d48				   .skipL0131
   4048  1d48				   .L0132		;  if Selection = 4  &&  e{0} then player5y = 20 - 3 + space
   4049  1d48
   4050  1d48		       a5 e1		      LDA	Selection
   4051  1d4a		       c9 04		      CMP	#4
   4052  1d4c		       d0 0f		      BNE	.skipL0132
   4053  1d4e				   .condpart59
   4054  1d4e		       a5 db		      LDA	e
   4055  1d50		       4a		      LSR
   4056  1d51		       90 0a		      BCC	.skip59then
   4057  1d53				   .condpart60
   4058  1d53							; complex statement detected
   4059  1d53		       a9 14		      LDA	#20
   4060  1d55		       38		      SEC
   4061  1d56		       e9 03		      SBC	#3
   4062  1d58		       18		      CLC
   4063  1d59		       65 dd		      ADC	space
   4064  1d5b		       85 92		      STA	player5y
   4065  1d5d				   .skip59then
   4066  1d5d				   .skipL0132
   4067  1d5d				   .
   4068  1d5d							; 
   4069  1d5d
   4070  1d5d				   .L0133		;  player1x = 79 :  player2x = player1x + 13
   4071  1d5d
   4072  1d5d		       a9 4f		      LDA	#79
   4073  1d5f		       85 85		      STA	player1x
   4074  1d61		       a5 85		      LDA	player1x
   4075  1d63		       18		      CLC
   4076  1d64		       69 0d		      ADC	#13
   4077  1d66		       85 86		      STA	player2x
   4078  1d68				   .L0134		;  if Selection = 0 then player1y = 80 - 3 + space else player1y = 80
   4079  1d68
   4080  1d68		       a5 e1		      LDA	Selection
   4081  1d6a		       c9 00		      CMP	#0
   4082  1d6c		       d0 0d		      BNE	.skipL0134
   4083  1d6e				   .condpart61
   4084  1d6e							; complex statement detected
   4085  1d6e		       a9 50		      LDA	#80
   4086  1d70		       38		      SEC
   4087  1d71		       e9 03		      SBC	#3
   4088  1d73		       18		      CLC
   4089  1d74		       65 dd		      ADC	space
   4090  1d76		       85 8e		      STA	player1y
   4091  1d78		       4c 7f 1d 	      jmp	.skipelse7
   4092  1d7b				   .skipL0134
   4093  1d7b		       a9 50		      LDA	#80
   4094  1d7d		       85 8e		      STA	player1y
   4095  1d7f				   .skipelse7
   4096  1d7f				   .L0135		;  player2y = player1y
   4097  1d7f
   4098  1d7f		       a5 8e		      LDA	player1y
   4099  1d81		       85 8f		      STA	player2y
   4100  1d83				   .
   4101  1d83							; 
   4102  1d83
   4103  1d83				   .L0136		;  if !joy0up	&&  !joy0down  &&  !joy0left  &&  !joy0right  &&  !joy0fire  &&  !joy1up  &&  !joy1down  &&  !joy1left	&&  !joy1right	&&  !joy1fire  &&  !switchselect then e{6} = 0
   4104  1d83
   4105  1d83		       a9 10		      lda	#$10
   4106  1d85		       2c 80 02 	      bit	SWCHA
   4107  1d88		       f0 42		      BEQ	.skipL0136
   4108  1d8a				   .condpart62
   4109  1d8a		       a9 20		      lda	#$20
   4110  1d8c		       2c 80 02 	      bit	SWCHA
   4111  1d8f		       f0 3b		      BEQ	.skip62then
   4112  1d91				   .condpart63
   4113  1d91		       2c 80 02 	      bit	SWCHA
   4114  1d94		       50 36		      BVC	.skip63then
   4115  1d96				   .condpart64
   4116  1d96		       2c 80 02 	      bit	SWCHA
   4117  1d99		       10 31		      BPL	.skip64then
   4118  1d9b				   .condpart65
   4119  1d9b		       24 0c		      bit	INPT4
   4120  1d9d		       10 2d		      BPL	.skip65then
   4121  1d9f				   .condpart66
   4122  1d9f		       a9 01		      lda	#1
   4123  1da1		       2c 80 02 	      bit	SWCHA
   4124  1da4		       f0 26		      BEQ	.skip66then
   4125  1da6				   .condpart67
   4126  1da6		       a9 02		      lda	#2
   4127  1da8		       2c 80 02 	      bit	SWCHA
   4128  1dab		       f0 1f		      BEQ	.skip67then
   4129  1dad				   .condpart68
   4130  1dad		       a9 04		      lda	#4
   4131  1daf		       2c 80 02 	      bit	SWCHA
   4132  1db2		       f0 18		      BEQ	.skip68then
   4133  1db4				   .condpart69
   4134  1db4		       a9 08		      lda	#8
   4135  1db6		       2c 80 02 	      bit	SWCHA
   4136  1db9		       f0 11		      BEQ	.skip69then
   4137  1dbb				   .condpart70
   4138  1dbb		       24 0d		      bit	INPT5
   4139  1dbd		       10 0d		      BPL	.skip70then
   4140  1dbf				   .condpart71
   4141  1dbf		       a9 02		      lda	#2
   4142  1dc1		       2c 82 02 	      bit	SWCHB
   4143  1dc4		       f0 06		      BEQ	.skip71then
   4144  1dc6				   .condpart72
   4145  1dc6		       a5 db		      LDA	e
   4146  1dc8		       29 bf		      AND	#191
   4147  1dca		       85 db		      STA	e
   4148  1dcc				   .skip71then
   4149  1dcc				   .skip70then
   4150  1dcc				   .skip69then
   4151  1dcc				   .skip68then
   4152  1dcc				   .skip67then
   4153  1dcc				   .skip66then
   4154  1dcc				   .skip65then
   4155  1dcc				   .skip64then
   4156  1dcc				   .skip63then
   4157  1dcc				   .skip62then
   4158  1dcc				   .skipL0136
   4159  1dcc				   .
   4160  1dcc							; 
   4161  1dcc
   4162  1dcc				   .L0137		;  if e{6} then goto Nope
   4163  1dcc
   4164  1dcc		       24 db		      BIT	e
   4165  1dce		       50 03		      BVC	.skipL0137
   4166  1dd0				   .condpart73
   4167  1dd0		       4c 66 1f 	      jmp	.Nope
   4168  1dd3
   4169  1dd3				   .skipL0137
   4170  1dd3				   .L0138		;  if Selection = 4  &&  joy0fire then goto Start_Game bank2
   4171  1dd3
   4172  1dd3		       a5 e1		      LDA	Selection
   4173  1dd5		       c9 04		      CMP	#4
   4174  1dd7		       d0 16		      BNE	.skipL0138
   4175  1dd9				   .condpart74
   4176  1dd9		       24 0c		      bit	INPT4
   4177  1ddb		       30 12		      BMI	.skip74then
   4178  1ddd				   .condpart75
   4179  1ddd		       85 d1		      sta	temp7
   4180  1ddf		       a9 38		      lda	#>(.Start_Game-1)
   4181  1de1		       48		      pha
   4182  1de2		       a9 92		      lda	#<(.Start_Game-1)
   4183  1de4		       48		      pha
   4184  1de5		       a5 d1		      lda	temp7
   4185  1de7		       48		      pha
   4186  1de8		       8a		      txa
   4187  1de9		       48		      pha
   4188  1dea		       a2 02		      ldx	#2
   4189  1dec		       4c eb ff 	      jmp	BS_jsr
   4190  1def				   .skip74then
   4191  1def				   .skipL0138
   4192  1def				   .L0139		;  if Selection = 4  &&  joy1fire then goto Start_Game bank2
   4193  1def
   4194  1def		       a5 e1		      LDA	Selection
   4195  1df1		       c9 04		      CMP	#4
   4196  1df3		       d0 16		      BNE	.skipL0139
   4197  1df5				   .condpart76
   4198  1df5		       24 0d		      bit	INPT5
   4199  1df7		       30 12		      BMI	.skip76then
   4200  1df9				   .condpart77
   4201  1df9		       85 d1		      sta	temp7
   4202  1dfb		       a9 38		      lda	#>(.Start_Game-1)
   4203  1dfd		       48		      pha
   4204  1dfe		       a9 92		      lda	#<(.Start_Game-1)
   4205  1e00		       48		      pha
   4206  1e01		       a5 d1		      lda	temp7
   4207  1e03		       48		      pha
   4208  1e04		       8a		      txa
   4209  1e05		       48		      pha
   4210  1e06		       a2 02		      ldx	#2
   4211  1e08		       4c eb ff 	      jmp	BS_jsr
   4212  1e0b				   .skip76then
   4213  1e0b				   .skipL0139
   4214  1e0b				   .L0140		;  if switchreset then goto Start_Game bank2
   4215  1e0b
   4216  1e0b		       a9 01		      lda	#1
   4217  1e0d		       2c 82 02 	      bit	SWCHB
   4218  1e10		       d0 12		      BNE	.skipL0140
   4219  1e12				   .condpart78
   4220  1e12		       85 d1		      sta	temp7
   4221  1e14		       a9 38		      lda	#>(.Start_Game-1)
   4222  1e16		       48		      pha
   4223  1e17		       a9 92		      lda	#<(.Start_Game-1)
   4224  1e19		       48		      pha
   4225  1e1a		       a5 d1		      lda	temp7
   4226  1e1c		       48		      pha
   4227  1e1d		       8a		      txa
   4228  1e1e		       48		      pha
   4229  1e1f		       a2 02		      ldx	#2
   4230  1e21		       4c eb ff 	      jmp	BS_jsr
   4231  1e24				   .skipL0140
   4232  1e24				   .
   4233  1e24							; 
   4234  1e24
   4235  1e24				   .L0141		;  if switchselect then e{4} = 0 :  goto test
   4236  1e24
   4237  1e24		       a9 02		      lda	#2
   4238  1e26		       2c 82 02 	      bit	SWCHB
   4239  1e29		       d0 09		      BNE	.skipL0141
   4240  1e2b				   .condpart79
   4241  1e2b		       a5 db		      LDA	e
   4242  1e2d		       29 ef		      AND	#239
   4243  1e2f		       85 db		      STA	e
   4244  1e31		       4c 31 10 	      jmp	.test
   4245  1e34
   4246  1e34				   .skipL0141
   4247  1e34				   .
   4248  1e34							; 
   4249  1e34
   4250  1e34				   .
   4251  1e34							; 
   4252  1e34
   4253  1e34				   .L0142		;  if Selection > 0  &&  joy0up then Selection = Selection - 1 :  e{6}  = 1
   4254  1e34
   4255  1e34		       a9 00		      LDA	#0
   4256  1e36		       c5 e1		      CMP	Selection
   4257  1e38		       b0 0f		      BCS	.skipL0142
   4258  1e3a				   .condpart80
   4259  1e3a		       a9 10		      lda	#$10
   4260  1e3c		       2c 80 02 	      bit	SWCHA
   4261  1e3f		       d0 08		      BNE	.skip80then
   4262  1e41				   .condpart81
   4263  1e41		       c6 e1		      DEC	Selection
   4264  1e43		       a5 db		      LDA	e
   4265  1e45		       09 40		      ORA	#64
   4266  1e47		       85 db		      STA	e
   4267  1e49				   .skip80then
   4268  1e49				   .skipL0142
   4269  1e49				   .L0143		;  if Selection > 0  &&  joy1up then Selection = Selection - 1 :  e{6}  = 1
   4270  1e49
   4271  1e49		       a9 00		      LDA	#0
   4272  1e4b		       c5 e1		      CMP	Selection
   4273  1e4d		       b0 0f		      BCS	.skipL0143
   4274  1e4f				   .condpart82
   4275  1e4f		       a9 01		      lda	#1
   4276  1e51		       2c 80 02 	      bit	SWCHA
   4277  1e54		       d0 08		      BNE	.skip82then
   4278  1e56				   .condpart83
   4279  1e56		       c6 e1		      DEC	Selection
   4280  1e58		       a5 db		      LDA	e
   4281  1e5a		       09 40		      ORA	#64
   4282  1e5c		       85 db		      STA	e
   4283  1e5e				   .skip82then
   4284  1e5e				   .skipL0143
   4285  1e5e				   .L0144		;  if Selection < 4  &&  joy0down then Selection = Selection + 1 :  e{6}  = 1
   4286  1e5e
   4287  1e5e		       a5 e1		      LDA	Selection
   4288  1e60		       c9 04		      CMP	#4
   4289  1e62		       b0 0f		      BCS	.skipL0144
   4290  1e64				   .condpart84
   4291  1e64		       a9 20		      lda	#$20
   4292  1e66		       2c 80 02 	      bit	SWCHA
   4293  1e69		       d0 08		      BNE	.skip84then
   4294  1e6b				   .condpart85
   4295  1e6b		       e6 e1		      INC	Selection
   4296  1e6d		       a5 db		      LDA	e
   4297  1e6f		       09 40		      ORA	#64
   4298  1e71		       85 db		      STA	e
   4299  1e73				   .skip84then
   4300  1e73				   .skipL0144
   4301  1e73				   .L0145		;  if Selection < 4  &&  joy1down then Selection = Selection + 1 :  e{6}  = 1
   4302  1e73
   4303  1e73		       a5 e1		      LDA	Selection
   4304  1e75		       c9 04		      CMP	#4
   4305  1e77		       b0 0f		      BCS	.skipL0145
   4306  1e79				   .condpart86
   4307  1e79		       a9 02		      lda	#2
   4308  1e7b		       2c 80 02 	      bit	SWCHA
   4309  1e7e		       d0 08		      BNE	.skip86then
   4310  1e80				   .condpart87
   4311  1e80		       e6 e1		      INC	Selection
   4312  1e82		       a5 db		      LDA	e
   4313  1e84		       09 40		      ORA	#64
   4314  1e86		       85 db		      STA	e
   4315  1e88				   .skip86then
   4316  1e88				   .skipL0145
   4317  1e88				   .L0146		;  if !joy0left  &&  !joy1left then goto NOLEFT
   4318  1e88
   4319  1e88		       2c 80 02 	      bit	SWCHA
   4320  1e8b		       50 0a		      BVC	.skipL0146
   4321  1e8d				   .condpart88
   4322  1e8d		       a9 04		      lda	#4
   4323  1e8f		       2c 80 02 	      bit	SWCHA
   4324  1e92		       f0 03		      BEQ	.skip88then
   4325  1e94				   .condpart89
   4326  1e94		       4c f3 1e 	      jmp	.NOLEFT
   4327  1e97
   4328  1e97				   .skip88then
   4329  1e97				   .skipL0146
   4330  1e97				   .L0147		;  e{6}  = 1
   4331  1e97
   4332  1e97		       a5 db		      LDA	e
   4333  1e99		       09 40		      ORA	#64
   4334  1e9b		       85 db		      STA	e
   4335  1e9d				   .L0148		;  if Selection = 0 then o{0} = !o{0}
   4336  1e9d
   4337  1e9d		       a5 e1		      LDA	Selection
   4338  1e9f		       c9 00		      CMP	#0
   4339  1ea1		       d0 10		      BNE	.skipL0148
   4340  1ea3				   .condpart90
   4341  1ea3		       a5 e5		      LDA	o
   4342  1ea5		       29 01		      AND	#1
   4343  1ea7		       08		      PHP
   4344  1ea8		       a5 e5		      LDA	o
   4345  1eaa		       29 fe		      AND	#254
   4346  1eac		       28		      PLP
   4347  1ead		       d0 02		      .byte.b	$D0, $02
   4348  1eaf		       09 01		      ORA	#1
   4349  1eb1		       85 e5		      STA	o
   4350  1eb3				   .skipL0148
   4351  1eb3				   .L0149		;  if Selection = 3 then o{1} = !o{1}
   4352  1eb3
   4353  1eb3		       a5 e1		      LDA	Selection
   4354  1eb5		       c9 03		      CMP	#3
   4355  1eb7		       d0 10		      BNE	.skipL0149
   4356  1eb9				   .condpart91
   4357  1eb9		       a5 e5		      LDA	o
   4358  1ebb		       29 02		      AND	#2
   4359  1ebd		       08		      PHP
   4360  1ebe		       a5 e5		      LDA	o
   4361  1ec0		       29 fd		      AND	#253
   4362  1ec2		       28		      PLP
   4363  1ec3		       d0 02		      .byte.b	$D0, $02
   4364  1ec5		       09 02		      ORA	#2
   4365  1ec7		       85 e5		      STA	o
   4366  1ec9				   .skipL0149
   4367  1ec9				   .L0150		;  if Selection = 1  &&  MaxLife > $10 then dec MaxLife = MaxLife - $05
   4368  1ec9
   4369  1ec9		       a5 e1		      LDA	Selection
   4370  1ecb		       c9 01		      CMP	#1
   4371  1ecd		       d0 0f		      BNE	.skipL0150
   4372  1ecf				   .condpart92
   4373  1ecf		       a9 10		      LDA	#$10
   4374  1ed1		       c5 df		      CMP	MaxLife
   4375  1ed3		       b0 09		      BCS	.skip92then
   4376  1ed5				   .condpart93
   4377  1ed5		       f8		      SED
   4378  1ed6		       a5 df		      LDA	MaxLife
   4379  1ed8		       38		      SEC
   4380  1ed9		       e9 05		      SBC	#$05
   4381  1edb		       85 df		      STA	MaxLife
   4382  1edd		       d8		      CLD
   4383  1ede				   .skip92then
   4384  1ede				   .skipL0150
   4385  1ede				   .L0151		;  if Selection = 2  &&  MaxKill > $10 then dec MaxKill = MaxKill - $05
   4386  1ede
   4387  1ede		       a5 e1		      LDA	Selection
   4388  1ee0		       c9 02		      CMP	#2
   4389  1ee2		       d0 0f		      BNE	.skipL0151
   4390  1ee4				   .condpart94
   4391  1ee4		       a9 10		      LDA	#$10
   4392  1ee6		       c5 e0		      CMP	MaxKill
   4393  1ee8		       b0 09		      BCS	.skip94then
   4394  1eea				   .condpart95
   4395  1eea		       f8		      SED
   4396  1eeb		       a5 e0		      LDA	MaxKill
   4397  1eed		       38		      SEC
   4398  1eee		       e9 05		      SBC	#$05
   4399  1ef0		       85 e0		      STA	MaxKill
   4400  1ef2		       d8		      CLD
   4401  1ef3				   .skip94then
   4402  1ef3				   .skipL0151
   4403  1ef3				   .
   4404  1ef3							; 
   4405  1ef3
   4406  1ef3				   .
   4407  1ef3							; 
   4408  1ef3
   4409  1ef3				   .NOLEFT
   4410  1ef3							; NOLEFT
   4411  1ef3
   4412  1ef3				   .L0152		;  if !joy0right  &&  !joy1right  &&  !joy0fire  &&  !joy1fire then goto Nope
   4413  1ef3
   4414  1ef3		       2c 80 02 	      bit	SWCHA
   4415  1ef6		       10 12		      BPL	.skipL0152
   4416  1ef8				   .condpart96
   4417  1ef8		       a9 08		      lda	#8
   4418  1efa		       2c 80 02 	      bit	SWCHA
   4419  1efd		       f0 0b		      BEQ	.skip96then
   4420  1eff				   .condpart97
   4421  1eff		       24 0c		      bit	INPT4
   4422  1f01		       10 07		      BPL	.skip97then
   4423  1f03				   .condpart98
   4424  1f03		       24 0d		      bit	INPT5
   4425  1f05		       10 03		      BPL	.skip98then
   4426  1f07				   .condpart99
   4427  1f07		       4c 66 1f 	      jmp	.Nope
   4428  1f0a
   4429  1f0a				   .skip98then
   4430  1f0a				   .skip97then
   4431  1f0a				   .skip96then
   4432  1f0a				   .skipL0152
   4433  1f0a				   .L0153		;  e{6}  = 1
   4434  1f0a
   4435  1f0a		       a5 db		      LDA	e
   4436  1f0c		       09 40		      ORA	#64
   4437  1f0e		       85 db		      STA	e
   4438  1f10				   .L0154		;  if Selection = 0 then o{0} = !o{0}
   4439  1f10
   4440  1f10		       a5 e1		      LDA	Selection
   4441  1f12		       c9 00		      CMP	#0
   4442  1f14		       d0 10		      BNE	.skipL0154
   4443  1f16				   .condpart100
   4444  1f16		       a5 e5		      LDA	o
   4445  1f18		       29 01		      AND	#1
   4446  1f1a		       08		      PHP
   4447  1f1b		       a5 e5		      LDA	o
   4448  1f1d		       29 fe		      AND	#254
   4449  1f1f		       28		      PLP
   4450  1f20		       d0 02		      .byte.b	$D0, $02
   4451  1f22		       09 01		      ORA	#1
   4452  1f24		       85 e5		      STA	o
   4453  1f26				   .skipL0154
   4454  1f26				   .L0155		;  if Selection = 3 then o{1} = !o{1}
   4455  1f26
   4456  1f26		       a5 e1		      LDA	Selection
   4457  1f28		       c9 03		      CMP	#3
   4458  1f2a		       d0 10		      BNE	.skipL0155
   4459  1f2c				   .condpart101
   4460  1f2c		       a5 e5		      LDA	o
   4461  1f2e		       29 02		      AND	#2
   4462  1f30		       08		      PHP
   4463  1f31		       a5 e5		      LDA	o
   4464  1f33		       29 fd		      AND	#253
   4465  1f35		       28		      PLP
   4466  1f36		       d0 02		      .byte.b	$D0, $02
   4467  1f38		       09 02		      ORA	#2
   4468  1f3a		       85 e5		      STA	o
   4469  1f3c				   .skipL0155
   4470  1f3c				   .L0156		;  if Selection = 1  &&  MaxLife < $90 then dec MaxLife = MaxLife + $05
   4471  1f3c
   4472  1f3c		       a5 e1		      LDA	Selection
   4473  1f3e		       c9 01		      CMP	#1
   4474  1f40		       d0 0f		      BNE	.skipL0156
   4475  1f42				   .condpart102
   4476  1f42		       a5 df		      LDA	MaxLife
   4477  1f44		       c9 90		      CMP	#$90
   4478  1f46		       b0 09		      BCS	.skip102then
   4479  1f48				   .condpart103
   4480  1f48		       f8		      SED
   4481  1f49		       a5 df		      LDA	MaxLife
   4482  1f4b		       18		      CLC
   4483  1f4c		       69 05		      ADC	#$05
   4484  1f4e		       85 df		      STA	MaxLife
   4485  1f50		       d8		      CLD
   4486  1f51				   .skip102then
   4487  1f51				   .skipL0156
   4488  1f51				   .L0157		;  if Selection = 2  &&  MaxKill < $90 then dec MaxKill = MaxKill + $05
   4489  1f51
   4490  1f51		       a5 e1		      LDA	Selection
   4491  1f53		       c9 02		      CMP	#2
   4492  1f55		       d0 0f		      BNE	.skipL0157
   4493  1f57				   .condpart104
   4494  1f57		       a5 e0		      LDA	MaxKill
   4495  1f59		       c9 90		      CMP	#$90
   4496  1f5b		       b0 09		      BCS	.skip104then
   4497  1f5d				   .condpart105
   4498  1f5d		       f8		      SED
   4499  1f5e		       a5 e0		      LDA	MaxKill
   4500  1f60		       18		      CLC
   4501  1f61		       69 05		      ADC	#$05
   4502  1f63		       85 e0		      STA	MaxKill
   4503  1f65		       d8		      CLD
   4504  1f66				   .skip104then
   4505  1f66				   .skipL0157
   4506  1f66				   .Nope
   4507  1f66							; Nope
   4508  1f66
   4509  1f66				   .
   4510  1f66							; 
   4511  1f66
   4512  1f66				   .
   4513  1f66							; 
   4514  1f66
   4515  1f66				   .L0158		;  if Selection = 1 then player0scorecolor = back :  player1scorecolor = back
   4516  1f66
   4517  1f66		       a5 e1		      LDA	Selection
   4518  1f68		       c9 01		      CMP	#1
   4519  1f6a		       d0 06		      BNE	.skipL0158
   4520  1f6c				   .condpart106
   4521  1f6c		       a5 de		      LDA	back
   4522  1f6e		       85 c0		      STA	player0scorecolor
   4523  1f70		       85 bf		      STA	player1scorecolor
   4524  1f72				   .skipL0158
   4525  1f72				   .L0159		;  if Selection = 2 then player2scorecolor = back :  player3scorecolor = back
   4526  1f72
   4527  1f72		       a5 e1		      LDA	Selection
   4528  1f74		       c9 02		      CMP	#2
   4529  1f76		       d0 06		      BNE	.skipL0159
   4530  1f78				   .condpart107
   4531  1f78		       a5 de		      LDA	back
   4532  1f7a		       85 d4		      STA	player2scorecolor
   4533  1f7c		       85 c9		      STA	player3scorecolor
   4534  1f7e				   .skipL0159
   4535  1f7e				   .
   4536  1f7e							; 
   4537  1f7e
   4538  1f7e				   .L0160		;  drawscreen
   4539  1f7e
   4540  1f7e		       85 d1		      sta	temp7
   4541  1f80		       a9 1f		      lda	#>(ret_point2-1)
   4542  1f82		       48		      pha
   4543  1f83		       a9 95		      lda	#<(ret_point2-1)
   4544  1f85		       48		      pha
   4545  1f86		       a9 f0		      lda	#>(drawscreen-1)
   4546  1f88		       48		      pha
   4547  1f89		       a9 39		      lda	#<(drawscreen-1)
   4548  1f8b		       48		      pha
   4549  1f8c		       a5 d1		      lda	temp7
   4550  1f8e		       48		      pha
   4551  1f8f		       8a		      txa
   4552  1f90		       48		      pha
   4553  1f91		       a2 08		      ldx	#8
   4554  1f93		       4c eb ff 	      jmp	BS_jsr
   4555  1f96				   ret_point2
   4556  1f96				   .L0161		;  goto Calculate_Duration
   4557  1f96
   4558  1f96		       4c fb 10 	      jmp	.Calculate_Duration
   4559  1f99
   4560  1f99				   .
   4561  1f99							; 
   4562  1f99
   4563  1f99				   .
   4564  1f99							; 
   4565  1f99
   4566  1f99				   .
   4567  1f99							; 
   4568  1f99
   4569  1f99				   .L0162		;  bank 2
   4570  1f99
   4571  1f99					      if	ECHO1
      59 bytes of ROM space left in bank 1
   4572  1f99					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   4573  1f99					      endif
   4574  1f99		       00 01	   ECHO1      =	1
   4575  1fd4					      ORG	$1FF4-bscode_length
   4576  1fd4					      RORG	$1FF4-bscode_length
   4577  1fd4		       a2 ff	   start_bank1 ldx	#$ff
   4578  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
   4579  1fd6				  -	      stx	FASTFETCH
   4580  1fd6					      endif
   4581  1fd6		       9a		      txs
   4582  1fd7				  -	      if	bankswitch == 64
   4583  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4584  1fd7					      else
   4585  1fd7		       a9 f3		      lda	#>(start-1)
   4586  1fd9					      endif
   4587  1fd9		       48		      pha
   4588  1fda		       a9 6d		      lda	#<(start-1)
   4589  1fdc		       48		      pha
   4590  1fdd		       48		      pha
   4591  1fde		       8a		      txa
   4592  1fdf		       48		      pha
   4593  1fe0		       ba		      tsx
   4594  1fe1					      if	bankswitch != 64
   4595  1fe1		       b5 04		      lda	4,x	; get high byte of return address
   4596  1fe3		       2a		      rol
   4597  1fe4		       2a		      rol
   4598  1fe5		       2a		      rol
   4599  1fe6		       2a		      rol
   4600  1fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4601  1fe9		       aa		      tax
   4602  1fea		       e8		      inx
   4603  1feb				  -	      else
   4604  1feb				  -	      lda	4,x	; get high byte of return address
   4605  1feb				  -	      tay
   4606  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4607  1feb				  -	      sta	4,x
   4608  1feb				  -	      tya
   4609  1feb				  -	      lsr
   4610  1feb				  -	      lsr
   4611  1feb				  -	      lsr
   4612  1feb				  -	      lsr
   4613  1feb				  -	      tax
   4614  1feb				  -	      inx
   4615  1feb					      endif
   4616  1feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   4617  1fee		       68		      pla
   4618  1fef		       aa		      tax
   4619  1ff0		       68		      pla
   4620  1ff1		       60		      rts
   4621  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4622  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4623  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4624  1ff2					      endif
   4625  1ffc					      ORG	$1FFC
   4626  1ffc					      RORG	$1FFC
   4627  1ffc		       d4 1f		      .word.w	start_bank1
   4628  1ffe		       d4 1f		      .word.w	start_bank1
   4629  2000					      ORG	$2000
   4630  2000					      RORG	$3000
   4631  2000				   .L0163		;  asm
   4632  2000
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2000					      include	"titlescreen/asm/titlescreen.asm"
      1  2000
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2000					      include	"titlescreen/asm/layoutmacros.asm"
      1  2000
      2  2000							; the macro's used in the "titlescreen_layout.asm" file
      3  2000
      4  2000					      MAC	draw_96x2_1
      5  2000				   mk_96x2_1_on =	1
      6  2000					      jsr	draw_bmp_96x2_1
      7  2000					      ENDM
      8  2000
      9  2000					      MAC	draw_96x2_2
     10  2000				   mk_96x2_2_on =	1
     11  2000					      jsr	draw_bmp_96x2_2
     12  2000					      ENDM
     13  2000
     14  2000					      MAC	draw_96x2_3
     15  2000				   mk_96x2_3_on =	1
     16  2000					      jsr	draw_bmp_96x2_3
     17  2000					      ENDM
     18  2000
     19  2000					      MAC	draw_48x1_1
     20  2000				   mk_48x1_on =	1
     21  2000				   mk_48x1_1_on =	1
     22  2000					      jsr	draw_bmp_48x1_1
     23  2000					      ENDM
     24  2000
     25  2000					      MAC	draw_48x1_2
     26  2000				   mk_48x1_on =	1
     27  2000				   mk_48x1_2_on =	1
     28  2000					      jsr	draw_bmp_48x1_2
     29  2000					      ENDM
     30  2000
     31  2000					      MAC	draw_48x1_3
     32  2000				   mk_48x1_on =	1
     33  2000				   mk_48x1_3_on =	1
     34  2000					      jsr	draw_bmp_48x1_3
     35  2000					      ENDM
     36  2000
     37  2000					      MAC	draw_48x2_1
     38  2000				   mk_48x1_on =	1
     39  2000				   mk_48x2_1_on =	1
     40  2000					      jsr	draw_bmp_48x2_1
     41  2000					      ENDM
     42  2000
     43  2000					      MAC	draw_48x2_2
     44  2000				   mk_48x1_on =	1
     45  2000				   mk_48x2_2_on =	1
     46  2000					      jsr	draw_bmp_48x2_2
     47  2000					      ENDM
     48  2000
     49  2000					      MAC	draw_48x2_3
     50  2000				   mk_48x1_on =	1
     51  2000				   mk_48x2_3_on =	1
     52  2000					      jsr	draw_bmp_48x2_3
     53  2000					      ENDM
     54  2000
     55  2000					      MAC	draw_score
     56  2000				   mk_score_on =	1
     57  2000					      jsr	draw_score_display
     58  2000					      ENDM
     59  2000
     60  2000					      MAC	draw_gameselect
     61  2000				   mk_gameselect_on =	1
     62  2000					      jsr	draw_gameselect_display
     63  2000					      ENDM
     64  2000
     65  2000					      MAC	draw_space
     66  2000					      ldy	space
     67  2000				   .loop
     68  2000					      sta	WSYNC
     69  2000					      dey
     70  2000					      bne	.loop
     71  2000					      ENDM
     72  2000
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2000					      include	"titlescreen/titlescreen_layout.asm"
      1  2000
      2  2000							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2000							; in the order they were listed.
      4  2000							;
      5  2000							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2000							; it won't use any rom space.
      7  2000
      8  2000					      MAC	titlescreenlayout
      9  2000					      draw_96x2_1
     10  2000					      draw_space	2
     11  2000					      draw_48x1_1
     12  2000					      ENDM
     13  2000
     14  2000							; minikernel choices are:
     15  2000							; 
     16  2000							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     17  2000							;	The first, second, and third 48-wide single-line bitmap minikernels
     18  2000							;
     19  2000							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     20  2000							;	The first, second, and third 48-wide double-line bitmap minikernels
     21  2000							;
     22  2000							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     23  2000							;	The first, second, and third 96-wide double-line bitmap minikernels
     24  2000							;
     25  2000							; draw_gameselect
     26  2000							;	The game selection display minikernel
     27  2000							;
     28  2000							; draw_score
     29  2000							;	A minikernel that draws the score
     30  2000							;
     31  2000							; draw_space 10
     32  2000							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      4  2000
      5  2000				   .titledrawscreen
      6  2000				   title_eat_overscan
      7  2000							;bB runs in overscan. Wait for the overscan to run out...
      8  2000		       18		      clc
      9  2001		       ad 84 02 	      lda	INTIM
     10  2004		       30 fa		      bmi	title_eat_overscan
     11  2006		       4c 09 30 	      jmp	title_do_vertical_sync
     12  2009
     13  2009				   title_do_vertical_sync
     14  2009		       a9 02		      lda	#2
     15  200b		       85 02		      sta	WSYNC	;one line with VSYNC
     16  200d		       85 00		      sta	VSYNC	;enable VSYNC
     17  200f		       85 02		      sta	WSYNC	;one line with VSYNC
     18  2011		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2013		       a9 00		      lda	#0
     20  2015		       85 02		      sta	WSYNC	;one line with VSYNC
     21  2017		       85 00		      sta	VSYNC	;turn off VSYNC
     22  2019
     23  2019							;lda #42+128
     24  2019				  -	      ifnconst	vblank_time
     25  2019				  -	      lda	#42+128
     26  2019					      else
     27  2019		       a9 ab		      lda	#vblank_time+128
     28  201b					      endif
     29  201b
     30  201b		       8d 96 02 	      sta	TIM64T
     31  201e
     32  201e		       00 80	   titleframe =	missile0x
     33  201e		       e6 80		      inc	titleframe	; increment the frame counter
     34  2020
     35  2020				  -	      ifconst	.title_vblank
     36  2020				  -	      jsr	.title_vblank
     37  2020					      endif
     38  2020
     39  2020				   title_vblank_loop
     40  2020		       ad 84 02 	      lda	INTIM
     41  2023		       30 fb		      bmi	title_vblank_loop
     42  2025		       a9 00		      lda	#0
     43  2027		       85 02		      sta	WSYNC
     44  2029		       85 01		      sta	VBLANK
     45  202b		       85 1d		      sta	ENAM0
     46  202d		       85 1f		      sta	ENABL
     47  202f
     48  202f				   title_playfield
     49  202f
     50  202f							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     51  202f
     52  202f		       a9 e6		      lda	#230
     53  2031		       8d 96 02 	      sta	TIM64T
     54  2034
     55  2034		       a9 01		      lda	#1
     56  2036		       85 0a		      sta	CTRLPF
     57  2038		       18		      clc
     58  2039
     59  2039		       a9 00		      lda	#0
     60  203b		       85 02		      sta	WSYNC
     61  203d		       a5 da		      lda	titlescreencolor
     62  203f		       85 09		      sta	COLUBK
     63  2041
      0  2041					      titlescreenlayout
      0  2041					      draw_96x2_1
      1  2041		       00 01	   mk_96x2_1_on =	1
      2  2041		       20 cf 31 	      jsr	draw_bmp_96x2_1
      0  2044					      draw_space	2
      1  2044		       a4 dd		      ldy	space
      2  2046				   .loop
      3  2046		       85 02		      sta	WSYNC
      4  2048		       88		      dey
      5  2049		       d0 fb		      bne	.loop
      0  204b					      draw_48x1_1
      1  204b		       00 01	   mk_48x1_on =	1
      2  204b		       00 01	   mk_48x1_1_on =	1
      3  204b		       20 76 31 	      jsr	draw_bmp_48x1_1
     65  204e
     66  204e		       4c 71 33 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     67  2051
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  2051					      include	"titlescreen/titlescreen_color.asm"
      1  2051
      2  2051							; This is where the titlescreen background color gets set.
      3  2051							; You can also do a 'dim titlescreencolor=[letter]' in bB
      4  2051							; if you want to change the color on the fly.
      5  2051
      6  2051				  -	      ifnconst	titlescreencolor
      7  2051				  -titlescreencolor
      8  2051					      endif
      9  2051		       0e		      .byte.b	$0e
------- FILE titlescreen/asm/titlescreen.asm
     69  2052
     70  2052					      ifconst	mk_48x1_on
------- FILE titlescreen/asm/48x1_kernel.asm LEVEL 3 PASS 3
      0  2052					      include	"titlescreen/asm/48x1_kernel.asm"
      1  2052							; 48x1_kernel.asm
      2  2052							;	this is jumped to by any used 48x1adv minikernel, after the sprite
      3  2052							;	pointers have been setup and y has been set to the height of the image 
      4  2052
      5  2052				   draw_bmp_48x1adv
      6  2052
      7  2052		       a9 03		      lda	#3
      8  2054		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
      9  2056		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     10  2058		       a2 00		      ldx	#0
     11  205a		       86 1b		      stx	GRP0
     12  205c		       86 1c		      stx	GRP1
     13  205e		       18		      clc
     14  205f
     15  205f		       a5 da		      lda	titlescreencolor
     16  2061		       85 08		      sta	COLUPF
     17  2063		       a9 ff		      lda	#%11111111
     18  2065		       85 0e		      sta	PF1
     19  2067		       a9 01		      lda	#1
     20  2069		       85 0a		      sta	CTRLPF
     21  206b
     22  206b		       ba		      tsx
     23  206c		       86 f6		      stx	stack1	;save the stack pointer
     24  206e
     25  206e							;postion P0 and P1, Ball and Missile0
     26  206e		       85 02		      sta	WSYNC
     27  2070		       a9 20		      lda	#%00100000
     28  2072		       85 20		      sta	HMP0
     29  2074		       a9 30		      lda	#%00110000
     30  2076		       85 21		      sta	HMP1
     31  2078		       a9 00		      lda	#0
     32  207a		       85 24		      sta	HMBL
     33  207c		       a9 20		      lda	#%00100000
     34  207e		       85 22		      sta	HMM0
     35  2080
     36  2080		       85 02		      sta	WSYNC
      0  2082					      sleep	37
      1  2082				   .CYCLES    SET	37
      2  2082
      3  2082				  -	      IF	.CYCLES < 2
      4  2082				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2082				  -	      ERR
      6  2082					      ENDIF
      7  2082
      8  2082					      IF	.CYCLES & 1
      9  2082					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2082		       04 00		      nop	0
     11  2084				  -	      ELSE
     12  2084				  -	      bit	VSYNC
     13  2084					      ENDIF
     14  2084				   .CYCLES    SET	.CYCLES - 3
     15  2084					      ENDIF
     16  2084
     17  2084					      REPEAT	.CYCLES / 2
     18  2084		       ea		      nop
     17  2084					      REPEND
     18  2085		       ea		      nop
     17  2085					      REPEND
     18  2086		       ea		      nop
     17  2086					      REPEND
     18  2087		       ea		      nop
     17  2087					      REPEND
     18  2088		       ea		      nop
     17  2088					      REPEND
     18  2089		       ea		      nop
     17  2089					      REPEND
     18  208a		       ea		      nop
     17  208a					      REPEND
     18  208b		       ea		      nop
     17  208b					      REPEND
     18  208c		       ea		      nop
     17  208c					      REPEND
     18  208d		       ea		      nop
     17  208d					      REPEND
     18  208e		       ea		      nop
     17  208e					      REPEND
     18  208f		       ea		      nop
     17  208f					      REPEND
     18  2090		       ea		      nop
     17  2090					      REPEND
     18  2091		       ea		      nop
     17  2091					      REPEND
     18  2092		       ea		      nop
     17  2092					      REPEND
     18  2093		       ea		      nop
     17  2093					      REPEND
     18  2094		       ea		      nop
     19  2095					      REPEND
     38  2095		       85 10		      sta	RESP0
     39  2097		       85 11		      sta	RESP1
     40  2099		       85 02		      sta	WSYNC
      0  209b					      sleep	29
      1  209b				   .CYCLES    SET	29
      2  209b
      3  209b				  -	      IF	.CYCLES < 2
      4  209b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  209b				  -	      ERR
      6  209b					      ENDIF
      7  209b
      8  209b					      IF	.CYCLES & 1
      9  209b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  209b		       04 00		      nop	0
     11  209d				  -	      ELSE
     12  209d				  -	      bit	VSYNC
     13  209d					      ENDIF
     14  209d				   .CYCLES    SET	.CYCLES - 3
     15  209d					      ENDIF
     16  209d
     17  209d					      REPEAT	.CYCLES / 2
     18  209d		       ea		      nop
     17  209d					      REPEND
     18  209e		       ea		      nop
     17  209e					      REPEND
     18  209f		       ea		      nop
     17  209f					      REPEND
     18  20a0		       ea		      nop
     17  20a0					      REPEND
     18  20a1		       ea		      nop
     17  20a1					      REPEND
     18  20a2		       ea		      nop
     17  20a2					      REPEND
     18  20a3		       ea		      nop
     17  20a3					      REPEND
     18  20a4		       ea		      nop
     17  20a4					      REPEND
     18  20a5		       ea		      nop
     17  20a5					      REPEND
     18  20a6		       ea		      nop
     17  20a6					      REPEND
     18  20a7		       ea		      nop
     17  20a7					      REPEND
     18  20a8		       ea		      nop
     17  20a8					      REPEND
     18  20a9		       ea		      nop
     19  20aa					      REPEND
     42  20aa		       85 12		      sta	RESM0
      0  20ac					      sleep	7
      1  20ac				   .CYCLES    SET	7
      2  20ac
      3  20ac				  -	      IF	.CYCLES < 2
      4  20ac				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  20ac				  -	      ERR
      6  20ac					      ENDIF
      7  20ac
      8  20ac					      IF	.CYCLES & 1
      9  20ac					      IFNCONST	NO_ILLEGAL_OPCODES
     10  20ac		       04 00		      nop	0
     11  20ae				  -	      ELSE
     12  20ae				  -	      bit	VSYNC
     13  20ae					      ENDIF
     14  20ae				   .CYCLES    SET	.CYCLES - 3
     15  20ae					      ENDIF
     16  20ae
     17  20ae					      REPEAT	.CYCLES / 2
     18  20ae		       ea		      nop
     17  20ae					      REPEND
     18  20af		       ea		      nop
     19  20b0					      REPEND
     44  20b0		       85 14		      sta	RESBL
     45  20b2		       85 02		      sta	WSYNC
     46  20b4
     47  20b4		       85 2a		      sta	HMOVE	;3
     48  20b6
     49  20b6		       a9 03		      lda	#3	;2
     50  20b8		       85 25		      sta	VDELP0	;3
     51  20ba		       85 26		      sta	VDELP1	;3
     52  20bc
     53  20bc							;lda #2		;2
     54  20bc							;sta ENAM0	;3
     55  20bc							;sta ENABL	;3
     56  20bc		       a9 05		      lda	#5	;2
     57  20be		       85 0a		      sta	CTRLPF	;3
     58  20c0		       a9 00		      lda	#0	;2
     59  20c2		       85 27		      sta	VDELBL	;3
     60  20c4
     61  20c4							;enough cycles have passed for the HMOV, so we can clear HMCLR
     62  20c4		       85 2b		      sta	HMCLR
     63  20c6		       85 02		      sta	WSYNC
     64  20c8
      0  20c8					      sleep	(59-8)	;59
      1  20c8				   .CYCLES    SET	(59-8)
      2  20c8
      3  20c8				  -	      IF	.CYCLES < 2
      4  20c8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  20c8				  -	      ERR
      6  20c8					      ENDIF
      7  20c8
      8  20c8					      IF	.CYCLES & 1
      9  20c8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  20c8		       04 00		      nop	0
     11  20ca				  -	      ELSE
     12  20ca				  -	      bit	VSYNC
     13  20ca					      ENDIF
     14  20ca				   .CYCLES    SET	.CYCLES - 3
     15  20ca					      ENDIF
     16  20ca
     17  20ca					      REPEAT	.CYCLES / 2
     18  20ca		       ea		      nop
     17  20ca					      REPEND
     18  20cb		       ea		      nop
     17  20cb					      REPEND
     18  20cc		       ea		      nop
     17  20cc					      REPEND
     18  20cd		       ea		      nop
     17  20cd					      REPEND
     18  20ce		       ea		      nop
     17  20ce					      REPEND
     18  20cf		       ea		      nop
     17  20cf					      REPEND
     18  20d0		       ea		      nop
     17  20d0					      REPEND
     18  20d1		       ea		      nop
     17  20d1					      REPEND
     18  20d2		       ea		      nop
     17  20d2					      REPEND
     18  20d3		       ea		      nop
     17  20d3					      REPEND
     18  20d4		       ea		      nop
     17  20d4					      REPEND
     18  20d5		       ea		      nop
     17  20d5					      REPEND
     18  20d6		       ea		      nop
     17  20d6					      REPEND
     18  20d7		       ea		      nop
     17  20d7					      REPEND
     18  20d8		       ea		      nop
     17  20d8					      REPEND
     18  20d9		       ea		      nop
     17  20d9					      REPEND
     18  20da		       ea		      nop
     17  20da					      REPEND
     18  20db		       ea		      nop
     17  20db					      REPEND
     18  20dc		       ea		      nop
     17  20dc					      REPEND
     18  20dd		       ea		      nop
     17  20dd					      REPEND
     18  20de		       ea		      nop
     17  20de					      REPEND
     18  20df		       ea		      nop
     17  20df					      REPEND
     18  20e0		       ea		      nop
     17  20e0					      REPEND
     18  20e1		       ea		      nop
     19  20e2					      REPEND
     66  20e2
     67  20e2		       a9 02		      lda	#2
     68  20e4		       85 1f		      sta	ENABL
     69  20e6		       85 1d		      sta	ENAM0
     70  20e8
     71  20e8		       4c 00 31 	      jmp	pf48x1_loop	;3
     72  20eb
     73  20eb					      if	>. != >[.+$5e]
     74  2100		       00 00 00 00*	      align	256
     75  2100					      endif
     76  2100
     77  2100				   pf48x1_loop
      0  2100					      sleep	6
      1  2100				   .CYCLES    SET	6
      2  2100
      3  2100				  -	      IF	.CYCLES < 2
      4  2100				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2100				  -	      ERR
      6  2100					      ENDIF
      7  2100
      8  2100				  -	      IF	.CYCLES & 1
      9  2100				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2100				  -	      nop	0
     11  2100				  -	      ELSE
     12  2100				  -	      bit	VSYNC
     13  2100				  -	      ENDIF
     14  2100				  -.CYCLES    SET	.CYCLES - 3
     15  2100					      ENDIF
     16  2100
     17  2100					      REPEAT	.CYCLES / 2
     18  2100		       ea		      nop
     17  2100					      REPEND
     18  2101		       ea		      nop
     17  2101					      REPEND
     18  2102		       ea		      nop
     19  2103					      REPEND
     79  2103				   pf48x1_loop_line1
     80  2103
     81  2103		       b1 c5		      lda	(scorepointers+0),y	;5
     82  2105		       85 1b		      sta	GRP0	;3
     83  2107
     84  2107							;fix the lost bit0 in the first character
     85  2107		       2a		      rol		;2
     86  2108		       49 02		      eor	#2	;2
     87  210a		       85 1f		      sta	ENABL	;3
     88  210c
     89  210c		       b1 c7		      lda	(scorepointers+2),y	;5
     90  210e		       85 1c		      sta	GRP1	; 3
     91  2110
     92  2110		       b3 cf		      lax	(scorepointers+10),y	; 5
     93  2112		       9a		      txs		; 2	
     94  2113		       b3 cd		      lax	(scorepointers+8),y	; 5
     95  2115
     96  2115		       b1 c9		      lda	(scorepointers+4),y	; 5
     97  2117		       85 1b		      sta	GRP0
     98  2119		       b1 cb		      lda	(scorepointers+6),y	; 5
     99  211b		       85 1c		      sta	GRP1
    100  211d
    101  211d		       86 1b		      stx	GRP0
    102  211f		       ba		      tsx
    103  2120		       86 1c		      stx	GRP1
    104  2122		       84 1b		      sty	GRP0
    105  2124
    106  2124		       a5 bf		      lda	aux3	;3
    107  2126		       f0 09		      beq	pf48x1_loop_line2	;2/3
      0  2128					      sleep	2
      1  2128				   .CYCLES    SET	2
      2  2128
      3  2128				  -	      IF	.CYCLES < 2
      4  2128				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2128				  -	      ERR
      6  2128					      ENDIF
      7  2128
      8  2128				  -	      IF	.CYCLES & 1
      9  2128				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2128				  -	      nop	0
     11  2128				  -	      ELSE
     12  2128				  -	      bit	VSYNC
     13  2128				  -	      ENDIF
     14  2128				  -.CYCLES    SET	.CYCLES - 3
     15  2128					      ENDIF
     16  2128
     17  2128					      REPEAT	.CYCLES / 2
     18  2128		       ea		      nop
     19  2129					      REPEND
    109  2129
    110  2129		       88		      dey
    111  212a		       c0 ff		      cpy	#255
    112  212c		       d0 d5		      bne	pf48x1_loop_line1	;2/3
    113  212e
    114  212e		       4c 5e 31 	      jmp	pf48x1_codeend
    115  2131
    116  2131				   pf48x1_loop_line2
    117  2131
    118  2131		       b1 c5		      lda	(scorepointers+0),y	;5
    119  2133		       85 1b		      sta	GRP0	;3
    120  2135
    121  2135		       b1 c1		      lda	(aux5),y	;5
    122  2137		       85 8a		      sta	missile0y	;3
    123  2139
      0  2139					      sleep	7
      1  2139				   .CYCLES    SET	7
      2  2139
      3  2139				  -	      IF	.CYCLES < 2
      4  2139				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2139				  -	      ERR
      6  2139					      ENDIF
      7  2139
      8  2139					      IF	.CYCLES & 1
      9  2139					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2139		       04 00		      nop	0
     11  213b				  -	      ELSE
     12  213b				  -	      bit	VSYNC
     13  213b					      ENDIF
     14  213b				   .CYCLES    SET	.CYCLES - 3
     15  213b					      ENDIF
     16  213b
     17  213b					      REPEAT	.CYCLES / 2
     18  213b		       ea		      nop
     17  213b					      REPEND
     18  213c		       ea		      nop
     19  213d					      REPEND
    125  213d
    126  213d		       b1 c7		      lda	(scorepointers+2),y	;5
    127  213f		       85 1c		      sta	GRP1	; 3
    128  2141
    129  2141		       b3 cf		      lax	(scorepointers+10),y	; 5
    130  2143		       9a		      txs		; 2	
    131  2144		       b3 cd		      lax	(scorepointers+8),y	; 5
    132  2146
    133  2146		       b1 c9		      lda	(scorepointers+4),y	; 5
    134  2148		       85 1b		      sta	GRP0
    135  214a		       b1 cb		      lda	(scorepointers+6),y	; 5
    136  214c		       85 1c		      sta	GRP1
    137  214e		       86 1b		      stx	GRP0
    138  2150		       ba		      tsx
    139  2151		       86 1c		      stx	GRP1
    140  2153		       84 1b		      sty	GRP0
    141  2155
    142  2155		       a5 8a		      lda	missile0y
    143  2157		       85 06		      sta	COLUP0
    144  2159		       85 07		      sta	COLUP1
    145  215b
    146  215b							;sleep 6
    147  215b		       88		      dey
    148  215c							;cmp #255
    149  215c		       10 a5		      bpl	pf48x1_loop_line1	;2/3
    150  215e
    151  215e				   pf48x1_codeend
    152  215e							;echo "critical code in 48x1 is ",(pf48x1_codeend-pf48x1_loop), " bytes long."
    153  215e
    154  215e		       a9 00		      lda	#0
    155  2160		       85 1b		      sta	GRP0
    156  2162		       85 1c		      sta	GRP1
    157  2164		       85 1f		      sta	ENABL
    158  2166		       85 1d		      sta	ENAM0
    159  2168		       85 25		      sta	VDELP0
    160  216a		       85 26		      sta	VDELP1
    161  216c		       85 0d		      sta	PF0
    162  216e		       85 0e		      sta	PF1
    163  2170		       85 0f		      sta	PF2
    164  2172
    165  2172		       a6 f6		      ldx	stack1	;restore the stack pointer
    166  2174		       9a		      txs
    167  2175		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
     72  2176					      endif		;mk_48x1_on
     73  2176
     74  2176					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 3
      0  2176					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  2176
      2  2176				   draw_bmp_48x1_1
      3  2176
      4  2176		       a9 00		      lda	#0
      5  2178		       85 1b		      sta	GRP0
      6  217a		       85 1c		      sta	GRP1
      7  217c
      8  217c		       a0 1d		      ldy	#(bmp_48x1_1_window-1)
      9  217e
     10  217e							;setup score pointers to point at my bitmap slices instead
     11  217e		       a9 85		      lda	#<bmp_48x1_1_00
     12  2180		       18		      clc
     13  2181		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     14  2183				  -	      ifconst	bmp_48x1_1_index
     15  2183				  -	      sec
     16  2183				  -	      sbc	bmp_48x1_1_index
     17  2183					      endif
     18  2183		       85 c5		      sta	scorepointers+0
     19  2185		       a9 33		      lda	#>bmp_48x1_1_00
     20  2187		       85 c6		      sta	scorepointers+1
     21  2189
     22  2189
     23  2189		       a9 a4		      lda	#<bmp_48x1_1_01
     24  218b		       18		      clc
     25  218c		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     26  218e				  -	      ifconst	bmp_48x1_1_index
     27  218e				  -	      sec
     28  218e				  -	      sbc	bmp_48x1_1_index
     29  218e					      endif
     30  218e		       85 c7		      sta	scorepointers+2
     31  2190		       a9 33		      lda	#>bmp_48x1_1_01
     32  2192		       85 c8		      sta	scorepointers+3
     33  2194
     34  2194
     35  2194		       a9 c3		      lda	#<bmp_48x1_1_02
     36  2196		       18		      clc
     37  2197		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     38  2199				  -	      ifconst	bmp_48x1_1_index
     39  2199				  -	      sec
     40  2199				  -	      sbc	bmp_48x1_1_index
     41  2199					      endif
     42  2199		       85 c9		      sta	scorepointers+4
     43  219b		       a9 33		      lda	#>bmp_48x1_1_02
     44  219d		       85 ca		      sta	scorepointers+5
     45  219f
     46  219f
     47  219f		       a9 00		      lda	#<bmp_48x1_1_03
     48  21a1		       18		      clc
     49  21a2		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     50  21a4				  -	      ifconst	bmp_48x1_1_index
     51  21a4				  -	      sec
     52  21a4				  -	      sbc	bmp_48x1_1_index
     53  21a4					      endif
     54  21a4		       85 cb		      sta	scorepointers+6
     55  21a6		       a9 34		      lda	#>bmp_48x1_1_03
     56  21a8		       85 cc		      sta	scorepointers+7
     57  21aa
     58  21aa
     59  21aa		       a9 1f		      lda	#<bmp_48x1_1_04
     60  21ac		       18		      clc
     61  21ad		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  21af				  -	      ifconst	bmp_48x1_1_index
     63  21af				  -	      sec
     64  21af				  -	      sbc	bmp_48x1_1_index
     65  21af					      endif
     66  21af		       85 cd		      sta	scorepointers+8
     67  21b1		       a9 34		      lda	#>bmp_48x1_1_04
     68  21b3		       85 ce		      sta	scorepointers+9
     69  21b5
     70  21b5
     71  21b5		       a9 3e		      lda	#<bmp_48x1_1_05
     72  21b7		       18		      clc
     73  21b8		       69 00		      adc	#(#bmp_48x1_1_height-#bmp_48x1_1_window)
     74  21ba				  -	      ifconst	bmp_48x1_1_index
     75  21ba				  -	      sec
     76  21ba				  -	      sbc	bmp_48x1_1_index
     77  21ba					      endif
     78  21ba		       85 cf		      sta	scorepointers+10
     79  21bc		       a9 34		      lda	#>bmp_48x1_1_05
     80  21be		       85 d0		      sta	scorepointers+11
     81  21c0
     82  21c0		       a9 01		      lda	#1	;single line kernel
     83  21c2		       85 bf		      sta	aux3
     84  21c4
     85  21c4		       a5 dc		      lda	bmp_48x1_1_color
     86  21c6		       85 06		      sta	COLUP0	;3
     87  21c8		       85 07		      sta	COLUP1	;3
     88  21ca		       85 2b		      sta	HMCLR	;3
     89  21cc
     90  21cc
     91  21cc		       4c 52 30 	      jmp	draw_bmp_48x1adv
     92  21cf
------- FILE titlescreen/asm/titlescreen.asm
     76  21cf					      endif		;mk_48x1_1_on
     77  21cf
     78  21cf				  -	      ifconst	mk_48x1_2_on
     79  21cf				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  21cf					      endif		;mk_48x1_2_on
     81  21cf
     82  21cf				  -	      ifconst	mk_48x1_3_on
     83  21cf				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  21cf					      endif		;mk_48x1_3_on
     85  21cf
     86  21cf				  -	      ifconst	mk_48x2_1_on
     87  21cf				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
     88  21cf					      endif		;mk_48x2_1_on
     89  21cf
     90  21cf				  -	      ifconst	mk_48x2_2_on
     91  21cf				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
     92  21cf					      endif		;mk_48x2_2_on
     93  21cf
     94  21cf				  -	      ifconst	mk_48x2_3_on
     95  21cf				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
     96  21cf					      endif		;mk_48x2_3_on
     97  21cf
     98  21cf					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  21cf					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  21cf				   draw_bmp_96x2_1
      2  21cf
      3  21cf				  -	      ifconst	bmp_96x2_1_index
      4  21cf				  -	      lda	#(bmp_96x2_1_height-1)
      5  21cf				  -	      sec
      6  21cf				  -	      sbc	bmp_96x2_1_index
      7  21cf				  -	      tay
      8  21cf				  -	      sbc	#bmp_96x2_1_window
      9  21cf				  -	      sta	temp1
     10  21cf					      else
     11  21cf		       a0 46		      ldy	#(bmp_96x2_1_window-1)
     12  21d1		       a9 ff		      lda	#255
     13  21d3		       85 cb		      sta	temp1
     14  21d5					      endif
     15  21d5
     16  21d5		       a9 03		      lda	#3
     17  21d7		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart 
     18  21d9		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart 
     19  21db		       a9 00		      lda	#0
     20  21dd
     21  21dd		       b9 5e 34 	      lda	bmp_96x2_1_colors,y	;4
     22  21e0				  -	      ifconst	bmp_96x2_1_fade
     23  21e0				  -	      and	bmp_96x2_1_fade
     24  21e0					      endif
     25  21e0		       85 06		      sta	COLUP0	;3
     26  21e2		       85 07		      sta	COLUP1	;3
     27  21e4		       85 2b		      sta	HMCLR	;3
     28  21e6
     29  21e6		       a5 80		      lda	titleframe
     30  21e8		       29 01		      and	#1
     31  21ea		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  21ec		       4c 96 32 	      jmp	pf96x2_1_frame1
     33  21ef				   jmp_pf96x2_1_frame0
     34  21ef		       4c f2 31 	      jmp	pf96x2_1_frame0
     35  21f2
     36  21f2				   pf96x2_1_frame0
     37  21f2							;postion P0 and P1
     38  21f2		       85 02		      sta	WSYNC
     39  21f4		       a9 e0		      lda	#%11100000
     40  21f6		       85 20		      sta	HMP0
     41  21f8		       a9 10		      lda	#%00010000
     42  21fa		       85 21		      sta	HMP1
     43  21fc		       85 02		      sta	WSYNC
      0  21fe					      sleep	28
      1  21fe				   .CYCLES    SET	28
      2  21fe
      3  21fe				  -	      IF	.CYCLES < 2
      4  21fe				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21fe				  -	      ERR
      6  21fe					      ENDIF
      7  21fe
      8  21fe				  -	      IF	.CYCLES & 1
      9  21fe				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21fe				  -	      nop	0
     11  21fe				  -	      ELSE
     12  21fe				  -	      bit	VSYNC
     13  21fe				  -	      ENDIF
     14  21fe				  -.CYCLES    SET	.CYCLES - 3
     15  21fe					      ENDIF
     16  21fe
     17  21fe					      REPEAT	.CYCLES / 2
     18  21fe		       ea		      nop
     17  21fe					      REPEND
     18  21ff		       ea		      nop
     17  21ff					      REPEND
     18  2200		       ea		      nop
     17  2200					      REPEND
     18  2201		       ea		      nop
     17  2201					      REPEND
     18  2202		       ea		      nop
     17  2202					      REPEND
     18  2203		       ea		      nop
     17  2203					      REPEND
     18  2204		       ea		      nop
     17  2204					      REPEND
     18  2205		       ea		      nop
     17  2205					      REPEND
     18  2206		       ea		      nop
     17  2206					      REPEND
     18  2207		       ea		      nop
     17  2207					      REPEND
     18  2208		       ea		      nop
     17  2208					      REPEND
     18  2209		       ea		      nop
     17  2209					      REPEND
     18  220a		       ea		      nop
     17  220a					      REPEND
     18  220b		       ea		      nop
     19  220c					      REPEND
     45  220c		       85 10		      sta	RESP0
      0  220e					      sleep	14
      1  220e				   .CYCLES    SET	14
      2  220e
      3  220e				  -	      IF	.CYCLES < 2
      4  220e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  220e				  -	      ERR
      6  220e					      ENDIF
      7  220e
      8  220e				  -	      IF	.CYCLES & 1
      9  220e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  220e				  -	      nop	0
     11  220e				  -	      ELSE
     12  220e				  -	      bit	VSYNC
     13  220e				  -	      ENDIF
     14  220e				  -.CYCLES    SET	.CYCLES - 3
     15  220e					      ENDIF
     16  220e
     17  220e					      REPEAT	.CYCLES / 2
     18  220e		       ea		      nop
     17  220e					      REPEND
     18  220f		       ea		      nop
     17  220f					      REPEND
     18  2210		       ea		      nop
     17  2210					      REPEND
     18  2211		       ea		      nop
     17  2211					      REPEND
     18  2212		       ea		      nop
     17  2212					      REPEND
     18  2213		       ea		      nop
     17  2213					      REPEND
     18  2214		       ea		      nop
     19  2215					      REPEND
     47  2215		       85 11		      sta	RESP1
     48  2217		       85 02		      sta	WSYNC
     49  2219		       85 2a		      sta	HMOVE
     50  221b
     51  221b		       85 02		      sta	WSYNC
     52  221d		       85 2b		      sta	HMCLR
     53  221f		       85 02		      sta	WSYNC
     54  2221
      0  2221					      sleep	4
      1  2221				   .CYCLES    SET	4
      2  2221
      3  2221				  -	      IF	.CYCLES < 2
      4  2221				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2221				  -	      ERR
      6  2221					      ENDIF
      7  2221
      8  2221				  -	      IF	.CYCLES & 1
      9  2221				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2221				  -	      nop	0
     11  2221				  -	      ELSE
     12  2221				  -	      bit	VSYNC
     13  2221				  -	      ENDIF
     14  2221				  -.CYCLES    SET	.CYCLES - 3
     15  2221					      ENDIF
     16  2221
     17  2221					      REPEAT	.CYCLES / 2
     18  2221		       ea		      nop
     17  2221					      REPEND
     18  2222		       ea		      nop
     19  2223					      REPEND
     56  2223		       4c 26 32 	      jmp	pfline_96x2_1_frame0
     57  2226							;align so our branch doesn't unexpectedly cross a page...
     58  2226				  -	      if	>. != >[.+$70]
     59  2226				  -	      align	256
     60  2226					      endif
     61  2226
     62  2226				   pfline_96x2_1_frame0
     63  2226		       a9 80		      lda	#$80	;2
     64  2228		       85 20		      sta	HMP0	;3
     65  222a		       85 21		      sta	HMP1	;3
     66  222c
     67  222c		       b9 90 36 	      lda	bmp_96x2_1_06,y	;4
     68  222f		       85 1c		      sta	GRP1	;3
     69  2231
     70  2231		       b9 a5 34 	      lda	bmp_96x2_1_00,y
     71  2234		       85 1b		      sta	GRP0
     72  2236		       b9 48 35 	      lda	bmp_96x2_1_02,y
     73  2239		       85 1b		      sta	GRP0
     74  223b		       b9 00 36 	      lda	bmp_96x2_1_04,y
     75  223e		       85 1b		      sta	GRP0
     76  2240
      0  2240					      sleep	2
      1  2240				   .CYCLES    SET	2
      2  2240
      3  2240				  -	      IF	.CYCLES < 2
      4  2240				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2240				  -	      ERR
      6  2240					      ENDIF
      7  2240
      8  2240				  -	      IF	.CYCLES & 1
      9  2240				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2240				  -	      nop	0
     11  2240				  -	      ELSE
     12  2240				  -	      bit	VSYNC
     13  2240				  -	      ENDIF
     14  2240				  -.CYCLES    SET	.CYCLES - 3
     15  2240					      ENDIF
     16  2240
     17  2240					      REPEAT	.CYCLES / 2
     18  2240		       ea		      nop
     19  2241					      REPEND
     78  2241
     79  2241		       b9 48 37 	      lda	bmp_96x2_1_08,y
     80  2244		       85 1c		      sta	GRP1
     81  2246		       b9 00 38 	      lda	bmp_96x2_1_10,y
     82  2249		       85 1c		      sta	GRP1
     83  224b
     84  224b		       b9 00 35 	      lda	bmp_96x2_1_01,y
     85  224e		       85 1b		      sta	GRP0
     86  2250
      0  2250					      sleep	8
      1  2250				   .CYCLES    SET	8
      2  2250
      3  2250				  -	      IF	.CYCLES < 2
      4  2250				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2250				  -	      ERR
      6  2250					      ENDIF
      7  2250
      8  2250				  -	      IF	.CYCLES & 1
      9  2250				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2250				  -	      nop	0
     11  2250				  -	      ELSE
     12  2250				  -	      bit	VSYNC
     13  2250				  -	      ENDIF
     14  2250				  -.CYCLES    SET	.CYCLES - 3
     15  2250					      ENDIF
     16  2250
     17  2250					      REPEAT	.CYCLES / 2
     18  2250		       ea		      nop
     17  2250					      REPEND
     18  2251		       ea		      nop
     17  2251					      REPEND
     18  2252		       ea		      nop
     17  2252					      REPEND
     18  2253		       ea		      nop
     19  2254					      REPEND
     88  2254
     89  2254							;sta WSYNC	;=0
     90  2254		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2256
     92  2256		       b9 5d 34 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  2259				  -	      ifconst	bmp_96x2_1_fade
     94  2259				  -	      and	bmp_96x2_1_fade
     95  2259					      else
      0  2259					      sleep	3
      1  2259				   .CYCLES    SET	3
      2  2259
      3  2259				  -	      IF	.CYCLES < 2
      4  2259				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2259				  -	      ERR
      6  2259					      ENDIF
      7  2259
      8  2259					      IF	.CYCLES & 1
      9  2259					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2259		       04 00		      nop	0
     11  225b				  -	      ELSE
     12  225b				  -	      bit	VSYNC
     13  225b					      ENDIF
     14  225b				   .CYCLES    SET	.CYCLES - 3
     15  225b					      ENDIF
     16  225b
     17  225b				  -	      REPEAT	.CYCLES / 2
     18  225b				  -	      nop
     19  225b					      REPEND
     97  225b					      endif
     98  225b		       aa		      tax
     99  225c
    100  225c		       a9 00		      lda	#0	;2
    101  225e		       85 20		      sta	HMP0	;3
    102  2260		       85 21		      sta	HMP1	;3
    103  2262
      0  2262					      sleep	7
      1  2262				   .CYCLES    SET	7
      2  2262
      3  2262				  -	      IF	.CYCLES < 2
      4  2262				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2262				  -	      ERR
      6  2262					      ENDIF
      7  2262
      8  2262					      IF	.CYCLES & 1
      9  2262					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2262		       04 00		      nop	0
     11  2264				  -	      ELSE
     12  2264				  -	      bit	VSYNC
     13  2264					      ENDIF
     14  2264				   .CYCLES    SET	.CYCLES - 3
     15  2264					      ENDIF
     16  2264
     17  2264					      REPEAT	.CYCLES / 2
     18  2264		       ea		      nop
     17  2264					      REPEND
     18  2265		       ea		      nop
     19  2266					      REPEND
    105  2266
    106  2266		       b9 00 37 	      lda	bmp_96x2_1_07,y
    107  2269		       85 1c		      sta	GRP1
    108  226b
    109  226b		       b9 90 35 	      lda	bmp_96x2_1_03,y	;5
    110  226e		       85 1b		      sta	GRP0	;3 =  8
    111  2270		       b9 48 36 	      lda	bmp_96x2_1_05,y	;5
    112  2273		       85 1b		      sta	GRP0	;3 =  8
    113  2275
      0  2275					      sleep	2
      1  2275				   .CYCLES    SET	2
      2  2275
      3  2275				  -	      IF	.CYCLES < 2
      4  2275				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2275				  -	      ERR
      6  2275					      ENDIF
      7  2275
      8  2275				  -	      IF	.CYCLES & 1
      9  2275				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2275				  -	      nop	0
     11  2275				  -	      ELSE
     12  2275				  -	      bit	VSYNC
     13  2275				  -	      ENDIF
     14  2275				  -.CYCLES    SET	.CYCLES - 3
     15  2275					      ENDIF
     16  2275
     17  2275					      REPEAT	.CYCLES / 2
     18  2275		       ea		      nop
     19  2276					      REPEND
    115  2276
    116  2276		       b9 90 37 	      lda	bmp_96x2_1_09,y	;5
    117  2279		       85 1c		      sta	GRP1	;3 =  8
    118  227b		       b9 48 38 	      lda	bmp_96x2_1_11,y	;5
    119  227e		       85 1c		      sta	GRP1	;3 =  8
    120  2280
      0  2280					      sleep	2
      1  2280				   .CYCLES    SET	2
      2  2280
      3  2280				  -	      IF	.CYCLES < 2
      4  2280				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2280				  -	      ERR
      6  2280					      ENDIF
      7  2280
      8  2280				  -	      IF	.CYCLES & 1
      9  2280				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2280				  -	      nop	0
     11  2280				  -	      ELSE
     12  2280				  -	      bit	VSYNC
     13  2280				  -	      ENDIF
     14  2280				  -.CYCLES    SET	.CYCLES - 3
     15  2280					      ENDIF
     16  2280
     17  2280					      REPEAT	.CYCLES / 2
     18  2280		       ea		      nop
     19  2281					      REPEND
    122  2281		       86 07		      stx	COLUP1
    123  2283		       86 06		      stx	COLUP0
    124  2285
    125  2285
    126  2285		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE 
      0  2287					      sleep	2
      1  2287				   .CYCLES    SET	2
      2  2287
      3  2287				  -	      IF	.CYCLES < 2
      4  2287				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2287				  -	      ERR
      6  2287					      ENDIF
      7  2287
      8  2287				  -	      IF	.CYCLES & 1
      9  2287				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2287				  -	      nop	0
     11  2287				  -	      ELSE
     12  2287				  -	      bit	VSYNC
     13  2287				  -	      ENDIF
     14  2287				  -.CYCLES    SET	.CYCLES - 3
     15  2287					      ENDIF
     16  2287
     17  2287					      REPEAT	.CYCLES / 2
     18  2287		       ea		      nop
     19  2288					      REPEND
    128  2288		       88		      dey
    129  2289
    130  2289		       c4 cb		      cpy	temp1	;3
    131  228b		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    132  228d
    133  228d				   pf96x2_1_0codeend
    134  228d							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    135  228d
    136  228d		       a9 00		      lda	#0
    137  228f		       85 1b		      sta	GRP0
    138  2291		       85 1c		      sta	GRP1
    139  2293		       4c 6e 33 	      jmp	pfdone_96x2_1
    140  2296
    141  2296
    142  2296				   pf96x2_1_frame1
    143  2296
    144  2296							;postion P0 and P1
    145  2296		       85 02		      sta	WSYNC
    146  2298		       a9 20		      lda	#%00100000
    147  229a		       85 20		      sta	HMP0
    148  229c		       a9 00		      lda	#0
    149  229e		       a9 f0		      lda	#%11110000
    150  22a0		       85 21		      sta	HMP1
    151  22a2		       85 02		      sta	WSYNC
      0  22a4					      sleep	32
      1  22a4				   .CYCLES    SET	32
      2  22a4
      3  22a4				  -	      IF	.CYCLES < 2
      4  22a4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a4				  -	      ERR
      6  22a4					      ENDIF
      7  22a4
      8  22a4				  -	      IF	.CYCLES & 1
      9  22a4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a4				  -	      nop	0
     11  22a4				  -	      ELSE
     12  22a4				  -	      bit	VSYNC
     13  22a4				  -	      ENDIF
     14  22a4				  -.CYCLES    SET	.CYCLES - 3
     15  22a4					      ENDIF
     16  22a4
     17  22a4					      REPEAT	.CYCLES / 2
     18  22a4		       ea		      nop
     17  22a4					      REPEND
     18  22a5		       ea		      nop
     17  22a5					      REPEND
     18  22a6		       ea		      nop
     17  22a6					      REPEND
     18  22a7		       ea		      nop
     17  22a7					      REPEND
     18  22a8		       ea		      nop
     17  22a8					      REPEND
     18  22a9		       ea		      nop
     17  22a9					      REPEND
     18  22aa		       ea		      nop
     17  22aa					      REPEND
     18  22ab		       ea		      nop
     17  22ab					      REPEND
     18  22ac		       ea		      nop
     17  22ac					      REPEND
     18  22ad		       ea		      nop
     17  22ad					      REPEND
     18  22ae		       ea		      nop
     17  22ae					      REPEND
     18  22af		       ea		      nop
     17  22af					      REPEND
     18  22b0		       ea		      nop
     17  22b0					      REPEND
     18  22b1		       ea		      nop
     17  22b1					      REPEND
     18  22b2		       ea		      nop
     17  22b2					      REPEND
     18  22b3		       ea		      nop
     19  22b4					      REPEND
    153  22b4		       85 10		      sta	RESP0
      0  22b6					      sleep	12
      1  22b6				   .CYCLES    SET	12
      2  22b6
      3  22b6				  -	      IF	.CYCLES < 2
      4  22b6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22b6				  -	      ERR
      6  22b6					      ENDIF
      7  22b6
      8  22b6				  -	      IF	.CYCLES & 1
      9  22b6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22b6				  -	      nop	0
     11  22b6				  -	      ELSE
     12  22b6				  -	      bit	VSYNC
     13  22b6				  -	      ENDIF
     14  22b6				  -.CYCLES    SET	.CYCLES - 3
     15  22b6					      ENDIF
     16  22b6
     17  22b6					      REPEAT	.CYCLES / 2
     18  22b6		       ea		      nop
     17  22b6					      REPEND
     18  22b7		       ea		      nop
     17  22b7					      REPEND
     18  22b8		       ea		      nop
     17  22b8					      REPEND
     18  22b9		       ea		      nop
     17  22b9					      REPEND
     18  22ba		       ea		      nop
     17  22ba					      REPEND
     18  22bb		       ea		      nop
     19  22bc					      REPEND
    155  22bc		       85 11		      sta	RESP1
    156  22be		       85 02		      sta	WSYNC
    157  22c0		       85 2a		      sta	HMOVE
    158  22c2
    159  22c2		       85 02		      sta	WSYNC
    160  22c4		       85 2b		      sta	HMCLR
    161  22c6
    162  22c6
    163  22c6
    164  22c6		       85 02		      sta	WSYNC
      0  22c8					      sleep	3
      1  22c8				   .CYCLES    SET	3
      2  22c8
      3  22c8				  -	      IF	.CYCLES < 2
      4  22c8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22c8				  -	      ERR
      6  22c8					      ENDIF
      7  22c8
      8  22c8					      IF	.CYCLES & 1
      9  22c8					      IFNCONST	NO_ILLEGAL_OPCODES
     10  22c8		       04 00		      nop	0
     11  22ca				  -	      ELSE
     12  22ca				  -	      bit	VSYNC
     13  22ca					      ENDIF
     14  22ca				   .CYCLES    SET	.CYCLES - 3
     15  22ca					      ENDIF
     16  22ca
     17  22ca				  -	      REPEAT	.CYCLES / 2
     18  22ca				  -	      nop
     19  22ca					      REPEND
    166  22ca		       4c 00 33 	      jmp	pfline_96x2_1_frame1
    167  22cd
    168  22cd							;align so our branch doesn't unexpectedly cross a page...
    169  22cd					      if	>. != >[.+$70]
    170  2300		       00 00 00 00*	      align	256
    171  2300					      endif
    172  2300
    173  2300				   pfline_96x2_1_frame1
    174  2300
    175  2300		       85 2a		      sta	HMOVE
    176  2302
    177  2302		       b9 00 37 	      lda	bmp_96x2_1_07,y	;4
    178  2305		       85 1c		      sta	GRP1	;3
    179  2307
    180  2307		       a9 00		      lda	#$0	;2
    181  2309		       85 20		      sta	HMP0	;3
    182  230b		       85 21		      sta	HMP1	;3
    183  230d
    184  230d		       b9 00 35 	      lda	bmp_96x2_1_01,y
    185  2310		       8d 1b 00 	      sta.w	GRP0
    186  2313		       b9 90 35 	      lda	bmp_96x2_1_03,y
    187  2316		       85 1b		      sta	GRP0
    188  2318		       b9 48 36 	      lda	bmp_96x2_1_05,y
    189  231b		       85 1b		      sta	GRP0
    190  231d
      0  231d					      sleep	2
      1  231d				   .CYCLES    SET	2
      2  231d
      3  231d				  -	      IF	.CYCLES < 2
      4  231d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  231d				  -	      ERR
      6  231d					      ENDIF
      7  231d
      8  231d				  -	      IF	.CYCLES & 1
      9  231d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  231d				  -	      nop	0
     11  231d				  -	      ELSE
     12  231d				  -	      bit	VSYNC
     13  231d				  -	      ENDIF
     14  231d				  -.CYCLES    SET	.CYCLES - 3
     15  231d					      ENDIF
     16  231d
     17  231d					      REPEAT	.CYCLES / 2
     18  231d		       ea		      nop
     19  231e					      REPEND
    192  231e
    193  231e		       b9 90 37 	      lda	bmp_96x2_1_09,y
    194  2321		       85 1c		      sta	GRP1
    195  2323		       b9 48 38 	      lda	bmp_96x2_1_11,y
    196  2326		       85 1c		      sta	GRP1
    197  2328
    198  2328		       b9 a5 34 	      lda	bmp_96x2_1_00,y
    199  232b		       85 1b		      sta	GRP0
    200  232d
    201  232d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    202  2330
    203  2330							;sta WSYNC	;=0 -----------------------------------------
    204  2330
    205  2330		       b9 90 36 	      lda	bmp_96x2_1_06,y
    206  2333		       85 1c		      sta	GRP1
    207  2335
      0  2335					      sleep	8
      1  2335				   .CYCLES    SET	8
      2  2335
      3  2335				  -	      IF	.CYCLES < 2
      4  2335				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2335				  -	      ERR
      6  2335					      ENDIF
      7  2335
      8  2335				  -	      IF	.CYCLES & 1
      9  2335				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2335				  -	      nop	0
     11  2335				  -	      ELSE
     12  2335				  -	      bit	VSYNC
     13  2335				  -	      ENDIF
     14  2335				  -.CYCLES    SET	.CYCLES - 3
     15  2335					      ENDIF
     16  2335
     17  2335					      REPEAT	.CYCLES / 2
     18  2335		       ea		      nop
     17  2335					      REPEND
     18  2336		       ea		      nop
     17  2336					      REPEND
     18  2337		       ea		      nop
     17  2337					      REPEND
     18  2338		       ea		      nop
     19  2339					      REPEND
    209  2339
    210  2339		       b9 5d 34 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    211  233c		       aa		      tax		;2
    212  233d
      0  233d					      sleep	3
      1  233d				   .CYCLES    SET	3
      2  233d
      3  233d				  -	      IF	.CYCLES < 2
      4  233d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  233d				  -	      ERR
      6  233d					      ENDIF
      7  233d
      8  233d					      IF	.CYCLES & 1
      9  233d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  233d		       04 00		      nop	0
     11  233f				  -	      ELSE
     12  233f				  -	      bit	VSYNC
     13  233f					      ENDIF
     14  233f				   .CYCLES    SET	.CYCLES - 3
     15  233f					      ENDIF
     16  233f
     17  233f				  -	      REPEAT	.CYCLES / 2
     18  233f				  -	      nop
     19  233f					      REPEND
    214  233f
    215  233f		       a9 80		      lda	#$80	;2
    216  2341		       85 20		      sta	HMP0	;3
    217  2343		       85 21		      sta	HMP1	;3
    218  2345
    219  2345
    220  2345		       b9 48 35 	      lda	bmp_96x2_1_02,y	;5
    221  2348		       85 1b		      sta	GRP0	;3 =  8
    222  234a
    223  234a		       b9 00 36 	      lda	bmp_96x2_1_04,y	;5
    224  234d		       85 1b		      sta	GRP0	;3 =  8
    225  234f
      0  234f					      sleep	2
      1  234f				   .CYCLES    SET	2
      2  234f
      3  234f				  -	      IF	.CYCLES < 2
      4  234f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  234f				  -	      ERR
      6  234f					      ENDIF
      7  234f
      8  234f				  -	      IF	.CYCLES & 1
      9  234f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  234f				  -	      nop	0
     11  234f				  -	      ELSE
     12  234f				  -	      bit	VSYNC
     13  234f				  -	      ENDIF
     14  234f				  -.CYCLES    SET	.CYCLES - 3
     15  234f					      ENDIF
     16  234f
     17  234f					      REPEAT	.CYCLES / 2
     18  234f		       ea		      nop
     19  2350					      REPEND
    227  2350
    228  2350		       b9 48 37 	      lda	bmp_96x2_1_08,y	;5
    229  2353		       85 1c		      sta	GRP1	;3 =  8
    230  2355
    231  2355		       b9 00 38 	      lda	bmp_96x2_1_10,y	;5
    232  2358		       85 1c		      sta	GRP1	;3 =  8
    233  235a
      0  235a					      sleep	4
      1  235a				   .CYCLES    SET	4
      2  235a
      3  235a				  -	      IF	.CYCLES < 2
      4  235a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  235a				  -	      ERR
      6  235a					      ENDIF
      7  235a
      8  235a				  -	      IF	.CYCLES & 1
      9  235a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  235a				  -	      nop	0
     11  235a				  -	      ELSE
     12  235a				  -	      bit	VSYNC
     13  235a				  -	      ENDIF
     14  235a				  -.CYCLES    SET	.CYCLES - 3
     15  235a					      ENDIF
     16  235a
     17  235a					      REPEAT	.CYCLES / 2
     18  235a		       ea		      nop
     17  235a					      REPEND
     18  235b		       ea		      nop
     19  235c					      REPEND
    235  235c
    236  235c		       88		      dey
    237  235d
    238  235d		       8a		      txa
    239  235e				  -	      ifconst	bmp_96x2_1_fade
    240  235e				  -	      and	bmp_96x2_1_fade
    241  235e					      else
      0  235e					      sleep	3
      1  235e				   .CYCLES    SET	3
      2  235e
      3  235e				  -	      IF	.CYCLES < 2
      4  235e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  235e				  -	      ERR
      6  235e					      ENDIF
      7  235e
      8  235e					      IF	.CYCLES & 1
      9  235e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  235e		       04 00		      nop	0
     11  2360				  -	      ELSE
     12  2360				  -	      bit	VSYNC
     13  2360					      ENDIF
     14  2360				   .CYCLES    SET	.CYCLES - 3
     15  2360					      ENDIF
     16  2360
     17  2360				  -	      REPEAT	.CYCLES / 2
     18  2360				  -	      nop
     19  2360					      REPEND
    243  2360					      endif
    244  2360		       85 07		      sta	COLUP1	;3
    245  2362		       85 06		      sta	COLUP0	;3
    246  2364
    247  2364		       c4 cb		      cpy	temp1	;2
    248  2366		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    249  2368
    250  2368				   pf96x2_1_1codeend
    251  2368							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    252  2368
    253  2368		       a9 00		      lda	#0
    254  236a		       85 1b		      sta	GRP0
    255  236c		       85 1c		      sta	GRP1
    256  236e
    257  236e				   pfdone_96x2_1
    258  236e		       85 02		      sta	WSYNC	; debug
    259  2370
    260  2370		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    100  2371					      endif		;mk_96x2_1_on
    101  2371
    102  2371				  -	      ifconst	mk_96x2_2_on
    103  2371				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    104  2371					      endif		;mk_96x2_2_on
    105  2371
    106  2371				  -	      ifconst	mk_96x2_3_on
    107  2371				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    108  2371					      endif		;mk_96x2_3_on
    109  2371
    110  2371				  -	      ifconst	mk_score_on
    111  2371				  -	      include	"titlescreen/asm/score_kernel.asm"
    112  2371					      endif		;mk_score_on
    113  2371
    114  2371				  -	      ifconst	mk_gameselect_on
    115  2371				  -	      include	"titlescreen/asm/gameselect_kernel.asm"
    116  2371					      endif		;mk_gameselect_on
    117  2371
    118  2371				   PFWAIT
    119  2371		       ad 84 02 	      lda	INTIM
    120  2374		       d0 fb		      bne	PFWAIT
    121  2376
    122  2376				   OVERSCAN
    123  2376							;lda #35+128 
    124  2376
    125  2376				  -	      ifnconst	overscan_time
    126  2376				  -	      lda	#35+128
    127  2376					      else
    128  2376		       a9 a1		      lda	#overscan_time+128-3-1
    129  2378					      endif
    130  2378
    131  2378
    132  2378		       8d 96 02 	      sta	TIM64T
    133  237b		       a9 c2		      lda	#%11000010
    134  237d		       85 02		      sta	WSYNC
    135  237f		       85 01		      sta	VBLANK
      0  2381					      RETURN
      1  2381				  -	      ifnconst	bankswitch
      2  2381				  -	      rts
      3  2381					      else
      4  2381		       4c dd ff 	      jmp	BS_return
      5  2384					      endif
    137  2384
    138  2384					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 3
      0  2384					      include	"titlescreen/48x1_1_image.asm"
      1  2384
      2  2384							; *** if you want to modify the bitmap color on the fly, just dim a
      3  2384							; *** variable in bB called 'bmp_48x1_1_color' , and use it to set the
      4  2384							; *** color.
      5  2384
      6  2384							;*** The height of the displayed data...
      7  2384		       00 1e	   bmp_48x1_1_window =	30
      8  2384
      9  2384							;*** The height of the bitmap data. This can be larger than
     10  2384							;*** the displayed data height, if you are scrolling or animating
     11  2384							;*** the data...
     12  2384		       00 1e	   bmp_48x1_1_height =	30
     13  2384
     14  2384				  -	      ifnconst	bmp_48x1_1_color
     15  2384				  -bmp_48x1_1_color
     16  2384					      endif
     17  2384							; *** this is the bitmap color. If you want to change it in a 
     18  2384							; *** variable instead, dim one in bB called bmp_48x1_1_color
     19  2384		       00		      .byte.b	$00
     20  2385
     21  2385
     22  2385				  -	      if	>. != >[.+bmp_48x1_1_height]
     23  2385				  -	      align	256
     24  2385					      endif
     25  2385
     26  2385				   bmp_48x1_1_00
     27  2385
     28  2385		       00		      BYTE.b	%00000000
     29  2386		       00		      BYTE.b	%00000000
     30  2387		       00		      BYTE.b	%00000000
     31  2388		       00		      BYTE.b	%00000000
     32  2389		       04		      BYTE.b	%00000100
     33  238a		       06		      BYTE.b	%00000110
     34  238b		       0f		      BYTE.b	%00001111
     35  238c		       0f		      BYTE.b	%00001111
     36  238d		       0f		      BYTE.b	%00001111
     37  238e		       0f		      BYTE.b	%00001111
     38  238f		       0f		      BYTE.b	%00001111
     39  2390		       0f		      BYTE.b	%00001111
     40  2391		       0f		      BYTE.b	%00001111
     41  2392		       0f		      BYTE.b	%00001111
     42  2393		       0f		      BYTE.b	%00001111
     43  2394		       00		      BYTE.b	%00000000
     44  2395		       00		      BYTE.b	%00000000
     45  2396		       04		      BYTE.b	%00000100
     46  2397		       06		      BYTE.b	%00000110
     47  2398		       0e		      BYTE.b	%00001110
     48  2399		       0f		      BYTE.b	%00001111
     49  239a		       0f		      BYTE.b	%00001111
     50  239b		       0f		      BYTE.b	%00001111
     51  239c		       0e		      BYTE.b	%00001110
     52  239d		       0f		      BYTE.b	%00001111
     53  239e		       0f		      BYTE.b	%00001111
     54  239f		       0f		      BYTE.b	%00001111
     55  23a0		       00		      BYTE.b	%00000000
     56  23a1		       00		      BYTE.b	%00000000
     57  23a2		       00		      BYTE.b	%00000000
     58  23a3		       0f		      BYTE.b	%00001111
     59  23a4
     60  23a4				  -	      if	>. != >[.+(bmp_48x1_1_height)]
     61  23a4				  -	      align	256
     62  23a4					      endif
     63  23a4
     64  23a4				   bmp_48x1_1_01
     65  23a4
     66  23a4		       00		      BYTE.b	%00000000
     67  23a5		       00		      BYTE.b	%00000000
     68  23a6		       00		      BYTE.b	%00000000
     69  23a7		       00		      BYTE.b	%00000000
     70  23a8		       00		      BYTE.b	%00000000
     71  23a9		       00		      BYTE.b	%00000000
     72  23aa		       00		      BYTE.b	%00000000
     73  23ab		       80		      BYTE.b	%10000000
     74  23ac		       80		      BYTE.b	%10000000
     75  23ad		       80		      BYTE.b	%10000000
     76  23ae		       fc		      BYTE.b	%11111100
     77  23af		       80		      BYTE.b	%10000000
     78  23b0		       00		      BYTE.b	%00000000
     79  23b1		       fc		      BYTE.b	%11111100
     80  23b2		       fc		      BYTE.b	%11111100
     81  23b3		       00		      BYTE.b	%00000000
     82  23b4		       00		      BYTE.b	%00000000
     83  23b5		       00		      BYTE.b	%00000000
     84  23b6		       00		      BYTE.b	%00000000
     85  23b7		       07		      BYTE.b	%00000111
     86  23b8		       c7		      BYTE.b	%11000111
     87  23b9		       f7		      BYTE.b	%11110111
     88  23ba		       77		      BYTE.b	%01110111
     89  23bb		       37		      BYTE.b	%00110111
     90  23bc		       37		      BYTE.b	%00110111
     91  23bd		       f7		      BYTE.b	%11110111
     92  23be		       f7		      BYTE.b	%11110111
     93  23bf		       00		      BYTE.b	%00000000
     94  23c0		       00		      BYTE.b	%00000000
     95  23c1		       00		      BYTE.b	%00000000
     96  23c2		       f7		      BYTE.b	%11110111
     97  23c3
     98  23c3				  -	      if	>. != >[.+(bmp_48x1_1_height)]
     99  23c3				  -	      align	256
    100  23c3					      endif
    101  23c3
    102  23c3				   bmp_48x1_1_02
    103  23c3
    104  23c3		       00		      BYTE.b	%00000000
    105  23c4		       00		      BYTE.b	%00000000
    106  23c5		       00		      BYTE.b	%00000000
    107  23c6		       00		      BYTE.b	%00000000
    108  23c7		       00		      BYTE.b	%00000000
    109  23c8		       c0		      BYTE.b	%11000000
    110  23c9		       e0		      BYTE.b	%11100000
    111  23ca		       f7		      BYTE.b	%11110111
    112  23cb		       f7		      BYTE.b	%11110111
    113  23cc		       f7		      BYTE.b	%11110111
    114  23cd		       f7		      BYTE.b	%11110111
    115  23ce		       f7		      BYTE.b	%11110111
    116  23cf		       f7		      BYTE.b	%11110111
    117  23d0		       f7		      BYTE.b	%11110111
    118  23d1		       f7		      BYTE.b	%11110111
    119  23d2		       00		      BYTE.b	%00000000
    120  23d3		       10		      BYTE.b	%00010000
    121  23d4		       16		      BYTE.b	%00010110
    122  23d5		       3f		      BYTE.b	%00111111
    123  23d6		       37		      BYTE.b	%00110111
    124  23d7		       77		      BYTE.b	%01110111
    125  23d8		       e7		      BYTE.b	%11100111
    126  23d9		       f7		      BYTE.b	%11110111
    127  23da		       37		      BYTE.b	%00110111
    128  23db		       37		      BYTE.b	%00110111
    129  23dc		       f7		      BYTE.b	%11110111
    130  23dd		       f3		      BYTE.b	%11110011
    131  23de		       00		      BYTE.b	%00000000
    132  23df		       00		      BYTE.b	%00000000
    133  23e0		       00		      BYTE.b	%00000000
    134  23e1		       f3		      BYTE.b	%11110011
    135  23e2
    136  23e2					      if	>. != >[.+(bmp_48x1_1_height)]
    137  2400		       00 00 00 00*	      align	256
    138  2400					      endif
    139  2400
    140  2400				   bmp_48x1_1_03
    141  2400
    142  2400		       00		      BYTE.b	%00000000
    143  2401		       00		      BYTE.b	%00000000
    144  2402		       00		      BYTE.b	%00000000
    145  2403		       00		      BYTE.b	%00000000
    146  2404		       01		      BYTE.b	%00000001
    147  2405		       03		      BYTE.b	%00000011
    148  2406		       87		      BYTE.b	%10000111
    149  2407		       8f		      BYTE.b	%10001111
    150  2408		       9f		      BYTE.b	%10011111
    151  2409		       fe		      BYTE.b	%11111110
    152  240a		       ff		      BYTE.b	%11111111
    153  240b		       cf		      BYTE.b	%11001111
    154  240c		       87		      BYTE.b	%10000111
    155  240d		       ff		      BYTE.b	%11111111
    156  240e		       ff		      BYTE.b	%11111111
    157  240f		       00		      BYTE.b	%00000000
    158  2410		       00		      BYTE.b	%00000000
    159  2411		       42		      BYTE.b	%01000010
    160  2412		       f7		      BYTE.b	%11110111
    161  2413		       f7		      BYTE.b	%11110111
    162  2414		       f0		      BYTE.b	%11110000
    163  2415		       80		      BYTE.b	%10000000
    164  2416		       f3		      BYTE.b	%11110011
    165  2417		       07		      BYTE.b	%00000111
    166  2418		       87		      BYTE.b	%10000111
    167  2419		       f7		      BYTE.b	%11110111
    168  241a		       f3		      BYTE.b	%11110011
    169  241b		       00		      BYTE.b	%00000000
    170  241c		       00		      BYTE.b	%00000000
    171  241d		       00		      BYTE.b	%00000000
    172  241e		       f3		      BYTE.b	%11110011
    173  241f
    174  241f				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    175  241f				  -	      align	256
    176  241f					      endif
    177  241f
    178  241f				   bmp_48x1_1_04
    179  241f
    180  241f		       00		      BYTE.b	%00000000
    181  2420		       00		      BYTE.b	%00000000
    182  2421		       00		      BYTE.b	%00000000
    183  2422		       00		      BYTE.b	%00000000
    184  2423		       00		      BYTE.b	%00000000
    185  2424		       30		      BYTE.b	%00110000
    186  2425		       bb		      BYTE.b	%10111011
    187  2426		       3f		      BYTE.b	%00111111
    188  2427		       3f		      BYTE.b	%00111111
    189  2428		       3c		      BYTE.b	%00111100
    190  2429		       3f		      BYTE.b	%00111111
    191  242a		       3c		      BYTE.b	%00111100
    192  242b		       3c		      BYTE.b	%00111100
    193  242c		       3f		      BYTE.b	%00111111
    194  242d		       3f		      BYTE.b	%00111111
    195  242e		       00		      BYTE.b	%00000000
    196  242f		       00		      BYTE.b	%00000000
    197  2430		       02		      BYTE.b	%00000010
    198  2431		       87		      BYTE.b	%10000111
    199  2432		       f7		      BYTE.b	%11110111
    200  2433		       f0		      BYTE.b	%11110000
    201  2434		       70		      BYTE.b	%01110000
    202  2435		       f7		      BYTE.b	%11110111
    203  2436		       07		      BYTE.b	%00000111
    204  2437		       f7		      BYTE.b	%11110111
    205  2438		       f7		      BYTE.b	%11110111
    206  2439		       f3		      BYTE.b	%11110011
    207  243a		       00		      BYTE.b	%00000000
    208  243b		       00		      BYTE.b	%00000000
    209  243c		       00		      BYTE.b	%00000000
    210  243d		       f3		      BYTE.b	%11110011
    211  243e
    212  243e				  -	      if	>. != >[.+(bmp_48x1_1_height)]
    213  243e				  -	      align	256
    214  243e					      endif
    215  243e
    216  243e				   bmp_48x1_1_05
    217  243e
    218  243e		       00		      BYTE.b	%00000000
    219  243f		       00		      BYTE.b	%00000000
    220  2440		       00		      BYTE.b	%00000000
    221  2441		       00		      BYTE.b	%00000000
    222  2442		       00		      BYTE.b	%00000000
    223  2443		       00		      BYTE.b	%00000000
    224  2444		       c0		      BYTE.b	%11000000
    225  2445		       e0		      BYTE.b	%11100000
    226  2446		       e0		      BYTE.b	%11100000
    227  2447		       00		      BYTE.b	%00000000
    228  2448		       e0		      BYTE.b	%11100000
    229  2449		       00		      BYTE.b	%00000000
    230  244a		       00		      BYTE.b	%00000000
    231  244b		       f0		      BYTE.b	%11110000
    232  244c		       f0		      BYTE.b	%11110000
    233  244d		       00		      BYTE.b	%00000000
    234  244e		       00		      BYTE.b	%00000000
    235  244f		       00		      BYTE.b	%00000000
    236  2450		       80		      BYTE.b	%10000000
    237  2451		       f0		      BYTE.b	%11110000
    238  2452		       f0		      BYTE.b	%11110000
    239  2453		       70		      BYTE.b	%01110000
    240  2454		       f0		      BYTE.b	%11110000
    241  2455		       00		      BYTE.b	%00000000
    242  2456		       f0		      BYTE.b	%11110000
    243  2457		       f0		      BYTE.b	%11110000
    244  2458		       f0		      BYTE.b	%11110000
    245  2459		       00		      BYTE.b	%00000000
    246  245a		       00		      BYTE.b	%00000000
    247  245b		       00		      BYTE.b	%00000000
    248  245c		       f0		      BYTE.b	%11110000
    249  245d
------- FILE titlescreen/asm/titlescreen.asm
    140  245d					      endif
    141  245d				  -	      ifconst	mk_48x1_2_on
    142  245d				  -	      include	"titlescreen/48x1_2_image.asm"
    143  245d					      endif
    144  245d				  -	      ifconst	mk_48x1_3_on
    145  245d				  -	      include	"titlescreen/48x1_3_image.asm"
    146  245d					      endif
    147  245d
    148  245d				  -	      ifconst	mk_48x2_1_on
    149  245d				  -	      include	"titlescreen/48x2_1_image.asm"
    150  245d					      endif
    151  245d				  -	      ifconst	mk_48x2_2_on
    152  245d				  -	      include	"titlescreen/48x2_2_image.asm"
    153  245d					      endif
    154  245d				  -	      ifconst	mk_48x2_3_on
    155  245d				  -	      include	"titlescreen/48x2_3_image.asm"
    156  245d					      endif
    157  245d
    158  245d					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  245d					      include	"titlescreen/96x2_1_image.asm"
      1  245d
      2  245d							;*** The height of the displayed data...
      3  245d		       00 47	   bmp_96x2_1_window =	71
      4  245d
      5  245d							;*** The height of the bitmap data. This can be larger than
      6  245d							;*** the displayed data height, if you are scrolling or animating
      7  245d							;*** the data...
      8  245d		       00 47	   bmp_96x2_1_height =	71
      9  245d
     10  245d				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     11  245d				  -	      align	256
     12  245d					      endif
     13  245d		       00		      BYTE.b	$00	; leave this here!
     14  245e
     15  245e
     16  245e							;*** this is the color of each line in the bitmap data
     17  245e				   bmp_96x2_1_colors
     18  245e		       00		      BYTE.b	$00
     19  245f		       00		      BYTE.b	$00
     20  2460		       00		      BYTE.b	$00
     21  2461		       00		      BYTE.b	$00
     22  2462		       00		      BYTE.b	$00
     23  2463		       00		      BYTE.b	$00
     24  2464		       00		      BYTE.b	$00
     25  2465		       00		      BYTE.b	$00
     26  2466		       00		      BYTE.b	$00
     27  2467		       00		      BYTE.b	$00
     28  2468		       00		      BYTE.b	$00
     29  2469		       00		      BYTE.b	$00
     30  246a		       00		      BYTE.b	$00
     31  246b		       00		      BYTE.b	$00
     32  246c		       00		      BYTE.b	$00
     33  246d		       00		      BYTE.b	$00
     34  246e		       00		      BYTE.b	$00
     35  246f		       00		      BYTE.b	$00
     36  2470		       00		      BYTE.b	$00
     37  2471		       00		      BYTE.b	$00
     38  2472		       00		      BYTE.b	$00
     39  2473		       00		      BYTE.b	$00
     40  2474		       00		      BYTE.b	$00
     41  2475		       00		      BYTE.b	$00
     42  2476		       00		      BYTE.b	$00
     43  2477		       00		      BYTE.b	$00
     44  2478		       00		      BYTE.b	$00
     45  2479		       00		      BYTE.b	$00
     46  247a		       00		      BYTE.b	$00
     47  247b		       00		      BYTE.b	$00
     48  247c		       00		      BYTE.b	$00
     49  247d		       00		      BYTE.b	$00
     50  247e		       00		      BYTE.b	$00
     51  247f		       00		      BYTE.b	$00
     52  2480		       00		      BYTE.b	$00
     53  2481		       00		      BYTE.b	$00
     54  2482		       00		      BYTE.b	$00
     55  2483		       00		      BYTE.b	$00
     56  2484		       00		      BYTE.b	$00
     57  2485		       00		      BYTE.b	$00
     58  2486		       00		      BYTE.b	$00
     59  2487		       00		      BYTE.b	$00
     60  2488		       00		      BYTE.b	$00
     61  2489		       00		      BYTE.b	$00
     62  248a		       00		      BYTE.b	$00
     63  248b		       00		      BYTE.b	$00
     64  248c		       00		      BYTE.b	$00
     65  248d		       00		      BYTE.b	$00
     66  248e		       00		      BYTE.b	$00
     67  248f		       00		      BYTE.b	$00
     68  2490		       00		      BYTE.b	$00
     69  2491		       00		      BYTE.b	$00
     70  2492		       00		      BYTE.b	$00
     71  2493		       00		      BYTE.b	$00
     72  2494		       00		      BYTE.b	$00
     73  2495		       00		      BYTE.b	$00
     74  2496		       00		      BYTE.b	$00
     75  2497		       00		      BYTE.b	$00
     76  2498		       00		      BYTE.b	$00
     77  2499		       00		      BYTE.b	$00
     78  249a		       00		      BYTE.b	$00
     79  249b		       00		      BYTE.b	$00
     80  249c		       00		      BYTE.b	$00
     81  249d		       00		      BYTE.b	$00
     82  249e		       00		      BYTE.b	$00
     83  249f		       00		      BYTE.b	$00
     84  24a0		       00		      BYTE.b	$00
     85  24a1		       00		      BYTE.b	$00
     86  24a2		       00		      BYTE.b	$00
     87  24a3		       00		      BYTE.b	$00
     88  24a4		       00		      BYTE.b	$00
     89  24a5
     90  24a5				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     91  24a5				  -	      align	256
     92  24a5					      endif
     93  24a5
     94  24a5				   bmp_96x2_1_00
     95  24a5
     96  24a5		       00		      BYTE.b	%00000000
     97  24a6		       00		      BYTE.b	%00000000
     98  24a7		       00		      BYTE.b	%00000000
     99  24a8		       00		      BYTE.b	%00000000
    100  24a9		       00		      BYTE.b	%00000000
    101  24aa		       00		      BYTE.b	%00000000
    102  24ab		       00		      BYTE.b	%00000000
    103  24ac		       00		      BYTE.b	%00000000
    104  24ad		       00		      BYTE.b	%00000000
    105  24ae		       00		      BYTE.b	%00000000
    106  24af		       00		      BYTE.b	%00000000
    107  24b0		       00		      BYTE.b	%00000000
    108  24b1		       00		      BYTE.b	%00000000
    109  24b2		       00		      BYTE.b	%00000000
    110  24b3		       00		      BYTE.b	%00000000
    111  24b4		       00		      BYTE.b	%00000000
    112  24b5		       00		      BYTE.b	%00000000
    113  24b6		       00		      BYTE.b	%00000000
    114  24b7		       00		      BYTE.b	%00000000
    115  24b8		       00		      BYTE.b	%00000000
    116  24b9		       00		      BYTE.b	%00000000
    117  24ba		       00		      BYTE.b	%00000000
    118  24bb		       00		      BYTE.b	%00000000
    119  24bc		       00		      BYTE.b	%00000000
    120  24bd		       00		      BYTE.b	%00000000
    121  24be		       00		      BYTE.b	%00000000
    122  24bf		       00		      BYTE.b	%00000000
    123  24c0		       00		      BYTE.b	%00000000
    124  24c1		       00		      BYTE.b	%00000000
    125  24c2		       00		      BYTE.b	%00000000
    126  24c3		       00		      BYTE.b	%00000000
    127  24c4		       00		      BYTE.b	%00000000
    128  24c5		       07		      BYTE.b	%00000111
    129  24c6		       3f		      BYTE.b	%00111111
    130  24c7		       03		      BYTE.b	%00000011
    131  24c8		       02		      BYTE.b	%00000010
    132  24c9		       12		      BYTE.b	%00010010
    133  24ca		       1f		      BYTE.b	%00011111
    134  24cb		       1f		      BYTE.b	%00011111
    135  24cc		       1f		      BYTE.b	%00011111
    136  24cd		       07		      BYTE.b	%00000111
    137  24ce		       07		      BYTE.b	%00000111
    138  24cf		       07		      BYTE.b	%00000111
    139  24d0		       07		      BYTE.b	%00000111
    140  24d1		       07		      BYTE.b	%00000111
    141  24d2		       07		      BYTE.b	%00000111
    142  24d3		       07		      BYTE.b	%00000111
    143  24d4		       07		      BYTE.b	%00000111
    144  24d5		       07		      BYTE.b	%00000111
    145  24d6		       1f		      BYTE.b	%00011111
    146  24d7		       1f		      BYTE.b	%00011111
    147  24d8		       1f		      BYTE.b	%00011111
    148  24d9		       1f		      BYTE.b	%00011111
    149  24da		       0f		      BYTE.b	%00001111
    150  24db		       0f		      BYTE.b	%00001111
    151  24dc		       0f		      BYTE.b	%00001111
    152  24dd		       7f		      BYTE.b	%01111111
    153  24de		       03		      BYTE.b	%00000011
    154  24df		       00		      BYTE.b	%00000000
    155  24e0		       00		      BYTE.b	%00000000
    156  24e1		       00		      BYTE.b	%00000000
    157  24e2		       00		      BYTE.b	%00000000
    158  24e3		       00		      BYTE.b	%00000000
    159  24e4		       00		      BYTE.b	%00000000
    160  24e5		       00		      BYTE.b	%00000000
    161  24e6		       00		      BYTE.b	%00000000
    162  24e7		       00		      BYTE.b	%00000000
    163  24e8		       00		      BYTE.b	%00000000
    164  24e9		       00		      BYTE.b	%00000000
    165  24ea		       00		      BYTE.b	%00000000
    166  24eb		       00		      BYTE.b	%00000000
    167  24ec		       00		      BYTE.b	%00000000
    168  24ed
    169  24ed					      if	>. != >[.+(bmp_96x2_1_height)]
    170  2500		       00 00 00 00*	      align	256
    171  2500					      endif
    172  2500
    173  2500				   bmp_96x2_1_01
    174  2500
    175  2500		       00		      BYTE.b	%00000000
    176  2501		       00		      BYTE.b	%00000000
    177  2502		       00		      BYTE.b	%00000000
    178  2503		       00		      BYTE.b	%00000000
    179  2504		       00		      BYTE.b	%00000000
    180  2505		       00		      BYTE.b	%00000000
    181  2506		       00		      BYTE.b	%00000000
    182  2507		       01		      BYTE.b	%00000001
    183  2508		       01		      BYTE.b	%00000001
    184  2509		       01		      BYTE.b	%00000001
    185  250a		       01		      BYTE.b	%00000001
    186  250b		       01		      BYTE.b	%00000001
    187  250c		       01		      BYTE.b	%00000001
    188  250d		       01		      BYTE.b	%00000001
    189  250e		       03		      BYTE.b	%00000011
    190  250f		       03		      BYTE.b	%00000011
    191  2510		       03		      BYTE.b	%00000011
    192  2511		       03		      BYTE.b	%00000011
    193  2512		       03		      BYTE.b	%00000011
    194  2513		       03		      BYTE.b	%00000011
    195  2514		       03		      BYTE.b	%00000011
    196  2515		       03		      BYTE.b	%00000011
    197  2516		       03		      BYTE.b	%00000011
    198  2517		       03		      BYTE.b	%00000011
    199  2518		       03		      BYTE.b	%00000011
    200  2519		       03		      BYTE.b	%00000011
    201  251a		       03		      BYTE.b	%00000011
    202  251b		       03		      BYTE.b	%00000011
    203  251c		       03		      BYTE.b	%00000011
    204  251d		       03		      BYTE.b	%00000011
    205  251e		       03		      BYTE.b	%00000011
    206  251f		       03		      BYTE.b	%00000011
    207  2520		       ff		      BYTE.b	%11111111
    208  2521		       ff		      BYTE.b	%11111111
    209  2522		       ff		      BYTE.b	%11111111
    210  2523		       01		      BYTE.b	%00000001
    211  2524		       00		      BYTE.b	%00000000
    212  2525		       fc		      BYTE.b	%11111100
    213  2526		       ff		      BYTE.b	%11111111
    214  2527		       e0		      BYTE.b	%11100000
    215  2528		       00		      BYTE.b	%00000000
    216  2529		       00		      BYTE.b	%00000000
    217  252a		       00		      BYTE.b	%00000000
    218  252b		       00		      BYTE.b	%00000000
    219  252c		       00		      BYTE.b	%00000000
    220  252d		       00		      BYTE.b	%00000000
    221  252e		       00		      BYTE.b	%00000000
    222  252f		       00		      BYTE.b	%00000000
    223  2530		       00		      BYTE.b	%00000000
    224  2531		       00		      BYTE.b	%00000000
    225  2532		       f8		      BYTE.b	%11111000
    226  2533		       ff		      BYTE.b	%11111111
    227  2534		       f0		      BYTE.b	%11110000
    228  2535		       00		      BYTE.b	%00000000
    229  2536		       07		      BYTE.b	%00000111
    230  2537		       ff		      BYTE.b	%11111111
    231  2538		       ff		      BYTE.b	%11111111
    232  2539		       ff		      BYTE.b	%11111111
    233  253a		       00		      BYTE.b	%00000000
    234  253b		       00		      BYTE.b	%00000000
    235  253c		       00		      BYTE.b	%00000000
    236  253d		       00		      BYTE.b	%00000000
    237  253e		       00		      BYTE.b	%00000000
    238  253f		       00		      BYTE.b	%00000000
    239  2540		       00		      BYTE.b	%00000000
    240  2541		       00		      BYTE.b	%00000000
    241  2542		       00		      BYTE.b	%00000000
    242  2543		       00		      BYTE.b	%00000000
    243  2544		       00		      BYTE.b	%00000000
    244  2545		       00		      BYTE.b	%00000000
    245  2546		       00		      BYTE.b	%00000000
    246  2547		       00		      BYTE.b	%00000000
    247  2548
    248  2548				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    249  2548				  -	      align	256
    250  2548					      endif
    251  2548
    252  2548				   bmp_96x2_1_02
    253  2548
    254  2548		       00		      BYTE.b	%00000000
    255  2549		       00		      BYTE.b	%00000000
    256  254a		       00		      BYTE.b	%00000000
    257  254b		       00		      BYTE.b	%00000000
    258  254c		       00		      BYTE.b	%00000000
    259  254d		       00		      BYTE.b	%00000000
    260  254e		       00		      BYTE.b	%00000000
    261  254f		       00		      BYTE.b	%00000000
    262  2550		       00		      BYTE.b	%00000000
    263  2551		       80		      BYTE.b	%10000000
    264  2552		       80		      BYTE.b	%10000000
    265  2553		       80		      BYTE.b	%10000000
    266  2554		       80		      BYTE.b	%10000000
    267  2555		       80		      BYTE.b	%10000000
    268  2556		       80		      BYTE.b	%10000000
    269  2557		       80		      BYTE.b	%10000000
    270  2558		       81		      BYTE.b	%10000001
    271  2559		       81		      BYTE.b	%10000001
    272  255a		       83		      BYTE.b	%10000011
    273  255b		       c3		      BYTE.b	%11000011
    274  255c		       c7		      BYTE.b	%11000111
    275  255d		       cf		      BYTE.b	%11001111
    276  255e		       ce		      BYTE.b	%11001110
    277  255f		       dc		      BYTE.b	%11011100
    278  2560		       dc		      BYTE.b	%11011100
    279  2561		       f8		      BYTE.b	%11111000
    280  2562		       f8		      BYTE.b	%11111000
    281  2563		       f0		      BYTE.b	%11110000
    282  2564		       f0		      BYTE.b	%11110000
    283  2565		       e0		      BYTE.b	%11100000
    284  2566		       c0		      BYTE.b	%11000000
    285  2567		       c0		      BYTE.b	%11000000
    286  2568		       c0		      BYTE.b	%11000000
    287  2569		       e0		      BYTE.b	%11100000
    288  256a		       f0		      BYTE.b	%11110000
    289  256b		       f8		      BYTE.b	%11111000
    290  256c		       7c		      BYTE.b	%01111100
    291  256d		       3e		      BYTE.b	%00111110
    292  256e		       de		      BYTE.b	%11011110
    293  256f		       0f		      BYTE.b	%00001111
    294  2570		       07		      BYTE.b	%00000111
    295  2571		       07		      BYTE.b	%00000111
    296  2572		       07		      BYTE.b	%00000111
    297  2573		       07		      BYTE.b	%00000111
    298  2574		       03		      BYTE.b	%00000011
    299  2575		       03		      BYTE.b	%00000011
    300  2576		       07		      BYTE.b	%00000111
    301  2577		       07		      BYTE.b	%00000111
    302  2578		       07		      BYTE.b	%00000111
    303  2579		       0f		      BYTE.b	%00001111
    304  257a		       0f		      BYTE.b	%00001111
    305  257b		       be		      BYTE.b	%10111110
    306  257c		       3c		      BYTE.b	%00111100
    307  257d		       7c		      BYTE.b	%01111100
    308  257e		       f8		      BYTE.b	%11111000
    309  257f		       f0		      BYTE.b	%11110000
    310  2580		       e0		      BYTE.b	%11100000
    311  2581		       00		      BYTE.b	%00000000
    312  2582		       00		      BYTE.b	%00000000
    313  2583		       00		      BYTE.b	%00000000
    314  2584		       00		      BYTE.b	%00000000
    315  2585		       00		      BYTE.b	%00000000
    316  2586		       00		      BYTE.b	%00000000
    317  2587		       00		      BYTE.b	%00000000
    318  2588		       00		      BYTE.b	%00000000
    319  2589		       00		      BYTE.b	%00000000
    320  258a		       00		      BYTE.b	%00000000
    321  258b		       00		      BYTE.b	%00000000
    322  258c		       00		      BYTE.b	%00000000
    323  258d		       00		      BYTE.b	%00000000
    324  258e		       00		      BYTE.b	%00000000
    325  258f		       00		      BYTE.b	%00000000
    326  2590
    327  2590				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    328  2590				  -	      align	256
    329  2590					      endif
    330  2590
    331  2590				   bmp_96x2_1_03
    332  2590
    333  2590		       00		      BYTE.b	%00000000
    334  2591		       00		      BYTE.b	%00000000
    335  2592		       00		      BYTE.b	%00000000
    336  2593		       00		      BYTE.b	%00000000
    337  2594		       00		      BYTE.b	%00000000
    338  2595		       00		      BYTE.b	%00000000
    339  2596		       0f		      BYTE.b	%00001111
    340  2597		       07		      BYTE.b	%00000111
    341  2598		       01		      BYTE.b	%00000001
    342  2599		       00		      BYTE.b	%00000000
    343  259a		       00		      BYTE.b	%00000000
    344  259b		       00		      BYTE.b	%00000000
    345  259c		       00		      BYTE.b	%00000000
    346  259d		       40		      BYTE.b	%01000000
    347  259e		       40		      BYTE.b	%01000000
    348  259f		       e0		      BYTE.b	%11100000
    349  25a0		       f0		      BYTE.b	%11110000
    350  25a1		       f0		      BYTE.b	%11110000
    351  25a2		       f8		      BYTE.b	%11111000
    352  25a3		       b8		      BYTE.b	%10111000
    353  25a4		       1c		      BYTE.b	%00011100
    354  25a5		       1e		      BYTE.b	%00011110
    355  25a6		       0e		      BYTE.b	%00001110
    356  25a7		       0f		      BYTE.b	%00001111
    357  25a8		       07		      BYTE.b	%00000111
    358  25a9		       03		      BYTE.b	%00000011
    359  25aa		       03		      BYTE.b	%00000011
    360  25ab		       01		      BYTE.b	%00000001
    361  25ac		       01		      BYTE.b	%00000001
    362  25ad		       00		      BYTE.b	%00000000
    363  25ae		       00		      BYTE.b	%00000000
    364  25af		       00		      BYTE.b	%00000000
    365  25b0		       00		      BYTE.b	%00000000
    366  25b1		       00		      BYTE.b	%00000000
    367  25b2		       00		      BYTE.b	%00000000
    368  25b3		       00		      BYTE.b	%00000000
    369  25b4		       0f		      BYTE.b	%00001111
    370  25b5		       3e		      BYTE.b	%00111110
    371  25b6		       78		      BYTE.b	%01111000
    372  25b7		       78		      BYTE.b	%01111000
    373  25b8		       ff		      BYTE.b	%11111111
    374  25b9		       78		      BYTE.b	%01111000
    375  25ba		       3e		      BYTE.b	%00111110
    376  25bb		       bf		      BYTE.b	%10111111
    377  25bc		       80		      BYTE.b	%10000000
    378  25bd		       80		      BYTE.b	%10000000
    379  25be		       80		      BYTE.b	%10000000
    380  25bf		       00		      BYTE.b	%00000000
    381  25c0		       00		      BYTE.b	%00000000
    382  25c1		       00		      BYTE.b	%00000000
    383  25c2		       00		      BYTE.b	%00000000
    384  25c3		       00		      BYTE.b	%00000000
    385  25c4		       00		      BYTE.b	%00000000
    386  25c5		       00		      BYTE.b	%00000000
    387  25c6		       00		      BYTE.b	%00000000
    388  25c7		       00		      BYTE.b	%00000000
    389  25c8		       00		      BYTE.b	%00000000
    390  25c9		       00		      BYTE.b	%00000000
    391  25ca		       00		      BYTE.b	%00000000
    392  25cb		       00		      BYTE.b	%00000000
    393  25cc		       00		      BYTE.b	%00000000
    394  25cd		       00		      BYTE.b	%00000000
    395  25ce		       00		      BYTE.b	%00000000
    396  25cf		       00		      BYTE.b	%00000000
    397  25d0		       00		      BYTE.b	%00000000
    398  25d1		       00		      BYTE.b	%00000000
    399  25d2		       00		      BYTE.b	%00000000
    400  25d3		       00		      BYTE.b	%00000000
    401  25d4		       00		      BYTE.b	%00000000
    402  25d5		       00		      BYTE.b	%00000000
    403  25d6		       00		      BYTE.b	%00000000
    404  25d7		       00		      BYTE.b	%00000000
    405  25d8
    406  25d8					      if	>. != >[.+(bmp_96x2_1_height)]
    407  2600		       00 00 00 00*	      align	256
    408  2600					      endif
    409  2600
    410  2600				   bmp_96x2_1_04
    411  2600
    412  2600		       00		      BYTE.b	%00000000
    413  2601		       00		      BYTE.b	%00000000
    414  2602		       60		      BYTE.b	%01100000
    415  2603		       63		      BYTE.b	%01100011
    416  2604		       2f		      BYTE.b	%00101111
    417  2605		       ff		      BYTE.b	%11111111
    418  2606		       ff		      BYTE.b	%11111111
    419  2607		       ff		      BYTE.b	%11111111
    420  2608		       cf		      BYTE.b	%11001111
    421  2609		       cf		      BYTE.b	%11001111
    422  260a		       cf		      BYTE.b	%11001111
    423  260b		       4f		      BYTE.b	%01001111
    424  260c		       0f		      BYTE.b	%00001111
    425  260d		       0e		      BYTE.b	%00001110
    426  260e		       2e		      BYTE.b	%00101110
    427  260f		       3e		      BYTE.b	%00111110
    428  2610		       3e		      BYTE.b	%00111110
    429  2611		       3e		      BYTE.b	%00111110
    430  2612		       7b		      BYTE.b	%01111011
    431  2613		       7b		      BYTE.b	%01111011
    432  2614		       7b		      BYTE.b	%01111011
    433  2615		       79		      BYTE.b	%01111001
    434  2616		       79		      BYTE.b	%01111001
    435  2617		       39		      BYTE.b	%00111001
    436  2618		       78		      BYTE.b	%01111000
    437  2619		       f8		      BYTE.b	%11111000
    438  261a		       f8		      BYTE.b	%11111000
    439  261b		       f8		      BYTE.b	%11111000
    440  261c		       f8		      BYTE.b	%11111000
    441  261d		       f8		      BYTE.b	%11111000
    442  261e		       78		      BYTE.b	%01111000
    443  261f		       78		      BYTE.b	%01111000
    444  2620		       78		      BYTE.b	%01111000
    445  2621		       01		      BYTE.b	%00000001
    446  2622		       01		      BYTE.b	%00000001
    447  2623		       02		      BYTE.b	%00000010
    448  2624		       82		      BYTE.b	%10000010
    449  2625		       f0		      BYTE.b	%11110000
    450  2626		       1c		      BYTE.b	%00011100
    451  2627		       0c		      BYTE.b	%00001100
    452  2628		       06		      BYTE.b	%00000110
    453  2629		       07		      BYTE.b	%00000111
    454  262a		       ff		      BYTE.b	%11111111
    455  262b		       c7		      BYTE.b	%11000111
    456  262c		       07		      BYTE.b	%00000111
    457  262d		       07		      BYTE.b	%00000111
    458  262e		       07		      BYTE.b	%00000111
    459  262f		       07		      BYTE.b	%00000111
    460  2630		       03		      BYTE.b	%00000011
    461  2631		       03		      BYTE.b	%00000011
    462  2632		       03		      BYTE.b	%00000011
    463  2633		       03		      BYTE.b	%00000011
    464  2634		       01		      BYTE.b	%00000001
    465  2635		       01		      BYTE.b	%00000001
    466  2636		       01		      BYTE.b	%00000001
    467  2637		       00		      BYTE.b	%00000000
    468  2638		       00		      BYTE.b	%00000000
    469  2639		       00		      BYTE.b	%00000000
    470  263a		       00		      BYTE.b	%00000000
    471  263b		       00		      BYTE.b	%00000000
    472  263c		       00		      BYTE.b	%00000000
    473  263d		       00		      BYTE.b	%00000000
    474  263e		       00		      BYTE.b	%00000000
    475  263f		       00		      BYTE.b	%00000000
    476  2640		       00		      BYTE.b	%00000000
    477  2641		       00		      BYTE.b	%00000000
    478  2642		       00		      BYTE.b	%00000000
    479  2643		       00		      BYTE.b	%00000000
    480  2644		       00		      BYTE.b	%00000000
    481  2645		       00		      BYTE.b	%00000000
    482  2646		       00		      BYTE.b	%00000000
    483  2647		       00		      BYTE.b	%00000000
    484  2648
    485  2648				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    486  2648				  -	      align	256
    487  2648					      endif
    488  2648
    489  2648				   bmp_96x2_1_05
    490  2648
    491  2648		       00		      BYTE.b	%00000000
    492  2649		       00		      BYTE.b	%00000000
    493  264a		       00		      BYTE.b	%00000000
    494  264b		       f0		      BYTE.b	%11110000
    495  264c		       fe		      BYTE.b	%11111110
    496  264d		       ff		      BYTE.b	%11111111
    497  264e		       ff		      BYTE.b	%11111111
    498  264f		       ff		      BYTE.b	%11111111
    499  2650		       ff		      BYTE.b	%11111111
    500  2651		       ff		      BYTE.b	%11111111
    501  2652		       df		      BYTE.b	%11011111
    502  2653		       3f		      BYTE.b	%00111111
    503  2654		       3f		      BYTE.b	%00111111
    504  2655		       3f		      BYTE.b	%00111111
    505  2656		       3f		      BYTE.b	%00111111
    506  2657		       3f		      BYTE.b	%00111111
    507  2658		       3f		      BYTE.b	%00111111
    508  2659		       1f		      BYTE.b	%00011111
    509  265a		       18		      BYTE.b	%00011000
    510  265b		       87		      BYTE.b	%10000111
    511  265c		       c1		      BYTE.b	%11000001
    512  265d		       c0		      BYTE.b	%11000000
    513  265e		       ff		      BYTE.b	%11111111
    514  265f		       ff		      BYTE.b	%11111111
    515  2660		       ff		      BYTE.b	%11111111
    516  2661		       ff		      BYTE.b	%11111111
    517  2662		       ff		      BYTE.b	%11111111
    518  2663		       ff		      BYTE.b	%11111111
    519  2664		       7f		      BYTE.b	%01111111
    520  2665		       7f		      BYTE.b	%01111111
    521  2666		       7f		      BYTE.b	%01111111
    522  2667		       7f		      BYTE.b	%01111111
    523  2668		       ff		      BYTE.b	%11111111
    524  2669		       ff		      BYTE.b	%11111111
    525  266a		       ff		      BYTE.b	%11111111
    526  266b		       7f		      BYTE.b	%01111111
    527  266c		       7e		      BYTE.b	%01111110
    528  266d		       7e		      BYTE.b	%01111110
    529  266e		       7e		      BYTE.b	%01111110
    530  266f		       70		      BYTE.b	%01110000
    531  2670		       20		      BYTE.b	%00100000
    532  2671		       0e		      BYTE.b	%00001110
    533  2672		       82		      BYTE.b	%10000010
    534  2673		       80		      BYTE.b	%10000000
    535  2674		       ff		      BYTE.b	%11111111
    536  2675		       ff		      BYTE.b	%11111111
    537  2676		       ff		      BYTE.b	%11111111
    538  2677		       ff		      BYTE.b	%11111111
    539  2678		       ff		      BYTE.b	%11111111
    540  2679		       ff		      BYTE.b	%11111111
    541  267a		       ff		      BYTE.b	%11111111
    542  267b		       ff		      BYTE.b	%11111111
    543  267c		       ff		      BYTE.b	%11111111
    544  267d		       ff		      BYTE.b	%11111111
    545  267e		       ff		      BYTE.b	%11111111
    546  267f		       ff		      BYTE.b	%11111111
    547  2680		       ff		      BYTE.b	%11111111
    548  2681		       7f		      BYTE.b	%01111111
    549  2682		       1f		      BYTE.b	%00011111
    550  2683		       1f		      BYTE.b	%00011111
    551  2684		       1f		      BYTE.b	%00011111
    552  2685		       0f		      BYTE.b	%00001111
    553  2686		       0f		      BYTE.b	%00001111
    554  2687		       0f		      BYTE.b	%00001111
    555  2688		       07		      BYTE.b	%00000111
    556  2689		       03		      BYTE.b	%00000011
    557  268a		       00		      BYTE.b	%00000000
    558  268b		       00		      BYTE.b	%00000000
    559  268c		       00		      BYTE.b	%00000000
    560  268d		       00		      BYTE.b	%00000000
    561  268e		       00		      BYTE.b	%00000000
    562  268f		       00		      BYTE.b	%00000000
    563  2690
    564  2690				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    565  2690				  -	      align	256
    566  2690					      endif
    567  2690
    568  2690				   bmp_96x2_1_06
    569  2690
    570  2690		       00		      BYTE.b	%00000000
    571  2691		       00		      BYTE.b	%00000000
    572  2692		       00		      BYTE.b	%00000000
    573  2693		       03		      BYTE.b	%00000011
    574  2694		       0f		      BYTE.b	%00001111
    575  2695		       ff		      BYTE.b	%11111111
    576  2696		       ff		      BYTE.b	%11111111
    577  2697		       ff		      BYTE.b	%11111111
    578  2698		       ff		      BYTE.b	%11111111
    579  2699		       ff		      BYTE.b	%11111111
    580  269a		       ff		      BYTE.b	%11111111
    581  269b		       ff		      BYTE.b	%11111111
    582  269c		       ff		      BYTE.b	%11111111
    583  269d		       ff		      BYTE.b	%11111111
    584  269e		       8e		      BYTE.b	%10001110
    585  269f		       8e		      BYTE.b	%10001110
    586  26a0		       8e		      BYTE.b	%10001110
    587  26a1		       0e		      BYTE.b	%00001110
    588  26a2		       0f		      BYTE.b	%00001111
    589  26a3		       0f		      BYTE.b	%00001111
    590  26a4		       0d		      BYTE.b	%00001101
    591  26a5		       0c		      BYTE.b	%00001100
    592  26a6		       ff		      BYTE.b	%11111111
    593  26a7		       ff		      BYTE.b	%11111111
    594  26a8		       ff		      BYTE.b	%11111111
    595  26a9		       ff		      BYTE.b	%11111111
    596  26aa		       ff		      BYTE.b	%11111111
    597  26ab		       ff		      BYTE.b	%11111111
    598  26ac		       ff		      BYTE.b	%11111111
    599  26ad		       fe		      BYTE.b	%11111110
    600  26ae		       fe		      BYTE.b	%11111110
    601  26af		       fe		      BYTE.b	%11111110
    602  26b0		       fe		      BYTE.b	%11111110
    603  26b1		       fe		      BYTE.b	%11111110
    604  26b2		       ff		      BYTE.b	%11111111
    605  26b3		       fe		      BYTE.b	%11111110
    606  26b4		       1c		      BYTE.b	%00011100
    607  26b5		       1c		      BYTE.b	%00011100
    608  26b6		       1c		      BYTE.b	%00011100
    609  26b7		       1c		      BYTE.b	%00011100
    610  26b8		       1c		      BYTE.b	%00011100
    611  26b9		       3e		      BYTE.b	%00111110
    612  26ba		       12		      BYTE.b	%00010010
    613  26bb		       18		      BYTE.b	%00011000
    614  26bc		       ff		      BYTE.b	%11111111
    615  26bd		       ff		      BYTE.b	%11111111
    616  26be		       ff		      BYTE.b	%11111111
    617  26bf		       ff		      BYTE.b	%11111111
    618  26c0		       ff		      BYTE.b	%11111111
    619  26c1		       ff		      BYTE.b	%11111111
    620  26c2		       ff		      BYTE.b	%11111111
    621  26c3		       ff		      BYTE.b	%11111111
    622  26c4		       ff		      BYTE.b	%11111111
    623  26c5		       ff		      BYTE.b	%11111111
    624  26c6		       ff		      BYTE.b	%11111111
    625  26c7		       fe		      BYTE.b	%11111110
    626  26c8		       fe		      BYTE.b	%11111110
    627  26c9		       ff		      BYTE.b	%11111111
    628  26ca		       f9		      BYTE.b	%11111001
    629  26cb		       f1		      BYTE.b	%11110001
    630  26cc		       e0		      BYTE.b	%11100000
    631  26cd		       e0		      BYTE.b	%11100000
    632  26ce		       c0		      BYTE.b	%11000000
    633  26cf		       c0		      BYTE.b	%11000000
    634  26d0		       c0		      BYTE.b	%11000000
    635  26d1		       80		      BYTE.b	%10000000
    636  26d2		       00		      BYTE.b	%00000000
    637  26d3		       00		      BYTE.b	%00000000
    638  26d4		       00		      BYTE.b	%00000000
    639  26d5		       00		      BYTE.b	%00000000
    640  26d6		       00		      BYTE.b	%00000000
    641  26d7		       00		      BYTE.b	%00000000
    642  26d8
    643  26d8					      if	>. != >[.+(bmp_96x2_1_height)]
    644  2700		       00 00 00 00*	      align	256
    645  2700					      endif
    646  2700
    647  2700				   bmp_96x2_1_07
    648  2700
    649  2700		       00		      BYTE.b	%00000000
    650  2701		       00		      BYTE.b	%00000000
    651  2702		       00		      BYTE.b	%00000000
    652  2703		       f0		      BYTE.b	%11110000
    653  2704		       fc		      BYTE.b	%11111100
    654  2705		       ff		      BYTE.b	%11111111
    655  2706		       ff		      BYTE.b	%11111111
    656  2707		       ff		      BYTE.b	%11111111
    657  2708		       ff		      BYTE.b	%11111111
    658  2709		       ff		      BYTE.b	%11111111
    659  270a		       fe		      BYTE.b	%11111110
    660  270b		       9c		      BYTE.b	%10011100
    661  270c		       18		      BYTE.b	%00011000
    662  270d		       18		      BYTE.b	%00011000
    663  270e		       30		      BYTE.b	%00110000
    664  270f		       30		      BYTE.b	%00110000
    665  2710		       00		      BYTE.b	%00000000
    666  2711		       00		      BYTE.b	%00000000
    667  2712		       00		      BYTE.b	%00000000
    668  2713		       30		      BYTE.b	%00110000
    669  2714		       38		      BYTE.b	%00111000
    670  2715		       7f		      BYTE.b	%01111111
    671  2716		       80		      BYTE.b	%10000000
    672  2717		       80		      BYTE.b	%10000000
    673  2718		       00		      BYTE.b	%00000000
    674  2719		       00		      BYTE.b	%00000000
    675  271a		       00		      BYTE.b	%00000000
    676  271b		       00		      BYTE.b	%00000000
    677  271c		       00		      BYTE.b	%00000000
    678  271d		       00		      BYTE.b	%00000000
    679  271e		       00		      BYTE.b	%00000000
    680  271f		       00		      BYTE.b	%00000000
    681  2720		       20		      BYTE.b	%00100000
    682  2721		       c0		      BYTE.b	%11000000
    683  2722		       c0		      BYTE.b	%11000000
    684  2723		       80		      BYTE.b	%10000000
    685  2724		       80		      BYTE.b	%10000000
    686  2725		       80		      BYTE.b	%10000000
    687  2726		       00		      BYTE.b	%00000000
    688  2727		       40		      BYTE.b	%01000000
    689  2728		       00		      BYTE.b	%00000000
    690  2729		       20		      BYTE.b	%00100000
    691  272a		       31		      BYTE.b	%00110001
    692  272b		       3e		      BYTE.b	%00111110
    693  272c		       c0		      BYTE.b	%11000000
    694  272d		       c0		      BYTE.b	%11000000
    695  272e		       c0		      BYTE.b	%11000000
    696  272f		       c0		      BYTE.b	%11000000
    697  2730		       c0		      BYTE.b	%11000000
    698  2731		       80		      BYTE.b	%10000000
    699  2732		       80		      BYTE.b	%10000000
    700  2733		       80		      BYTE.b	%10000000
    701  2734		       00		      BYTE.b	%00000000
    702  2735		       00		      BYTE.b	%00000000
    703  2736		       00		      BYTE.b	%00000000
    704  2737		       00		      BYTE.b	%00000000
    705  2738		       00		      BYTE.b	%00000000
    706  2739		       00		      BYTE.b	%00000000
    707  273a		       00		      BYTE.b	%00000000
    708  273b		       80		      BYTE.b	%10000000
    709  273c		       80		      BYTE.b	%10000000
    710  273d		       80		      BYTE.b	%10000000
    711  273e		       c0		      BYTE.b	%11000000
    712  273f		       ff		      BYTE.b	%11111111
    713  2740		       7f		      BYTE.b	%01111111
    714  2741		       7f		      BYTE.b	%01111111
    715  2742		       7e		      BYTE.b	%01111110
    716  2743		       30		      BYTE.b	%00110000
    717  2744		       30		      BYTE.b	%00110000
    718  2745		       30		      BYTE.b	%00110000
    719  2746		       00		      BYTE.b	%00000000
    720  2747		       30		      BYTE.b	%00110000
    721  2748
    722  2748				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    723  2748				  -	      align	256
    724  2748					      endif
    725  2748
    726  2748				   bmp_96x2_1_08
    727  2748
    728  2748		       00		      BYTE.b	%00000000
    729  2749		       00		      BYTE.b	%00000000
    730  274a		       00		      BYTE.b	%00000000
    731  274b		       00		      BYTE.b	%00000000
    732  274c		       00		      BYTE.b	%00000000
    733  274d		       fc		      BYTE.b	%11111100
    734  274e		       f8		      BYTE.b	%11111000
    735  274f		       e0		      BYTE.b	%11100000
    736  2750		       80		      BYTE.b	%10000000
    737  2751		       00		      BYTE.b	%00000000
    738  2752		       00		      BYTE.b	%00000000
    739  2753		       00		      BYTE.b	%00000000
    740  2754		       00		      BYTE.b	%00000000
    741  2755		       00		      BYTE.b	%00000000
    742  2756		       00		      BYTE.b	%00000000
    743  2757		       07		      BYTE.b	%00000111
    744  2758		       0f		      BYTE.b	%00001111
    745  2759		       0f		      BYTE.b	%00001111
    746  275a		       0f		      BYTE.b	%00001111
    747  275b		       07		      BYTE.b	%00000111
    748  275c		       c7		      BYTE.b	%11000111
    749  275d		       07		      BYTE.b	%00000111
    750  275e		       00		      BYTE.b	%00000000
    751  275f		       00		      BYTE.b	%00000000
    752  2760		       00		      BYTE.b	%00000000
    753  2761		       00		      BYTE.b	%00000000
    754  2762		       00		      BYTE.b	%00000000
    755  2763		       00		      BYTE.b	%00000000
    756  2764		       00		      BYTE.b	%00000000
    757  2765		       00		      BYTE.b	%00000000
    758  2766		       00		      BYTE.b	%00000000
    759  2767		       00		      BYTE.b	%00000000
    760  2768		       00		      BYTE.b	%00000000
    761  2769		       00		      BYTE.b	%00000000
    762  276a		       00		      BYTE.b	%00000000
    763  276b		       00		      BYTE.b	%00000000
    764  276c		       0e		      BYTE.b	%00001110
    765  276d		       0e		      BYTE.b	%00001110
    766  276e		       0e		      BYTE.b	%00001110
    767  276f		       0f		      BYTE.b	%00001111
    768  2770		       0f		      BYTE.b	%00001111
    769  2771		       0e		      BYTE.b	%00001110
    770  2772		       0e		      BYTE.b	%00001110
    771  2773		       1c		      BYTE.b	%00011100
    772  2774		       00		      BYTE.b	%00000000
    773  2775		       00		      BYTE.b	%00000000
    774  2776		       00		      BYTE.b	%00000000
    775  2777		       00		      BYTE.b	%00000000
    776  2778		       00		      BYTE.b	%00000000
    777  2779		       00		      BYTE.b	%00000000
    778  277a		       00		      BYTE.b	%00000000
    779  277b		       00		      BYTE.b	%00000000
    780  277c		       00		      BYTE.b	%00000000
    781  277d		       00		      BYTE.b	%00000000
    782  277e		       00		      BYTE.b	%00000000
    783  277f		       00		      BYTE.b	%00000000
    784  2780		       00		      BYTE.b	%00000000
    785  2781		       00		      BYTE.b	%00000000
    786  2782		       00		      BYTE.b	%00000000
    787  2783		       00		      BYTE.b	%00000000
    788  2784		       03		      BYTE.b	%00000011
    789  2785		       0f		      BYTE.b	%00001111
    790  2786		       ff		      BYTE.b	%11111111
    791  2787		       fc		      BYTE.b	%11111100
    792  2788		       f0		      BYTE.b	%11110000
    793  2789		       c0		      BYTE.b	%11000000
    794  278a		       00		      BYTE.b	%00000000
    795  278b		       00		      BYTE.b	%00000000
    796  278c		       00		      BYTE.b	%00000000
    797  278d		       00		      BYTE.b	%00000000
    798  278e		       00		      BYTE.b	%00000000
    799  278f		       00		      BYTE.b	%00000000
    800  2790
    801  2790				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    802  2790				  -	      align	256
    803  2790					      endif
    804  2790
    805  2790				   bmp_96x2_1_09
    806  2790
    807  2790		       00		      BYTE.b	%00000000
    808  2791		       00		      BYTE.b	%00000000
    809  2792		       00		      BYTE.b	%00000000
    810  2793		       00		      BYTE.b	%00000000
    811  2794		       00		      BYTE.b	%00000000
    812  2795		       00		      BYTE.b	%00000000
    813  2796		       00		      BYTE.b	%00000000
    814  2797		       00		      BYTE.b	%00000000
    815  2798		       00		      BYTE.b	%00000000
    816  2799		       00		      BYTE.b	%00000000
    817  279a		       00		      BYTE.b	%00000000
    818  279b		       00		      BYTE.b	%00000000
    819  279c		       00		      BYTE.b	%00000000
    820  279d		       00		      BYTE.b	%00000000
    821  279e		       f8		      BYTE.b	%11111000
    822  279f		       cf		      BYTE.b	%11001111
    823  27a0		       01		      BYTE.b	%00000001
    824  27a1		       00		      BYTE.b	%00000000
    825  27a2		       00		      BYTE.b	%00000000
    826  27a3		       00		      BYTE.b	%00000000
    827  27a4		       ff		      BYTE.b	%11111111
    828  27a5		       fc		      BYTE.b	%11111100
    829  27a6		       00		      BYTE.b	%00000000
    830  27a7		       00		      BYTE.b	%00000000
    831  27a8		       00		      BYTE.b	%00000000
    832  27a9		       00		      BYTE.b	%00000000
    833  27aa		       00		      BYTE.b	%00000000
    834  27ab		       00		      BYTE.b	%00000000
    835  27ac		       00		      BYTE.b	%00000000
    836  27ad		       00		      BYTE.b	%00000000
    837  27ae		       00		      BYTE.b	%00000000
    838  27af		       00		      BYTE.b	%00000000
    839  27b0		       18		      BYTE.b	%00011000
    840  27b1		       0c		      BYTE.b	%00001100
    841  27b2		       0c		      BYTE.b	%00001100
    842  27b3		       06		      BYTE.b	%00000110
    843  27b4		       06		      BYTE.b	%00000110
    844  27b5		       06		      BYTE.b	%00000110
    845  27b6		       06		      BYTE.b	%00000110
    846  27b7		       0e		      BYTE.b	%00001110
    847  27b8		       fe		      BYTE.b	%11111110
    848  27b9		       1c		      BYTE.b	%00011100
    849  27ba		       3c		      BYTE.b	%00111100
    850  27bb		       7c		      BYTE.b	%01111100
    851  27bc		       00		      BYTE.b	%00000000
    852  27bd		       00		      BYTE.b	%00000000
    853  27be		       00		      BYTE.b	%00000000
    854  27bf		       00		      BYTE.b	%00000000
    855  27c0		       00		      BYTE.b	%00000000
    856  27c1		       00		      BYTE.b	%00000000
    857  27c2		       00		      BYTE.b	%00000000
    858  27c3		       00		      BYTE.b	%00000000
    859  27c4		       00		      BYTE.b	%00000000
    860  27c5		       00		      BYTE.b	%00000000
    861  27c6		       01		      BYTE.b	%00000001
    862  27c7		       02		      BYTE.b	%00000010
    863  27c8		       06		      BYTE.b	%00000110
    864  27c9		       1c		      BYTE.b	%00011100
    865  27ca		       38		      BYTE.b	%00111000
    866  27cb		       f0		      BYTE.b	%11110000
    867  27cc		       e0		      BYTE.b	%11100000
    868  27cd		       80		      BYTE.b	%10000000
    869  27ce		       00		      BYTE.b	%00000000
    870  27cf		       00		      BYTE.b	%00000000
    871  27d0		       00		      BYTE.b	%00000000
    872  27d1		       00		      BYTE.b	%00000000
    873  27d2		       00		      BYTE.b	%00000000
    874  27d3		       00		      BYTE.b	%00000000
    875  27d4		       00		      BYTE.b	%00000000
    876  27d5		       00		      BYTE.b	%00000000
    877  27d6		       00		      BYTE.b	%00000000
    878  27d7		       00		      BYTE.b	%00000000
    879  27d8
    880  27d8					      if	>. != >[.+(bmp_96x2_1_height)]
    881  2800		       00 00 00 00*	      align	256
    882  2800					      endif
    883  2800
    884  2800				   bmp_96x2_1_10
    885  2800
    886  2800		       00		      BYTE.b	%00000000
    887  2801		       00		      BYTE.b	%00000000
    888  2802		       00		      BYTE.b	%00000000
    889  2803		       00		      BYTE.b	%00000000
    890  2804		       00		      BYTE.b	%00000000
    891  2805		       00		      BYTE.b	%00000000
    892  2806		       00		      BYTE.b	%00000000
    893  2807		       00		      BYTE.b	%00000000
    894  2808		       00		      BYTE.b	%00000000
    895  2809		       00		      BYTE.b	%00000000
    896  280a		       00		      BYTE.b	%00000000
    897  280b		       00		      BYTE.b	%00000000
    898  280c		       00		      BYTE.b	%00000000
    899  280d		       00		      BYTE.b	%00000000
    900  280e		       1e		      BYTE.b	%00011110
    901  280f		       0e		      BYTE.b	%00001110
    902  2810		       8e		      BYTE.b	%10001110
    903  2811		       8e		      BYTE.b	%10001110
    904  2812		       0f		      BYTE.b	%00001111
    905  2813		       0e		      BYTE.b	%00001110
    906  2814		       8e		      BYTE.b	%10001110
    907  2815		       1e		      BYTE.b	%00011110
    908  2816		       00		      BYTE.b	%00000000
    909  2817		       00		      BYTE.b	%00000000
    910  2818		       00		      BYTE.b	%00000000
    911  2819		       00		      BYTE.b	%00000000
    912  281a		       00		      BYTE.b	%00000000
    913  281b		       00		      BYTE.b	%00000000
    914  281c		       00		      BYTE.b	%00000000
    915  281d		       00		      BYTE.b	%00000000
    916  281e		       00		      BYTE.b	%00000000
    917  281f		       00		      BYTE.b	%00000000
    918  2820		       00		      BYTE.b	%00000000
    919  2821		       00		      BYTE.b	%00000000
    920  2822		       00		      BYTE.b	%00000000
    921  2823		       00		      BYTE.b	%00000000
    922  2824		       00		      BYTE.b	%00000000
    923  2825		       00		      BYTE.b	%00000000
    924  2826		       00		      BYTE.b	%00000000
    925  2827		       00		      BYTE.b	%00000000
    926  2828		       00		      BYTE.b	%00000000
    927  2829		       00		      BYTE.b	%00000000
    928  282a		       00		      BYTE.b	%00000000
    929  282b		       00		      BYTE.b	%00000000
    930  282c		       00		      BYTE.b	%00000000
    931  282d		       00		      BYTE.b	%00000000
    932  282e		       00		      BYTE.b	%00000000
    933  282f		       00		      BYTE.b	%00000000
    934  2830		       00		      BYTE.b	%00000000
    935  2831		       20		      BYTE.b	%00100000
    936  2832		       00		      BYTE.b	%00000000
    937  2833		       40		      BYTE.b	%01000000
    938  2834		       80		      BYTE.b	%10000000
    939  2835		       80		      BYTE.b	%10000000
    940  2836		       00		      BYTE.b	%00000000
    941  2837		       00		      BYTE.b	%00000000
    942  2838		       00		      BYTE.b	%00000000
    943  2839		       00		      BYTE.b	%00000000
    944  283a		       00		      BYTE.b	%00000000
    945  283b		       00		      BYTE.b	%00000000
    946  283c		       00		      BYTE.b	%00000000
    947  283d		       00		      BYTE.b	%00000000
    948  283e		       00		      BYTE.b	%00000000
    949  283f		       00		      BYTE.b	%00000000
    950  2840		       00		      BYTE.b	%00000000
    951  2841		       00		      BYTE.b	%00000000
    952  2842		       00		      BYTE.b	%00000000
    953  2843		       00		      BYTE.b	%00000000
    954  2844		       00		      BYTE.b	%00000000
    955  2845		       00		      BYTE.b	%00000000
    956  2846		       00		      BYTE.b	%00000000
    957  2847		       00		      BYTE.b	%00000000
    958  2848
    959  2848				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    960  2848				  -	      align	256
    961  2848					      endif
    962  2848
    963  2848				   bmp_96x2_1_11
    964  2848
    965  2848		       00		      BYTE.b	%00000000
    966  2849		       00		      BYTE.b	%00000000
    967  284a		       00		      BYTE.b	%00000000
    968  284b		       00		      BYTE.b	%00000000
    969  284c		       00		      BYTE.b	%00000000
    970  284d		       00		      BYTE.b	%00000000
    971  284e		       00		      BYTE.b	%00000000
    972  284f		       00		      BYTE.b	%00000000
    973  2850		       00		      BYTE.b	%00000000
    974  2851		       00		      BYTE.b	%00000000
    975  2852		       10		      BYTE.b	%00010000
    976  2853		       08		      BYTE.b	%00001000
    977  2854		       0c		      BYTE.b	%00001100
    978  2855		       06		      BYTE.b	%00000110
    979  2856		       06		      BYTE.b	%00000110
    980  2857		       06		      BYTE.b	%00000110
    981  2858		       0e		      BYTE.b	%00001110
    982  2859		       0e		      BYTE.b	%00001110
    983  285a		       fe		      BYTE.b	%11111110
    984  285b		       1c		      BYTE.b	%00011100
    985  285c		       3c		      BYTE.b	%00111100
    986  285d		       7c		      BYTE.b	%01111100
    987  285e		       00		      BYTE.b	%00000000
    988  285f		       00		      BYTE.b	%00000000
    989  2860		       00		      BYTE.b	%00000000
    990  2861		       00		      BYTE.b	%00000000
    991  2862		       00		      BYTE.b	%00000000
    992  2863		       00		      BYTE.b	%00000000
    993  2864		       00		      BYTE.b	%00000000
    994  2865		       00		      BYTE.b	%00000000
    995  2866		       00		      BYTE.b	%00000000
    996  2867		       00		      BYTE.b	%00000000
    997  2868		       00		      BYTE.b	%00000000
    998  2869		       00		      BYTE.b	%00000000
    999  286a		       00		      BYTE.b	%00000000
   1000  286b		       00		      BYTE.b	%00000000
   1001  286c		       00		      BYTE.b	%00000000
   1002  286d		       00		      BYTE.b	%00000000
   1003  286e		       00		      BYTE.b	%00000000
   1004  286f		       00		      BYTE.b	%00000000
   1005  2870		       00		      BYTE.b	%00000000
   1006  2871		       00		      BYTE.b	%00000000
   1007  2872		       00		      BYTE.b	%00000000
   1008  2873		       00		      BYTE.b	%00000000
   1009  2874		       00		      BYTE.b	%00000000
   1010  2875		       00		      BYTE.b	%00000000
   1011  2876		       00		      BYTE.b	%00000000
   1012  2877		       00		      BYTE.b	%00000000
   1013  2878		       00		      BYTE.b	%00000000
   1014  2879		       00		      BYTE.b	%00000000
   1015  287a		       00		      BYTE.b	%00000000
   1016  287b		       00		      BYTE.b	%00000000
   1017  287c		       00		      BYTE.b	%00000000
   1018  287d		       00		      BYTE.b	%00000000
   1019  287e		       00		      BYTE.b	%00000000
   1020  287f		       00		      BYTE.b	%00000000
   1021  2880		       00		      BYTE.b	%00000000
   1022  2881		       00		      BYTE.b	%00000000
   1023  2882		       00		      BYTE.b	%00000000
   1024  2883		       00		      BYTE.b	%00000000
   1025  2884		       00		      BYTE.b	%00000000
   1026  2885		       00		      BYTE.b	%00000000
   1027  2886		       00		      BYTE.b	%00000000
   1028  2887		       00		      BYTE.b	%00000000
   1029  2888		       00		      BYTE.b	%00000000
   1030  2889		       00		      BYTE.b	%00000000
   1031  288a		       00		      BYTE.b	%00000000
   1032  288b		       00		      BYTE.b	%00000000
   1033  288c		       00		      BYTE.b	%00000000
   1034  288d		       00		      BYTE.b	%00000000
   1035  288e		       00		      BYTE.b	%00000000
   1036  288f		       00		      BYTE.b	%00000000
   1037  2890
------- FILE titlescreen/asm/titlescreen.asm
    160  2890					      endif
    161  2890				  -	      ifconst	mk_96x2_2_on
    162  2890				  -	      include	"titlescreen/96x2_2_image.asm"
    163  2890					      endif
    164  2890				  -	      ifconst	mk_96x2_3_on
    165  2890				  -	      include	"titlescreen/96x2_3_image.asm"
    166  2890					      endif
    167  2890
    168  2890				  -	      ifconst	mk_score_on
    169  2890				  -	      include	"titlescreen/score_image.asm"
    170  2890					      endif
    171  2890
    172  2890				  -	      ifconst	mk_gameselect_on
    173  2890				  -	      include	"titlescreen/gameselect_image.asm"
    174  2890					      endif
    175  2890
------- FILE E:\BatariBasic\Projects\Reaper\DeathMatch_NTSC_0.40.bas.asm
   4634  2890
   4635  2890				   .L0164		;  return otherbank
   4636  2890
   4637  2890		       4c dd ff 	      JMP	BS_return
   4638  2893				   .
   4639  2893							; 
   4640  2893
   4641  2893				   .Start_Game
   4642  2893							; Start_Game
   4643  2893
   4644  2893				   .L0165		;  w{0} = 0 :	Dash_Delay = 0
   4645  2893
   4646  2893		       a5 ed		      LDA	w
   4647  2895		       29 fe		      AND	#254
   4648  2897		       85 ed		      STA	w
   4649  2899		       a9 00		      LDA	#0
   4650  289b		       85 d5		      STA	Dash_Delay
   4651  289d				   .L0166		;  _NUSIZ1{3} = 0 :  REFP0 = 0
   4652  289d
   4653  289d		       a5 93		      LDA	_NUSIZ1
   4654  289f		       29 f7		      AND	#247
   4655  28a1		       85 93		      STA	_NUSIZ1
   4656  28a3		       a9 00		      LDA	#0
   4657  28a5		       85 0b		      STA	REFP0
   4658  28a7				   .L0167		;  AUDV0 = 0 :  AUDV1 = 0 :  CTRLPF = $01 :  COLUBK = $00
   4659  28a7
   4660  28a7		       a9 00		      LDA	#0
   4661  28a9		       85 19		      STA	AUDV0
   4662  28ab		       85 1a		      STA	AUDV1
   4663  28ad		       a9 01		      LDA	#$01
   4664  28af		       85 0a		      STA	CTRLPF
   4665  28b1		       a9 00		      LDA	#$00
   4666  28b3		       85 09		      STA	COLUBK
   4667  28b5				   .L0168		;  e = 0 :  HouseHeight = 0
   4668  28b5
   4669  28b5		       a9 00		      LDA	#0
   4670  28b7		       85 db		      STA	e
   4671  28b9		       85 f0		      STA	HouseHeight
   4672  28bb				   .L0169		;  Life1 = MaxLife :  Life2 = MaxLife :  Kills1 = $00 :  Kills2 = $00
   4673  28bb
   4674  28bb		       a5 df		      LDA	MaxLife
   4675  28bd		       85 c1		      STA	Life1
   4676  28bf		       85 c2		      STA	Life2
   4677  28c1		       a9 00		      LDA	#$00
   4678  28c3		       85 d2		      STA	Kills1
   4679  28c5		       85 d3		      STA	Kills2
   4680  28c7				   .L0170		;  playfield:
   4681  28c7
   4682  28c7		       a9 16		      LDA	#<PF1_data1
   4683  28c9		       85 bb		      STA	PF1pointer
   4684  28cb		       a9 fd		      LDA	#>PF1_data1
   4685  28cd		       85 bc		      STA	PF1pointer+1
   4686  28cf		       a9 2c		      LDA	#<PF2_data1
   4687  28d1		       85 bd		      STA	PF2pointer
   4688  28d3		       a9 fd		      LDA	#>PF2_data1
   4689  28d5		       85 be		      STA	PF2pointer+1
   4690  28d7				   .
   4691  28d7							; 
   4692  28d7
   4693  28d7				   .L0171		;  player0:
   4694  28d7
   4695  28d7		       a2 82		      LDX	#<playerL0171_0
   4696  28d9		       86 a2		      STX	player0pointerlo
   4697  28db		       a9 f5		      LDA	#>playerL0171_0
   4698  28dd		       85 a3		      STA	player0pointerhi
   4699  28df		       a9 0c		      LDA	#12
   4700  28e1		       85 b0		      STA	player0height
   4701  28e3				   .
   4702  28e3							; 
   4703  28e3
   4704  28e3				   .L0172		;  player1:
   4705  28e3
   4706  28e3		       a2 8e		      LDX	#<playerL0172_1
   4707  28e5		       86 a6		      STX	player1pointerlo
   4708  28e7		       a9 f5		      LDA	#>playerL0172_1
   4709  28e9		       85 ab		      STA	player1pointerhi
   4710  28eb		       a9 0c		      LDA	#12
   4711  28ed		       85 b1		      STA	player1height
   4712  28ef				   .L0173		;  player0x = 20 :  player1x = 138
   4713  28ef
   4714  28ef		       a9 14		      LDA	#20
   4715  28f1		       85 84		      STA	player0x
   4716  28f3		       a9 8a		      LDA	#138
   4717  28f5		       85 85		      STA	player1x
   4718  28f7				   .L0174		;  player0y = 45 :  player1y = player0y - 2
   4719  28f7
   4720  28f7		       a9 2d		      LDA	#45
   4721  28f9		       85 8d		      STA	player0y
   4722  28fb		       a5 8d		      LDA	player0y
   4723  28fd		       38		      SEC
   4724  28fe		       e9 02		      SBC	#2
   4725  2900		       85 8e		      STA	player1y
   4726  2902				   .L0175		;  player2y = 160 :  player3y = 160 :	player4y = 160 :  player5y = 160
   4727  2902
   4728  2902		       a9 a0		      LDA	#160
   4729  2904		       85 8f		      STA	player2y
   4730  2906		       85 90		      STA	player3y
   4731  2908		       85 91		      STA	player4y
   4732  290a		       85 92		      STA	player5y
   4733  290c				   .L0176		;  player0scorecolor = $4a
   4734  290c
   4735  290c		       a9 4a		      LDA	#$4a
   4736  290e		       85 c0		      STA	player0scorecolor
   4737  2910				   .L0177		;  player1scorecolor = $8a
   4738  2910
   4739  2910		       a9 8a		      LDA	#$8a
   4740  2912		       85 bf		      STA	player1scorecolor
   4741  2914				   .L0178		;  player2scorecolor = $46
   4742  2914
   4743  2914		       a9 46		      LDA	#$46
   4744  2916		       85 d4		      STA	player2scorecolor
   4745  2918				   .L0179		;  player3scorecolor = $86
   4746  2918
   4747  2918		       a9 86		      LDA	#$86
   4748  291a		       85 c9		      STA	player3scorecolor
   4749  291c				   .L0180		;  AUDC0 = 15 :  SoundCounter = 0
   4750  291c
   4751  291c		       a9 0f		      LDA	#15
   4752  291e		       85 15		      STA	AUDC0
   4753  2920		       a9 00		      LDA	#0
   4754  2922		       85 dc		      STA	SoundCounter
   4755  2924				   .
   4756  2924							; 
   4757  2924
   4758  2924				   .Flyers
   4759  2924							; Flyers
   4760  2924
   4761  2924				   .L0181		;  _COLUP1 = $0e
   4762  2924
   4763  2924		       a9 0e		      LDA	#$0e
   4764  2926		       85 98		      STA	_COLUP1
   4765  2928				   .L0182		;  COLUP0 = _COLUP1
   4766  2928
   4767  2928		       a5 98		      LDA	_COLUP1
   4768  292a		       85 06		      STA	COLUP0
   4769  292c				   .L0183		;  AUDF0 = SoundCounter
   4770  292c
   4771  292c		       a5 dc		      LDA	SoundCounter
   4772  292e		       85 17		      STA	AUDF0
   4773  2930				   .L0184		;  AUDV0 = SoundCounter
   4774  2930
   4775  2930		       a5 dc		      LDA	SoundCounter
   4776  2932		       85 19		      STA	AUDV0
   4777  2934				   .L0185		;  SoundCounter = SoundCounter + 1
   4778  2934
   4779  2934		       e6 dc		      INC	SoundCounter
   4780  2936				   .L0186		;  player0x = player0x + 2 :  player1x = player1x - 2
   4781  2936
   4782  2936		       a5 84		      LDA	player0x
   4783  2938		       18		      CLC
   4784  2939		       69 02		      ADC	#2
   4785  293b		       85 84		      STA	player0x
   4786  293d		       a5 85		      LDA	player1x
   4787  293f		       38		      SEC
   4788  2940		       e9 02		      SBC	#2
   4789  2942		       85 85		      STA	player1x
   4790  2944				   .L0187		;  ShitCounter = 0
   4791  2944
   4792  2944		       a9 00		      LDA	#0
   4793  2946		       85 dd		      STA	ShitCounter
   4794  2948				   .L0188		;  drawscreen
   4795  2948
   4796  2948		       85 d1		      sta	temp7
   4797  294a		       a9 39		      lda	#>(ret_point3-1)
   4798  294c		       48		      pha
   4799  294d		       a9 5f		      lda	#<(ret_point3-1)
   4800  294f		       48		      pha
   4801  2950		       a9 f0		      lda	#>(drawscreen-1)
   4802  2952		       48		      pha
   4803  2953		       a9 39		      lda	#<(drawscreen-1)
   4804  2955		       48		      pha
   4805  2956		       a5 d1		      lda	temp7
   4806  2958		       48		      pha
   4807  2959		       8a		      txa
   4808  295a		       48		      pha
   4809  295b		       a2 08		      ldx	#8
   4810  295d		       4c eb ff 	      jmp	BS_jsr
   4811  2960				   ret_point3
   4812  2960				   .L0189		;  if player0x = 72 then goto Stand
   4813  2960
   4814  2960		       a5 84		      LDA	player0x
   4815  2962		       c9 48		      CMP	#72
   4816  2964		       d0 03		      BNE	.skipL0189
   4817  2966				   .condpart108
   4818  2966		       4c 6c 39 	      jmp	.Stand
   4819  2969
   4820  2969				   .skipL0189
   4821  2969				   .
   4822  2969							; 
   4823  2969
   4824  2969				   .L0190		;  goto Flyers
   4825  2969
   4826  2969		       4c 24 39 	      jmp	.Flyers
   4827  296c
   4828  296c				   .
   4829  296c							; 
   4830  296c
   4831  296c				   .Stand
   4832  296c							; Stand
   4833  296c
   4834  296c				   .L0191		;  player1x = player0x + 16
   4835  296c
   4836  296c		       a5 84		      LDA	player0x
   4837  296e		       18		      CLC
   4838  296f		       69 10		      ADC	#16
   4839  2971		       85 85		      STA	player1x
   4840  2973				   .L0192		;  _COLUP1 = _COLUP1 + $01
   4841  2973
   4842  2973		       a5 98		      LDA	_COLUP1
   4843  2975		       18		      CLC
   4844  2976		       69 01		      ADC	#$01
   4845  2978		       85 98		      STA	_COLUP1
   4846  297a				   .L0193		;  COLUP0 = _COLUP1
   4847  297a
   4848  297a		       a5 98		      LDA	_COLUP1
   4849  297c		       85 06		      STA	COLUP0
   4850  297e				   .L0194		;  if SoundCounter > 15 then SoundCounter = 0 :  ShitCounter = ShitCounter + 1 else SoundCounter = SoundCounter + 1
   4851  297e
   4852  297e		       a9 0f		      LDA	#15
   4853  2980		       c5 dc		      CMP	SoundCounter
   4854  2982		       b0 09		      BCS	.skipL0194
   4855  2984				   .condpart109
   4856  2984		       a9 00		      LDA	#0
   4857  2986		       85 dc		      STA	SoundCounter
   4858  2988		       e6 dd		      INC	ShitCounter
   4859  298a		       4c 8f 39 	      jmp	.skipelse8
   4860  298d				   .skipL0194
   4861  298d		       e6 dc		      INC	SoundCounter
   4862  298f				   .skipelse8
   4863  298f				   .L0195		;  AUDF0 = SoundCounter :  AUDV0 = SoundCounter :  AUDC0 = 8
   4864  298f
   4865  298f		       a5 dc		      LDA	SoundCounter
   4866  2991		       85 17		      STA	AUDF0
   4867  2993		       85 19		      STA	AUDV0
   4868  2995		       a9 08		      LDA	#8
   4869  2997		       85 15		      STA	AUDC0
   4870  2999				   .L0196		;  drawscreen
   4871  2999
   4872  2999		       85 d1		      sta	temp7
   4873  299b		       a9 39		      lda	#>(ret_point4-1)
   4874  299d		       48		      pha
   4875  299e		       a9 b0		      lda	#<(ret_point4-1)
   4876  29a0		       48		      pha
   4877  29a1		       a9 f0		      lda	#>(drawscreen-1)
   4878  29a3		       48		      pha
   4879  29a4		       a9 39		      lda	#<(drawscreen-1)
   4880  29a6		       48		      pha
   4881  29a7		       a5 d1		      lda	temp7
   4882  29a9		       48		      pha
   4883  29aa		       8a		      txa
   4884  29ab		       48		      pha
   4885  29ac		       a2 08		      ldx	#8
   4886  29ae		       4c eb ff 	      jmp	BS_jsr
   4887  29b1				   ret_point4
   4888  29b1				   .L0197		;  if ShitCounter > 6 then SoundCounter = 30 :  goto GoUp
   4889  29b1
   4890  29b1		       a9 06		      LDA	#6
   4891  29b3		       c5 dd		      CMP	ShitCounter
   4892  29b5		       b0 07		      BCS	.skipL0197
   4893  29b7				   .condpart110
   4894  29b7		       a9 1e		      LDA	#30
   4895  29b9		       85 dc		      STA	SoundCounter
   4896  29bb		       4c c1 39 	      jmp	.GoUp
   4897  29be
   4898  29be				   .skipL0197
   4899  29be				   .L0198		;  goto Stand
   4900  29be
   4901  29be		       4c 6c 39 	      jmp	.Stand
   4902  29c1
   4903  29c1				   .
   4904  29c1							; 
   4905  29c1
   4906  29c1				   .GoUp
   4907  29c1							; GoUp
   4908  29c1
   4909  29c1				   .L0199		;  player0y = player0y + 2 :  player1y = player0y - 2
   4910  29c1
   4911  29c1		       a5 8d		      LDA	player0y
   4912  29c3		       18		      CLC
   4913  29c4		       69 02		      ADC	#2
   4914  29c6		       85 8d		      STA	player0y
   4915  29c8		       a5 8d		      LDA	player0y
   4916  29ca		       38		      SEC
   4917  29cb		       e9 02		      SBC	#2
   4918  29cd		       85 8e		      STA	player1y
   4919  29cf				   .L0200		;  AUDV0 = SoundCounter / 2 :	AUDF0 = SoundCounter / 2 :  AUDC0 = 6
   4920  29cf
   4921  29cf		       a5 dc		      LDA	SoundCounter
   4922  29d1		       4a		      lsr
   4923  29d2		       85 19		      STA	AUDV0
   4924  29d4		       a5 dc		      LDA	SoundCounter
   4925  29d6		       4a		      lsr
   4926  29d7		       85 17		      STA	AUDF0
   4927  29d9		       a9 06		      LDA	#6
   4928  29db		       85 15		      STA	AUDC0
   4929  29dd				   .L0201		;  if SoundCounter > 0 then SoundCounter = SoundCounter - 1
   4930  29dd
   4931  29dd		       a9 00		      LDA	#0
   4932  29df		       c5 dc		      CMP	SoundCounter
   4933  29e1		       b0 02		      BCS	.skipL0201
   4934  29e3				   .condpart111
   4935  29e3		       c6 dc		      DEC	SoundCounter
   4936  29e5				   .skipL0201
   4937  29e5				   .L0202		;  if player0y > 84 then goto Remover
   4938  29e5
   4939  29e5		       a9 54		      LDA	#84
   4940  29e7		       c5 8d		      CMP	player0y
   4941  29e9		       b0 03		      BCS	.skipL0202
   4942  29eb				   .condpart112
   4943  29eb		       4c 09 3a 	      jmp	.Remover
   4944  29ee
   4945  29ee				   .skipL0202
   4946  29ee				   .L0203		;  drawscreen
   4947  29ee
   4948  29ee		       85 d1		      sta	temp7
   4949  29f0		       a9 3a		      lda	#>(ret_point5-1)
   4950  29f2		       48		      pha
   4951  29f3		       a9 05		      lda	#<(ret_point5-1)
   4952  29f5		       48		      pha
   4953  29f6		       a9 f0		      lda	#>(drawscreen-1)
   4954  29f8		       48		      pha
   4955  29f9		       a9 39		      lda	#<(drawscreen-1)
   4956  29fb		       48		      pha
   4957  29fc		       a5 d1		      lda	temp7
   4958  29fe		       48		      pha
   4959  29ff		       8a		      txa
   4960  2a00		       48		      pha
   4961  2a01		       a2 08		      ldx	#8
   4962  2a03		       4c eb ff 	      jmp	BS_jsr
   4963  2a06				   ret_point5
   4964  2a06				   .L0204		;  goto GoUp
   4965  2a06
   4966  2a06		       4c c1 39 	      jmp	.GoUp
   4967  2a09
   4968  2a09				   .Remover
   4969  2a09							; Remover
   4970  2a09
   4971  2a09				   .L0205		;  AUDV0 = 0 :  player0x = 140 :  player1x = 140 :  COLUP0 = $00 :  _COLUP1 = $00
   4972  2a09
   4973  2a09		       a9 00		      LDA	#0
   4974  2a0b		       85 19		      STA	AUDV0
   4975  2a0d		       a9 8c		      LDA	#140
   4976  2a0f		       85 84		      STA	player0x
   4977  2a11		       85 85		      STA	player1x
   4978  2a13		       a9 00		      LDA	#$00
   4979  2a15		       85 06		      STA	COLUP0
   4980  2a17		       85 98		      STA	_COLUP1
   4981  2a19				   .L0206		;  duration = 1 :  Reaper1_X = 28 :  Reaper2_X = 121 :  Reaper1_Y = 23 :  Reaper2_Y = Reaper1_Y :  Shoot1_Y = 120 :  Shoot2_Y = 120 :	Shoot1_X = 72 :  Shoot2_X = 72 :  w{0} = 1
   4982  2a19
   4983  2a19		       a9 01		      LDA	#1
   4984  2a1b		       85 d9		      STA	duration
   4985  2a1d		       a9 1c		      LDA	#28
   4986  2a1f		       85 da		      STA	Reaper1_X
   4987  2a21		       a9 79		      LDA	#121
   4988  2a23		       85 dd		      STA	Reaper2_X
   4989  2a25		       a9 17		      LDA	#23
   4990  2a27		       85 dc		      STA	Reaper1_Y
   4991  2a29		       a5 dc		      LDA	Reaper1_Y
   4992  2a2b		       85 de		      STA	Reaper2_Y
   4993  2a2d		       a9 78		      LDA	#120
   4994  2a2f		       85 e2		      STA	Shoot1_Y
   4995  2a31		       85 e4		      STA	Shoot2_Y
   4996  2a33		       a9 48		      LDA	#72
   4997  2a35		       85 e1		      STA	Shoot1_X
   4998  2a37		       85 e3		      STA	Shoot2_X
   4999  2a39		       a5 ed		      LDA	w
   5000  2a3b		       09 01		      ORA	#1
   5001  2a3d		       85 ed		      STA	w
   5002  2a3f				   .L0207		;  e{3} = 1 :	o{2} = 0 :  o{3} = 0 :	o{4} = 0 :  o{5} = 0 :	o{6} = 0 :  o{7} = 0 :	s{0} = 0 :  s{1} = 0 :	s{2} = 0 :  s{3} = 0 :	s{4} = 0 :  s{5} = 0 :	s{6} = 0 :  s{7} = 0
   5003  2a3f
   5004  2a3f		       a5 db		      LDA	e
   5005  2a41		       09 08		      ORA	#8
   5006  2a43		       85 db		      STA	e
   5007  2a45		       a5 e5		      LDA	o
   5008  2a47		       29 fb		      AND	#251
   5009  2a49		       85 e5		      STA	o
   5010  2a4b		       a5 e5		      LDA	o
   5011  2a4d		       29 f7		      AND	#247
   5012  2a4f		       85 e5		      STA	o
   5013  2a51		       a5 e5		      LDA	o
   5014  2a53		       29 ef		      AND	#239
   5015  2a55		       85 e5		      STA	o
   5016  2a57		       a5 e5		      LDA	o
   5017  2a59		       29 df		      AND	#223
   5018  2a5b		       85 e5		      STA	o
   5019  2a5d		       a5 e5		      LDA	o
   5020  2a5f		       29 bf		      AND	#191
   5021  2a61		       85 e5		      STA	o
   5022  2a63		       a5 e5		      LDA	o
   5023  2a65		       29 7f		      AND	#127
   5024  2a67		       85 e5		      STA	o
   5025  2a69		       a5 e9		      LDA	s
   5026  2a6b		       29 fe		      AND	#254
   5027  2a6d		       85 e9		      STA	s
   5028  2a6f		       a5 e9		      LDA	s
   5029  2a71		       29 fd		      AND	#253
   5030  2a73		       85 e9		      STA	s
   5031  2a75		       a5 e9		      LDA	s
   5032  2a77		       29 fb		      AND	#251
   5033  2a79		       85 e9		      STA	s
   5034  2a7b		       a5 e9		      LDA	s
   5035  2a7d		       29 f7		      AND	#247
   5036  2a7f		       85 e9		      STA	s
   5037  2a81		       a5 e9		      LDA	s
   5038  2a83		       29 ef		      AND	#239
   5039  2a85		       85 e9		      STA	s
   5040  2a87		       a5 e9		      LDA	s
   5041  2a89		       29 df		      AND	#223
   5042  2a8b		       85 e9		      STA	s
   5043  2a8d		       a5 e9		      LDA	s
   5044  2a8f		       29 bf		      AND	#191
   5045  2a91		       85 e9		      STA	s
   5046  2a93		       a5 e9		      LDA	s
   5047  2a95		       29 7f		      AND	#127
   5048  2a97		       85 e9		      STA	s
   5049  2a99				   .L0208		;  asm
   5050  2a99
   5051  2a99		       a9 00		      lda	#0
   5052  2a9b
   5053  2a9b		       85 ec		      sta	Player1Counter_1
   5054  2a9d
   5055  2a9d		       85 e7		      sta	Player1Counter_Jump
   5056  2a9f
   5057  2a9f		       85 e6		      sta	Player2Counter_1
   5058  2aa1
   5059  2aa1		       85 e8		      sta	Player2Counter_Jump
   5060  2aa3
   5061  2aa3		       85 ea		      sta	Player1Counter_Sprite
   5062  2aa5
   5063  2aa5		       85 ef		      sta	PowerUp_Counter
   5064  2aa7
   5065  2aa7		       85 eb		      sta	Player2Counter_Sprite
   5066  2aa9
   5067  2aa9
   5068  2aa9
   5069  2aa9				   .L0209		;  goto MusicSetup3 bank5
   5070  2aa9
   5071  2aa9		       85 d1		      sta	temp7
   5072  2aab		       a9 96		      lda	#>(.MusicSetup3-1)
   5073  2aad		       48		      pha
   5074  2aae		       a9 cf		      lda	#<(.MusicSetup3-1)
   5075  2ab0		       48		      pha
   5076  2ab1		       a5 d1		      lda	temp7
   5077  2ab3		       48		      pha
   5078  2ab4		       8a		      txa
   5079  2ab5		       48		      pha
   5080  2ab6		       a2 05		      ldx	#5
   5081  2ab8		       4c eb ff 	      jmp	BS_jsr
   5082  2abb				   .
   5083  2abb							; 
   5084  2abb
   5085  2abb				   .L0210		;  bank 3
   5086  2abb
   5087  2abb					      if	ECHO2
      1305 bytes of ROM space left in bank 2
   5088  2abb					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   5089  2abb					      endif
   5090  2abb		       00 01	   ECHO2      =	1
   5091  2fd4					      ORG	$2FF4-bscode_length
   5092  2fd4					      RORG	$3FF4-bscode_length
   5093  2fd4		       a2 ff	   start_bank2 ldx	#$ff
   5094  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
   5095  2fd6				  -	      stx	FASTFETCH
   5096  2fd6					      endif
   5097  2fd6		       9a		      txs
   5098  2fd7				  -	      if	bankswitch == 64
   5099  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5100  2fd7					      else
   5101  2fd7		       a9 f3		      lda	#>(start-1)
   5102  2fd9					      endif
   5103  2fd9		       48		      pha
   5104  2fda		       a9 6d		      lda	#<(start-1)
   5105  2fdc		       48		      pha
   5106  2fdd		       48		      pha
   5107  2fde		       8a		      txa
   5108  2fdf		       48		      pha
   5109  2fe0		       ba		      tsx
   5110  2fe1					      if	bankswitch != 64
   5111  2fe1		       b5 04		      lda	4,x	; get high byte of return address
   5112  2fe3		       2a		      rol
   5113  2fe4		       2a		      rol
   5114  2fe5		       2a		      rol
   5115  2fe6		       2a		      rol
   5116  2fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5117  2fe9		       aa		      tax
   5118  2fea		       e8		      inx
   5119  2feb				  -	      else
   5120  2feb				  -	      lda	4,x	; get high byte of return address
   5121  2feb				  -	      tay
   5122  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5123  2feb				  -	      sta	4,x
   5124  2feb				  -	      tya
   5125  2feb				  -	      lsr
   5126  2feb				  -	      lsr
   5127  2feb				  -	      lsr
   5128  2feb				  -	      lsr
   5129  2feb				  -	      tax
   5130  2feb				  -	      inx
   5131  2feb					      endif
   5132  2feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   5133  2fee		       68		      pla
   5134  2fef		       aa		      tax
   5135  2ff0		       68		      pla
   5136  2ff1		       60		      rts
   5137  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5138  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5139  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5140  2ff2					      endif
   5141  2ffc					      ORG	$2FFC
   5142  2ffc					      RORG	$3FFC
   5143  2ffc		       d4 3f		      .word.w	start_bank2
   5144  2ffe		       d4 3f		      .word.w	start_bank2
   5145  3000					      ORG	$3000
   5146  3000					      RORG	$5000
   5147  3000				   .GameLoop
   5148  3000							; GameLoop
   5149  3000
   5150  3000				   .L0211		;  asm
   5151  3000
   5152  3000		       a5 db		      LDA	e
   5153  3002
   5154  3002		       4a		      LSR
   5155  3003
   5156  3003		       90 19		      BCC	.skipL00_66
   5157  3005
   5158  3005		       a5 db		      LDA	e
   5159  3007
   5160  3007		       29 fe		      AND	#254
   5161  3009
   5162  3009		       85 db		      STA	e
   5163  300b
   5164  300b				   .L0212		;  e{1}  =  !e{1}
   5165  300b
   5166  300b		       a5 db		      LDA	e
   5167  300d		       29 02		      AND	#2
   5168  300f		       08		      PHP
   5169  3010		       a5 db		      LDA	e
   5170  3012		       29 fd		      AND	#253
   5171  3014		       28		      PLP
   5172  3015		       d0 02		      .byte.b	$D0, $02
   5173  3017		       09 02		      ORA	#2
   5174  3019		       85 db		      STA	e
   5175  301b				   .L0213		;  asm
   5176  301b
   5177  301b		       4c 24 50 	      jmp	.NOPE_NOPE_NOPE
   5178  301e
   5179  301e				   .skipL00_66
   5180  301e
   5181  301e		       a5 db		      LDA	e
   5182  3020
   5183  3020		       09 01		      ORA	#1
   5184  3022
   5185  3022		       85 db		      STA	e
   5186  3024
   5187  3024				   .NOPE_NOPE_NOPE
   5188  3024
   5189  3024
   5190  3024
   5191  3024				   .L0214		;  NUSIZ0 = $30
   5192  3024
   5193  3024		       a9 30		      LDA	#$30
   5194  3026		       85 04		      STA	NUSIZ0
   5195  3028				   .L0215		;  rem e{2}, e{3} = Mirrored, e{4}; e{5}= Jump, e{6}, e{7}=Dash, o{2}, s{7}=smashed, o{3}, o{4}=immortal, o{5}, o{6}=Attack, o{7}, s{0}=Shoot, s{1}, s{2}, s{3}, s{4}=ShootDIR, s{5}, s{6}=Smash
   5196  3028
   5197  3028				   .L0216		;  rem w{5} (powerup_player), w{6}, w{7}  = PowerUp_Dir   
   5198  3028
   5199  3028				   .L0217		;  asm
   5200  3028
   5201  3028		       a5 d6		      lda	rand
   5202  302a
   5203  302a		       4a		      lsr
   5204  302b
   5205  302b		       90 02		      bcc	*+4
   5206  302d
   5207  302d		       49 b4		      eor	#$B4
   5208  302f
   5209  302f		       85 d6		      sta	rand
   5210  3031
   5211  3031		       aa		      TAX
   5212  3032
   5213  3032
   5214  3032
   5215  3032		       a0 10		      LDY	#$10
   5216  3034
   5217  3034		       c4 c1		      CPY	player0score
   5218  3036
   5219  3036		       b0 02		      BCS	.skipelse9_1
   5220  3038
   5221  3038				   .skipL0205_1
   5222  3038
   5223  3038		       a2 4a		      LDX	#$4a
   5224  303a
   5225  303a				   .skipelse9_1
   5226  303a
   5227  303a		       86 c0		      STX	player0scorecolor
   5228  303c
   5229  303c		       a6 d6		      LDX	rand
   5230  303e
   5231  303e
   5232  303e
   5233  303e		       c4 c2		      CPY	player1score
   5234  3040
   5235  3040		       b0 02		      BCS	.skipelse9_2
   5236  3042
   5237  3042				   .skipL0205_2
   5238  3042
   5239  3042		       a2 8a		      LDX	#$8a
   5240  3044
   5241  3044				   .skipelse9_2
   5242  3044
   5243  3044		       86 bf		      STX	player1scorecolor
   5244  3046
   5245  3046
   5246  3046
   5247  3046		       f8		      SED
   5248  3047
   5249  3047		       a5 e0		      LDA	MaxKill
   5250  3049
   5251  3049		       38		      SEC
   5252  304a
   5253  304a		       e9 10		      SBC	#$10
   5254  304c
   5255  304c		       85 ce		      STA	temp4
   5256  304e
   5257  304e		       d8		      CLD
   5258  304f
   5259  304f		       a8		      TAY
   5260  3050
   5261  3050		       a6 d6		      LDX	rand
   5262  3052
   5263  3052		       c4 d2		      CPY	player2score
   5264  3054
   5265  3054		       b0 03		      BCS	.skipL0208_1
   5266  3056
   5267  3056		       4c 5b 50 	      jmp	.skipelse11_1
   5268  3059
   5269  3059				   .skipL0208_1
   5270  3059
   5271  3059		       a2 46		      LDX	#$46
   5272  305b
   5273  305b				   .skipelse11_1
   5274  305b
   5275  305b		       86 d4		      STX	player2scorecolor
   5276  305d
   5277  305d
   5278  305d
   5279  305d		       a6 d6		      LDX	rand
   5280  305f
   5281  305f
   5282  305f
   5283  305f		       c4 d3		      CPY	player3score
   5284  3061
   5285  3061		       b0 03		      BCS	.skipL0208_2
   5286  3063
   5287  3063		       4c 68 50 	      jmp	.skipelse11_2
   5288  3066
   5289  3066				   .skipL0208_2
   5290  3066
   5291  3066		       a2 86		      LDX	#$86
   5292  3068
   5293  3068				   .skipelse11_2
   5294  3068
   5295  3068		       86 c9		      STX	player3scorecolor
   5296  306a
   5297  306a				   .
   5298  306a							; 
   5299  306a
   5300  306a				   .L0218		;  missile0y = 160
   5301  306a
   5302  306a		       a9 a0		      LDA	#160
   5303  306c		       85 8a		      STA	missile0y
   5304  306e				   .
   5305  306e							; 
   5306  306e
   5307  306e				   .DrawPlayer
   5308  306e							; DrawPlayer
   5309  306e
   5310  306e				   .L0219		;  asm
   5311  306e
   5312  306e		       a5 db		      LDA	e
   5313  3070
   5314  3070		       4a		      LSR
   5315  3071
   5316  3071		       90 19		      BCC	.Player1Things
   5317  3073
   5318  3073		       a5 e5		      LDA	o
   5319  3075
   5320  3075		       4a		      LSR
   5321  3076
   5322  3076		       85 d1		      sta	temp7
   5323  3078
   5324  3078		       b0 03		      BCS	.skipL0212_1
   5325  307a
   5326  307a		       4c 98 57 	      jmp	.Player2Things
   5327  307d
   5328  307d				   .skipL0212_1
   5329  307d
   5330  307d		       a9 d2		      lda	#>(.CPU_AI-1)
   5331  307f
   5332  307f		       48		      pha
   5333  3080
   5334  3080		       a9 c5		      lda	#<(.CPU_AI-1)
   5335  3082
   5336  3082		       48		      pha
   5337  3083
   5338  3083		       a5 d1		      lda	temp7
   5339  3085
   5340  3085		       48		      pha
   5341  3086
   5342  3086
   5343  3086
   5344  3086		       48		      pha
   5345  3087
   5346  3087		       a2 07		      ldx	#7
   5347  3089
   5348  3089		       4c eb ff 	      jmp	BS_jsr
   5349  308c
   5350  308c				   .Player1Things
   5351  308c							; Player1Things
   5352  308c
   5353  308c				   .L0220		;  player0x = Reaper1_X :  player0y = Reaper1_Y
   5354  308c
   5355  308c		       a5 da		      LDA	Reaper1_X
   5356  308e		       85 84		      STA	player0x
   5357  3090		       a5 dc		      LDA	Reaper1_Y
   5358  3092		       85 8d		      STA	player0y
   5359  3094				   .L0221		;  COLUP0 = $46
   5360  3094
   5361  3094		       a9 46		      LDA	#$46
   5362  3096		       85 06		      STA	COLUP0
   5363  3098				   .L0222		;  if Player1Counter_1 > 0 then Player1Counter_1 =  Player1Counter_1 - 1
   5364  3098
   5365  3098		       a9 00		      LDA	#0
   5366  309a		       c5 ec		      CMP	Player1Counter_1
   5367  309c		       b0 02		      BCS	.skipL0222
   5368  309e				   .condpart113
   5369  309e		       c6 ec		      DEC	Player1Counter_1
   5370  30a0				   .skipL0222
   5371  30a0				   .L0223		;  if Player1Counter_Jump > 0 then Player1Counter_Jump =  Player1Counter_Jump - 1
   5372  30a0
   5373  30a0		       a9 00		      LDA	#0
   5374  30a2		       c5 e7		      CMP	Player1Counter_Jump
   5375  30a4		       b0 02		      BCS	.skipL0223
   5376  30a6				   .condpart114
   5377  30a6		       c6 e7		      DEC	Player1Counter_Jump
   5378  30a8				   .skipL0223
   5379  30a8				   .L0224		;  if e{2} then REFP0 = 8
   5380  30a8
   5381  30a8		       a5 db		      LDA	e
   5382  30aa		       29 04		      AND	#4
   5383  30ac		       f0 04		      BEQ	.skipL0224
   5384  30ae				   .condpart115
   5385  30ae		       a9 08		      LDA	#8
   5386  30b0		       85 0b		      STA	REFP0
   5387  30b2				   .skipL0224
   5388  30b2				   .L0225		;  if o{2} then goto Fallen_1
   5389  30b2
   5390  30b2		       a5 e5		      LDA	o
   5391  30b4		       29 04		      AND	#4
   5392  30b6		       f0 03		      BEQ	.skipL0225
   5393  30b8				   .condpart116
   5394  30b8		       4c cf 51 	      jmp	.Fallen_1
   5395  30bb
   5396  30bb				   .skipL0225
   5397  30bb				   .
   5398  30bb							; 
   5399  30bb
   5400  30bb				   .L0226		;  asm
   5401  30bb
   5402  30bb		       a9 00		      LDA	#0
   5403  30bd
   5404  30bd		       c5 c1		      CMP	player0score
   5405  30bf
   5406  30bf		       f0 06		      BEQ	.condpart118_1
   5407  30c1
   5408  30c1
   5409  30c1
   5410  30c1		       a5 df		      LDA	MaxLife
   5411  30c3
   5412  30c3		       c5 c1		      CMP	player0score
   5413  30c5
   5414  30c5		       b0 1e		      BCS	.skip42OR_1
   5415  30c7
   5416  30c7				   .condpart118_1
   5417  30c7
   5418  30c7		       85 c1		      STA	player0score
   5419  30c9
   5420  30c9		       a5 e5		      LDA	o
   5421  30cb
   5422  30cb		       09 04		      ORA	#4
   5423  30cd
   5424  30cd		       85 e5		      STA	o
   5425  30cf
   5426  30cf		       a9 78		      LDA	#120
   5427  30d1
   5428  30d1		       85 ec		      STA	Player1Counter_1
   5429  30d3
   5430  30d3
   5431  30d3
   5432  30d3		       a5 ed		      LDA	w
   5433  30d5
   5434  30d5		       29 20		      AND	#32
   5435  30d7
   5436  30d7		       d0 0c		      BNE	.skip42OR_1
   5437  30d9
   5438  30d9		       a9 00		      LDA	#0
   5439  30db
   5440  30db		       c5 ef		      CMP	PowerUp_Counter
   5441  30dd
   5442  30dd		       b0 06		      BCS	.skip42OR_1
   5443  30df
   5444  30df		       85 ef		      STA	PowerUp_Counter
   5445  30e1
   5446  30e1		       a9 78		      LDA	#120
   5447  30e3
   5448  30e3		       85 92		      STA	player5y
   5449  30e5
   5450  30e5				   .skip42OR_1
   5451  30e5
   5452  30e5				   .
   5453  30e5							; 
   5454  30e5
   5455  30e5				   .
   5456  30e5							; 
   5457  30e5
   5458  30e5				   .L0227		;  asm
   5459  30e5
   5460  30e5		       a9 17		      lda	#23
   5461  30e7
   5462  30e7		       c5 dc		      CMP	Reaper1_Y
   5463  30e9
   5464  30e9		       90 02		      BCC	.skipL0215_1
   5465  30eb
   5466  30eb		       85 dc		      sta	Reaper1_Y
   5467  30ed
   5468  30ed				   .skipL0215_1
   5469  30ed
   5470  30ed				   .
   5471  30ed							; 
   5472  30ed
   5473  30ed				   .L0228		;  asm
   5474  30ed
   5475  30ed		       a5 db		      LDA	e
   5476  30ef
   5477  30ef		       29 10		      AND	#16
   5478  30f1
   5479  30f1		       f0 5c		      BEQ	.DODODO_1
   5480  30f3
   5481  30f3		       a9 00		      LDA	#0
   5482  30f5
   5483  30f5		       c5 e7		      CMP	Player1Counter_Jump
   5484  30f7
   5485  30f7		       90 56		      BCC	.DODODO_1
   5486  30f9
   5487  30f9		       a9 17		      LDA	#23
   5488  30fb
   5489  30fb		       c5 dc		      CMP	Reaper1_Y
   5490  30fd
   5491  30fd		       90 50		      BCC	.DODODO_1
   5492  30ff
   5493  30ff				   .
   5494  30ff							; 
   5495  30ff
   5496  30ff				   .
   5497  30ff							; 
   5498  30ff
   5499  30ff				   .L0229		;  asm
   5500  30ff
   5501  30ff		       a5 e9		      LDA	s
   5502  3101
   5503  3101		       29 20		      AND	#32
   5504  3103
   5505  3103		       f0 3c		      BEQ	.ComeBack_1
   5506  3105
   5507  3105		       a5 ec		      LDA	Player1Counter_1
   5508  3107
   5509  3107		       c9 0c		      CMP	#12
   5510  3109
   5511  3109		       90 36		      BCC	.ComeBack_1
   5512  310b
   5513  310b				   .
   5514  310b							; 
   5515  310b
   5516  310b				   .
   5517  310b							; 
   5518  310b
   5519  310b				   .
   5520  310b							; 
   5521  310b
   5522  310b				   .L0230		;  if player3y < 120 then dec player2score = player2score + $01
   5523  310b
   5524  310b		       a5 90		      LDA	player3y
   5525  310d		       c9 78		      CMP	#120
   5526  310f		       b0 09		      BCS	.skipL0230
   5527  3111				   .condpart117
   5528  3111		       f8		      SED
   5529  3112		       a5 d2		      LDA	player2score
   5530  3114		       18		      CLC
   5531  3115		       69 01		      ADC	#$01
   5532  3117		       85 d2		      STA	player2score
   5533  3119		       d8		      CLD
   5534  311a				   .skipL0230
   5535  311a				   .L0231		;  if player4y < 120 then dec player2score = player2score + $01
   5536  311a
   5537  311a		       a5 91		      LDA	player4y
   5538  311c		       c9 78		      CMP	#120
   5539  311e		       b0 09		      BCS	.skipL0231
   5540  3120				   .condpart118
   5541  3120		       f8		      SED
   5542  3121		       a5 d2		      LDA	player2score
   5543  3123		       18		      CLC
   5544  3124		       69 01		      ADC	#$01
   5545  3126		       85 d2		      STA	player2score
   5546  3128		       d8		      CLD
   5547  3129				   .skipL0231
   5548  3129				   .L0232		;  COLUBK = $1e :  HouseHeight = HouseHeight + 1 :  goto ChangePF bank7
   5549  3129
   5550  3129		       a9 1e		      LDA	#$1e
   5551  312b		       85 09		      STA	COLUBK
   5552  312d		       e6 f0		      INC	HouseHeight
   5553  312f		       85 d1		      sta	temp7
   5554  3131		       a9 d1		      lda	#>(.ChangePF-1)
   5555  3133		       48		      pha
   5556  3134		       a9 49		      lda	#<(.ChangePF-1)
   5557  3136		       48		      pha
   5558  3137		       a5 d1		      lda	temp7
   5559  3139		       48		      pha
   5560  313a		       8a		      txa
   5561  313b		       48		      pha
   5562  313c		       a2 07		      ldx	#7
   5563  313e		       4c eb ff 	      jmp	BS_jsr
   5564  3141				   .ComeBack_1
   5565  3141							; ComeBack_1
   5566  3141
   5567  3141				   .L0233		;  Player1Counter_1 = 0
   5568  3141
   5569  3141		       a9 00		      LDA	#0
   5570  3143		       85 ec		      STA	Player1Counter_1
   5571  3145				   .L0234		;  e{4} = 0 :	Reaper1_Y = 23
   5572  3145
   5573  3145		       a5 db		      LDA	e
   5574  3147		       29 ef		      AND	#239
   5575  3149		       85 db		      STA	e
   5576  314b		       a9 17		      LDA	#23
   5577  314d		       85 dc		      STA	Reaper1_Y
   5578  314f				   .DODODO_1
   5579  314f							; DODODO_1
   5580  314f
   5581  314f				   .
   5582  314f							; 
   5583  314f
   5584  314f				   .L0235		;  asm
   5585  314f
   5586  314f		       24 e5		      BIT	o
   5587  3151
   5588  3151		       10 46		      BPL	.No_O7
   5589  3153
   5590  3153		       a5 e1		      LDA	Shoot1_X
   5591  3155
   5592  3155		       c9 86		      CMP	#134
   5593  3157
   5594  3157		       b0 04		      BCS	.condpart123_1
   5595  3159
   5596  3159		       c9 17		      CMP	#23
   5597  315b
   5598  315b		       b0 0b		      BCS	.skip43OR_1
   5599  315d
   5600  315d				   .condpart123_1
   5601  315d
   5602  315d		       a5 e5		      LDA	o
   5603  315f
   5604  315f		       29 7f		      AND	#127
   5605  3161
   5606  3161		       29 df		      AND	#223
   5607  3163
   5608  3163		       85 e5		      STA	o
   5609  3165
   5610  3165		       4c 99 51 	      jmp	.No_O7
   5611  3168
   5612  3168				   .skip43OR_1
   5613  3168
   5614  3168				   .
   5615  3168							; 
   5616  3168
   5617  3168				   .L0236		;  asm
   5618  3168
   5619  3168		       a5 e9		      LDA	s
   5620  316a
   5621  316a		       29 02		      AND	#2
   5622  316c
   5623  316c		       f0 08		      BEQ	.skipL0228_1
   5624  316e
   5625  316e		       a5 e1		      LDA	Shoot1_X
   5626  3170
   5627  3170		       38		      SEC
   5628  3171
   5629  3171		       e9 05		      SBC	#5
   5630  3173
   5631  3173		       4c 7b 51 	      jmp	.skipelse9_11
   5632  3176
   5633  3176				   .skipL0228_1
   5634  3176
   5635  3176		       a5 e1		      LDA	Shoot1_X
   5636  3178
   5637  3178		       18		      CLC
   5638  3179
   5639  3179		       69 05		      ADC	#5
   5640  317b
   5641  317b				   .skipelse9_11
   5642  317b
   5643  317b		       85 e1		      STA	Shoot1_X
   5644  317d
   5645  317d		       85 80		      STA	missile0x
   5646  317f
   5647  317f
   5648  317f
   5649  317f		       a5 e9		      LDA	s
   5650  3181
   5651  3181		       29 04		      AND	#4
   5652  3183
   5653  3183		       f0 0c		      BEQ	.skipL0229_1
   5654  3185
   5655  3185		       a5 e2		      LDA	Shoot1_Y
   5656  3187
   5657  3187		       18		      CLC
   5658  3188
   5659  3188		       69 04		      ADC	#4
   5660  318a
   5661  318a		       85 e2		      STA	Shoot1_Y
   5662  318c
   5663  318c		       85 8a		      STA	missile0y
   5664  318e
   5665  318e		       4c 95 51 	      jmp	.Poppp1
   5666  3191
   5667  3191				   .skipL0229_1
   5668  3191
   5669  3191		       a5 e2		      LDA	Shoot1_Y
   5670  3193
   5671  3193
   5672  3193
   5673  3193		       85 8a		      STA	missile0y
   5674  3195
   5675  3195				   .Poppp1
   5676  3195
   5677  3195				   .
   5678  3195							; 
   5679  3195
   5680  3195				   .L0237		;  NUSIZ0 = $20
   5681  3195
   5682  3195		       a9 20		      LDA	#$20
   5683  3197		       85 04		      STA	NUSIZ0
   5684  3199				   .No_O7
   5685  3199							; No_O7
   5686  3199
   5687  3199				   .L0238		;  asm
   5688  3199
   5689  3199		       a5 db		      LDA	e
   5690  319b
   5691  319b		       29 10		      AND	#16
   5692  319d
   5693  319d		       f0 03		      beq	.skippp
   5694  319f
   5695  319f		       4c 54 53 	      jmp	.JumpThings_1
   5696  31a2
   5697  31a2				   .skippp
   5698  31a2							; skippp
   5699  31a2
   5700  31a2				   .
   5701  31a2							; 
   5702  31a2
   5703  31a2				   .L0239		;  if Player1Counter_1 > 0 then goto Continue_1
   5704  31a2
   5705  31a2		       a9 00		      LDA	#0
   5706  31a4		       c5 ec		      CMP	Player1Counter_1
   5707  31a6		       b0 03		      BCS	.skipL0239
   5708  31a8				   .condpart119
   5709  31a8		       4c f1 52 	      jmp	.Continue_1
   5710  31ab
   5711  31ab				   .skipL0239
   5712  31ab				   .L0240		;  asm
   5713  31ab
   5714  31ab		       24 0c		      bit	INPT4
   5715  31ad
   5716  31ad		       30 71		      BMI	.No_Attack_1
   5717  31af
   5718  31af		       24 e5		      BIT	o
   5719  31b1
   5720  31b1		       30 6d		      BMI	.No_Attack_1
   5721  31b3
   5722  31b3
   5723  31b3
   5724  31b3		       a5 db		      LDA	e
   5725  31b5
   5726  31b5		       29 04		      AND	#4
   5727  31b7
   5728  31b7		       d0 05		      BNE	.skipL0475_0
   5729  31b9
   5730  31b9		       2c 80 02 	      bit	SWCHA
   5731  31bc
   5732  31bc		       10 0b		      BPL	.condpart282_0
   5733  31be
   5734  31be				   .skipL0475_0
   5735  31be
   5736  31be		       a5 db		      LDA	e
   5737  31c0
   5738  31c0		       29 04		      AND	#4
   5739  31c2
   5740  31c2		       f0 08		      BEQ	.skipL0476_0
   5741  31c4
   5742  31c4		       2c 80 02 	      bit	SWCHA
   5743  31c7
   5744  31c7		       70 03		      BVS	.skipL0476_0
   5745  31c9
   5746  31c9				   .condpart282_0
   5747  31c9
   5748  31c9		       4c 6d 56 	      jmp	.Attack_1_Dash
   5749  31cc
   5750  31cc
   5751  31cc
   5752  31cc				   .skipL0476_0
   5753  31cc
   5754  31cc
   5755  31cc
   5756  31cc				   .
   5757  31cc							; 
   5758  31cc
   5759  31cc				   .
   5760  31cc							; 
   5761  31cc
   5762  31cc				   .L0241		;  goto Attack_1
   5763  31cc
   5764  31cc		       4c 5f 55 	      jmp	.Attack_1
   5765  31cf
   5766  31cf				   .
   5767  31cf							; 
   5768  31cf
   5769  31cf				   .Fallen_1
   5770  31cf							; Fallen_1
   5771  31cf
   5772  31cf				   .L0242		;  asm
   5773  31cf
   5774  31cf		       a5 db		      LDA	e
   5775  31d1
   5776  31d1		       29 10		      AND	#16
   5777  31d3
   5778  31d3		       f0 28		      BEQ	.skipL0236_1
   5779  31d5
   5780  31d5		       a6 dc		      LDX	Reaper1_Y
   5781  31d7
   5782  31d7		       e0 18		      CPX	#24
   5783  31d9
   5784  31d9		       b0 06		      BCS	.NoMoreJump1
   5785  31db
   5786  31db		       a5 db		      LDA	e
   5787  31dd
   5788  31dd		       29 ef		      AND	#239
   5789  31df
   5790  31df		       85 db		      STA	e
   5791  31e1
   5792  31e1				   .NoMoreJump1
   5793  31e1
   5794  31e1		       8a		      TXA
   5795  31e2
   5796  31e2		       38		      SEC
   5797  31e3
   5798  31e3		       e9 02		      SBC	#2
   5799  31e5
   5800  31e5		       85 dc		      STA	Reaper1_Y
   5801  31e7
   5802  31e7		       18		      CLC
   5803  31e8
   5804  31e8		       69 07		      ADC	#7
   5805  31ea
   5806  31ea		       85 8d		      STA	player0y
   5807  31ec
   5808  31ec		       85 d1		      sta	temp7
   5809  31ee
   5810  31ee		       a9 d2		      lda	#>(.ReaperFall-1)
   5811  31f0
   5812  31f0		       48		      pha
   5813  31f1
   5814  31f1		       a9 a7		      lda	#<(.ReaperFall-1)
   5815  31f3
   5816  31f3		       48		      pha
   5817  31f4
   5818  31f4		       a5 d1		      lda	temp7
   5819  31f6
   5820  31f6		       48		      pha
   5821  31f7
   5822  31f7
   5823  31f7
   5824  31f7		       48		      pha
   5825  31f8
   5826  31f8		       a2 07		      ldx	#7
   5827  31fa
   5828  31fa		       4c eb ff 	      jmp	BS_jsr
   5829  31fd
   5830  31fd				   .skipL0236_1
   5831  31fd
   5832  31fd		       a5 ec		      LDA	Player1Counter_1
   5833  31ff
   5834  31ff		       c9 00		      CMP	#0
   5835  3201
   5836  3201		       f0 11		      BEQ	.skipL0237_1
   5837  3203
   5838  3203		       85 d1		      sta	temp7
   5839  3205
   5840  3205		       a9 d2		      lda	#>(.ReaperFallen-1)
   5841  3207
   5842  3207		       48		      pha
   5843  3208
   5844  3208		       a9 b6		      lda	#<(.ReaperFallen-1)
   5845  320a
   5846  320a		       48		      pha
   5847  320b
   5848  320b		       a5 d1		      lda	temp7
   5849  320d
   5850  320d		       48		      pha
   5851  320e
   5852  320e
   5853  320e
   5854  320e		       48		      pha
   5855  320f
   5856  320f		       a2 07		      ldx	#7
   5857  3211
   5858  3211		       4c eb ff 	      jmp	BS_jsr
   5859  3214
   5860  3214				   .skipL0237_1
   5861  3214
   5862  3214		       a5 e5		      LDA	o
   5863  3216
   5864  3216		       29 fb		      AND	#251
   5865  3218
   5866  3218		       09 08		      ORA	#8
   5867  321a
   5868  321a		       85 e5		      STA	o
   5869  321c
   5870  321c		       a5 df		      LDA	MaxLife
   5871  321e
   5872  321e		       85 c1		      STA	player0score
   5873  3220
   5874  3220
   5875  3220
   5876  3220				   .
   5877  3220							; 
   5878  3220
   5879  3220				   .
   5880  3220							; 
   5881  3220
   5882  3220				   .No_Attack_1
   5883  3220							; No_Attack_1
   5884  3220
   5885  3220				   .L0243		;  if joy0down then goto Duck_1
   5886  3220
   5887  3220		       a9 20		      lda	#$20
   5888  3222		       2c 80 02 	      bit	SWCHA
   5889  3225		       d0 03		      BNE	.skipL0243
   5890  3227				   .condpart120
   5891  3227		       4c 6f 57 	      jmp	.Duck_1
   5892  322a
   5893  322a				   .skipL0243
   5894  322a				   .L0244		;  if joy0up then goto Jump_1
   5895  322a
   5896  322a		       a9 10		      lda	#$10
   5897  322c		       2c 80 02 	      bit	SWCHA
   5898  322f		       d0 03		      BNE	.skipL0244
   5899  3231				   .condpart121
   5900  3231		       4c 42 57 	      jmp	.Jump_1
   5901  3234
   5902  3234				   .skipL0244
   5903  3234				   .L0245		;  asm
   5904  3234
   5905  3234		       2c 80 02 	      bit	SWCHA
   5906  3237
   5907  3237		       50 18		      BVC	.GoLeft_1
   5908  3239
   5909  3239		       10 66		      BPL	.GoRight_1
   5910  323b
   5911  323b				   .L0246		;  Player1Counter_Sprite = 0 :  goto PlayerStand bank7
   5912  323b
   5913  323b		       a9 00		      LDA	#0
   5914  323d		       85 ea		      STA	Player1Counter_Sprite
   5915  323f		       85 d1		      sta	temp7
   5916  3241		       a9 cf		      lda	#>(.PlayerStand-1)
   5917  3243		       48		      pha
   5918  3244		       a9 ff		      lda	#<(.PlayerStand-1)
   5919  3246		       48		      pha
   5920  3247		       a5 d1		      lda	temp7
   5921  3249		       48		      pha
   5922  324a		       8a		      txa
   5923  324b		       48		      pha
   5924  324c		       a2 07		      ldx	#7
   5925  324e		       4c eb ff 	      jmp	BS_jsr
   5926  3251				   .
   5927  3251							; 
   5928  3251
   5929  3251				   .GoLeft_1
   5930  3251							; GoLeft_1
   5931  3251
   5932  3251				   .L0247		;  if w{5}  &&  PowerUp_Counter > 0  &&  PowerUp_Type = 3 then COLUP0 = $0e :	goto Inversed_Right_1
   5933  3251
   5934  3251		       a5 ed		      LDA	w
   5935  3253		       29 20		      AND	#32
   5936  3255		       f0 13		      BEQ	.skipL0247
   5937  3257				   .condpart122
   5938  3257		       a9 00		      LDA	#0
   5939  3259		       c5 ef		      CMP	PowerUp_Counter
   5940  325b		       b0 0d		      BCS	.skip122then
   5941  325d				   .condpart123
   5942  325d		       a5 81		      LDA	PowerUp_Type
   5943  325f		       c9 03		      CMP	#3
   5944  3261		       d0 07		      BNE	.skip123then
   5945  3263				   .condpart124
   5946  3263		       a9 0e		      LDA	#$0e
   5947  3265		       85 06		      STA	COLUP0
   5948  3267		       4c ba 52 	      jmp	.Inversed_Right_1
   5949  326a
   5950  326a				   .skip123then
   5951  326a				   .skip122then
   5952  326a				   .skipL0247
   5953  326a				   .Inversed_Left_1
   5954  326a							; Inversed_Left_1
   5955  326a
   5956  326a				   .
   5957  326a							; 
   5958  326a
   5959  326a				   .L0248		;  asm
   5960  326a
   5961  326a		       a5 da		      LDA	Reaper1_X
   5962  326c
   5963  326c		       c9 15		      CMP	#21
   5964  326e
   5965  326e		       90 18		      BCC	.skipL0243_1
   5966  3270
   5967  3270		       38		      SEC
   5968  3271
   5969  3271		       e9 04		      SBC	#4
   5970  3273
   5971  3273		       85 da		      STA	Reaper1_X
   5972  3275
   5973  3275		       a5 ea		      LDA	Player1Counter_Sprite
   5974  3277
   5975  3277		       18		      CLC
   5976  3278
   5977  3278		       69 02		      ADC	#2
   5978  327a
   5979  327a
   5980  327a
   5981  327a		       c9 37		      CMP	#55
   5982  327c
   5983  327c		       90 02		      BCC	.skipL0244_1
   5984  327e
   5985  327e		       a9 00		      LDA	#0
   5986  3280
   5987  3280				   .skipL0244_1
   5988  3280
   5989  3280
   5990  3280
   5991  3280
   5992  3280
   5993  3280		       85 ea		      STA	Player1Counter_Sprite
   5994  3282
   5995  3282		       a5 db		      LDA	e
   5996  3284
   5997  3284		       09 04		      ORA	#4
   5998  3286
   5999  3286		       85 db		      STA	e
   6000  3288
   6001  3288				   .skipL0243_1
   6002  3288
   6003  3288		       a5 ea		      LDA	Player1Counter_Sprite
   6004  328a
   6005  328a		       4a		      lsr
   6006  328b
   6007  328b		       4a		      lsr
   6008  328c
   6009  328c		       4a		      lsr
   6010  328d
   6011  328d		       85 ce		      STA	temp4
   6012  328f
   6013  328f
   6014  328f
   6015  328f				   .
   6016  328f							; 
   6017  328f
   6018  328f				   .
   6019  328f							; 
   6020  328f
   6021  328f				   .L0249		;  goto Move_Player bank7
   6022  328f
   6023  328f		       85 d1		      sta	temp7
   6024  3291		       a9 d0		      lda	#>(.Move_Player-1)
   6025  3293		       48		      pha
   6026  3294		       a9 47		      lda	#<(.Move_Player-1)
   6027  3296		       48		      pha
   6028  3297		       a5 d1		      lda	temp7
   6029  3299		       48		      pha
   6030  329a		       8a		      txa
   6031  329b		       48		      pha
   6032  329c		       a2 07		      ldx	#7
   6033  329e		       4c eb ff 	      jmp	BS_jsr
   6034  32a1				   .
   6035  32a1							; 
   6036  32a1
   6037  32a1				   .GoRight_1
   6038  32a1							; GoRight_1
   6039  32a1
   6040  32a1				   .L0250		;  if w{5}  &&  PowerUp_Counter > 0  &&  PowerUp_Type = 3 then COLUP0 = $0e :	goto Inversed_Left_1
   6041  32a1
   6042  32a1		       a5 ed		      LDA	w
   6043  32a3		       29 20		      AND	#32
   6044  32a5		       f0 13		      BEQ	.skipL0250
   6045  32a7				   .condpart125
   6046  32a7		       a9 00		      LDA	#0
   6047  32a9		       c5 ef		      CMP	PowerUp_Counter
   6048  32ab		       b0 0d		      BCS	.skip125then
   6049  32ad				   .condpart126
   6050  32ad		       a5 81		      LDA	PowerUp_Type
   6051  32af		       c9 03		      CMP	#3
   6052  32b1		       d0 07		      BNE	.skip126then
   6053  32b3				   .condpart127
   6054  32b3		       a9 0e		      LDA	#$0e
   6055  32b5		       85 06		      STA	COLUP0
   6056  32b7		       4c 6a 52 	      jmp	.Inversed_Left_1
   6057  32ba
   6058  32ba				   .skip126then
   6059  32ba				   .skip125then
   6060  32ba				   .skipL0250
   6061  32ba				   .Inversed_Right_1
   6062  32ba							; Inversed_Right_1
   6063  32ba
   6064  32ba				   .L0251		;  asm
   6065  32ba
   6066  32ba		       a5 da		      LDA	Reaper1_X
   6067  32bc
   6068  32bc		       c9 84		      CMP	#132
   6069  32be
   6070  32be		       b0 18		      BCS	.skipL0247_1
   6071  32c0
   6072  32c0		       18		      CLC
   6073  32c1
   6074  32c1		       69 04		      ADC	#4
   6075  32c3
   6076  32c3		       85 da		      STA	Reaper1_X
   6077  32c5
   6078  32c5		       a5 ea		      LDA	Player1Counter_Sprite
   6079  32c7
   6080  32c7		       18		      CLC
   6081  32c8
   6082  32c8		       69 02		      ADC	#2
   6083  32ca
   6084  32ca		       c9 37		      CMP	#55
   6085  32cc
   6086  32cc		       90 02		      BCC	.skipL0248_1
   6087  32ce
   6088  32ce		       a9 00		      LDA	#0
   6089  32d0
   6090  32d0				   .skipL0248_1
   6091  32d0
   6092  32d0
   6093  32d0
   6094  32d0		       85 ea		      STA	Player1Counter_Sprite
   6095  32d2
   6096  32d2
   6097  32d2
   6098  32d2		       a5 db		      LDA	e
   6099  32d4
   6100  32d4		       29 fb		      AND	#251
   6101  32d6
   6102  32d6		       85 db		      STA	e
   6103  32d8
   6104  32d8				   .skipL0247_1
   6105  32d8
   6106  32d8		       a5 ea		      LDA	Player1Counter_Sprite
   6107  32da
   6108  32da		       4a		      lsr
   6109  32db
   6110  32db		       4a		      lsr
   6111  32dc
   6112  32dc		       4a		      lsr
   6113  32dd
   6114  32dd		       85 ce		      STA	temp4
   6115  32df
   6116  32df				   .
   6117  32df							; 
   6118  32df
   6119  32df				   .L0252		;  goto Move_Player bank7
   6120  32df
   6121  32df		       85 d1		      sta	temp7
   6122  32e1		       a9 d0		      lda	#>(.Move_Player-1)
   6123  32e3		       48		      pha
   6124  32e4		       a9 47		      lda	#<(.Move_Player-1)
   6125  32e6		       48		      pha
   6126  32e7		       a5 d1		      lda	temp7
   6127  32e9		       48		      pha
   6128  32ea		       8a		      txa
   6129  32eb		       48		      pha
   6130  32ec		       a2 07		      ldx	#7
   6131  32ee		       4c eb ff 	      jmp	BS_jsr
   6132  32f1				   .Continue_1
   6133  32f1							; Continue_1
   6134  32f1
   6135  32f1				   .L0253		;  if o{2} then goto PlayerDone bank7
   6136  32f1
   6137  32f1		       a5 e5		      LDA	o
   6138  32f3		       29 04		      AND	#4
   6139  32f5		       f0 12		      BEQ	.skipL0253
   6140  32f7				   .condpart128
   6141  32f7		       85 d1		      sta	temp7
   6142  32f9		       a9 d9		      lda	#>(.PlayerDone-1)
   6143  32fb		       48		      pha
   6144  32fc		       a9 b1		      lda	#<(.PlayerDone-1)
   6145  32fe		       48		      pha
   6146  32ff		       a5 d1		      lda	temp7
   6147  3301		       48		      pha
   6148  3302		       8a		      txa
   6149  3303		       48		      pha
   6150  3304		       a2 07		      ldx	#7
   6151  3306		       4c eb ff 	      jmp	BS_jsr
   6152  3309				   .skipL0253
   6153  3309				   .L0254		;  if e{6} then goto Attack_1_Dash
   6154  3309
   6155  3309		       24 db		      BIT	e
   6156  330b		       50 03		      BVC	.skipL0254
   6157  330d				   .condpart129
   6158  330d		       4c 6d 56 	      jmp	.Attack_1_Dash
   6159  3310
   6160  3310				   .skipL0254
   6161  3310				   .
   6162  3310							; 
   6163  3310
   6164  3310				   .L0255		;  if !joy0down  &&  o{5} then goto Attack_1
   6165  3310
   6166  3310		       a9 20		      lda	#$20
   6167  3312		       2c 80 02 	      bit	SWCHA
   6168  3315		       f0 09		      BEQ	.skipL0255
   6169  3317				   .condpart130
   6170  3317		       a5 e5		      LDA	o
   6171  3319		       29 20		      AND	#32
   6172  331b		       f0 03		      BEQ	.skip130then
   6173  331d				   .condpart131
   6174  331d		       4c 5f 55 	      jmp	.Attack_1
   6175  3320
   6176  3320				   .skip130then
   6177  3320				   .skipL0255
   6178  3320				   .
   6179  3320							; 
   6180  3320
   6181  3320				   .Attack_Shoot_Wait_1
   6182  3320							; Attack_Shoot_Wait_1
   6183  3320
   6184  3320				   .L0256		;  player0y = Reaper1_Y + 7
   6185  3320
   6186  3320		       a5 dc		      LDA	Reaper1_Y
   6187  3322		       18		      CLC
   6188  3323		       69 07		      ADC	#7
   6189  3325		       85 8d		      STA	player0y
   6190  3327				   .L0257		;  if e{5} then goto PlayerShoot2 bank7 else goto PlayerShoot1 bank7
   6191  3327
   6192  3327		       a5 db		      LDA	e
   6193  3329		       29 20		      AND	#32
   6194  332b		       f0 15		      BEQ	.skipL0257
   6195  332d				   .condpart132
   6196  332d		       85 d1		      sta	temp7
   6197  332f		       a9 d1		      lda	#>(.PlayerShoot2-1)
   6198  3331		       48		      pha
   6199  3332		       a9 0d		      lda	#<(.PlayerShoot2-1)
   6200  3334		       48		      pha
   6201  3335		       a5 d1		      lda	temp7
   6202  3337		       48		      pha
   6203  3338		       8a		      txa
   6204  3339		       48		      pha
   6205  333a		       a2 07		      ldx	#7
   6206  333c		       4c eb ff 	      jmp	BS_jsr
   6207  333f		       4c 54 53 	      jmp	.skipelse9
   6208  3342				   .skipL0257
   6209  3342		       85 d1		      sta	temp7
   6210  3344		       a9 d0		      lda	#>(.PlayerShoot1-1)
   6211  3346		       48		      pha
   6212  3347		       a9 fe		      lda	#<(.PlayerShoot1-1)
   6213  3349		       48		      pha
   6214  334a		       a5 d1		      lda	temp7
   6215  334c		       48		      pha
   6216  334d		       8a		      txa
   6217  334e		       48		      pha
   6218  334f		       a2 07		      ldx	#7
   6219  3351		       4c eb ff 	      jmp	BS_jsr
   6220  3354				   .skipelse9
   6221  3354				   .
   6222  3354							; 
   6223  3354
   6224  3354				   .JumpThings_1
   6225  3354							; JumpThings_1
   6226  3354
   6227  3354				   .L0258		;  asm
   6228  3354
   6229  3354		       a5 ed		      LDA	w
   6230  3356
   6231  3356		       29 20		      AND	#32
   6232  3358
   6233  3358		       f0 34		      BEQ	.No_Inverse_1
   6234  335a
   6235  335a		       a5 ef		      LDA	PowerUp_Counter
   6236  335c
   6237  335c		       c9 00		      CMP	#0
   6238  335e
   6239  335e		       f0 2e		      BEQ	.No_Inverse_1
   6240  3360
   6241  3360		       a9 03		      LDA	#3
   6242  3362
   6243  3362		       c5 81		      CMP	PowerUp_Type
   6244  3364
   6245  3364		       d0 28		      BNE	.No_Inverse_1
   6246  3366
   6247  3366
   6248  3366
   6249  3366				   .
   6250  3366							; 
   6251  3366
   6252  3366				   .L0259		;  COLUP0 = $0e
   6253  3366
   6254  3366		       a9 0e		      LDA	#$0e
   6255  3368		       85 06		      STA	COLUP0
   6256  336a				   .L0260		;  asm
   6257  336a
   6258  336a		       2c 80 02 	      bit	SWCHA
   6259  336d
   6260  336d		       30 0c		      BMI	.skipL0257_4
   6261  336f
   6262  336f		       a5 da		      LDA	Reaper1_X
   6263  3371
   6264  3371		       c9 15		      CMP	#21
   6265  3373
   6266  3373		       90 06		      BCC	.skipL0257_4
   6267  3375
   6268  3375		       38		      SEC
   6269  3376
   6270  3376		       e9 02		      SBC	#2
   6271  3378
   6272  3378		       4c 89 53 	      jmp	.skipL0258_4
   6273  337b
   6274  337b				   .skipL0257_4
   6275  337b
   6276  337b		       2c 80 02 	      bit	SWCHA
   6277  337e
   6278  337e		       70 0b		      BVS	.skipL0258_45
   6279  3380
   6280  3380		       a5 da		      LDA	Reaper1_X
   6281  3382
   6282  3382		       c9 84		      CMP	#132
   6283  3384
   6284  3384		       b0 05		      BCS	.skipL0258_45
   6285  3386
   6286  3386		       18		      CLC
   6287  3387
   6288  3387		       69 02		      ADC	#2
   6289  3389
   6290  3389				   .skipL0258_4
   6291  3389
   6292  3389		       85 da		      STA	Reaper1_X
   6293  338b
   6294  338b				   .skipL0258_45
   6295  338b
   6296  338b				   .L0261		;  goto skipL0258_14
   6297  338b
   6298  338b		       4c af 53 	      jmp	.skipL0258_14
   6299  338e
   6300  338e				   .No_Inverse_1
   6301  338e							; No_Inverse_1
   6302  338e
   6303  338e				   .L0262		;  asm
   6304  338e
   6305  338e		       2c 80 02 	      bit	SWCHA
   6306  3391
   6307  3391		       70 0c		      BVS	.skipL0257_1
   6308  3393
   6309  3393		       a5 da		      LDA	Reaper1_X
   6310  3395
   6311  3395		       c9 15		      CMP	#21
   6312  3397
   6313  3397		       90 06		      BCC	.skipL0257_1
   6314  3399
   6315  3399		       38		      SEC
   6316  339a
   6317  339a		       e9 02		      SBC	#2
   6318  339c
   6319  339c		       4c ad 53 	      jmp	.skipL0258_1
   6320  339f
   6321  339f
   6322  339f
   6323  339f				   .skipL0257_1
   6324  339f
   6325  339f		       2c 80 02 	      bit	SWCHA
   6326  33a2
   6327  33a2		       30 0b		      BMI	.skipL0258_14
   6328  33a4
   6329  33a4		       a5 da		      LDA	Reaper1_X
   6330  33a6
   6331  33a6		       c9 84		      CMP	#132
   6332  33a8
   6333  33a8		       b0 05		      BCS	.skipL0258_14
   6334  33aa
   6335  33aa		       18		      CLC
   6336  33ab
   6337  33ab		       69 02		      ADC	#2
   6338  33ad
   6339  33ad				   .skipL0258_1
   6340  33ad
   6341  33ad		       85 da		      STA	Reaper1_X
   6342  33af
   6343  33af				   .skipL0258_14
   6344  33af
   6345  33af
   6346  33af
   6347  33af				   .
   6348  33af							; 
   6349  33af
   6350  33af				   .L0263		;  if s{5}  &&  Player1Counter_1 > 10 then COLUP0 = $1e :  AUDV1 = 11 :  AUDC1 = 14 :	AUDF1 = 3
   6351  33af
   6352  33af		       a5 e9		      LDA	s
   6353  33b1		       29 20		      AND	#32
   6354  33b3		       f0 16		      BEQ	.skipL0263
   6355  33b5				   .condpart133
   6356  33b5		       a9 0a		      LDA	#10
   6357  33b7		       c5 ec		      CMP	Player1Counter_1
   6358  33b9		       b0 10		      BCS	.skip133then
   6359  33bb				   .condpart134
   6360  33bb		       a9 1e		      LDA	#$1e
   6361  33bd		       85 06		      STA	COLUP0
   6362  33bf		       a9 0b		      LDA	#11
   6363  33c1		       85 1a		      STA	AUDV1
   6364  33c3		       a9 0e		      LDA	#14
   6365  33c5		       85 16		      STA	AUDC1
   6366  33c7		       a9 03		      LDA	#3
   6367  33c9		       85 18		      STA	AUDF1
   6368  33cb				   .skip133then
   6369  33cb				   .skipL0263
   6370  33cb				   .
   6371  33cb							; 
   6372  33cb
   6373  33cb				   .L0264		;  if !joy0fire then o{5}  = 0 :  goto JustFall_1
   6374  33cb
   6375  33cb		       24 0c		      bit	INPT4
   6376  33cd		       10 09		      BPL	.skipL0264
   6377  33cf				   .condpart135
   6378  33cf		       a5 e5		      LDA	o
   6379  33d1		       29 df		      AND	#223
   6380  33d3		       85 e5		      STA	o
   6381  33d5		       4c 1d 55 	      jmp	.JustFall_1
   6382  33d8
   6383  33d8				   .skipL0264
   6384  33d8				   .L0265		;  o{5}  = 1
   6385  33d8
   6386  33d8		       a5 e5		      LDA	o
   6387  33da		       09 20		      ORA	#32
   6388  33dc		       85 e5		      STA	o
   6389  33de				   .
   6390  33de							; 
   6391  33de
   6392  33de				   .L0266		;  if joy0down then goto NoSpin_1
   6393  33de
   6394  33de		       a9 20		      lda	#$20
   6395  33e0		       2c 80 02 	      bit	SWCHA
   6396  33e3		       d0 03		      BNE	.skipL0266
   6397  33e5				   .condpart136
   6398  33e5		       4c e3 54 	      jmp	.NoSpin_1
   6399  33e8
   6400  33e8				   .skipL0266
   6401  33e8				   .
   6402  33e8							; 
   6403  33e8
   6404  33e8				   .L0267		;  s{5} = 0  :  AUDV1 = 9 :  AUDC1 = 6 :  AUDF1 = 6
   6405  33e8
   6406  33e8		       a5 e9		      LDA	s
   6407  33ea		       29 df		      AND	#223
   6408  33ec		       85 e9		      STA	s
   6409  33ee		       a9 09		      LDA	#9
   6410  33f0		       85 1a		      STA	AUDV1
   6411  33f2		       a9 06		      LDA	#6
   6412  33f4		       85 16		      STA	AUDC1
   6413  33f6		       85 18		      STA	AUDF1
   6414  33f8				   .
   6415  33f8							; 
   6416  33f8
   6417  33f8				   .L0268		;  asm
   6418  33f8
   6419  33f8		       a5 ea		      LDA	Player1Counter_Sprite
   6420  33fa
   6421  33fa		       c9 1f		      CMP	#31
   6422  33fc
   6423  33fc		       b0 06		      BCS	.skipL0372_1
   6424  33fe
   6425  33fe		       18		      CLC
   6426  33ff
   6427  33ff		       69 04		      ADC	#4
   6428  3401
   6429  3401		       4c 06 54 	      jmp	.skipelse20_1
   6430  3404
   6431  3404				   .skipL0372_1
   6432  3404
   6433  3404		       a9 00		      LDA	#0
   6434  3406
   6435  3406				   .skipelse20_1
   6436  3406
   6437  3406		       85 ea		      STA	Player1Counter_Sprite
   6438  3408
   6439  3408
   6440  3408
   6441  3408		       4a		      lsr
   6442  3409
   6443  3409		       4a		      lsr
   6444  340a
   6445  340a		       4a		      lsr
   6446  340b
   6447  340b		       85 ce		      STA	temp4
   6448  340d
   6449  340d				   .
   6450  340d							; 
   6451  340d
   6452  340d				   .L0269		;  Reaper1_Y = Reaper1_Y - 4
   6453  340d
   6454  340d		       a5 dc		      LDA	Reaper1_Y
   6455  340f		       38		      SEC
   6456  3410		       e9 04		      SBC	#4
   6457  3412		       85 dc		      STA	Reaper1_Y
   6458  3414				   .L0270		;  if e{2} then goto E2IS1
   6459  3414
   6460  3414		       a5 db		      LDA	e
   6461  3416		       29 04		      AND	#4
   6462  3418		       f0 03		      BEQ	.skipL0270
   6463  341a				   .condpart137
   6464  341a		       4c ad 54 	      jmp	.E2IS1
   6465  341d
   6466  341d				   .skipL0270
   6467  341d				   .
   6468  341d							; 
   6469  341d
   6470  341d				   .L0271		;  asm
   6471  341d
   6472  341d		       a6 ce		      LDX	temp4
   6473  341f
   6474  341f		       e0 03		      CPX	#3
   6475  3421
   6476  3421		       d0 24		      BNE	.temp4_2
   6477  3423
   6478  3423		       a5 da		      LDA	Reaper1_X
   6479  3425
   6480  3425		       85 80		      STA	missile0x
   6481  3427
   6482  3427				   .Sonic_3
   6483  3427
   6484  3427		       a5 dc		      LDA	Reaper1_Y
   6485  3429
   6486  3429		       18		      CLC
   6487  342a
   6488  342a		       69 06		      ADC	#6
   6489  342c
   6490  342c		       85 8a		      STA	missile0y
   6491  342e
   6492  342e		       69 01		      ADC	#1
   6493  3430
   6494  3430		       85 8d		      STA	player0y
   6495  3432
   6496  3432
   6497  3432
   6498  3432		       a9 20		      LDA	#$20
   6499  3434
   6500  3434		       85 04		      STA	NUSIZ0
   6501  3436
   6502  3436		       85 d1		      sta	temp7
   6503  3438
   6504  3438		       a9 d2		      lda	#>(.Sonic_Attack1-1)
   6505  343a
   6506  343a		       48		      pha
   6507  343b
   6508  343b		       a9 6b		      lda	#<(.Sonic_Attack1-1)
   6509  343d
   6510  343d		       48		      pha
   6511  343e
   6512  343e		       a5 d1		      lda	temp7
   6513  3440
   6514  3440		       48		      pha
   6515  3441
   6516  3441
   6517  3441
   6518  3441		       48		      pha
   6519  3442
   6520  3442		       a2 07		      ldx	#7
   6521  3444
   6522  3444		       4c eb ff 	      jmp	BS_jsr
   6523  3447
   6524  3447				   .temp4_2
   6525  3447
   6526  3447		       e0 02		      CPX	#2
   6527  3449
   6528  3449		       d0 1f		      BNE	.temp4_1
   6529  344b
   6530  344b		       a5 84		      LDA	player0x
   6531  344d
   6532  344d		       18		      CLC
   6533  344e
   6534  344e		       69 08		      ADC	#8
   6535  3450
   6536  3450		       85 80		      STA	missile0x
   6537  3452
   6538  3452				   .Sonic_2
   6539  3452
   6540  3452
   6541  3452
   6542  3452		       a5 8d		      LDA	player0y
   6543  3454
   6544  3454		       38		      SEC
   6545  3455
   6546  3455		       e9 08		      SBC	#8
   6547  3457
   6548  3457		       85 8a		      STA	missile0y
   6549  3459
   6550  3459		       85 d1		      sta	temp7
   6551  345b
   6552  345b		       a9 d2		      lda	#>(.Sonic_Attack2-1)
   6553  345d
   6554  345d		       48		      pha
   6555  345e
   6556  345e		       a9 7a		      lda	#<(.Sonic_Attack2-1)
   6557  3460
   6558  3460		       48		      pha
   6559  3461
   6560  3461		       a5 d1		      lda	temp7
   6561  3463
   6562  3463		       48		      pha
   6563  3464
   6564  3464
   6565  3464
   6566  3464		       48		      pha
   6567  3465
   6568  3465		       a2 07		      ldx	#7
   6569  3467
   6570  3467		       4c eb ff 	      jmp	BS_jsr
   6571  346a
   6572  346a				   .temp4_1
   6573  346a
   6574  346a		       e0 01		      CPX	#1
   6575  346c
   6576  346c		       d0 20		      BNE	.temp4_0
   6577  346e
   6578  346e		       a5 da		      LDA	Reaper1_X
   6579  3470
   6580  3470
   6581  3470
   6582  3470		       85 80		      STA	missile0x
   6583  3472
   6584  3472				   .Sonic_1
   6585  3472
   6586  3472		       a5 dc		      LDA	Reaper1_Y
   6587  3474
   6588  3474		       38		      SEC
   6589  3475
   6590  3475		       e9 15		      SBC	#21
   6591  3477
   6592  3477		       85 8a		      STA	missile0y
   6593  3479
   6594  3479		       a9 20		      LDA	#$20
   6595  347b
   6596  347b		       85 04		      STA	NUSIZ0
   6597  347d
   6598  347d		       85 d1		      sta	temp7
   6599  347f
   6600  347f		       a9 d2		      lda	#>(.Sonic_Attack3-1)
   6601  3481
   6602  3481		       48		      pha
   6603  3482
   6604  3482		       a9 89		      lda	#<(.Sonic_Attack3-1)
   6605  3484
   6606  3484		       48		      pha
   6607  3485
   6608  3485		       a5 d1		      lda	temp7
   6609  3487
   6610  3487		       48		      pha
   6611  3488
   6612  3488
   6613  3488
   6614  3488		       48		      pha
   6615  3489
   6616  3489		       a2 07		      ldx	#7
   6617  348b
   6618  348b		       4c eb ff 	      jmp	BS_jsr
   6619  348e
   6620  348e				   .temp4_0
   6621  348e
   6622  348e		       a5 84		      LDA	player0x
   6623  3490
   6624  3490		       38		      SEC
   6625  3491
   6626  3491		       e9 07		      SBC	#7
   6627  3493
   6628  3493		       85 80		      STA	missile0x
   6629  3495
   6630  3495				   .Sonic_0
   6631  3495
   6632  3495
   6633  3495
   6634  3495		       a5 8d		      LDA	player0y
   6635  3497
   6636  3497		       38		      SEC
   6637  3498
   6638  3498		       e9 08		      SBC	#8
   6639  349a
   6640  349a		       85 8a		      STA	missile0y
   6641  349c
   6642  349c		       85 d1		      sta	temp7
   6643  349e
   6644  349e		       a9 d2		      lda	#>(.Sonic_Attack4-1)
   6645  34a0
   6646  34a0		       48		      pha
   6647  34a1
   6648  34a1		       a9 98		      lda	#<(.Sonic_Attack4-1)
   6649  34a3
   6650  34a3		       48		      pha
   6651  34a4
   6652  34a4		       a5 d1		      lda	temp7
   6653  34a6
   6654  34a6		       48		      pha
   6655  34a7
   6656  34a7
   6657  34a7
   6658  34a7		       48		      pha
   6659  34a8
   6660  34a8		       a2 07		      ldx	#7
   6661  34aa
   6662  34aa		       4c eb ff 	      jmp	BS_jsr
   6663  34ad
   6664  34ad				   .
   6665  34ad							; 
   6666  34ad
   6667  34ad				   .
   6668  34ad							; 
   6669  34ad
   6670  34ad				   .E2IS1
   6671  34ad							; E2IS1
   6672  34ad
   6673  34ad				   .L0272		;  asm
   6674  34ad
   6675  34ad		       a6 ce		      LDX	temp4
   6676  34af
   6677  34af		       e0 03		      CPX	#3
   6678  34b1
   6679  34b1		       d0 0a		      BNE	.temp4_2_2
   6680  34b3
   6681  34b3		       a5 da		      LDA	Reaper1_X
   6682  34b5
   6683  34b5		       18		      CLC
   6684  34b6
   6685  34b6		       69 03		      ADC	#3
   6686  34b8
   6687  34b8		       85 80		      STA	missile0x
   6688  34ba
   6689  34ba		       4c 27 54 	      jmp	.Sonic_3
   6690  34bd
   6691  34bd
   6692  34bd
   6693  34bd				   .temp4_2_2
   6694  34bd
   6695  34bd		       e0 02		      CPX	#2
   6696  34bf
   6697  34bf		       d0 0a		      BNE	.temp4_1_2
   6698  34c1
   6699  34c1		       a5 84		      LDA	player0x
   6700  34c3
   6701  34c3		       38		      SEC
   6702  34c4
   6703  34c4		       e9 07		      SBC	#7
   6704  34c6
   6705  34c6		       85 80		      STA	missile0x
   6706  34c8
   6707  34c8		       4c 52 54 	      jmp	.Sonic_2
   6708  34cb
   6709  34cb
   6710  34cb
   6711  34cb
   6712  34cb
   6713  34cb				   .temp4_1_2
   6714  34cb
   6715  34cb		       e0 01		      CPX	#1
   6716  34cd
   6717  34cd		       d0 0a		      BNE	.temp4_0_2
   6718  34cf
   6719  34cf		       a5 da		      LDA	Reaper1_X
   6720  34d1
   6721  34d1		       18		      CLC
   6722  34d2
   6723  34d2		       69 03		      ADC	#3
   6724  34d4
   6725  34d4		       85 80		      STA	missile0x
   6726  34d6
   6727  34d6		       4c 72 54 	      jmp	.Sonic_1
   6728  34d9
   6729  34d9
   6730  34d9
   6731  34d9				   .temp4_0_2
   6732  34d9
   6733  34d9		       a5 84		      LDA	player0x
   6734  34db
   6735  34db		       18		      CLC
   6736  34dc
   6737  34dc		       69 08		      ADC	#8
   6738  34de
   6739  34de		       85 80		      STA	missile0x
   6740  34e0
   6741  34e0		       4c 95 54 	      jmp	.Sonic_0
   6742  34e3
   6743  34e3
   6744  34e3
   6745  34e3				   .
   6746  34e3							; 
   6747  34e3
   6748  34e3				   .
   6749  34e3							; 
   6750  34e3
   6751  34e3				   .NoSpin_1
   6752  34e3							; NoSpin_1
   6753  34e3
   6754  34e3				   .
   6755  34e3							; 
   6756  34e3
   6757  34e3				   .L0273		;  asm
   6758  34e3
   6759  34e3		       a5 dc		      lda	Reaper1_Y
   6760  34e5
   6761  34e5		       38		      SEC
   6762  34e6
   6763  34e6		       e9 07		      SBC	#7
   6764  34e8
   6765  34e8		       85 dc		      STA	Reaper1_Y
   6766  34ea
   6767  34ea		       18		      CLC
   6768  34eb
   6769  34eb		       69 04		      ADC	#4
   6770  34ed
   6771  34ed		       85 8d		      STA	player0y
   6772  34ef
   6773  34ef		       38		      SEC
   6774  34f0
   6775  34f0		       e9 19		      SBC	#25
   6776  34f2
   6777  34f2		       85 8a		      STA	missile0y
   6778  34f4
   6779  34f4		       a9 00		      LDA	#0
   6780  34f6
   6781  34f6		       85 ea		      STA	Player1Counter_Sprite
   6782  34f8
   6783  34f8		       85 e7		      STA	Player1Counter_Jump
   6784  34fa
   6785  34fa				   .L0274		;  s{5} = 1 :	Player1Counter_1 = Player1Counter_1 + 4 :  missile0x = Reaper1_X :  goto ReaperStomp bank7
   6786  34fa
   6787  34fa		       a5 e9		      LDA	s
   6788  34fc		       09 20		      ORA	#32
   6789  34fe		       85 e9		      STA	s
   6790  3500		       a5 ec		      LDA	Player1Counter_1
   6791  3502		       18		      CLC
   6792  3503		       69 04		      ADC	#4
   6793  3505		       85 ec		      STA	Player1Counter_1
   6794  3507		       a5 da		      LDA	Reaper1_X
   6795  3509		       85 80		      STA	missile0x
   6796  350b		       85 d1		      sta	temp7
   6797  350d		       a9 d1		      lda	#>(.ReaperStomp-1)
   6798  350f		       48		      pha
   6799  3510		       a9 3a		      lda	#<(.ReaperStomp-1)
   6800  3512		       48		      pha
   6801  3513		       a5 d1		      lda	temp7
   6802  3515		       48		      pha
   6803  3516		       8a		      txa
   6804  3517		       48		      pha
   6805  3518		       a2 07		      ldx	#7
   6806  351a		       4c eb ff 	      jmp	BS_jsr
   6807  351d				   .JustFall_1
   6808  351d							; JustFall_1
   6809  351d
   6810  351d				   .L0275		;  s{5} = 0  :  Player1Counter_Sprite = 0
   6811  351d
   6812  351d		       a5 e9		      LDA	s
   6813  351f		       29 df		      AND	#223
   6814  3521		       85 e9		      STA	s
   6815  3523		       a9 00		      LDA	#0
   6816  3525		       85 ea		      STA	Player1Counter_Sprite
   6817  3527				   .L0276		;  asm
   6818  3527
   6819  3527		       a5 dc		      LDA	Reaper1_Y
   6820  3529
   6821  3529		       18		      CLC
   6822  352a
   6823  352a		       69 07		      ADC	#7
   6824  352c
   6825  352c		       85 8d		      STA	player0y
   6826  352e
   6827  352e		       38		      SEC
   6828  352f
   6829  352f		       a2 00		      LDX	#0
   6830  3531
   6831  3531		       e4 e7		      CPX	Player1Counter_Jump
   6832  3533
   6833  3533		       b0 15		      BCS	.skipL0270_1
   6834  3535
   6835  3535		       e9 02		      SBC	#2
   6836  3537
   6837  3537		       85 dc		      STA	Reaper1_Y
   6838  3539
   6839  3539		       85 d1		      sta	temp7
   6840  353b
   6841  353b		       a9 d1		      lda	#>(.Common_Jump_Up-1)
   6842  353d
   6843  353d		       48		      pha
   6844  353e
   6845  353e		       a9 1c		      lda	#<(.Common_Jump_Up-1)
   6846  3540
   6847  3540		       48		      pha
   6848  3541
   6849  3541		       a5 d1		      lda	temp7
   6850  3543
   6851  3543		       48		      pha
   6852  3544
   6853  3544
   6854  3544
   6855  3544		       48		      pha
   6856  3545
   6857  3545		       a2 07		      ldx	#7
   6858  3547
   6859  3547		       4c eb ff 	      jmp	BS_jsr
   6860  354a
   6861  354a				   .skipL0270_1
   6862  354a
   6863  354a		       e9 0c		      SBC	#12
   6864  354c
   6865  354c		       85 dc		      STA	Reaper1_Y
   6866  354e
   6867  354e		       85 d1		      sta	temp7
   6868  3550
   6869  3550		       a9 d1		      lda	#>(.Common_Jump_Down-1)
   6870  3552
   6871  3552		       48		      pha
   6872  3553
   6873  3553		       a9 2b		      lda	#<(.Common_Jump_Down-1)
   6874  3555
   6875  3555		       48		      pha
   6876  3556
   6877  3556		       a5 d1		      lda	temp7
   6878  3558
   6879  3558		       48		      pha
   6880  3559
   6881  3559
   6882  3559
   6883  3559		       48		      pha
   6884  355a
   6885  355a		       a2 07		      ldx	#7
   6886  355c
   6887  355c		       4c eb ff 	      jmp	BS_jsr
   6888  355f
   6889  355f				   .
   6890  355f							; 
   6891  355f
   6892  355f				   .
   6893  355f							; 
   6894  355f
   6895  355f				   .
   6896  355f							; 
   6897  355f
   6898  355f				   .
   6899  355f							; 
   6900  355f
   6901  355f				   .
   6902  355f							; 
   6903  355f
   6904  355f				   .Attack_1
   6905  355f							; Attack_1
   6906  355f
   6907  355f				   .
   6908  355f							; 
   6909  355f
   6910  355f				   .L0277		;  asm
   6911  355f
   6912  355f		       a9 20		      lda	#$20
   6913  3561
   6914  3561		       2c 80 02 	      bit	SWCHA
   6915  3564
   6916  3564		       f0 7e		      BEQ	.Attack_1_Shoot
   6917  3566
   6918  3566				   .
   6919  3566							; 
   6920  3566
   6921  3566				   .L0278		;  o{5}  = 1 :  AUDV1 = 9 :  AUDC1 = 6 :  AUDF1 = 6
   6922  3566
   6923  3566		       a5 e5		      LDA	o
   6924  3568		       09 20		      ORA	#32
   6925  356a		       85 e5		      STA	o
   6926  356c		       a9 09		      LDA	#9
   6927  356e		       85 1a		      STA	AUDV1
   6928  3570		       a9 06		      LDA	#6
   6929  3572		       85 16		      STA	AUDC1
   6930  3574		       85 18		      STA	AUDF1
   6931  3576				   .L0279		;  asm
   6932  3576
   6933  3576		       a2 07		      ldx	#7
   6934  3578
   6935  3578		       a5 ec		      LDA	Player1Counter_1
   6936  357a
   6937  357a		       c9 1a		      CMP	#26
   6938  357c
   6939  357c		       b0 06		      BCS	.skipL0281_1
   6940  357e
   6941  357e		       18		      CLC
   6942  357f
   6943  357f		       69 04		      ADC	#4
   6944  3581
   6945  3581		       4c 8c 55 	      jmp	.skipelse14_1
   6946  3584
   6947  3584				   .skipL0281_1
   6948  3584
   6949  3584		       a5 e5		      LDA	o
   6950  3586
   6951  3586		       29 df		      AND	#223
   6952  3588
   6953  3588		       85 e5		      STA	o
   6954  358a
   6955  358a		       a9 00		      LDA	#0
   6956  358c
   6957  358c				   .skipelse14_1
   6958  358c
   6959  358c		       85 ec		      STA	Player1Counter_1
   6960  358e
   6961  358e		       4a		      lsr
   6962  358f
   6963  358f		       4a		      lsr
   6964  3590
   6965  3590		       4a		      lsr
   6966  3591
   6967  3591		       85 ce		      STA	temp4
   6968  3593
   6969  3593		       c9 00		      CMP	#0
   6970  3595
   6971  3595		       d0 16		      BNE	.skipL0273_1
   6972  3597
   6973  3597		       a5 dc		      LDA	Reaper1_Y
   6974  3599
   6975  3599		       18		      CLC
   6976  359a
   6977  359a		       69 06		      ADC	#6
   6978  359c
   6979  359c				   .GotoAttack
   6980  359c
   6981  359c		       85 8d		      STA	player0y
   6982  359e
   6983  359e		       85 d1		      sta	temp7
   6984  35a0
   6985  35a0		       a9 d0		      lda	#>(.Attack_Player-1)
   6986  35a2
   6987  35a2		       48		      pha
   6988  35a3
   6989  35a3		       a9 0e		      lda	#<(.Attack_Player-1)
   6990  35a5
   6991  35a5		       48		      pha
   6992  35a6
   6993  35a6		       a5 d1		      lda	temp7
   6994  35a8
   6995  35a8		       48		      pha
   6996  35a9
   6997  35a9		       48		      pha
   6998  35aa
   6999  35aa		       4c eb ff 	      jmp	BS_jsr
   7000  35ad
   7001  35ad				   .skipL0273_1
   7002  35ad
   7003  35ad		       c9 01		      CMP	#1
   7004  35af
   7005  35af		       d0 08		      BNE	.skipL0274_1
   7006  35b1
   7007  35b1		       a5 dc		      LDA	Reaper1_Y
   7008  35b3
   7009  35b3		       18		      CLC
   7010  35b4
   7011  35b4		       69 02		      ADC	#2
   7012  35b6
   7013  35b6		       4c 9c 55 	      jmp	.GotoAttack
   7014  35b9
   7015  35b9				   .skipL0274_1
   7016  35b9
   7017  35b9		       a5 db		      LDA	e
   7018  35bb
   7019  35bb		       29 04		      AND	#4
   7020  35bd
   7021  35bd		       d0 08		      BNE	.skipL0275_1
   7022  35bf
   7023  35bf		       a5 84		      LDA	player0x
   7024  35c1
   7025  35c1		       18		      CLC
   7026  35c2
   7027  35c2		       69 08		      ADC	#8
   7028  35c4
   7029  35c4		       4c cc 55 	      jmp	.skipelse11_11
   7030  35c7
   7031  35c7				   .skipL0275_1
   7032  35c7
   7033  35c7		       a5 84		      LDA	player0x
   7034  35c9
   7035  35c9		       38		      SEC
   7036  35ca
   7037  35ca		       e9 07		      SBC	#7
   7038  35cc
   7039  35cc				   .skipelse11_11
   7040  35cc
   7041  35cc		       85 80		      STA	missile0x
   7042  35ce
   7043  35ce				   .
   7044  35ce							; 
   7045  35ce
   7046  35ce				   .L0280		;  missile0y = player0y - 10
   7047  35ce
   7048  35ce		       a5 8d		      LDA	player0y
   7049  35d0		       38		      SEC
   7050  35d1		       e9 0a		      SBC	#10
   7051  35d3		       85 8a		      STA	missile0y
   7052  35d5				   .L0281		;  asm
   7053  35d5
   7054  35d5		       85 d1		      sta	temp7
   7055  35d7
   7056  35d7		       a9 d0		      lda	#>(.Attack_Player-1)
   7057  35d9
   7058  35d9		       48		      pha
   7059  35da
   7060  35da		       a9 0e		      lda	#<(.Attack_Player-1)
   7061  35dc
   7062  35dc		       48		      pha
   7063  35dd
   7064  35dd		       a5 d1		      lda	temp7
   7065  35df
   7066  35df		       48		      pha
   7067  35e0
   7068  35e0		       48		      pha
   7069  35e1
   7070  35e1		       4c eb ff 	      jmp	BS_jsr
   7071  35e4
   7072  35e4				   .Attack_1_Shoot
   7073  35e4							; Attack_1_Shoot
   7074  35e4
   7075  35e4				   .L0282		;  Player1Counter_1 = 25 :  AUDV1 = 9 :  AUDC1 = 15 :	AUDF1 = 2
   7076  35e4
   7077  35e4		       a9 19		      LDA	#25
   7078  35e6		       85 ec		      STA	Player1Counter_1
   7079  35e8		       a9 09		      LDA	#9
   7080  35ea		       85 1a		      STA	AUDV1
   7081  35ec		       a9 0f		      LDA	#15
   7082  35ee		       85 16		      STA	AUDC1
   7083  35f0		       a9 02		      LDA	#2
   7084  35f2		       85 18		      STA	AUDF1
   7085  35f4				   .L0283		;  NUSIZ0 = $20
   7086  35f4
   7087  35f4		       a9 20		      LDA	#$20
   7088  35f6		       85 04		      STA	NUSIZ0
   7089  35f8				   .L0284		;  asm
   7090  35f8
   7091  35f8		       a5 dc		      LDA	Reaper1_Y
   7092  35fa
   7093  35fa		       18		      CLC
   7094  35fb
   7095  35fb		       69 07		      ADC	#7
   7096  35fd
   7097  35fd		       85 8d		      STA	player0y
   7098  35ff
   7099  35ff		       38		      SEC
   7100  3600
   7101  3600		       e9 11		      SBC	#17
   7102  3602
   7103  3602		       85 e2		      STA	Shoot1_Y
   7104  3604
   7105  3604
   7106  3604
   7107  3604		       a5 e5		      LDA	o
   7108  3606
   7109  3606		       09 80		      ORA	#128
   7110  3608
   7111  3608		       09 20		      ORA	#32
   7112  360a
   7113  360a		       85 e5		      STA	o
   7114  360c
   7115  360c
   7116  360c
   7117  360c		       a5 db		      LDA	e
   7118  360e
   7119  360e		       29 04		      AND	#4
   7120  3610
   7121  3610		       f0 0e		      BEQ	.skipL0294_1
   7122  3612
   7123  3612		       a5 e9		      LDA	s
   7124  3614
   7125  3614		       09 02		      ORA	#2
   7126  3616
   7127  3616		       85 e9		      STA	s
   7128  3618
   7129  3618		       a5 da		      LDA	Reaper1_X
   7130  361a
   7131  361a		       38		      SEC
   7132  361b
   7133  361b		       e9 01		      SBC	#1
   7134  361d
   7135  361d		       4c 2b 56 	      jmp	.skipelse12_1
   7136  3620
   7137  3620				   .skipL0294_1
   7138  3620
   7139  3620		       a5 e9		      LDA	s
   7140  3622
   7141  3622		       29 fd		      AND	#253
   7142  3624
   7143  3624		       85 e9		      STA	s
   7144  3626
   7145  3626		       a5 da		      LDA	Reaper1_X
   7146  3628
   7147  3628
   7148  3628
   7149  3628		       18		      CLC
   7150  3629
   7151  3629		       69 07		      ADC	#7
   7152  362b
   7153  362b				   .skipelse12_1
   7154  362b
   7155  362b		       85 e1		      STA	Shoot1_X
   7156  362d
   7157  362d
   7158  362d
   7159  362d
   7160  362d
   7161  362d				   .
   7162  362d							; 
   7163  362d
   7164  362d				   .
   7165  362d							; 
   7166  362d
   7167  362d				   .
   7168  362d							; 
   7169  362d
   7170  362d				   .
   7171  362d							; 
   7172  362d
   7173  362d				   .L0285		;  if e{5} then s{2}  =  1 :  Shoot1_Y = Shoot1_Y + 3 :  goto PlayerShoot2 bank7 else s{2}  =	0 :  goto PlayerShoot1 bank7
   7174  362d
   7175  362d		       a5 db		      LDA	e
   7176  362f		       29 20		      AND	#32
   7177  3631		       f0 22		      BEQ	.skipL0285
   7178  3633				   .condpart138
   7179  3633		       a5 e9		      LDA	s
   7180  3635		       09 04		      ORA	#4
   7181  3637		       85 e9		      STA	s
   7182  3639		       a5 e2		      LDA	Shoot1_Y
   7183  363b		       18		      CLC
   7184  363c		       69 03		      ADC	#3
   7185  363e		       85 e2		      STA	Shoot1_Y
   7186  3640		       85 d1		      sta	temp7
   7187  3642		       a9 d1		      lda	#>(.PlayerShoot2-1)
   7188  3644		       48		      pha
   7189  3645		       a9 0d		      lda	#<(.PlayerShoot2-1)
   7190  3647		       48		      pha
   7191  3648		       a5 d1		      lda	temp7
   7192  364a		       48		      pha
   7193  364b		       8a		      txa
   7194  364c		       48		      pha
   7195  364d		       a2 07		      ldx	#7
   7196  364f		       4c eb ff 	      jmp	BS_jsr
   7197  3652		       4c 6d 56 	      jmp	.skipelse10
   7198  3655				   .skipL0285
   7199  3655		       a5 e9		      LDA	s
   7200  3657		       29 fb		      AND	#251
   7201  3659		       85 e9		      STA	s
   7202  365b		       85 d1		      sta	temp7
   7203  365d		       a9 d0		      lda	#>(.PlayerShoot1-1)
   7204  365f		       48		      pha
   7205  3660		       a9 fe		      lda	#<(.PlayerShoot1-1)
   7206  3662		       48		      pha
   7207  3663		       a5 d1		      lda	temp7
   7208  3665		       48		      pha
   7209  3666		       8a		      txa
   7210  3667		       48		      pha
   7211  3668		       a2 07		      ldx	#7
   7212  366a		       4c eb ff 	      jmp	BS_jsr
   7213  366d				   .skipelse10
   7214  366d				   .
   7215  366d							; 
   7216  366d
   7217  366d				   .
   7218  366d							; 
   7219  366d
   7220  366d				   .
   7221  366d							; 
   7222  366d
   7223  366d				   .
   7224  366d							; 
   7225  366d
   7226  366d				   .Attack_1_Dash
   7227  366d							; Attack_1_Dash
   7228  366d
   7229  366d				   .L0286		;  e{6}  =  1 :  AUDV1 = 9 :  AUDC1 = 3 :  AUDF1 = 4
   7230  366d
   7231  366d		       a5 db		      LDA	e
   7232  366f		       09 40		      ORA	#64
   7233  3671		       85 db		      STA	e
   7234  3673		       a9 09		      LDA	#9
   7235  3675		       85 1a		      STA	AUDV1
   7236  3677		       a9 03		      LDA	#3
   7237  3679		       85 16		      STA	AUDC1
   7238  367b		       a9 04		      LDA	#4
   7239  367d		       85 18		      STA	AUDF1
   7240  367f				   .L0287		;  asm
   7241  367f
   7242  367f		       24 0c		      bit	INPT4
   7243  3681
   7244  3681		       10 23		      BPL	.Skip_1
   7245  3683
   7246  3683		       a5 db		      LDA	e
   7247  3685
   7248  3685		       29 04		      AND	#4
   7249  3687
   7250  3687		       d0 05		      BNE	.skipL0277_1
   7251  3689
   7252  3689		       2c 80 02 	      bit	SWCHA
   7253  368c
   7254  368c		       10 18		      BPL	.Skip_1
   7255  368e
   7256  368e				   .skipL0277_1
   7257  368e
   7258  368e		       a5 db		      LDA	e
   7259  3690
   7260  3690		       29 04		      AND	#4
   7261  3692
   7262  3692		       f0 05		      BEQ	.skipL0278_1
   7263  3694
   7264  3694		       2c 80 02 	      bit	SWCHA
   7265  3697
   7266  3697		       50 0d		      BVC	.Skip_1
   7267  3699
   7268  3699				   .skipL0278_1
   7269  3699
   7270  3699				   .
   7271  3699							; 
   7272  3699
   7273  3699				   .
   7274  3699							; 
   7275  3699
   7276  3699				   .
   7277  3699							; 
   7278  3699
   7279  3699				   .L0288		;  e{6}  = 0 :  Player1Counter_Sprite = 0 :  goto Attack_1
   7280  3699
   7281  3699		       a5 db		      LDA	e
   7282  369b		       29 bf		      AND	#191
   7283  369d		       85 db		      STA	e
   7284  369f		       a9 00		      LDA	#0
   7285  36a1		       85 ea		      STA	Player1Counter_Sprite
   7286  36a3		       4c 5f 55 	      jmp	.Attack_1
   7287  36a6
   7288  36a6				   .Skip_1
   7289  36a6							; Skip_1
   7290  36a6
   7291  36a6				   .L0289		;  asm
   7292  36a6
   7293  36a6		       a9 84		      LDA	#132
   7294  36a8
   7295  36a8		       c5 da		      CMP	Reaper1_X
   7296  36aa
   7297  36aa		       90 06		      BCC	.condpart158_1
   7298  36ac
   7299  36ac		       a5 da		      LDA	Reaper1_X
   7300  36ae
   7301  36ae		       c9 15		      CMP	#21
   7302  36b0
   7303  36b0		       b0 15		      BCS	.skip48OR_1
   7304  36b2
   7305  36b2				   .condpart158_1
   7306  36b2
   7307  36b2		       a9 00		      LDA	#0
   7308  36b4
   7309  36b4		       85 ea		      STA	Player1Counter_Sprite
   7310  36b6
   7311  36b6		       85 d1		      sta	temp7
   7312  36b8
   7313  36b8		       a9 cf		      lda	#>(.PlayerStand-1)
   7314  36ba
   7315  36ba		       48		      pha
   7316  36bb
   7317  36bb		       a9 ff		      lda	#<(.PlayerStand-1)
   7318  36bd
   7319  36bd		       48		      pha
   7320  36be
   7321  36be		       a5 d1		      lda	temp7
   7322  36c0
   7323  36c0		       48		      pha
   7324  36c1
   7325  36c1
   7326  36c1
   7327  36c1		       48		      pha
   7328  36c2
   7329  36c2		       a2 07		      ldx	#7
   7330  36c4
   7331  36c4		       4c eb ff 	      jmp	BS_jsr
   7332  36c7
   7333  36c7				   .skip48OR_1
   7334  36c7
   7335  36c7				   .L0290		;  if e{2} then goto Dash_Left1
   7336  36c7
   7337  36c7		       a5 db		      LDA	e
   7338  36c9		       29 04		      AND	#4
   7339  36cb		       f0 03		      BEQ	.skipL0290
   7340  36cd				   .condpart139
   7341  36cd		       4c 08 57 	      jmp	.Dash_Left1
   7342  36d0
   7343  36d0				   .skipL0290
   7344  36d0				   .L0291		;  asm
   7345  36d0
   7346  36d0		       a5 da		      LDA	Reaper1_X
   7347  36d2
   7348  36d2		       c9 84		      CMP	#132
   7349  36d4
   7350  36d4		       b0 12		      BCS	.ooooo1
   7351  36d6
   7352  36d6		       18		      CLC
   7353  36d7
   7354  36d7		       69 06		      ADC	#6
   7355  36d9
   7356  36d9		       85 da		      STA	Reaper1_X
   7357  36db
   7358  36db		       a5 ea		      LDA	Player1Counter_Sprite
   7359  36dd
   7360  36dd		       18		      CLC
   7361  36de
   7362  36de		       69 02		      ADC	#2
   7363  36e0
   7364  36e0		       c9 17		      CMP	#23
   7365  36e2
   7366  36e2		       90 02		      BCC	.skipL0287_1
   7367  36e4
   7368  36e4		       a9 00		      LDA	#0
   7369  36e6
   7370  36e6				   .skipL0287_1
   7371  36e6
   7372  36e6		       85 ea		      STA	Player1Counter_Sprite
   7373  36e8
   7374  36e8				   .ooooo1
   7375  36e8
   7376  36e8		       a5 ea		      LDA	Player1Counter_Sprite
   7377  36ea
   7378  36ea		       4a		      lsr
   7379  36eb
   7380  36eb		       4a		      lsr
   7381  36ec
   7382  36ec		       4a		      lsr
   7383  36ed
   7384  36ed		       85 ce		      STA	temp4
   7385  36ef
   7386  36ef				   .
   7387  36ef							; 
   7388  36ef
   7389  36ef				   .L0292		;  player0y = Reaper1_Y + 7
   7390  36ef
   7391  36ef		       a5 dc		      LDA	Reaper1_Y
   7392  36f1		       18		      CLC
   7393  36f2		       69 07		      ADC	#7
   7394  36f4		       85 8d		      STA	player0y
   7395  36f6				   .L0293		;  goto Attack_Player_Dash bank7
   7396  36f6
   7397  36f6		       85 d1		      sta	temp7
   7398  36f8		       a9 d0		      lda	#>(.Attack_Player_Dash-1)
   7399  36fa		       48		      pha
   7400  36fb		       a9 c5		      lda	#<(.Attack_Player_Dash-1)
   7401  36fd		       48		      pha
   7402  36fe		       a5 d1		      lda	temp7
   7403  3700		       48		      pha
   7404  3701		       8a		      txa
   7405  3702		       48		      pha
   7406  3703		       a2 07		      ldx	#7
   7407  3705		       4c eb ff 	      jmp	BS_jsr
   7408  3708				   .
   7409  3708							; 
   7410  3708
   7411  3708				   .Dash_Left1
   7412  3708							; Dash_Left1
   7413  3708
   7414  3708				   .L0294		;  asm
   7415  3708
   7416  3708		       a5 da		      LDA	Reaper1_X
   7417  370a
   7418  370a		       c9 15		      CMP	#21
   7419  370c
   7420  370c		       90 14		      BCC	.ooooo2
   7421  370e
   7422  370e		       38		      SEC
   7423  370f
   7424  370f		       e9 06		      SBC	#6
   7425  3711
   7426  3711		       85 da		      STA	Reaper1_X
   7427  3713
   7428  3713		       a5 ea		      LDA	Player1Counter_Sprite
   7429  3715
   7430  3715		       18		      CLC
   7431  3716
   7432  3716		       69 02		      ADC	#2
   7433  3718
   7434  3718		       85 ea		      STA	Player1Counter_Sprite
   7435  371a
   7436  371a		       c9 17		      CMP	#23
   7437  371c
   7438  371c		       90 02		      BCC	.skipL0287_13
   7439  371e
   7440  371e		       a9 00		      LDA	#0
   7441  3720
   7442  3720				   .skipL0287_13
   7443  3720
   7444  3720		       85 ea		      STA	Player1Counter_Sprite
   7445  3722
   7446  3722				   .ooooo2
   7447  3722
   7448  3722		       a5 ea		      LDA	Player1Counter_Sprite
   7449  3724
   7450  3724		       4a		      lsr
   7451  3725
   7452  3725		       4a		      lsr
   7453  3726
   7454  3726		       4a		      lsr
   7455  3727
   7456  3727		       85 ce		      STA	temp4
   7457  3729
   7458  3729				   .
   7459  3729							; 
   7460  3729
   7461  3729				   .
   7462  3729							; 
   7463  3729
   7464  3729				   .L0295		;  player0y = Reaper1_Y + 7
   7465  3729
   7466  3729		       a5 dc		      LDA	Reaper1_Y
   7467  372b		       18		      CLC
   7468  372c		       69 07		      ADC	#7
   7469  372e		       85 8d		      STA	player0y
   7470  3730				   .L0296		;  goto Attack_Player_Dash bank7
   7471  3730
   7472  3730		       85 d1		      sta	temp7
   7473  3732		       a9 d0		      lda	#>(.Attack_Player_Dash-1)
   7474  3734		       48		      pha
   7475  3735		       a9 c5		      lda	#<(.Attack_Player_Dash-1)
   7476  3737		       48		      pha
   7477  3738		       a5 d1		      lda	temp7
   7478  373a		       48		      pha
   7479  373b		       8a		      txa
   7480  373c		       48		      pha
   7481  373d		       a2 07		      ldx	#7
   7482  373f		       4c eb ff 	      jmp	BS_jsr
   7483  3742				   .
   7484  3742							; 
   7485  3742
   7486  3742				   .Jump_1
   7487  3742							; Jump_1
   7488  3742
   7489  3742				   .L0297		;  AUDV1 = 7 :  AUDC1 = 7 :  AUDF1 = 1
   7490  3742
   7491  3742		       a9 07		      LDA	#7
   7492  3744		       85 1a		      STA	AUDV1
   7493  3746		       85 16		      STA	AUDC1
   7494  3748		       a9 01		      LDA	#1
   7495  374a		       85 18		      STA	AUDF1
   7496  374c				   .L0298		;  Player1Counter_Jump = 10 :	e{4} = 1
   7497  374c
   7498  374c		       a9 0a		      LDA	#10
   7499  374e		       85 e7		      STA	Player1Counter_Jump
   7500  3750		       a5 db		      LDA	e
   7501  3752		       09 10		      ORA	#16
   7502  3754		       85 db		      STA	e
   7503  3756				   .L0299		;  player0y = Reaper1_Y + 7
   7504  3756
   7505  3756		       a5 dc		      LDA	Reaper1_Y
   7506  3758		       18		      CLC
   7507  3759		       69 07		      ADC	#7
   7508  375b		       85 8d		      STA	player0y
   7509  375d				   .L0300		;  goto Common_Jump_Up bank7
   7510  375d
   7511  375d		       85 d1		      sta	temp7
   7512  375f		       a9 d1		      lda	#>(.Common_Jump_Up-1)
   7513  3761		       48		      pha
   7514  3762		       a9 1c		      lda	#<(.Common_Jump_Up-1)
   7515  3764		       48		      pha
   7516  3765		       a5 d1		      lda	temp7
   7517  3767		       48		      pha
   7518  3768		       8a		      txa
   7519  3769		       48		      pha
   7520  376a		       a2 07		      ldx	#7
   7521  376c		       4c eb ff 	      jmp	BS_jsr
   7522  376f				   .
   7523  376f							; 
   7524  376f
   7525  376f				   .Duck_1
   7526  376f							; Duck_1
   7527  376f
   7528  376f				   .L0301		;  asm
   7529  376f
   7530  376f		       a5 db		      LDA	e
   7531  3771
   7532  3771		       29 02		      AND	#2
   7533  3773
   7534  3773		       f0 11		      BEQ	.skip160then_1
   7535  3775
   7536  3775		       a5 c1		      LDA	Life1
   7537  3777
   7538  3777		       c5 df		      CMP	MaxLife
   7539  3779
   7540  3779		       b0 0b		      BCS	.skip160then_1
   7541  377b
   7542  377b		       f8		      SED
   7543  377c
   7544  377c		       18		      CLC
   7545  377d
   7546  377d		       69 01		      ADC	#1
   7547  377f
   7548  377f		       85 c1		      STA	Life1
   7549  3781
   7550  3781		       d8		      CLD
   7551  3782
   7552  3782		       a9 1e		      LDA	#$1e
   7553  3784
   7554  3784		       85 c0		      STA	player0scorecolor
   7555  3786
   7556  3786
   7557  3786
   7558  3786
   7559  3786
   7560  3786				   .skip160then_1
   7561  3786
   7562  3786				   .
   7563  3786							; 
   7564  3786
   7565  3786				   .L0302		;  goto Player_Duck bank7
   7566  3786
   7567  3786		       85 d1		      sta	temp7
   7568  3788		       a9 d0		      lda	#>(.Player_Duck-1)
   7569  378a		       48		      pha
   7570  378b		       a9 b6		      lda	#<(.Player_Duck-1)
   7571  378d		       48		      pha
   7572  378e		       a5 d1		      lda	temp7
   7573  3790		       48		      pha
   7574  3791		       8a		      txa
   7575  3792		       48		      pha
   7576  3793		       a2 07		      ldx	#7
   7577  3795		       4c eb ff 	      jmp	BS_jsr
   7578  3798				   .
   7579  3798							; 
   7580  3798
   7581  3798				   .Player2Things
   7582  3798							; Player2Things
   7583  3798
   7584  3798				   .
   7585  3798							; 
   7586  3798
   7587  3798				   .L0303		;  player0x = Reaper2_X :  player0y = Reaper2_Y
   7588  3798
   7589  3798		       a5 dd		      LDA	Reaper2_X
   7590  379a		       85 84		      STA	player0x
   7591  379c		       a5 de		      LDA	Reaper2_Y
   7592  379e		       85 8d		      STA	player0y
   7593  37a0				   .L0304		;  COLUP0 = $86
   7594  37a0
   7595  37a0		       a9 86		      LDA	#$86
   7596  37a2		       85 06		      STA	COLUP0
   7597  37a4				   .L0305		;  if Player2Counter_1 > 0 then Player2Counter_1 =  Player2Counter_1 - 1
   7598  37a4
   7599  37a4		       a9 00		      LDA	#0
   7600  37a6		       c5 e6		      CMP	Player2Counter_1
   7601  37a8		       b0 02		      BCS	.skipL0305
   7602  37aa				   .condpart140
   7603  37aa		       c6 e6		      DEC	Player2Counter_1
   7604  37ac				   .skipL0305
   7605  37ac				   .L0306		;  if Player2Counter_Jump > 0 then Player2Counter_Jump =  Player2Counter_Jump - 1
   7606  37ac
   7607  37ac		       a9 00		      LDA	#0
   7608  37ae		       c5 e8		      CMP	Player2Counter_Jump
   7609  37b0		       b0 02		      BCS	.skipL0306
   7610  37b2				   .condpart141
   7611  37b2		       c6 e8		      DEC	Player2Counter_Jump
   7612  37b4				   .skipL0306
   7613  37b4				   .L0307		;  if e{3} then REFP0 = 8
   7614  37b4
   7615  37b4		       a5 db		      LDA	e
   7616  37b6		       29 08		      AND	#8
   7617  37b8		       f0 04		      BEQ	.skipL0307
   7618  37ba				   .condpart142
   7619  37ba		       a9 08		      LDA	#8
   7620  37bc		       85 0b		      STA	REFP0
   7621  37be				   .skipL0307
   7622  37be				   .L0308		;  if s{7} then goto Fallen_2
   7623  37be
   7624  37be		       24 e9		      BIT	s
   7625  37c0		       10 03		      BPL	.skipL0308
   7626  37c2				   .condpart143
   7627  37c2		       4c e3 58 	      jmp	.Fallen_2
   7628  37c5
   7629  37c5				   .skipL0308
   7630  37c5				   .L0309		;  asm
   7631  37c5
   7632  37c5		       a9 00		      LDA	#0
   7633  37c7
   7634  37c7		       c5 c2		      CMP	player1score
   7635  37c9
   7636  37c9		       f0 06		      BEQ	.condpart118_2
   7637  37cb
   7638  37cb
   7639  37cb
   7640  37cb		       a5 df		      LDA	MaxLife
   7641  37cd
   7642  37cd		       c5 c2		      CMP	player1score
   7643  37cf
   7644  37cf		       b0 20		      BCS	.skip42OR_2
   7645  37d1
   7646  37d1				   .condpart118_2
   7647  37d1
   7648  37d1		       a9 00		      LDA	#0
   7649  37d3
   7650  37d3		       85 c2		      STA	player1score
   7651  37d5
   7652  37d5		       a5 e9		      LDA	s
   7653  37d7
   7654  37d7		       09 80		      ORA	#128
   7655  37d9
   7656  37d9		       85 e9		      STA	s
   7657  37db
   7658  37db		       a9 78		      LDA	#120
   7659  37dd
   7660  37dd		       85 e6		      STA	Player2Counter_1
   7661  37df
   7662  37df
   7663  37df
   7664  37df		       a5 ed		      LDA	w
   7665  37e1
   7666  37e1		       29 20		      AND	#32
   7667  37e3
   7668  37e3		       f0 0c		      BEQ	.skip42OR_2
   7669  37e5
   7670  37e5		       a9 00		      LDA	#0
   7671  37e7
   7672  37e7		       c5 ef		      CMP	PowerUp_Counter
   7673  37e9
   7674  37e9		       b0 06		      BCS	.skip42OR_2
   7675  37eb
   7676  37eb		       85 ef		      STA	PowerUp_Counter
   7677  37ed
   7678  37ed		       a9 78		      LDA	#120
   7679  37ef
   7680  37ef		       85 92		      STA	player5y
   7681  37f1
   7682  37f1				   .skip42OR_2
   7683  37f1
   7684  37f1				   .L0310		;  asm
   7685  37f1
   7686  37f1		       a9 17		      lda	#23
   7687  37f3
   7688  37f3		       c5 de		      CMP	Reaper2_Y
   7689  37f5
   7690  37f5		       90 02		      BCC	.skipL0215_2
   7691  37f7
   7692  37f7		       85 de		      sta	Reaper2_Y
   7693  37f9
   7694  37f9				   .skipL0215_2
   7695  37f9
   7696  37f9				   .
   7697  37f9							; 
   7698  37f9
   7699  37f9				   .L0311		;  asm
   7700  37f9
   7701  37f9		       a5 db		      LDA	e
   7702  37fb
   7703  37fb		       29 20		      AND	#32
   7704  37fd
   7705  37fd		       f0 5a		      BEQ	.DODODO_2
   7706  37ff
   7707  37ff		       a9 00		      LDA	#0
   7708  3801
   7709  3801		       c5 e8		      CMP	Player2Counter_Jump
   7710  3803
   7711  3803		       90 54		      BCC	.DODODO_2
   7712  3805
   7713  3805		       a9 17		      LDA	#23
   7714  3807
   7715  3807		       c5 de		      CMP	Reaper2_Y
   7716  3809
   7717  3809		       90 4e		      BCC	.DODODO_2
   7718  380b
   7719  380b				   .
   7720  380b							; 
   7721  380b
   7722  380b				   .L0312		;  asm
   7723  380b
   7724  380b
   7725  380b
   7726  380b		       24 e9		      BIT	s
   7727  380d
   7728  380d		       50 3c		      BVC	.ComeBack_2
   7729  380f
   7730  380f		       a5 e6		      LDA	Player2Counter_1
   7731  3811
   7732  3811		       c9 0c		      CMP	#12
   7733  3813
   7734  3813		       90 36		      BCC	.ComeBack_2
   7735  3815
   7736  3815				   .L0313		;  if player3y < 120 then dec player3score = player3score + $01
   7737  3815
   7738  3815		       a5 90		      LDA	player3y
   7739  3817		       c9 78		      CMP	#120
   7740  3819		       b0 09		      BCS	.skipL0313
   7741  381b				   .condpart144
   7742  381b		       f8		      SED
   7743  381c		       a5 d3		      LDA	player3score
   7744  381e		       18		      CLC
   7745  381f		       69 01		      ADC	#$01
   7746  3821		       85 d3		      STA	player3score
   7747  3823		       d8		      CLD
   7748  3824				   .skipL0313
   7749  3824				   .L0314		;  if player4y < 120 then dec player3score = player3score + $01
   7750  3824
   7751  3824		       a5 91		      LDA	player4y
   7752  3826		       c9 78		      CMP	#120
   7753  3828		       b0 09		      BCS	.skipL0314
   7754  382a				   .condpart145
   7755  382a		       f8		      SED
   7756  382b		       a5 d3		      LDA	player3score
   7757  382d		       18		      CLC
   7758  382e		       69 01		      ADC	#$01
   7759  3830		       85 d3		      STA	player3score
   7760  3832		       d8		      CLD
   7761  3833				   .skipL0314
   7762  3833				   .
   7763  3833							; 
   7764  3833
   7765  3833				   .L0315		;  COLUBK = $1e :  HouseHeight = HouseHeight + 1 :  goto ChangePF bank7
   7766  3833
   7767  3833		       a9 1e		      LDA	#$1e
   7768  3835		       85 09		      STA	COLUBK
   7769  3837		       e6 f0		      INC	HouseHeight
   7770  3839		       85 d1		      sta	temp7
   7771  383b		       a9 d1		      lda	#>(.ChangePF-1)
   7772  383d		       48		      pha
   7773  383e		       a9 49		      lda	#<(.ChangePF-1)
   7774  3840		       48		      pha
   7775  3841		       a5 d1		      lda	temp7
   7776  3843		       48		      pha
   7777  3844		       8a		      txa
   7778  3845		       48		      pha
   7779  3846		       a2 07		      ldx	#7
   7780  3848		       4c eb ff 	      jmp	BS_jsr
   7781  384b				   .ComeBack_2
   7782  384b							; ComeBack_2
   7783  384b
   7784  384b				   .L0316		;  Player2Counter_1 = 0
   7785  384b
   7786  384b		       a9 00		      LDA	#0
   7787  384d		       85 e6		      STA	Player2Counter_1
   7788  384f				   .L0317		;  e{5} = 0 :	Reaper2_Y = 23
   7789  384f
   7790  384f		       a5 db		      LDA	e
   7791  3851		       29 df		      AND	#223
   7792  3853		       85 db		      STA	e
   7793  3855		       a9 17		      LDA	#23
   7794  3857		       85 de		      STA	Reaper2_Y
   7795  3859				   .DODODO_2
   7796  3859							; DODODO_2
   7797  3859
   7798  3859				   .L0318		;  asm
   7799  3859
   7800  3859		       a5 e9		      LDA	s
   7801  385b
   7802  385b		       4a		      LSR
   7803  385c
   7804  385c		       90 4a		      BCC	.No_S0
   7805  385e
   7806  385e
   7807  385e
   7808  385e		       a5 e3		      LDA	Shoot2_X
   7809  3860
   7810  3860		       c9 86		      CMP	#134
   7811  3862
   7812  3862		       b0 04		      BCS	.condpart214_1
   7813  3864
   7814  3864		       c9 17		      CMP	#23
   7815  3866
   7816  3866		       b0 0f		      BCS	.skip70OR_1
   7817  3868
   7818  3868				   .condpart214_1
   7819  3868
   7820  3868		       a5 e9		      LDA	s
   7821  386a
   7822  386a		       29 fe		      AND	#254
   7823  386c
   7824  386c		       85 e9		      STA	s
   7825  386e
   7826  386e		       a5 e5		      LDA	o
   7827  3870
   7828  3870		       29 bf		      AND	#191
   7829  3872
   7830  3872		       85 e5		      STA	o
   7831  3874
   7832  3874		       4c a8 58 	      jmp	.No_S0
   7833  3877
   7834  3877				   .skip70OR_1
   7835  3877
   7836  3877				   .
   7837  3877							; 
   7838  3877
   7839  3877				   .L0319		;  asm
   7840  3877
   7841  3877		       a5 e9		      LDA	s
   7842  3879
   7843  3879		       29 08		      AND	#8
   7844  387b
   7845  387b		       f0 08		      BEQ	.skipL0228_2
   7846  387d
   7847  387d		       a5 e3		      LDA	Shoot2_X
   7848  387f
   7849  387f		       38		      SEC
   7850  3880
   7851  3880		       e9 05		      SBC	#5
   7852  3882
   7853  3882		       4c 8a 58 	      jmp	.skipelse9_22
   7854  3885
   7855  3885				   .skipL0228_2
   7856  3885
   7857  3885		       a5 e3		      LDA	Shoot2_X
   7858  3887
   7859  3887		       18		      CLC
   7860  3888
   7861  3888		       69 05		      ADC	#5
   7862  388a
   7863  388a				   .skipelse9_22
   7864  388a
   7865  388a		       85 e3		      STA	Shoot2_X
   7866  388c
   7867  388c		       85 80		      STA	missile0x
   7868  388e
   7869  388e
   7870  388e
   7871  388e		       a5 e9		      LDA	s
   7872  3890
   7873  3890		       29 10		      AND	#16
   7874  3892
   7875  3892		       f0 0c		      BEQ	.skipL0229_2
   7876  3894
   7877  3894		       a5 e4		      LDA	Shoot2_Y
   7878  3896
   7879  3896		       18		      CLC
   7880  3897
   7881  3897		       69 04		      ADC	#4
   7882  3899
   7883  3899		       85 e4		      STA	Shoot2_Y
   7884  389b
   7885  389b		       85 8d		      STA	player0y
   7886  389d
   7887  389d		       4c a4 58 	      jmp	.Poppp2
   7888  38a0
   7889  38a0				   .skipL0229_2
   7890  38a0
   7891  38a0		       a5 e4		      LDA	Shoot2_Y
   7892  38a2
   7893  38a2		       85 8a		      STA	missile0y
   7894  38a4
   7895  38a4				   .Poppp2
   7896  38a4
   7897  38a4				   .
   7898  38a4							; 
   7899  38a4
   7900  38a4				   .L0320		;  NUSIZ0 = $20
   7901  38a4
   7902  38a4		       a9 20		      LDA	#$20
   7903  38a6		       85 04		      STA	NUSIZ0
   7904  38a8				   .No_S0
   7905  38a8							; No_S0
   7906  38a8
   7907  38a8				   .L0321		;  asm
   7908  38a8
   7909  38a8		       a5 db		      LDA	e
   7910  38aa
   7911  38aa		       29 20		      AND	#32
   7912  38ac
   7913  38ac		       f0 03		      beq	.skippp2
   7914  38ae
   7915  38ae		       4c 6f 5a 	      jmp	.JumpThings_2
   7916  38b1
   7917  38b1				   .skippp2
   7918  38b1							; skippp2
   7919  38b1
   7920  38b1				   .L0322		;  if Player2Counter_1 > 0 then goto Continue_2
   7921  38b1
   7922  38b1		       a9 00		      LDA	#0
   7923  38b3		       c5 e6		      CMP	Player2Counter_1
   7924  38b5		       b0 03		      BCS	.skipL0322
   7925  38b7				   .condpart146
   7926  38b7		       4c 10 5a 	      jmp	.Continue_2
   7927  38ba
   7928  38ba				   .skipL0322
   7929  38ba				   .L0323		;  asm
   7930  38ba
   7931  38ba		       24 0d		      bit	INPT5
   7932  38bc
   7933  38bc		       30 7a		      BMI	.No_Attack_2
   7934  38be
   7935  38be		       a5 e9		      LDA	s
   7936  38c0
   7937  38c0		       4a		      LSR
   7938  38c1
   7939  38c1		       b0 75		      BCS	.No_Attack_2
   7940  38c3
   7941  38c3
   7942  38c3
   7943  38c3		       a5 db		      LDA	e
   7944  38c5
   7945  38c5		       29 08		      AND	#8
   7946  38c7
   7947  38c7		       d0 07		      BNE	.skipL0475_1
   7948  38c9
   7949  38c9		       a9 08		      lda	#8
   7950  38cb
   7951  38cb		       2c 80 02 	      bit	SWCHA
   7952  38ce
   7953  38ce		       f0 0d		      BEQ	.condpart282_1
   7954  38d0
   7955  38d0				   .skipL0475_1
   7956  38d0
   7957  38d0		       a5 db		      LDA	e
   7958  38d2
   7959  38d2		       29 08		      AND	#8
   7960  38d4
   7961  38d4		       f0 0a		      BEQ	.skipL0476_1
   7962  38d6
   7963  38d6		       a9 04		      lda	#4
   7964  38d8
   7965  38d8		       2c 80 02 	      bit	SWCHA
   7966  38db
   7967  38db		       d0 03		      BNE	.skipL0476_1
   7968  38dd
   7969  38dd				   .condpart282_1
   7970  38dd
   7971  38dd		       4c 92 5d 	      jmp	.Attack_2_Dash
   7972  38e0
   7973  38e0
   7974  38e0
   7975  38e0				   .skipL0476_1
   7976  38e0
   7977  38e0
   7978  38e0
   7979  38e0				   .
   7980  38e0							; 
   7981  38e0
   7982  38e0				   .L0324		;  goto Attack_2
   7983  38e0
   7984  38e0		       4c 80 5c 	      jmp	.Attack_2
   7985  38e3
   7986  38e3				   .
   7987  38e3							; 
   7988  38e3
   7989  38e3				   .Fallen_2
   7990  38e3							; Fallen_2
   7991  38e3
   7992  38e3				   .L0325		;  asm
   7993  38e3
   7994  38e3		       a5 db		      LDA	e
   7995  38e5
   7996  38e5		       29 20		      AND	#32
   7997  38e7
   7998  38e7		       f0 28		      BEQ	.skipL0344_1
   7999  38e9
   8000  38e9		       a6 de		      LDX	Reaper2_Y
   8001  38eb
   8002  38eb		       e0 18		      CPX	#24
   8003  38ed
   8004  38ed		       b0 06		      BCS	.NoMoreJump2
   8005  38ef
   8006  38ef		       a5 db		      LDA	e
   8007  38f1
   8008  38f1		       29 df		      AND	#223
   8009  38f3
   8010  38f3		       85 db		      STA	e
   8011  38f5
   8012  38f5				   .NoMoreJump2
   8013  38f5
   8014  38f5		       8a		      TXA
   8015  38f6
   8016  38f6		       38		      SEC
   8017  38f7
   8018  38f7		       e9 02		      SBC	#2
   8019  38f9
   8020  38f9		       85 de		      STA	Reaper2_Y
   8021  38fb
   8022  38fb		       18		      CLC
   8023  38fc
   8024  38fc		       69 07		      ADC	#7
   8025  38fe
   8026  38fe		       85 8d		      STA	player0y
   8027  3900
   8028  3900		       85 d1		      sta	temp7
   8029  3902
   8030  3902		       a9 d2		      lda	#>(.ReaperFall-1)
   8031  3904
   8032  3904		       48		      pha
   8033  3905
   8034  3905		       a9 a7		      lda	#<(.ReaperFall-1)
   8035  3907
   8036  3907		       48		      pha
   8037  3908
   8038  3908		       a5 d1		      lda	temp7
   8039  390a
   8040  390a		       48		      pha
   8041  390b
   8042  390b
   8043  390b
   8044  390b		       48		      pha
   8045  390c
   8046  390c		       a2 07		      ldx	#7
   8047  390e
   8048  390e		       4c eb ff 	      jmp	BS_jsr
   8049  3911
   8050  3911				   .skipL0344_1
   8051  3911
   8052  3911		       a5 e6		      LDA	Player2Counter_1
   8053  3913
   8054  3913		       c9 00		      CMP	#0
   8055  3915
   8056  3915		       f0 11		      BEQ	.skipL0237_22
   8057  3917
   8058  3917		       85 d1		      sta	temp7
   8059  3919
   8060  3919		       a9 d2		      lda	#>(.ReaperFallen-1)
   8061  391b
   8062  391b		       48		      pha
   8063  391c
   8064  391c		       a9 b6		      lda	#<(.ReaperFallen-1)
   8065  391e
   8066  391e		       48		      pha
   8067  391f
   8068  391f		       a5 d1		      lda	temp7
   8069  3921
   8070  3921		       48		      pha
   8071  3922
   8072  3922
   8073  3922
   8074  3922		       48		      pha
   8075  3923
   8076  3923		       a2 07		      ldx	#7
   8077  3925
   8078  3925		       4c eb ff 	      jmp	BS_jsr
   8079  3928
   8080  3928				   .skipL0237_22
   8081  3928
   8082  3928
   8083  3928
   8084  3928
   8085  3928
   8086  3928				   .L0326		;  s{7}  =  0	:  player1score  =  MaxLife  :	o{4}  =  1
   8087  3928
   8088  3928		       a5 e9		      LDA	s
   8089  392a		       29 7f		      AND	#127
   8090  392c		       85 e9		      STA	s
   8091  392e		       a5 df		      LDA	MaxLife
   8092  3930		       85 c2		      STA	player1score
   8093  3932		       a5 e5		      LDA	o
   8094  3934		       09 10		      ORA	#16
   8095  3936		       85 e5		      STA	o
   8096  3938				   .No_Attack_2
   8097  3938							; No_Attack_2
   8098  3938
   8099  3938				   .L0327		;  if joy1down then goto Duck_2
   8100  3938
   8101  3938		       a9 02		      lda	#2
   8102  393a		       2c 80 02 	      bit	SWCHA
   8103  393d		       d0 03		      BNE	.skipL0327
   8104  393f				   .condpart147
   8105  393f		       4c 96 5e 	      jmp	.Duck_2
   8106  3942
   8107  3942				   .skipL0327
   8108  3942				   .L0328		;  if joy1up then goto Jump_2
   8109  3942
   8110  3942		       a9 01		      lda	#1
   8111  3944		       2c 80 02 	      bit	SWCHA
   8112  3947		       d0 03		      BNE	.skipL0328
   8113  3949				   .condpart148
   8114  3949		       4c 69 5e 	      jmp	.Jump_2
   8115  394c
   8116  394c				   .skipL0328
   8117  394c				   .
   8118  394c							; 
   8119  394c
   8120  394c				   .L0329		;  asm
   8121  394c
   8122  394c		       a9 04		      lda	#4
   8123  394e
   8124  394e		       2c 80 02 	      bit	SWCHA
   8125  3951
   8126  3951		       f0 1d		      BEQ	.GoLeft_2
   8127  3953
   8128  3953		       a9 08		      lda	#8
   8129  3955
   8130  3955		       2c 80 02 	      bit	SWCHA
   8131  3958
   8132  3958		       f0 66		      BEQ	.GoRight_2
   8133  395a
   8134  395a				   .L0330		;  Player2Counter_Sprite = 0 :  goto PlayerStand bank7
   8135  395a
   8136  395a		       a9 00		      LDA	#0
   8137  395c		       85 eb		      STA	Player2Counter_Sprite
   8138  395e		       85 d1		      sta	temp7
   8139  3960		       a9 cf		      lda	#>(.PlayerStand-1)
   8140  3962		       48		      pha
   8141  3963		       a9 ff		      lda	#<(.PlayerStand-1)
   8142  3965		       48		      pha
   8143  3966		       a5 d1		      lda	temp7
   8144  3968		       48		      pha
   8145  3969		       8a		      txa
   8146  396a		       48		      pha
   8147  396b		       a2 07		      ldx	#7
   8148  396d		       4c eb ff 	      jmp	BS_jsr
   8149  3970				   .
   8150  3970							; 
   8151  3970
   8152  3970				   .GoLeft_2
   8153  3970							; GoLeft_2
   8154  3970
   8155  3970				   .L0331		;  if !w{5}  &&  PowerUp_Counter > 0  &&  PowerUp_Type = 3 then COLUP0 = $0e :  goto Inversed_Right2
   8156  3970
   8157  3970		       a5 ed		      LDA	w
   8158  3972		       29 20		      AND	#32
   8159  3974		       d0 13		      BNE	.skipL0331
   8160  3976				   .condpart149
   8161  3976		       a9 00		      LDA	#0
   8162  3978		       c5 ef		      CMP	PowerUp_Counter
   8163  397a		       b0 0d		      BCS	.skip149then
   8164  397c				   .condpart150
   8165  397c		       a5 81		      LDA	PowerUp_Type
   8166  397e		       c9 03		      CMP	#3
   8167  3980		       d0 07		      BNE	.skip150then
   8168  3982				   .condpart151
   8169  3982		       a9 0e		      LDA	#$0e
   8170  3984		       85 06		      STA	COLUP0
   8171  3986		       4c d9 59 	      jmp	.Inversed_Right2
   8172  3989
   8173  3989				   .skip150then
   8174  3989				   .skip149then
   8175  3989				   .skipL0331
   8176  3989				   .Inversed_Left2
   8177  3989							; Inversed_Left2
   8178  3989
   8179  3989				   .L0332		;  asm
   8180  3989
   8181  3989		       a5 dd		      LDA	Reaper2_X
   8182  398b
   8183  398b		       c9 15		      CMP	#21
   8184  398d
   8185  398d		       90 18		      BCC	.skipL0243_2
   8186  398f
   8187  398f		       38		      SEC
   8188  3990
   8189  3990		       e9 04		      SBC	#4
   8190  3992
   8191  3992		       85 dd		      STA	Reaper2_X
   8192  3994
   8193  3994		       a5 eb		      LDA	Player2Counter_Sprite
   8194  3996
   8195  3996		       18		      CLC
   8196  3997
   8197  3997		       69 02		      ADC	#2
   8198  3999
   8199  3999		       c9 37		      CMP	#55
   8200  399b
   8201  399b		       90 02		      BCC	.skipL0244_2
   8202  399d
   8203  399d		       a9 00		      LDA	#0
   8204  399f
   8205  399f				   .skipL0244_2
   8206  399f
   8207  399f
   8208  399f
   8209  399f		       85 eb		      STA	Player2Counter_Sprite
   8210  39a1
   8211  39a1		       a5 db		      LDA	e
   8212  39a3
   8213  39a3		       09 08		      ORA	#8
   8214  39a5
   8215  39a5		       85 db		      STA	e
   8216  39a7
   8217  39a7				   .skipL0243_2
   8218  39a7
   8219  39a7		       a5 eb		      LDA	Player2Counter_Sprite
   8220  39a9
   8221  39a9
   8222  39a9
   8223  39a9		       4a		      lsr
   8224  39aa
   8225  39aa		       4a		      lsr
   8226  39ab
   8227  39ab		       4a		      lsr
   8228  39ac
   8229  39ac		       85 ce		      STA	temp4
   8230  39ae
   8231  39ae				   .
   8232  39ae							; 
   8233  39ae
   8234  39ae				   .L0333		;  goto Move_Player bank7
   8235  39ae
   8236  39ae		       85 d1		      sta	temp7
   8237  39b0		       a9 d0		      lda	#>(.Move_Player-1)
   8238  39b2		       48		      pha
   8239  39b3		       a9 47		      lda	#<(.Move_Player-1)
   8240  39b5		       48		      pha
   8241  39b6		       a5 d1		      lda	temp7
   8242  39b8		       48		      pha
   8243  39b9		       8a		      txa
   8244  39ba		       48		      pha
   8245  39bb		       a2 07		      ldx	#7
   8246  39bd		       4c eb ff 	      jmp	BS_jsr
   8247  39c0				   .
   8248  39c0							; 
   8249  39c0
   8250  39c0				   .GoRight_2
   8251  39c0							; GoRight_2
   8252  39c0
   8253  39c0				   .L0334		;  if !w{5}  &&  PowerUp_Counter > 0  &&  PowerUp_Type = 3 then COLUP0 = $0e :  goto Inversed_Left2
   8254  39c0
   8255  39c0		       a5 ed		      LDA	w
   8256  39c2		       29 20		      AND	#32
   8257  39c4		       d0 13		      BNE	.skipL0334
   8258  39c6				   .condpart152
   8259  39c6		       a9 00		      LDA	#0
   8260  39c8		       c5 ef		      CMP	PowerUp_Counter
   8261  39ca		       b0 0d		      BCS	.skip152then
   8262  39cc				   .condpart153
   8263  39cc		       a5 81		      LDA	PowerUp_Type
   8264  39ce		       c9 03		      CMP	#3
   8265  39d0		       d0 07		      BNE	.skip153then
   8266  39d2				   .condpart154
   8267  39d2		       a9 0e		      LDA	#$0e
   8268  39d4		       85 06		      STA	COLUP0
   8269  39d6		       4c 89 59 	      jmp	.Inversed_Left2
   8270  39d9
   8271  39d9				   .skip153then
   8272  39d9				   .skip152then
   8273  39d9				   .skipL0334
   8274  39d9				   .Inversed_Right2
   8275  39d9							; Inversed_Right2
   8276  39d9
   8277  39d9				   .L0335		;  asm
   8278  39d9
   8279  39d9		       a5 dd		      LDA	Reaper2_X
   8280  39db
   8281  39db		       c9 84		      CMP	#132
   8282  39dd
   8283  39dd		       b0 18		      BCS	.skipL0247_2
   8284  39df
   8285  39df		       18		      CLC
   8286  39e0
   8287  39e0		       69 04		      ADC	#4
   8288  39e2
   8289  39e2		       85 dd		      STA	Reaper2_X
   8290  39e4
   8291  39e4		       a5 eb		      LDA	Player2Counter_Sprite
   8292  39e6
   8293  39e6		       18		      CLC
   8294  39e7
   8295  39e7		       69 02		      ADC	#2
   8296  39e9
   8297  39e9
   8298  39e9
   8299  39e9		       c9 37		      CMP	#55
   8300  39eb
   8301  39eb		       90 02		      BCC	.skipL0248_2
   8302  39ed
   8303  39ed		       a9 00		      LDA	#0
   8304  39ef
   8305  39ef				   .skipL0248_2
   8306  39ef
   8307  39ef
   8308  39ef
   8309  39ef
   8310  39ef
   8311  39ef		       85 eb		      STA	Player2Counter_Sprite
   8312  39f1
   8313  39f1		       a5 db		      LDA	e
   8314  39f3
   8315  39f3		       29 f7		      AND	#247
   8316  39f5
   8317  39f5		       85 db		      STA	e
   8318  39f7
   8319  39f7				   .skipL0247_2
   8320  39f7
   8321  39f7		       a5 eb		      LDA	Player2Counter_Sprite
   8322  39f9
   8323  39f9		       4a		      lsr
   8324  39fa
   8325  39fa		       4a		      lsr
   8326  39fb
   8327  39fb		       4a		      lsr
   8328  39fc
   8329  39fc		       85 ce		      STA	temp4
   8330  39fe
   8331  39fe				   .
   8332  39fe							; 
   8333  39fe
   8334  39fe				   .L0336		;  goto Move_Player bank7
   8335  39fe
   8336  39fe		       85 d1		      sta	temp7
   8337  3a00		       a9 d0		      lda	#>(.Move_Player-1)
   8338  3a02		       48		      pha
   8339  3a03		       a9 47		      lda	#<(.Move_Player-1)
   8340  3a05		       48		      pha
   8341  3a06		       a5 d1		      lda	temp7
   8342  3a08		       48		      pha
   8343  3a09		       8a		      txa
   8344  3a0a		       48		      pha
   8345  3a0b		       a2 07		      ldx	#7
   8346  3a0d		       4c eb ff 	      jmp	BS_jsr
   8347  3a10				   .Continue_2
   8348  3a10							; Continue_2
   8349  3a10
   8350  3a10				   .L0337		;  if s{7} then goto PlayerDone bank7
   8351  3a10
   8352  3a10		       24 e9		      BIT	s
   8353  3a12		       10 12		      BPL	.skipL0337
   8354  3a14				   .condpart155
   8355  3a14		       85 d1		      sta	temp7
   8356  3a16		       a9 d9		      lda	#>(.PlayerDone-1)
   8357  3a18		       48		      pha
   8358  3a19		       a9 b1		      lda	#<(.PlayerDone-1)
   8359  3a1b		       48		      pha
   8360  3a1c		       a5 d1		      lda	temp7
   8361  3a1e		       48		      pha
   8362  3a1f		       8a		      txa
   8363  3a20		       48		      pha
   8364  3a21		       a2 07		      ldx	#7
   8365  3a23		       4c eb ff 	      jmp	BS_jsr
   8366  3a26				   .skipL0337
   8367  3a26				   .L0338		;  if e{7} then goto Attack_2_Dash
   8368  3a26
   8369  3a26		       24 db		      BIT	e
   8370  3a28		       10 03		      BPL	.skipL0338
   8371  3a2a				   .condpart156
   8372  3a2a		       4c 92 5d 	      jmp	.Attack_2_Dash
   8373  3a2d
   8374  3a2d				   .skipL0338
   8375  3a2d				   .
   8376  3a2d							; 
   8377  3a2d
   8378  3a2d				   .L0339		;  if !joy1down  &&  o{6} then goto Attack_2
   8379  3a2d
   8380  3a2d		       a9 02		      lda	#2
   8381  3a2f		       2c 80 02 	      bit	SWCHA
   8382  3a32		       f0 07		      BEQ	.skipL0339
   8383  3a34				   .condpart157
   8384  3a34		       24 e5		      BIT	o
   8385  3a36		       50 03		      BVC	.skip157then
   8386  3a38				   .condpart158
   8387  3a38		       4c 80 5c 	      jmp	.Attack_2
   8388  3a3b
   8389  3a3b				   .skip157then
   8390  3a3b				   .skipL0339
   8391  3a3b				   .
   8392  3a3b							; 
   8393  3a3b
   8394  3a3b				   .Attack_Shoot_Wait_2
   8395  3a3b							; Attack_Shoot_Wait_2
   8396  3a3b
   8397  3a3b				   .L0340		;  player0y = Reaper2_Y + 7
   8398  3a3b
   8399  3a3b		       a5 de		      LDA	Reaper2_Y
   8400  3a3d		       18		      CLC
   8401  3a3e		       69 07		      ADC	#7
   8402  3a40		       85 8d		      STA	player0y
   8403  3a42				   .L0341		;  if e{4} then goto PlayerShoot2 bank7 else goto PlayerShoot1 bank7
   8404  3a42
   8405  3a42		       a5 db		      LDA	e
   8406  3a44		       29 10		      AND	#16
   8407  3a46		       f0 15		      BEQ	.skipL0341
   8408  3a48				   .condpart159
   8409  3a48		       85 d1		      sta	temp7
   8410  3a4a		       a9 d1		      lda	#>(.PlayerShoot2-1)
   8411  3a4c		       48		      pha
   8412  3a4d		       a9 0d		      lda	#<(.PlayerShoot2-1)
   8413  3a4f		       48		      pha
   8414  3a50		       a5 d1		      lda	temp7
   8415  3a52		       48		      pha
   8416  3a53		       8a		      txa
   8417  3a54		       48		      pha
   8418  3a55		       a2 07		      ldx	#7
   8419  3a57		       4c eb ff 	      jmp	BS_jsr
   8420  3a5a		       4c 6f 5a 	      jmp	.skipelse11
   8421  3a5d				   .skipL0341
   8422  3a5d		       85 d1		      sta	temp7
   8423  3a5f		       a9 d0		      lda	#>(.PlayerShoot1-1)
   8424  3a61		       48		      pha
   8425  3a62		       a9 fe		      lda	#<(.PlayerShoot1-1)
   8426  3a64		       48		      pha
   8427  3a65		       a5 d1		      lda	temp7
   8428  3a67		       48		      pha
   8429  3a68		       8a		      txa
   8430  3a69		       48		      pha
   8431  3a6a		       a2 07		      ldx	#7
   8432  3a6c		       4c eb ff 	      jmp	BS_jsr
   8433  3a6f				   .skipelse11
   8434  3a6f				   .
   8435  3a6f							; 
   8436  3a6f
   8437  3a6f				   .JumpThings_2
   8438  3a6f							; JumpThings_2
   8439  3a6f
   8440  3a6f				   .L0342		;  asm
   8441  3a6f
   8442  3a6f		       a5 ed		      LDA	w
   8443  3a71
   8444  3a71		       29 20		      AND	#32
   8445  3a73
   8446  3a73		       d0 38		      BNE	.No_Inverse_2
   8447  3a75
   8448  3a75		       a5 ef		      LDA	PowerUp_Counter
   8449  3a77
   8450  3a77		       c9 00		      CMP	#0
   8451  3a79
   8452  3a79		       f0 32		      BEQ	.No_Inverse_2
   8453  3a7b
   8454  3a7b		       a9 03		      LDA	#3
   8455  3a7d
   8456  3a7d		       c5 81		      CMP	PowerUp_Type
   8457  3a7f
   8458  3a7f		       d0 2c		      BNE	.No_Inverse_2
   8459  3a81
   8460  3a81				   .L0343		;  COLUP0 = $0e
   8461  3a81
   8462  3a81		       a9 0e		      LDA	#$0e
   8463  3a83		       85 06		      STA	COLUP0
   8464  3a85				   .L0344		;  asm
   8465  3a85
   8466  3a85		       a9 08		      lda	#8
   8467  3a87
   8468  3a87		       2c 80 02 	      bit	SWCHA
   8469  3a8a
   8470  3a8a		       d0 0c		      BNE	.skipL0365_3
   8471  3a8c
   8472  3a8c		       a5 dd		      LDA	Reaper2_X
   8473  3a8e
   8474  3a8e		       c9 15		      CMP	#21
   8475  3a90
   8476  3a90		       90 06		      BCC	.skipL0365_3
   8477  3a92
   8478  3a92		       38		      SEC
   8479  3a93
   8480  3a93		       e9 02		      SBC	#2
   8481  3a95
   8482  3a95		       4c a8 5a 	      jmp	.skipL0366_3
   8483  3a98
   8484  3a98				   .skipL0365_3
   8485  3a98
   8486  3a98		       a9 04		      lda	#4
   8487  3a9a
   8488  3a9a		       2c 80 02 	      bit	SWCHA
   8489  3a9d
   8490  3a9d		       d0 0b		      BNE	.skipL0366_38
   8491  3a9f
   8492  3a9f		       a5 dd		      LDA	Reaper2_X
   8493  3aa1
   8494  3aa1		       c9 84		      CMP	#132
   8495  3aa3
   8496  3aa3		       b0 05		      BCS	.skipL0366_38
   8497  3aa5
   8498  3aa5		       18		      CLC
   8499  3aa6
   8500  3aa6		       69 02		      ADC	#2
   8501  3aa8
   8502  3aa8				   .skipL0366_3
   8503  3aa8
   8504  3aa8		       85 dd		      STA	Reaper2_X
   8505  3aaa
   8506  3aaa				   .skipL0366_38
   8507  3aaa
   8508  3aaa				   .
   8509  3aaa							; 
   8510  3aaa
   8511  3aaa				   .L0345		;  goto skipL0366_17
   8512  3aaa
   8513  3aaa		       4c d2 5a 	      jmp	.skipL0366_17
   8514  3aad
   8515  3aad				   .No_Inverse_2
   8516  3aad							; No_Inverse_2
   8517  3aad
   8518  3aad				   .L0346		;  asm
   8519  3aad
   8520  3aad		       a9 04		      lda	#4
   8521  3aaf
   8522  3aaf		       2c 80 02 	      bit	SWCHA
   8523  3ab2
   8524  3ab2		       d0 0c		      BNE	.skipL0365_1
   8525  3ab4
   8526  3ab4		       a5 dd		      LDA	Reaper2_X
   8527  3ab6
   8528  3ab6		       c9 15		      CMP	#21
   8529  3ab8
   8530  3ab8		       90 06		      BCC	.skipL0365_1
   8531  3aba
   8532  3aba		       38		      SEC
   8533  3abb
   8534  3abb		       e9 02		      SBC	#2
   8535  3abd
   8536  3abd		       4c d0 5a 	      jmp	.skipL0366_1
   8537  3ac0
   8538  3ac0				   .skipL0365_1
   8539  3ac0
   8540  3ac0		       a9 08		      lda	#8
   8541  3ac2
   8542  3ac2		       2c 80 02 	      bit	SWCHA
   8543  3ac5
   8544  3ac5		       d0 0b		      BNE	.skipL0366_17
   8545  3ac7
   8546  3ac7		       a5 dd		      LDA	Reaper2_X
   8547  3ac9
   8548  3ac9		       c9 84		      CMP	#132
   8549  3acb
   8550  3acb		       b0 05		      BCS	.skipL0366_17
   8551  3acd
   8552  3acd		       18		      CLC
   8553  3ace
   8554  3ace		       69 02		      ADC	#2
   8555  3ad0
   8556  3ad0				   .skipL0366_1
   8557  3ad0
   8558  3ad0		       85 dd		      STA	Reaper2_X
   8559  3ad2
   8560  3ad2				   .skipL0366_17
   8561  3ad2
   8562  3ad2
   8563  3ad2
   8564  3ad2				   .
   8565  3ad2							; 
   8566  3ad2
   8567  3ad2				   .L0347		;  if s{6}  &&  Player2Counter_1 > 10 then COLUP0 = $1e :  AUDV1 = 11 :  AUDC1 = 14 :	AUDF1 = 3
   8568  3ad2
   8569  3ad2		       24 e9		      BIT	s
   8570  3ad4		       50 16		      BVC	.skipL0347
   8571  3ad6				   .condpart160
   8572  3ad6		       a9 0a		      LDA	#10
   8573  3ad8		       c5 e6		      CMP	Player2Counter_1
   8574  3ada		       b0 10		      BCS	.skip160then
   8575  3adc				   .condpart161
   8576  3adc		       a9 1e		      LDA	#$1e
   8577  3ade		       85 06		      STA	COLUP0
   8578  3ae0		       a9 0b		      LDA	#11
   8579  3ae2		       85 1a		      STA	AUDV1
   8580  3ae4		       a9 0e		      LDA	#14
   8581  3ae6		       85 16		      STA	AUDC1
   8582  3ae8		       a9 03		      LDA	#3
   8583  3aea		       85 18		      STA	AUDF1
   8584  3aec				   .skip160then
   8585  3aec				   .skipL0347
   8586  3aec				   .L0348		;  if !joy1fire then o{6}  = 0 :  goto JustFall_2
   8587  3aec
   8588  3aec		       24 0d		      bit	INPT5
   8589  3aee		       10 09		      BPL	.skipL0348
   8590  3af0				   .condpart162
   8591  3af0		       a5 e5		      LDA	o
   8592  3af2		       29 bf		      AND	#191
   8593  3af4		       85 e5		      STA	o
   8594  3af6		       4c 3e 5c 	      jmp	.JustFall_2
   8595  3af9
   8596  3af9				   .skipL0348
   8597  3af9				   .L0349		;  o{6}  = 1
   8598  3af9
   8599  3af9		       a5 e5		      LDA	o
   8600  3afb		       09 40		      ORA	#64
   8601  3afd		       85 e5		      STA	o
   8602  3aff				   .
   8603  3aff							; 
   8604  3aff
   8605  3aff				   .L0350		;  if joy1down then goto NoSpin_2
   8606  3aff
   8607  3aff		       a9 02		      lda	#2
   8608  3b01		       2c 80 02 	      bit	SWCHA
   8609  3b04		       d0 03		      BNE	.skipL0350
   8610  3b06				   .condpart163
   8611  3b06		       4c 04 5c 	      jmp	.NoSpin_2
   8612  3b09
   8613  3b09				   .skipL0350
   8614  3b09				   .
   8615  3b09							; 
   8616  3b09
   8617  3b09				   .
   8618  3b09							; 
   8619  3b09
   8620  3b09				   .L0351		;  s{6} = 0  :  AUDV1 = 9 :  AUDC1 = 6 :  AUDF1 = 6
   8621  3b09
   8622  3b09		       a5 e9		      LDA	s
   8623  3b0b		       29 bf		      AND	#191
   8624  3b0d		       85 e9		      STA	s
   8625  3b0f		       a9 09		      LDA	#9
   8626  3b11		       85 1a		      STA	AUDV1
   8627  3b13		       a9 06		      LDA	#6
   8628  3b15		       85 16		      STA	AUDC1
   8629  3b17		       85 18		      STA	AUDF1
   8630  3b19				   .
   8631  3b19							; 
   8632  3b19
   8633  3b19				   .L0352		;  asm
   8634  3b19
   8635  3b19		       a5 eb		      LDA	Player2Counter_Sprite
   8636  3b1b
   8637  3b1b		       c9 1f		      CMP	#31
   8638  3b1d
   8639  3b1d		       b0 06		      BCS	.skipL0372_2
   8640  3b1f
   8641  3b1f		       18		      CLC
   8642  3b20
   8643  3b20		       69 04		      ADC	#4
   8644  3b22
   8645  3b22		       4c 27 5b 	      jmp	.skipelse20_2
   8646  3b25
   8647  3b25				   .skipL0372_2
   8648  3b25
   8649  3b25		       a9 00		      LDA	#0
   8650  3b27
   8651  3b27				   .skipelse20_2
   8652  3b27
   8653  3b27		       85 eb		      STA	Player2Counter_Sprite
   8654  3b29
   8655  3b29
   8656  3b29
   8657  3b29		       4a		      lsr
   8658  3b2a
   8659  3b2a		       4a		      lsr
   8660  3b2b
   8661  3b2b		       4a		      lsr
   8662  3b2c
   8663  3b2c		       85 ce		      STA	temp4
   8664  3b2e
   8665  3b2e				   .
   8666  3b2e							; 
   8667  3b2e
   8668  3b2e				   .
   8669  3b2e							; 
   8670  3b2e
   8671  3b2e				   .L0353		;  Reaper2_Y = Reaper2_Y - 4
   8672  3b2e
   8673  3b2e		       a5 de		      LDA	Reaper2_Y
   8674  3b30		       38		      SEC
   8675  3b31		       e9 04		      SBC	#4
   8676  3b33		       85 de		      STA	Reaper2_Y
   8677  3b35				   .L0354		;  if e{3} then goto E3IS1
   8678  3b35
   8679  3b35		       a5 db		      LDA	e
   8680  3b37		       29 08		      AND	#8
   8681  3b39		       f0 03		      BEQ	.skipL0354
   8682  3b3b				   .condpart164
   8683  3b3b		       4c ce 5b 	      jmp	.E3IS1
   8684  3b3e
   8685  3b3e				   .skipL0354
   8686  3b3e				   .L0355		;  asm
   8687  3b3e
   8688  3b3e		       a6 ce		      LDX	temp4
   8689  3b40
   8690  3b40		       e0 03		      CPX	#3
   8691  3b42
   8692  3b42		       d0 24		      BNE	.temp4_2Q
   8693  3b44
   8694  3b44		       a5 dd		      LDA	Reaper2_X
   8695  3b46
   8696  3b46		       85 80		      STA	missile0x
   8697  3b48
   8698  3b48				   .Sonic_3Q
   8699  3b48
   8700  3b48		       a5 de		      LDA	Reaper2_Y
   8701  3b4a
   8702  3b4a		       18		      CLC
   8703  3b4b
   8704  3b4b		       69 06		      ADC	#6
   8705  3b4d
   8706  3b4d		       85 8a		      STA	missile0y
   8707  3b4f
   8708  3b4f		       69 01		      ADC	#1
   8709  3b51
   8710  3b51		       85 8d		      STA	player0y
   8711  3b53
   8712  3b53
   8713  3b53
   8714  3b53		       a9 20		      LDA	#$20
   8715  3b55
   8716  3b55		       85 04		      STA	NUSIZ0
   8717  3b57
   8718  3b57		       85 d1		      sta	temp7
   8719  3b59
   8720  3b59		       a9 d2		      lda	#>(.Sonic_Attack1-1)
   8721  3b5b
   8722  3b5b		       48		      pha
   8723  3b5c
   8724  3b5c		       a9 6b		      lda	#<(.Sonic_Attack1-1)
   8725  3b5e
   8726  3b5e		       48		      pha
   8727  3b5f
   8728  3b5f		       a5 d1		      lda	temp7
   8729  3b61
   8730  3b61		       48		      pha
   8731  3b62
   8732  3b62
   8733  3b62
   8734  3b62		       48		      pha
   8735  3b63
   8736  3b63		       a2 07		      ldx	#7
   8737  3b65
   8738  3b65		       4c eb ff 	      jmp	BS_jsr
   8739  3b68
   8740  3b68				   .temp4_2Q
   8741  3b68
   8742  3b68		       e0 02		      CPX	#2
   8743  3b6a
   8744  3b6a		       d0 1f		      BNE	.temp4_1Q
   8745  3b6c
   8746  3b6c		       a5 84		      LDA	player0x
   8747  3b6e
   8748  3b6e		       18		      CLC
   8749  3b6f
   8750  3b6f		       69 08		      ADC	#8
   8751  3b71
   8752  3b71		       85 80		      STA	missile0x
   8753  3b73
   8754  3b73				   .Sonic_2Q
   8755  3b73
   8756  3b73
   8757  3b73
   8758  3b73		       a5 8d		      LDA	player0y
   8759  3b75
   8760  3b75		       38		      SEC
   8761  3b76
   8762  3b76		       e9 08		      SBC	#8
   8763  3b78
   8764  3b78		       85 8a		      STA	missile0y
   8765  3b7a
   8766  3b7a		       85 d1		      sta	temp7
   8767  3b7c
   8768  3b7c		       a9 d2		      lda	#>(.Sonic_Attack2-1)
   8769  3b7e
   8770  3b7e		       48		      pha
   8771  3b7f
   8772  3b7f		       a9 7a		      lda	#<(.Sonic_Attack2-1)
   8773  3b81
   8774  3b81		       48		      pha
   8775  3b82
   8776  3b82		       a5 d1		      lda	temp7
   8777  3b84
   8778  3b84		       48		      pha
   8779  3b85
   8780  3b85
   8781  3b85
   8782  3b85		       48		      pha
   8783  3b86
   8784  3b86		       a2 07		      ldx	#7
   8785  3b88
   8786  3b88		       4c eb ff 	      jmp	BS_jsr
   8787  3b8b
   8788  3b8b				   .temp4_1Q
   8789  3b8b
   8790  3b8b		       e0 01		      CPX	#1
   8791  3b8d
   8792  3b8d		       d0 20		      BNE	.temp4_0Q
   8793  3b8f
   8794  3b8f		       a5 dd		      LDA	Reaper2_X
   8795  3b91
   8796  3b91
   8797  3b91
   8798  3b91		       85 80		      STA	missile0x
   8799  3b93
   8800  3b93				   .Sonic_1Q
   8801  3b93
   8802  3b93		       a5 de		      LDA	Reaper2_Y
   8803  3b95
   8804  3b95		       38		      SEC
   8805  3b96
   8806  3b96		       e9 15		      SBC	#21
   8807  3b98
   8808  3b98		       85 8a		      STA	missile0y
   8809  3b9a
   8810  3b9a		       a9 20		      LDA	#$20
   8811  3b9c
   8812  3b9c		       85 04		      STA	NUSIZ0
   8813  3b9e
   8814  3b9e		       85 d1		      sta	temp7
   8815  3ba0
   8816  3ba0		       a9 d2		      lda	#>(.Sonic_Attack3-1)
   8817  3ba2
   8818  3ba2		       48		      pha
   8819  3ba3
   8820  3ba3		       a9 89		      lda	#<(.Sonic_Attack3-1)
   8821  3ba5
   8822  3ba5		       48		      pha
   8823  3ba6
   8824  3ba6		       a5 d1		      lda	temp7
   8825  3ba8
   8826  3ba8		       48		      pha
   8827  3ba9
   8828  3ba9
   8829  3ba9
   8830  3ba9		       48		      pha
   8831  3baa
   8832  3baa		       a2 07		      ldx	#7
   8833  3bac
   8834  3bac		       4c eb ff 	      jmp	BS_jsr
   8835  3baf
   8836  3baf				   .temp4_0Q
   8837  3baf
   8838  3baf		       a5 84		      LDA	player0x
   8839  3bb1
   8840  3bb1		       38		      SEC
   8841  3bb2
   8842  3bb2		       e9 07		      SBC	#7
   8843  3bb4
   8844  3bb4		       85 80		      STA	missile0x
   8845  3bb6
   8846  3bb6				   .Sonic_0Q
   8847  3bb6
   8848  3bb6
   8849  3bb6
   8850  3bb6		       a5 8d		      LDA	player0y
   8851  3bb8
   8852  3bb8		       38		      SEC
   8853  3bb9
   8854  3bb9		       e9 08		      SBC	#8
   8855  3bbb
   8856  3bbb		       85 8a		      STA	missile0y
   8857  3bbd
   8858  3bbd		       85 d1		      sta	temp7
   8859  3bbf
   8860  3bbf		       a9 d2		      lda	#>(.Sonic_Attack4-1)
   8861  3bc1
   8862  3bc1		       48		      pha
   8863  3bc2
   8864  3bc2		       a9 98		      lda	#<(.Sonic_Attack4-1)
   8865  3bc4
   8866  3bc4		       48		      pha
   8867  3bc5
   8868  3bc5		       a5 d1		      lda	temp7
   8869  3bc7
   8870  3bc7		       48		      pha
   8871  3bc8
   8872  3bc8
   8873  3bc8
   8874  3bc8		       48		      pha
   8875  3bc9
   8876  3bc9		       a2 07		      ldx	#7
   8877  3bcb
   8878  3bcb		       4c eb ff 	      jmp	BS_jsr
   8879  3bce
   8880  3bce				   .
   8881  3bce							; 
   8882  3bce
   8883  3bce				   .
   8884  3bce							; 
   8885  3bce
   8886  3bce				   .E3IS1
   8887  3bce							; E3IS1
   8888  3bce
   8889  3bce				   .L0356		;  asm
   8890  3bce
   8891  3bce		       a6 ce		      LDX	temp4
   8892  3bd0
   8893  3bd0		       e0 03		      CPX	#3
   8894  3bd2
   8895  3bd2		       d0 0a		      BNE	.temp4_2_2Q
   8896  3bd4
   8897  3bd4		       a5 dd		      LDA	Reaper2_X
   8898  3bd6
   8899  3bd6		       18		      CLC
   8900  3bd7
   8901  3bd7		       69 03		      ADC	#3
   8902  3bd9
   8903  3bd9		       85 80		      STA	missile0x
   8904  3bdb
   8905  3bdb		       4c 48 5b 	      jmp	.Sonic_3Q
   8906  3bde
   8907  3bde
   8908  3bde
   8909  3bde				   .temp4_2_2Q
   8910  3bde
   8911  3bde		       e0 02		      CPX	#2
   8912  3be0
   8913  3be0		       d0 0a		      BNE	.temp4_1_2Q
   8914  3be2
   8915  3be2		       a5 84		      LDA	player0x
   8916  3be4
   8917  3be4		       38		      SEC
   8918  3be5
   8919  3be5		       e9 07		      SBC	#7
   8920  3be7
   8921  3be7		       85 80		      STA	missile0x
   8922  3be9
   8923  3be9		       4c 73 5b 	      jmp	.Sonic_2Q
   8924  3bec
   8925  3bec
   8926  3bec
   8927  3bec
   8928  3bec
   8929  3bec				   .temp4_1_2Q
   8930  3bec
   8931  3bec		       e0 01		      CPX	#1
   8932  3bee
   8933  3bee		       d0 0a		      BNE	.temp4_0_2Q
   8934  3bf0
   8935  3bf0		       a5 dd		      LDA	Reaper2_X
   8936  3bf2
   8937  3bf2		       18		      CLC
   8938  3bf3
   8939  3bf3		       69 03		      ADC	#3
   8940  3bf5
   8941  3bf5		       85 80		      STA	missile0x
   8942  3bf7
   8943  3bf7		       4c 93 5b 	      jmp	.Sonic_1Q
   8944  3bfa
   8945  3bfa
   8946  3bfa
   8947  3bfa				   .temp4_0_2Q
   8948  3bfa
   8949  3bfa		       a5 84		      LDA	player0x
   8950  3bfc
   8951  3bfc		       18		      CLC
   8952  3bfd
   8953  3bfd		       69 08		      ADC	#8
   8954  3bff
   8955  3bff		       85 80		      STA	missile0x
   8956  3c01
   8957  3c01		       4c b6 5b 	      jmp	.Sonic_0Q
   8958  3c04
   8959  3c04
   8960  3c04
   8961  3c04				   .
   8962  3c04							; 
   8963  3c04
   8964  3c04				   .
   8965  3c04							; 
   8966  3c04
   8967  3c04				   .NoSpin_2
   8968  3c04							; NoSpin_2
   8969  3c04
   8970  3c04				   .L0357		;  asm
   8971  3c04
   8972  3c04		       a5 de		      lda	Reaper2_Y
   8973  3c06
   8974  3c06		       38		      SEC
   8975  3c07
   8976  3c07		       e9 07		      SBC	#7
   8977  3c09
   8978  3c09		       85 de		      STA	Reaper2_Y
   8979  3c0b
   8980  3c0b		       18		      CLC
   8981  3c0c
   8982  3c0c		       69 04		      ADC	#4
   8983  3c0e
   8984  3c0e		       85 8d		      STA	player0y
   8985  3c10
   8986  3c10		       38		      SEC
   8987  3c11
   8988  3c11		       e9 19		      SBC	#25
   8989  3c13
   8990  3c13		       85 8a		      STA	missile0y
   8991  3c15
   8992  3c15		       a9 00		      LDA	#0
   8993  3c17
   8994  3c17		       85 eb		      STA	Player2Counter_Sprite
   8995  3c19
   8996  3c19		       85 e8		      STA	Player2Counter_Jump
   8997  3c1b
   8998  3c1b				   .L0358		;  s{6} = 1 :	Player2Counter_1 = Player2Counter_1 + 4 :  missile0x = Reaper2_X  :  goto ReaperStomp bank7
   8999  3c1b
   9000  3c1b		       a5 e9		      LDA	s
   9001  3c1d		       09 40		      ORA	#64
   9002  3c1f		       85 e9		      STA	s
   9003  3c21		       a5 e6		      LDA	Player2Counter_1
   9004  3c23		       18		      CLC
   9005  3c24		       69 04		      ADC	#4
   9006  3c26		       85 e6		      STA	Player2Counter_1
   9007  3c28		       a5 dd		      LDA	Reaper2_X
   9008  3c2a		       85 80		      STA	missile0x
   9009  3c2c		       85 d1		      sta	temp7
   9010  3c2e		       a9 d1		      lda	#>(.ReaperStomp-1)
   9011  3c30		       48		      pha
   9012  3c31		       a9 3a		      lda	#<(.ReaperStomp-1)
   9013  3c33		       48		      pha
   9014  3c34		       a5 d1		      lda	temp7
   9015  3c36		       48		      pha
   9016  3c37		       8a		      txa
   9017  3c38		       48		      pha
   9018  3c39		       a2 07		      ldx	#7
   9019  3c3b		       4c eb ff 	      jmp	BS_jsr
   9020  3c3e				   .JustFall_2
   9021  3c3e							; JustFall_2
   9022  3c3e
   9023  3c3e				   .L0359		;  s{6} = 0  :  Player2Counter_Sprite = 0
   9024  3c3e
   9025  3c3e		       a5 e9		      LDA	s
   9026  3c40		       29 bf		      AND	#191
   9027  3c42		       85 e9		      STA	s
   9028  3c44		       a9 00		      LDA	#0
   9029  3c46		       85 eb		      STA	Player2Counter_Sprite
   9030  3c48				   .L0360		;  asm
   9031  3c48
   9032  3c48		       a5 de		      LDA	Reaper2_Y
   9033  3c4a
   9034  3c4a		       18		      CLC
   9035  3c4b
   9036  3c4b		       69 07		      ADC	#7
   9037  3c4d
   9038  3c4d		       85 8d		      STA	player0y
   9039  3c4f
   9040  3c4f		       38		      SEC
   9041  3c50
   9042  3c50		       a2 00		      LDX	#0
   9043  3c52
   9044  3c52		       e4 e8		      CPX	Player2Counter_Jump
   9045  3c54
   9046  3c54		       b0 15		      BCS	.skipL0270_2
   9047  3c56
   9048  3c56		       e9 02		      SBC	#2
   9049  3c58
   9050  3c58		       85 de		      STA	Reaper2_Y
   9051  3c5a
   9052  3c5a		       85 d1		      sta	temp7
   9053  3c5c
   9054  3c5c		       a9 d1		      lda	#>(.Common_Jump_Up-1)
   9055  3c5e
   9056  3c5e		       48		      pha
   9057  3c5f
   9058  3c5f		       a9 1c		      lda	#<(.Common_Jump_Up-1)
   9059  3c61
   9060  3c61		       48		      pha
   9061  3c62
   9062  3c62		       a5 d1		      lda	temp7
   9063  3c64
   9064  3c64		       48		      pha
   9065  3c65
   9066  3c65
   9067  3c65
   9068  3c65		       48		      pha
   9069  3c66
   9070  3c66		       a2 07		      ldx	#7
   9071  3c68
   9072  3c68		       4c eb ff 	      jmp	BS_jsr
   9073  3c6b
   9074  3c6b				   .skipL0270_2
   9075  3c6b
   9076  3c6b		       e9 0c		      SBC	#12
   9077  3c6d
   9078  3c6d		       85 de		      STA	Reaper2_Y
   9079  3c6f
   9080  3c6f		       85 d1		      sta	temp7
   9081  3c71
   9082  3c71		       a9 d1		      lda	#>(.Common_Jump_Down-1)
   9083  3c73
   9084  3c73		       48		      pha
   9085  3c74
   9086  3c74		       a9 2b		      lda	#<(.Common_Jump_Down-1)
   9087  3c76
   9088  3c76		       48		      pha
   9089  3c77
   9090  3c77		       a5 d1		      lda	temp7
   9091  3c79
   9092  3c79		       48		      pha
   9093  3c7a
   9094  3c7a
   9095  3c7a
   9096  3c7a		       48		      pha
   9097  3c7b
   9098  3c7b		       a2 07		      ldx	#7
   9099  3c7d
   9100  3c7d		       4c eb ff 	      jmp	BS_jsr
   9101  3c80
   9102  3c80				   .
   9103  3c80							; 
   9104  3c80
   9105  3c80				   .
   9106  3c80							; 
   9107  3c80
   9108  3c80				   .
   9109  3c80							; 
   9110  3c80
   9111  3c80				   .Attack_2
   9112  3c80							; Attack_2
   9113  3c80
   9114  3c80				   .L0361		;  asm
   9115  3c80
   9116  3c80		       a9 02		      lda	#2
   9117  3c82
   9118  3c82		       2c 80 02 	      bit	SWCHA
   9119  3c85
   9120  3c85		       f0 7e		      BEQ	.Attack_2_Shoot
   9121  3c87
   9122  3c87				   .L0362		;  o{6}  = 1 :  AUDV1 = 9 :  AUDC1 = 6 :  AUDF1 = 6
   9123  3c87
   9124  3c87		       a5 e5		      LDA	o
   9125  3c89		       09 40		      ORA	#64
   9126  3c8b		       85 e5		      STA	o
   9127  3c8d		       a9 09		      LDA	#9
   9128  3c8f		       85 1a		      STA	AUDV1
   9129  3c91		       a9 06		      LDA	#6
   9130  3c93		       85 16		      STA	AUDC1
   9131  3c95		       85 18		      STA	AUDF1
   9132  3c97				   .L0363		;  asm
   9133  3c97
   9134  3c97		       a2 07		      ldx	#7
   9135  3c99
   9136  3c99		       a5 e6		      LDA	Player2Counter_1
   9137  3c9b
   9138  3c9b		       c9 1a		      CMP	#26
   9139  3c9d
   9140  3c9d		       b0 06		      BCS	.skipL0281_2
   9141  3c9f
   9142  3c9f		       18		      CLC
   9143  3ca0
   9144  3ca0		       69 04		      ADC	#4
   9145  3ca2
   9146  3ca2		       4c ad 5c 	      jmp	.skipelse14_2
   9147  3ca5
   9148  3ca5				   .skipL0281_2
   9149  3ca5
   9150  3ca5		       a5 e5		      LDA	o
   9151  3ca7
   9152  3ca7		       29 bf		      AND	#191
   9153  3ca9
   9154  3ca9		       85 e5		      STA	o
   9155  3cab
   9156  3cab		       a9 00		      LDA	#0
   9157  3cad
   9158  3cad				   .skipelse14_2
   9159  3cad
   9160  3cad		       85 e6		      STA	Player2Counter_1
   9161  3caf
   9162  3caf		       4a		      lsr
   9163  3cb0
   9164  3cb0		       4a		      lsr
   9165  3cb1
   9166  3cb1		       4a		      lsr
   9167  3cb2
   9168  3cb2		       85 ce		      STA	temp4
   9169  3cb4
   9170  3cb4		       c9 00		      CMP	#0
   9171  3cb6
   9172  3cb6		       d0 16		      BNE	.skipL0273_2
   9173  3cb8
   9174  3cb8		       a5 de		      LDA	Reaper2_Y
   9175  3cba
   9176  3cba		       18		      CLC
   9177  3cbb
   9178  3cbb		       69 06		      ADC	#6
   9179  3cbd
   9180  3cbd				   .GotoAttack2
   9181  3cbd
   9182  3cbd		       85 8d		      STA	player0y
   9183  3cbf
   9184  3cbf		       85 d1		      sta	temp7
   9185  3cc1
   9186  3cc1		       a9 d0		      lda	#>(.Attack_Player-1)
   9187  3cc3
   9188  3cc3		       48		      pha
   9189  3cc4
   9190  3cc4		       a9 0e		      lda	#<(.Attack_Player-1)
   9191  3cc6
   9192  3cc6		       48		      pha
   9193  3cc7
   9194  3cc7		       a5 d1		      lda	temp7
   9195  3cc9
   9196  3cc9		       48		      pha
   9197  3cca
   9198  3cca		       48		      pha
   9199  3ccb
   9200  3ccb		       4c eb ff 	      jmp	BS_jsr
   9201  3cce
   9202  3cce				   .skipL0273_2
   9203  3cce
   9204  3cce		       c9 01		      CMP	#1
   9205  3cd0
   9206  3cd0		       d0 08		      BNE	.skipL0274_2
   9207  3cd2
   9208  3cd2		       a5 de		      LDA	Reaper2_Y
   9209  3cd4
   9210  3cd4		       18		      CLC
   9211  3cd5
   9212  3cd5		       69 02		      ADC	#2
   9213  3cd7
   9214  3cd7		       4c bd 5c 	      jmp	.GotoAttack2
   9215  3cda
   9216  3cda				   .skipL0274_2
   9217  3cda
   9218  3cda		       a5 db		      LDA	e
   9219  3cdc
   9220  3cdc		       29 08		      AND	#8
   9221  3cde
   9222  3cde		       d0 08		      BNE	.skipL0275_2
   9223  3ce0
   9224  3ce0		       a5 84		      LDA	player0x
   9225  3ce2
   9226  3ce2		       18		      CLC
   9227  3ce3
   9228  3ce3		       69 08		      ADC	#8
   9229  3ce5
   9230  3ce5		       4c ed 5c 	      jmp	.skipelse22_22
   9231  3ce8
   9232  3ce8				   .skipL0275_2
   9233  3ce8
   9234  3ce8		       a5 84		      LDA	player0x
   9235  3cea
   9236  3cea		       38		      SEC
   9237  3ceb
   9238  3ceb		       e9 07		      SBC	#7
   9239  3ced
   9240  3ced				   .skipelse22_22
   9241  3ced
   9242  3ced		       85 80		      STA	missile0x
   9243  3cef
   9244  3cef				   .L0364		;  missile0y = player0y - 10
   9245  3cef
   9246  3cef		       a5 8d		      LDA	player0y
   9247  3cf1		       38		      SEC
   9248  3cf2		       e9 0a		      SBC	#10
   9249  3cf4		       85 8a		      STA	missile0y
   9250  3cf6				   .L0365		;  asm
   9251  3cf6
   9252  3cf6		       85 d1		      sta	temp7
   9253  3cf8
   9254  3cf8		       a9 d0		      lda	#>(.Attack_Player-1)
   9255  3cfa
   9256  3cfa		       48		      pha
   9257  3cfb
   9258  3cfb		       a9 0e		      lda	#<(.Attack_Player-1)
   9259  3cfd
   9260  3cfd		       48		      pha
   9261  3cfe
   9262  3cfe		       a5 d1		      lda	temp7
   9263  3d00
   9264  3d00		       48		      pha
   9265  3d01
   9266  3d01		       48		      pha
   9267  3d02
   9268  3d02		       4c eb ff 	      jmp	BS_jsr
   9269  3d05
   9270  3d05				   .
   9271  3d05							; 
   9272  3d05
   9273  3d05				   .Attack_2_Shoot
   9274  3d05							; Attack_2_Shoot
   9275  3d05
   9276  3d05				   .L0366		;  asm
   9277  3d05
   9278  3d05		       a5 de		      LDA	Reaper2_Y
   9279  3d07
   9280  3d07		       18		      CLC
   9281  3d08
   9282  3d08		       69 07		      ADC	#7
   9283  3d0a
   9284  3d0a		       85 8d		      STA	player0y
   9285  3d0c
   9286  3d0c		       38		      SEC
   9287  3d0d
   9288  3d0d		       e9 11		      SBC	#17
   9289  3d0f
   9290  3d0f		       85 e4		      STA	Shoot2_Y
   9291  3d11
   9292  3d11
   9293  3d11
   9294  3d11				   .L0367		;  Player2Counter_1 = 25 :  AUDV1 = 9 :  AUDC1 = 15 :	AUDF1 = 2
   9295  3d11
   9296  3d11		       a9 19		      LDA	#25
   9297  3d13		       85 e6		      STA	Player2Counter_1
   9298  3d15		       a9 09		      LDA	#9
   9299  3d17		       85 1a		      STA	AUDV1
   9300  3d19		       a9 0f		      LDA	#15
   9301  3d1b		       85 16		      STA	AUDC1
   9302  3d1d		       a9 02		      LDA	#2
   9303  3d1f		       85 18		      STA	AUDF1
   9304  3d21				   .L0368		;  NUSIZ0 = $20 :  o{6}  =  1 :  s{0}	= 1
   9305  3d21
   9306  3d21		       a9 20		      LDA	#$20
   9307  3d23		       85 04		      STA	NUSIZ0
   9308  3d25		       a5 e5		      LDA	o
   9309  3d27		       09 40		      ORA	#64
   9310  3d29		       85 e5		      STA	o
   9311  3d2b		       a5 e9		      LDA	s
   9312  3d2d		       09 01		      ORA	#1
   9313  3d2f		       85 e9		      STA	s
   9314  3d31				   .
   9315  3d31							; 
   9316  3d31
   9317  3d31				   .
   9318  3d31							; 
   9319  3d31
   9320  3d31				   .L0369		;  asm
   9321  3d31
   9322  3d31		       a5 db		      LDA	e
   9323  3d33
   9324  3d33		       29 08		      AND	#8
   9325  3d35
   9326  3d35		       f0 0e		      BEQ	.skipL0529_1
   9327  3d37
   9328  3d37		       a5 e9		      LDA	s
   9329  3d39
   9330  3d39		       09 08		      ORA	#8
   9331  3d3b
   9332  3d3b		       85 e9		      STA	s
   9333  3d3d
   9334  3d3d		       a5 dd		      LDA	Reaper2_X
   9335  3d3f
   9336  3d3f		       38		      SEC
   9337  3d40
   9338  3d40		       e9 01		      SBC	#1
   9339  3d42
   9340  3d42		       4c 50 5d 	      jmp	.skipelse45_1
   9341  3d45
   9342  3d45				   .skipL0529_1
   9343  3d45
   9344  3d45		       a5 e9		      LDA	s
   9345  3d47
   9346  3d47		       29 f7		      AND	#247
   9347  3d49
   9348  3d49		       85 e9		      STA	s
   9349  3d4b
   9350  3d4b		       a5 dd		      LDA	Reaper2_X
   9351  3d4d
   9352  3d4d		       18		      CLC
   9353  3d4e
   9354  3d4e		       69 07		      ADC	#7
   9355  3d50
   9356  3d50				   .skipelse45_1
   9357  3d50
   9358  3d50		       85 e3		      STA	Shoot2_X
   9359  3d52
   9360  3d52
   9361  3d52
   9362  3d52
   9363  3d52
   9364  3d52				   .
   9365  3d52							; 
   9366  3d52
   9367  3d52				   .L0370		;  if e{4} then s{4}  =  1 :  Shoot2_Y = Shoot2_Y + 3 :  goto PlayerShoot2 bank7 else s{4}  =	0 :  goto PlayerShoot1 bank7
   9368  3d52
   9369  3d52		       a5 db		      LDA	e
   9370  3d54		       29 10		      AND	#16
   9371  3d56		       f0 22		      BEQ	.skipL0370
   9372  3d58				   .condpart165
   9373  3d58		       a5 e9		      LDA	s
   9374  3d5a		       09 10		      ORA	#16
   9375  3d5c		       85 e9		      STA	s
   9376  3d5e		       a5 e4		      LDA	Shoot2_Y
   9377  3d60		       18		      CLC
   9378  3d61		       69 03		      ADC	#3
   9379  3d63		       85 e4		      STA	Shoot2_Y
   9380  3d65		       85 d1		      sta	temp7
   9381  3d67		       a9 d1		      lda	#>(.PlayerShoot2-1)
   9382  3d69		       48		      pha
   9383  3d6a		       a9 0d		      lda	#<(.PlayerShoot2-1)
   9384  3d6c		       48		      pha
   9385  3d6d		       a5 d1		      lda	temp7
   9386  3d6f		       48		      pha
   9387  3d70		       8a		      txa
   9388  3d71		       48		      pha
   9389  3d72		       a2 07		      ldx	#7
   9390  3d74		       4c eb ff 	      jmp	BS_jsr
   9391  3d77		       4c 92 5d 	      jmp	.skipelse12
   9392  3d7a				   .skipL0370
   9393  3d7a		       a5 e9		      LDA	s
   9394  3d7c		       29 ef		      AND	#239
   9395  3d7e		       85 e9		      STA	s
   9396  3d80		       85 d1		      sta	temp7
   9397  3d82		       a9 d0		      lda	#>(.PlayerShoot1-1)
   9398  3d84		       48		      pha
   9399  3d85		       a9 fe		      lda	#<(.PlayerShoot1-1)
   9400  3d87		       48		      pha
   9401  3d88		       a5 d1		      lda	temp7
   9402  3d8a		       48		      pha
   9403  3d8b		       8a		      txa
   9404  3d8c		       48		      pha
   9405  3d8d		       a2 07		      ldx	#7
   9406  3d8f		       4c eb ff 	      jmp	BS_jsr
   9407  3d92				   .skipelse12
   9408  3d92				   .
   9409  3d92							; 
   9410  3d92
   9411  3d92				   .
   9412  3d92							; 
   9413  3d92
   9414  3d92				   .
   9415  3d92							; 
   9416  3d92
   9417  3d92				   .
   9418  3d92							; 
   9419  3d92
   9420  3d92				   .Attack_2_Dash
   9421  3d92							; Attack_2_Dash
   9422  3d92
   9423  3d92				   .L0371		;  e{7}  =  1 :  AUDV1 = 9 :  AUDC1 = 3 :  AUDF1 = 4
   9424  3d92
   9425  3d92		       a5 db		      LDA	e
   9426  3d94		       09 80		      ORA	#128
   9427  3d96		       85 db		      STA	e
   9428  3d98		       a9 09		      LDA	#9
   9429  3d9a		       85 1a		      STA	AUDV1
   9430  3d9c		       a9 03		      LDA	#3
   9431  3d9e		       85 16		      STA	AUDC1
   9432  3da0		       a9 04		      LDA	#4
   9433  3da2		       85 18		      STA	AUDF1
   9434  3da4				   .L0372		;  asm
   9435  3da4
   9436  3da4		       24 0d		      bit	INPT5
   9437  3da6
   9438  3da6		       10 27		      BPL	.Skip_2
   9439  3da8
   9440  3da8		       a5 db		      LDA	e
   9441  3daa
   9442  3daa		       29 08		      AND	#8
   9443  3dac
   9444  3dac		       d0 07		      BNE	.skipL0277_2
   9445  3dae
   9446  3dae		       a9 08		      lda	#8
   9447  3db0
   9448  3db0		       2c 80 02 	      bit	SWCHA
   9449  3db3
   9450  3db3		       f0 1a		      BEQ	.Skip_2
   9451  3db5
   9452  3db5				   .skipL0277_2
   9453  3db5
   9454  3db5		       a5 db		      LDA	e
   9455  3db7
   9456  3db7		       29 08		      AND	#8
   9457  3db9
   9458  3db9		       f0 07		      BEQ	.skipL0278_2
   9459  3dbb
   9460  3dbb		       a9 04		      lda	#4
   9461  3dbd
   9462  3dbd		       2c 80 02 	      bit	SWCHA
   9463  3dc0
   9464  3dc0		       f0 0d		      BEQ	.Skip_2
   9465  3dc2
   9466  3dc2				   .skipL0278_2
   9467  3dc2
   9468  3dc2				   .
   9469  3dc2							; 
   9470  3dc2
   9471  3dc2				   .
   9472  3dc2							; 
   9473  3dc2
   9474  3dc2				   .L0373		;  e{7}  = 0 :  Player2Counter_Sprite = 0 :  goto Attack_2
   9475  3dc2
   9476  3dc2		       a5 db		      LDA	e
   9477  3dc4		       29 7f		      AND	#127
   9478  3dc6		       85 db		      STA	e
   9479  3dc8		       a9 00		      LDA	#0
   9480  3dca		       85 eb		      STA	Player2Counter_Sprite
   9481  3dcc		       4c 80 5c 	      jmp	.Attack_2
   9482  3dcf
   9483  3dcf				   .Skip_2
   9484  3dcf							; Skip_2
   9485  3dcf
   9486  3dcf				   .L0374		;  asm
   9487  3dcf
   9488  3dcf		       a9 84		      LDA	#132
   9489  3dd1
   9490  3dd1		       c5 dd		      CMP	Reaper2_X
   9491  3dd3
   9492  3dd3		       90 06		      BCC	.condpart158_2
   9493  3dd5
   9494  3dd5		       a5 dd		      LDA	Reaper2_X
   9495  3dd7
   9496  3dd7		       c9 15		      CMP	#21
   9497  3dd9
   9498  3dd9		       b0 15		      BCS	.skip48OR_2
   9499  3ddb
   9500  3ddb				   .condpart158_2
   9501  3ddb
   9502  3ddb		       a9 00		      LDA	#0
   9503  3ddd
   9504  3ddd		       85 eb		      STA	Player2Counter_Sprite
   9505  3ddf
   9506  3ddf		       85 d1		      sta	temp7
   9507  3de1
   9508  3de1		       a9 cf		      lda	#>(.PlayerStand-1)
   9509  3de3
   9510  3de3		       48		      pha
   9511  3de4
   9512  3de4		       a9 ff		      lda	#<(.PlayerStand-1)
   9513  3de6
   9514  3de6		       48		      pha
   9515  3de7
   9516  3de7		       a5 d1		      lda	temp7
   9517  3de9
   9518  3de9		       48		      pha
   9519  3dea
   9520  3dea		       48		      pha
   9521  3deb
   9522  3deb		       a2 07		      ldx	#7
   9523  3ded
   9524  3ded		       4c eb ff 	      jmp	BS_jsr
   9525  3df0
   9526  3df0				   .skip48OR_2
   9527  3df0
   9528  3df0				   .L0375		;  if e{3} then goto Dash_Left2
   9529  3df0
   9530  3df0		       a5 db		      LDA	e
   9531  3df2		       29 08		      AND	#8
   9532  3df4		       f0 03		      BEQ	.skipL0375
   9533  3df6				   .condpart166
   9534  3df6		       4c 31 5e 	      jmp	.Dash_Left2
   9535  3df9
   9536  3df9				   .skipL0375
   9537  3df9				   .L0376		;  asm
   9538  3df9
   9539  3df9		       a5 dd		      LDA	Reaper2_X
   9540  3dfb
   9541  3dfb		       c9 84		      CMP	#132
   9542  3dfd
   9543  3dfd		       b0 12		      BCS	.skipL0287_3
   9544  3dff
   9545  3dff		       18		      CLC
   9546  3e00
   9547  3e00		       69 06		      ADC	#6
   9548  3e02
   9549  3e02		       85 dd		      STA	Reaper2_X
   9550  3e04
   9551  3e04		       a5 eb		      LDA	Player2Counter_Sprite
   9552  3e06
   9553  3e06		       18		      CLC
   9554  3e07
   9555  3e07		       69 02		      ADC	#2
   9556  3e09
   9557  3e09		       c9 17		      CMP	#23
   9558  3e0b
   9559  3e0b		       90 02		      BCC	.gggg1
   9560  3e0d
   9561  3e0d		       a9 00		      LDA	#0
   9562  3e0f
   9563  3e0f				   .gggg1
   9564  3e0f
   9565  3e0f		       85 eb		      STA	Player2Counter_Sprite
   9566  3e11
   9567  3e11				   .skipL0287_3
   9568  3e11
   9569  3e11		       a5 eb		      LDA	Player2Counter_Sprite
   9570  3e13
   9571  3e13		       4a		      lsr
   9572  3e14
   9573  3e14		       4a		      lsr
   9574  3e15
   9575  3e15		       4a		      lsr
   9576  3e16
   9577  3e16		       85 ce		      STA	temp4
   9578  3e18
   9579  3e18				   .L0377		;  player0y = Reaper2_Y + 7
   9580  3e18
   9581  3e18		       a5 de		      LDA	Reaper2_Y
   9582  3e1a		       18		      CLC
   9583  3e1b		       69 07		      ADC	#7
   9584  3e1d		       85 8d		      STA	player0y
   9585  3e1f				   .L0378		;  goto Attack_Player_Dash bank7
   9586  3e1f
   9587  3e1f		       85 d1		      sta	temp7
   9588  3e21		       a9 d0		      lda	#>(.Attack_Player_Dash-1)
   9589  3e23		       48		      pha
   9590  3e24		       a9 c5		      lda	#<(.Attack_Player_Dash-1)
   9591  3e26		       48		      pha
   9592  3e27		       a5 d1		      lda	temp7
   9593  3e29		       48		      pha
   9594  3e2a		       8a		      txa
   9595  3e2b		       48		      pha
   9596  3e2c		       a2 07		      ldx	#7
   9597  3e2e		       4c eb ff 	      jmp	BS_jsr
   9598  3e31				   .
   9599  3e31							; 
   9600  3e31
   9601  3e31				   .Dash_Left2
   9602  3e31							; Dash_Left2
   9603  3e31
   9604  3e31				   .L0379		;  asm
   9605  3e31
   9606  3e31		       a5 dd		      LDA	Reaper2_X
   9607  3e33
   9608  3e33		       c9 15		      CMP	#21
   9609  3e35
   9610  3e35		       90 12		      BCC	.skipL0287_4
   9611  3e37
   9612  3e37		       38		      SEC
   9613  3e38
   9614  3e38		       e9 06		      SBC	#6
   9615  3e3a
   9616  3e3a		       85 dd		      STA	Reaper2_X
   9617  3e3c
   9618  3e3c		       a5 eb		      LDA	Player2Counter_Sprite
   9619  3e3e
   9620  3e3e		       18		      CLC
   9621  3e3f
   9622  3e3f		       69 02		      ADC	#2
   9623  3e41
   9624  3e41		       c9 17		      CMP	#23
   9625  3e43
   9626  3e43		       90 02		      BCC	.gggg2
   9627  3e45
   9628  3e45		       a9 00		      LDA	#0
   9629  3e47
   9630  3e47				   .gggg2
   9631  3e47
   9632  3e47		       85 eb		      STA	Player2Counter_Sprite
   9633  3e49
   9634  3e49				   .skipL0287_4
   9635  3e49
   9636  3e49		       a5 eb		      LDA	Player2Counter_Sprite
   9637  3e4b
   9638  3e4b		       4a		      lsr
   9639  3e4c
   9640  3e4c		       4a		      lsr
   9641  3e4d
   9642  3e4d		       4a		      lsr
   9643  3e4e
   9644  3e4e		       85 ce		      STA	temp4
   9645  3e50
   9646  3e50				   .L0380		;  player0y = Reaper2_Y + 7
   9647  3e50
   9648  3e50		       a5 de		      LDA	Reaper2_Y
   9649  3e52		       18		      CLC
   9650  3e53		       69 07		      ADC	#7
   9651  3e55		       85 8d		      STA	player0y
   9652  3e57				   .L0381		;  goto Attack_Player_Dash bank7
   9653  3e57
   9654  3e57		       85 d1		      sta	temp7
   9655  3e59		       a9 d0		      lda	#>(.Attack_Player_Dash-1)
   9656  3e5b		       48		      pha
   9657  3e5c		       a9 c5		      lda	#<(.Attack_Player_Dash-1)
   9658  3e5e		       48		      pha
   9659  3e5f		       a5 d1		      lda	temp7
   9660  3e61		       48		      pha
   9661  3e62		       8a		      txa
   9662  3e63		       48		      pha
   9663  3e64		       a2 07		      ldx	#7
   9664  3e66		       4c eb ff 	      jmp	BS_jsr
   9665  3e69				   .
   9666  3e69							; 
   9667  3e69
   9668  3e69				   .Jump_2
   9669  3e69							; Jump_2
   9670  3e69
   9671  3e69				   .L0382		;  AUDV1 = 7 :  AUDC1 = 7 :  AUDF1 = 1
   9672  3e69
   9673  3e69		       a9 07		      LDA	#7
   9674  3e6b		       85 1a		      STA	AUDV1
   9675  3e6d		       85 16		      STA	AUDC1
   9676  3e6f		       a9 01		      LDA	#1
   9677  3e71		       85 18		      STA	AUDF1
   9678  3e73				   .L0383		;  Player2Counter_Jump = 10 :	e{5} = 1
   9679  3e73
   9680  3e73		       a9 0a		      LDA	#10
   9681  3e75		       85 e8		      STA	Player2Counter_Jump
   9682  3e77		       a5 db		      LDA	e
   9683  3e79		       09 20		      ORA	#32
   9684  3e7b		       85 db		      STA	e
   9685  3e7d				   .L0384		;  player0y = Reaper2_Y + 7
   9686  3e7d
   9687  3e7d		       a5 de		      LDA	Reaper2_Y
   9688  3e7f		       18		      CLC
   9689  3e80		       69 07		      ADC	#7
   9690  3e82		       85 8d		      STA	player0y
   9691  3e84				   .L0385		;  goto Common_Jump_Up bank7
   9692  3e84
   9693  3e84		       85 d1		      sta	temp7
   9694  3e86		       a9 d1		      lda	#>(.Common_Jump_Up-1)
   9695  3e88		       48		      pha
   9696  3e89		       a9 1c		      lda	#<(.Common_Jump_Up-1)
   9697  3e8b		       48		      pha
   9698  3e8c		       a5 d1		      lda	temp7
   9699  3e8e		       48		      pha
   9700  3e8f		       8a		      txa
   9701  3e90		       48		      pha
   9702  3e91		       a2 07		      ldx	#7
   9703  3e93		       4c eb ff 	      jmp	BS_jsr
   9704  3e96				   .
   9705  3e96							; 
   9706  3e96
   9707  3e96				   .Duck_2
   9708  3e96							; Duck_2
   9709  3e96
   9710  3e96				   .L0386		;  asm
   9711  3e96
   9712  3e96		       a5 db		      LDA	e
   9713  3e98
   9714  3e98		       29 02		      AND	#2
   9715  3e9a
   9716  3e9a		       f0 11		      BEQ	.skip160then_2
   9717  3e9c
   9718  3e9c		       a5 c2		      LDA	Life2
   9719  3e9e
   9720  3e9e		       c5 df		      CMP	MaxLife
   9721  3ea0
   9722  3ea0		       b0 0b		      BCS	.skip160then_2
   9723  3ea2
   9724  3ea2		       f8		      SED
   9725  3ea3
   9726  3ea3		       18		      CLC
   9727  3ea4
   9728  3ea4		       69 01		      ADC	#1
   9729  3ea6
   9730  3ea6		       85 c2		      STA	Life2
   9731  3ea8
   9732  3ea8		       d8		      CLD
   9733  3ea9
   9734  3ea9		       a9 1e		      LDA	#$1e
   9735  3eab
   9736  3eab		       85 bf		      STA	player1scorecolor
   9737  3ead
   9738  3ead				   .skip160then_2
   9739  3ead
   9740  3ead				   .
   9741  3ead							; 
   9742  3ead
   9743  3ead				   .L0387		;  goto Player_Duck bank7
   9744  3ead
   9745  3ead		       85 d1		      sta	temp7
   9746  3eaf		       a9 d0		      lda	#>(.Player_Duck-1)
   9747  3eb1		       48		      pha
   9748  3eb2		       a9 b6		      lda	#<(.Player_Duck-1)
   9749  3eb4		       48		      pha
   9750  3eb5		       a5 d1		      lda	temp7
   9751  3eb7		       48		      pha
   9752  3eb8		       8a		      txa
   9753  3eb9		       48		      pha
   9754  3eba		       a2 07		      ldx	#7
   9755  3ebc		       4c eb ff 	      jmp	BS_jsr
   9756  3ebf				   .
   9757  3ebf							; 
   9758  3ebf
   9759  3ebf				   .
   9760  3ebf							; 
   9761  3ebf
   9762  3ebf				   .
   9763  3ebf							; 
   9764  3ebf
   9765  3ebf				   .L0388		;  bank 4
   9766  3ebf
   9767  3ebf					      if	ECHO3
      277 bytes of ROM space left in bank 3
   9768  3ebf					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   9769  3ebf					      endif
   9770  3ebf		       00 01	   ECHO3      =	1
   9771  3fd4					      ORG	$3FF4-bscode_length
   9772  3fd4					      RORG	$5FF4-bscode_length
   9773  3fd4		       a2 ff	   start_bank3 ldx	#$ff
   9774  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
   9775  3fd6				  -	      stx	FASTFETCH
   9776  3fd6					      endif
   9777  3fd6		       9a		      txs
   9778  3fd7				  -	      if	bankswitch == 64
   9779  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   9780  3fd7					      else
   9781  3fd7		       a9 f3		      lda	#>(start-1)
   9782  3fd9					      endif
   9783  3fd9		       48		      pha
   9784  3fda		       a9 6d		      lda	#<(start-1)
   9785  3fdc		       48		      pha
   9786  3fdd		       48		      pha
   9787  3fde		       8a		      txa
   9788  3fdf		       48		      pha
   9789  3fe0		       ba		      tsx
   9790  3fe1					      if	bankswitch != 64
   9791  3fe1		       b5 04		      lda	4,x	; get high byte of return address
   9792  3fe3		       2a		      rol
   9793  3fe4		       2a		      rol
   9794  3fe5		       2a		      rol
   9795  3fe6		       2a		      rol
   9796  3fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   9797  3fe9		       aa		      tax
   9798  3fea		       e8		      inx
   9799  3feb				  -	      else
   9800  3feb				  -	      lda	4,x	; get high byte of return address
   9801  3feb				  -	      tay
   9802  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   9803  3feb				  -	      sta	4,x
   9804  3feb				  -	      tya
   9805  3feb				  -	      lsr
   9806  3feb				  -	      lsr
   9807  3feb				  -	      lsr
   9808  3feb				  -	      lsr
   9809  3feb				  -	      tax
   9810  3feb				  -	      inx
   9811  3feb					      endif
   9812  3feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
   9813  3fee		       68		      pla
   9814  3fef		       aa		      tax
   9815  3ff0		       68		      pla
   9816  3ff1		       60		      rts
   9817  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   9818  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   9819  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   9820  3ff2					      endif
   9821  3ffc					      ORG	$3FFC
   9822  3ffc					      RORG	$5FFC
   9823  3ffc		       d4 5f		      .word.w	start_bank3
   9824  3ffe		       d4 5f		      .word.w	start_bank3
   9825  4000					      ORG	$4000
   9826  4000					      RORG	$7000
   9827  4000				   .
   9828  4000							; 
   9829  4000
   9830  4000				   .EndMusic
   9831  4000							; EndMusic
   9832  4000
   9833  4000				   .L0389		;  duration = duration - 1 : if HowWhite > $00 then dec HowWhite = HowWhite - $01
   9834  4000
   9835  4000		       c6 d9		      DEC	duration
   9836  4002		       a9 00		      LDA	#$00
   9837  4004		       c5 e1		      CMP	HowWhite
   9838  4006		       b0 09		      BCS	.skipL0389
   9839  4008				   .condpart167
   9840  4008		       f8		      SED
   9841  4009		       a5 e1		      LDA	HowWhite
   9842  400b		       38		      SEC
   9843  400c		       e9 01		      SBC	#$01
   9844  400e		       85 e1		      STA	HowWhite
   9845  4010		       d8		      CLD
   9846  4011				   .skipL0389
   9847  4011				   .L0390		;  COLUBK = HowWhite
   9848  4011
   9849  4011		       a5 e1		      LDA	HowWhite
   9850  4013		       85 09		      STA	COLUBK
   9851  4015				   .L0391		;  if duration > 0 then goto TextLoop bank6
   9852  4015
   9853  4015		       a9 00		      LDA	#0
   9854  4017		       c5 d9		      CMP	duration
   9855  4019		       b0 12		      BCS	.skipL0391
   9856  401b				   .condpart168
   9857  401b		       85 d1		      sta	temp7
   9858  401d		       a9 bc		      lda	#>(.TextLoop-1)
   9859  401f		       48		      pha
   9860  4020		       a9 95		      lda	#<(.TextLoop-1)
   9861  4022		       48		      pha
   9862  4023		       a5 d1		      lda	temp7
   9863  4025		       48		      pha
   9864  4026		       8a		      txa
   9865  4027		       48		      pha
   9866  4028		       a2 06		      ldx	#6
   9867  402a		       4c eb ff 	      jmp	BS_jsr
   9868  402d				   .skipL0391
   9869  402d				   .L0392		;  temp4 = sread ( Music4 ) 
   9870  402d
   9871  402d		       a2 d7		      ldx	#Music4
   9872  402f		       a1 00		      lda	(0,x)
   9873  4031		       f6 00		      inc	0,x
   9874  4033		       d0 02		      bne	*+4
   9875  4035		       f6 01		      inc	1,x
   9876  4037		       85 ce		      STA	temp4
   9877  4039				   .L0393		;  if temp4 = 255 then duration = 1 :	goto MusicSetup4
   9878  4039
   9879  4039		       a5 ce		      LDA	temp4
   9880  403b		       c9 ff		      CMP	#255
   9881  403d		       d0 07		      BNE	.skipL0393
   9882  403f				   .condpart169
   9883  403f		       a9 01		      LDA	#1
   9884  4041		       85 d9		      STA	duration
   9885  4043		       4c 9f 70 	      jmp	.MusicSetup4
   9886  4046
   9887  4046				   .skipL0393
   9888  4046				   .L0394		;  if temp4 = 0 then AUDV0 = 0 else AUDC0 = 1 :  AUDV0 = 8 :  AUDF0 = temp4
   9889  4046
   9890  4046		       a5 ce		      LDA	temp4
   9891  4048		       c9 00		      CMP	#0
   9892  404a		       d0 07		      BNE	.skipL0394
   9893  404c				   .condpart170
   9894  404c		       a9 00		      LDA	#0
   9895  404e		       85 19		      STA	AUDV0
   9896  4050		       4c 5f 70 	      jmp	.skipelse13
   9897  4053				   .skipL0394
   9898  4053		       a9 01		      LDA	#1
   9899  4055		       85 15		      STA	AUDC0
   9900  4057		       a9 08		      LDA	#8
   9901  4059		       85 19		      STA	AUDV0
   9902  405b		       a5 ce		      LDA	temp4
   9903  405d		       85 17		      STA	AUDF0
   9904  405f				   .skipelse13
   9905  405f				   .
   9906  405f							; 
   9907  405f
   9908  405f				   .L0395		;  temp4 = sread ( Music4 ) 
   9909  405f
   9910  405f		       a2 d7		      ldx	#Music4
   9911  4061		       a1 00		      lda	(0,x)
   9912  4063		       f6 00		      inc	0,x
   9913  4065		       d0 02		      bne	*+4
   9914  4067		       f6 01		      inc	1,x
   9915  4069		       85 ce		      STA	temp4
   9916  406b				   .L0396		;  AUDV1 = temp4
   9917  406b
   9918  406b		       a5 ce		      LDA	temp4
   9919  406d		       85 1a		      STA	AUDV1
   9920  406f				   .L0397		;  if temp4 > 6 then HowWhite = $0e
   9921  406f
   9922  406f		       a9 06		      LDA	#6
   9923  4071		       c5 ce		      CMP	temp4
   9924  4073		       b0 04		      BCS	.skipL0397
   9925  4075				   .condpart171
   9926  4075		       a9 0e		      LDA	#$0e
   9927  4077		       85 e1		      STA	HowWhite
   9928  4079				   .skipL0397
   9929  4079				   .L0398		;  AUDF1 = sread ( Music4 ) 
   9930  4079
   9931  4079		       a2 d7		      ldx	#Music4
   9932  407b		       a1 00		      lda	(0,x)
   9933  407d		       f6 00		      inc	0,x
   9934  407f		       d0 02		      bne	*+4
   9935  4081		       f6 01		      inc	1,x
   9936  4083		       85 18		      STA	AUDF1
   9937  4085				   .
   9938  4085							; 
   9939  4085
   9940  4085				   .L0399		;  AUDC1 = 7
   9941  4085
   9942  4085		       a9 07		      LDA	#7
   9943  4087		       85 16		      STA	AUDC1
   9944  4089				   .L0400		;  duration = 5
   9945  4089
   9946  4089		       a9 05		      LDA	#5
   9947  408b		       85 d9		      STA	duration
   9948  408d				   .L0401		;  goto TextLoop bank6
   9949  408d
   9950  408d		       85 d1		      sta	temp7
   9951  408f		       a9 bc		      lda	#>(.TextLoop-1)
   9952  4091		       48		      pha
   9953  4092		       a9 95		      lda	#<(.TextLoop-1)
   9954  4094		       48		      pha
   9955  4095		       a5 d1		      lda	temp7
   9956  4097		       48		      pha
   9957  4098		       8a		      txa
   9958  4099		       48		      pha
   9959  409a		       a2 06		      ldx	#6
   9960  409c		       4c eb ff 	      jmp	BS_jsr
   9961  409f				   .MusicSetup4
   9962  409f							; MusicSetup4
   9963  409f
   9964  409f				   .L0402		;  sdata Music4  =  a
   9965  409f
   9966  409f		       a9 aa		      lda	#<Music4_begin
   9967  40a1		       85 d7		      sta	a
   9968  40a3		       a9 70		      lda	#>Music4_begin
   9969  40a5		       85 d8		      sta	a+1
   9970  40a7		       4c d3 72 	      JMP	.skipL0402
   9971  40aa				   Music4_begin
   9972  40aa		       14		      .byte.b	20
   9973  40ab
   9974  40ab		       07 0d		      .byte.b	7,13
   9975  40ad
   9976  40ad		       00		      .byte.b	0
   9977  40ae
   9978  40ae		       07 0d		      .byte.b	7,13
   9979  40b0
   9980  40b0		       14		      .byte.b	20
   9981  40b1
   9982  40b1		       07 0d		      .byte.b	7,13
   9983  40b3
   9984  40b3		       00		      .byte.b	0
   9985  40b4
   9986  40b4		       07 0d		      .byte.b	7,13
   9987  40b6
   9988  40b6		       14		      .byte.b	20
   9989  40b7
   9990  40b7		       07 0d		      .byte.b	7,13
   9991  40b9
   9992  40b9		       00		      .byte.b	0
   9993  40ba
   9994  40ba		       07 0d		      .byte.b	7,13
   9995  40bc
   9996  40bc		       14		      .byte.b	20
   9997  40bd
   9998  40bd		       07 0d		      .byte.b	7,13
   9999  40bf
  10000  40bf		       00		      .byte.b	0
  10001  40c0
  10002  40c0		       07 0d		      .byte.b	7,13
  10003  40c2
  10004  40c2		       14		      .byte.b	20
  10005  40c3
  10006  40c3		       07 0d		      .byte.b	7,13
  10007  40c5
  10008  40c5		       00		      .byte.b	0
  10009  40c6
  10010  40c6		       07 0d		      .byte.b	7,13
  10011  40c8
  10012  40c8		       14		      .byte.b	20
  10013  40c9
  10014  40c9		       07 0d		      .byte.b	7,13
  10015  40cb
  10016  40cb		       00		      .byte.b	0
  10017  40cc
  10018  40cc		       07 0d		      .byte.b	7,13
  10019  40ce
  10020  40ce		       14		      .byte.b	20
  10021  40cf
  10022  40cf		       07 0d		      .byte.b	7,13
  10023  40d1
  10024  40d1		       00		      .byte.b	0
  10025  40d2
  10026  40d2		       07 0d		      .byte.b	7,13
  10027  40d4
  10028  40d4		       14		      .byte.b	20
  10029  40d5
  10030  40d5		       07 0d		      .byte.b	7,13
  10031  40d7
  10032  40d7		       00		      .byte.b	0
  10033  40d8
  10034  40d8		       07 0d		      .byte.b	7,13
  10035  40da
  10036  40da		       14		      .byte.b	20
  10037  40db
  10038  40db		       07 0d		      .byte.b	7,13
  10039  40dd
  10040  40dd		       00		      .byte.b	0
  10041  40de
  10042  40de		       07 0d		      .byte.b	7,13
  10043  40e0
  10044  40e0		       13		      .byte.b	19
  10045  40e1
  10046  40e1		       07 0d		      .byte.b	7,13
  10047  40e3
  10048  40e3		       00		      .byte.b	0
  10049  40e4
  10050  40e4		       07 0d		      .byte.b	7,13
  10051  40e6
  10052  40e6		       13		      .byte.b	19
  10053  40e7
  10054  40e7		       07 0d		      .byte.b	7,13
  10055  40e9
  10056  40e9		       00		      .byte.b	0
  10057  40ea
  10058  40ea		       07 0d		      .byte.b	7,13
  10059  40ec
  10060  40ec		       13		      .byte.b	19
  10061  40ed
  10062  40ed		       07 0d		      .byte.b	7,13
  10063  40ef
  10064  40ef		       00		      .byte.b	0
  10065  40f0
  10066  40f0		       07 0d		      .byte.b	7,13
  10067  40f2
  10068  40f2		       11		      .byte.b	17
  10069  40f3
  10070  40f3		       07 0d		      .byte.b	7,13
  10071  40f5
  10072  40f5		       00		      .byte.b	0
  10073  40f6
  10074  40f6		       07 0d		      .byte.b	7,13
  10075  40f8
  10076  40f8		       11		      .byte.b	17
  10077  40f9
  10078  40f9		       07 0d		      .byte.b	7,13
  10079  40fb
  10080  40fb		       00		      .byte.b	0
  10081  40fc
  10082  40fc		       07 0d		      .byte.b	7,13
  10083  40fe
  10084  40fe		       11		      .byte.b	17
  10085  40ff
  10086  40ff		       07 0d		      .byte.b	7,13
  10087  4101
  10088  4101		       00		      .byte.b	0
  10089  4102
  10090  4102		       07 0d		      .byte.b	7,13
  10091  4104
  10092  4104		       13		      .byte.b	19
  10093  4105
  10094  4105		       07 0d		      .byte.b	7,13
  10095  4107
  10096  4107		       00		      .byte.b	0
  10097  4108
  10098  4108		       07 0d		      .byte.b	7,13
  10099  410a
  10100  410a		       13		      .byte.b	19
  10101  410b
  10102  410b		       07 0d		      .byte.b	7,13
  10103  410d
  10104  410d		       00		      .byte.b	0
  10105  410e
  10106  410e		       07 0d		      .byte.b	7,13
  10107  4110
  10108  4110		       13		      .byte.b	19
  10109  4111
  10110  4111		       07 0d		      .byte.b	7,13
  10111  4113
  10112  4113		       00		      .byte.b	0
  10113  4114
  10114  4114		       07 0d		      .byte.b	7,13
  10115  4116
  10116  4116		       14		      .byte.b	20
  10117  4117
  10118  4117		       06 0d		      .byte.b	6,13
  10119  4119
  10120  4119		       00		      .byte.b	0
  10121  411a
  10122  411a		       06 0d		      .byte.b	6,13
  10123  411c
  10124  411c		       14		      .byte.b	20
  10125  411d
  10126  411d		       05 0d		      .byte.b	5,13
  10127  411f
  10128  411f		       00		      .byte.b	0
  10129  4120
  10130  4120		       05 0d		      .byte.b	5,13
  10131  4122
  10132  4122		       14		      .byte.b	20
  10133  4123
  10134  4123		       04 0d		      .byte.b	4,13
  10135  4125
  10136  4125		       00		      .byte.b	0
  10137  4126
  10138  4126		       04 0d		      .byte.b	4,13
  10139  4128
  10140  4128		       13		      .byte.b	19
  10141  4129
  10142  4129		       03 0d		      .byte.b	3,13
  10143  412b
  10144  412b		       00		      .byte.b	0
  10145  412c
  10146  412c		       03 0d		      .byte.b	3,13
  10147  412e
  10148  412e		       13		      .byte.b	19
  10149  412f
  10150  412f		       02 0d		      .byte.b	2,13
  10151  4131
  10152  4131		       00		      .byte.b	0
  10153  4132
  10154  4132		       02 0d		      .byte.b	2,13
  10155  4134
  10156  4134		       13		      .byte.b	19
  10157  4135
  10158  4135		       01 0d		      .byte.b	1,13
  10159  4137
  10160  4137		       00		      .byte.b	0
  10161  4138
  10162  4138		       01 0d		      .byte.b	1,13
  10163  413a
  10164  413a		       1a		      .byte.b	26
  10165  413b
  10166  413b		       08 11		      .byte.b	8,17
  10167  413d
  10168  413d		       00		      .byte.b	0
  10169  413e
  10170  413e		       07 11		      .byte.b	7,17
  10171  4140
  10172  4140		       1a		      .byte.b	26
  10173  4141
  10174  4141		       08 11		      .byte.b	8,17
  10175  4143
  10176  4143		       00		      .byte.b	0
  10177  4144
  10178  4144		       07 11		      .byte.b	7,17
  10179  4146
  10180  4146		       1a		      .byte.b	26
  10181  4147
  10182  4147		       08 11		      .byte.b	8,17
  10183  4149
  10184  4149		       00		      .byte.b	0
  10185  414a
  10186  414a		       07 11		      .byte.b	7,17
  10187  414c
  10188  414c		       1a		      .byte.b	26
  10189  414d
  10190  414d		       08 11		      .byte.b	8,17
  10191  414f
  10192  414f		       00		      .byte.b	0
  10193  4150
  10194  4150		       07 11		      .byte.b	7,17
  10195  4152
  10196  4152		       14		      .byte.b	20
  10197  4153
  10198  4153		       06 11		      .byte.b	6,17
  10199  4155
  10200  4155		       00		      .byte.b	0
  10201  4156
  10202  4156		       06 11		      .byte.b	6,17
  10203  4158
  10204  4158		       14		      .byte.b	20
  10205  4159
  10206  4159		       05 11		      .byte.b	5,17
  10207  415b
  10208  415b		       00		      .byte.b	0
  10209  415c
  10210  415c		       05 11		      .byte.b	5,17
  10211  415e
  10212  415e		       14		      .byte.b	20
  10213  415f
  10214  415f		       04 11		      .byte.b	4,17
  10215  4161
  10216  4161		       00		      .byte.b	0
  10217  4162
  10218  4162		       04 11		      .byte.b	4,17
  10219  4164
  10220  4164		       13		      .byte.b	19
  10221  4165
  10222  4165		       03 11		      .byte.b	3,17
  10223  4167
  10224  4167		       00		      .byte.b	0
  10225  4168
  10226  4168		       03 11		      .byte.b	3,17
  10227  416a
  10228  416a		       13		      .byte.b	19
  10229  416b
  10230  416b		       02 11		      .byte.b	2,17
  10231  416d
  10232  416d		       00		      .byte.b	0
  10233  416e
  10234  416e		       02 11		      .byte.b	2,17
  10235  4170
  10236  4170		       13		      .byte.b	19
  10237  4171
  10238  4171		       01 11		      .byte.b	1,17
  10239  4173
  10240  4173		       00		      .byte.b	0
  10241  4174
  10242  4174		       01 11		      .byte.b	1,17
  10243  4176
  10244  4176		       1c		      .byte.b	28
  10245  4177
  10246  4177		       07 12		      .byte.b	7,18
  10247  4179
  10248  4179		       00		      .byte.b	0
  10249  417a
  10250  417a		       07 12		      .byte.b	7,18
  10251  417c
  10252  417c		       1c		      .byte.b	28
  10253  417d
  10254  417d		       07 12		      .byte.b	7,18
  10255  417f
  10256  417f		       00		      .byte.b	0
  10257  4180
  10258  4180		       07 12		      .byte.b	7,18
  10259  4182
  10260  4182		       1c		      .byte.b	28
  10261  4183
  10262  4183		       07 12		      .byte.b	7,18
  10263  4185
  10264  4185		       00		      .byte.b	0
  10265  4186
  10266  4186		       07 12		      .byte.b	7,18
  10267  4188
  10268  4188		       1c		      .byte.b	28
  10269  4189
  10270  4189		       07 12		      .byte.b	7,18
  10271  418b
  10272  418b		       00		      .byte.b	0
  10273  418c
  10274  418c		       07 12		      .byte.b	7,18
  10275  418e
  10276  418e		       1c		      .byte.b	28
  10277  418f
  10278  418f		       07 12		      .byte.b	7,18
  10279  4191
  10280  4191		       00		      .byte.b	0
  10281  4192
  10282  4192		       07 12		      .byte.b	7,18
  10283  4194
  10284  4194		       1c		      .byte.b	28
  10285  4195
  10286  4195		       07 12		      .byte.b	7,18
  10287  4197
  10288  4197		       00		      .byte.b	0
  10289  4198
  10290  4198		       07 12		      .byte.b	7,18
  10291  419a
  10292  419a		       14		      .byte.b	20
  10293  419b
  10294  419b		       06 12		      .byte.b	6,18
  10295  419d
  10296  419d		       00		      .byte.b	0
  10297  419e
  10298  419e		       06 12		      .byte.b	6,18
  10299  41a0
  10300  41a0		       14		      .byte.b	20
  10301  41a1
  10302  41a1		       05 12		      .byte.b	5,18
  10303  41a3
  10304  41a3		       00		      .byte.b	0
  10305  41a4
  10306  41a4		       05 12		      .byte.b	5,18
  10307  41a6
  10308  41a6		       14		      .byte.b	20
  10309  41a7
  10310  41a7		       04 12		      .byte.b	4,18
  10311  41a9
  10312  41a9		       00		      .byte.b	0
  10313  41aa
  10314  41aa		       04 12		      .byte.b	4,18
  10315  41ac
  10316  41ac		       13		      .byte.b	19
  10317  41ad
  10318  41ad		       03 12		      .byte.b	3,18
  10319  41af
  10320  41af		       00		      .byte.b	0
  10321  41b0
  10322  41b0		       03 12		      .byte.b	3,18
  10323  41b2
  10324  41b2		       13		      .byte.b	19
  10325  41b3
  10326  41b3		       02 12		      .byte.b	2,18
  10327  41b5
  10328  41b5		       00		      .byte.b	0
  10329  41b6
  10330  41b6		       02 12		      .byte.b	2,18
  10331  41b8
  10332  41b8		       13		      .byte.b	19
  10333  41b9
  10334  41b9		       01 12		      .byte.b	1,18
  10335  41bb
  10336  41bb		       00		      .byte.b	0
  10337  41bc
  10338  41bc		       01 12		      .byte.b	1,18
  10339  41be
  10340  41be		       14		      .byte.b	20
  10341  41bf
  10342  41bf		       07 0d		      .byte.b	7,13
  10343  41c1
  10344  41c1		       00		      .byte.b	0
  10345  41c2
  10346  41c2		       07 0d		      .byte.b	7,13
  10347  41c4
  10348  41c4		       14		      .byte.b	20
  10349  41c5
  10350  41c5		       07 0d		      .byte.b	7,13
  10351  41c7
  10352  41c7		       00		      .byte.b	0
  10353  41c8
  10354  41c8		       07 0d		      .byte.b	7,13
  10355  41ca
  10356  41ca		       14		      .byte.b	20
  10357  41cb
  10358  41cb		       07 0d		      .byte.b	7,13
  10359  41cd
  10360  41cd		       00		      .byte.b	0
  10361  41ce
  10362  41ce		       07 0d		      .byte.b	7,13
  10363  41d0
  10364  41d0		       14		      .byte.b	20
  10365  41d1
  10366  41d1		       07 0d		      .byte.b	7,13
  10367  41d3
  10368  41d3		       00		      .byte.b	0
  10369  41d4
  10370  41d4		       07 0d		      .byte.b	7,13
  10371  41d6
  10372  41d6		       14		      .byte.b	20
  10373  41d7
  10374  41d7		       07 0d		      .byte.b	7,13
  10375  41d9
  10376  41d9		       00		      .byte.b	0
  10377  41da
  10378  41da		       07 0d		      .byte.b	7,13
  10379  41dc
  10380  41dc		       14		      .byte.b	20
  10381  41dd
  10382  41dd		       07 0d		      .byte.b	7,13
  10383  41df
  10384  41df		       00		      .byte.b	0
  10385  41e0
  10386  41e0		       07 0d		      .byte.b	7,13
  10387  41e2
  10388  41e2		       14		      .byte.b	20
  10389  41e3
  10390  41e3		       07 0d		      .byte.b	7,13
  10391  41e5
  10392  41e5		       00		      .byte.b	0
  10393  41e6
  10394  41e6		       07 0d		      .byte.b	7,13
  10395  41e8
  10396  41e8		       14		      .byte.b	20
  10397  41e9
  10398  41e9		       07 0d		      .byte.b	7,13
  10399  41eb
  10400  41eb		       00		      .byte.b	0
  10401  41ec
  10402  41ec		       07 0d		      .byte.b	7,13
  10403  41ee
  10404  41ee		       14		      .byte.b	20
  10405  41ef
  10406  41ef		       07 0d		      .byte.b	7,13
  10407  41f1
  10408  41f1		       00		      .byte.b	0
  10409  41f2
  10410  41f2		       07 0d		      .byte.b	7,13
  10411  41f4
  10412  41f4		       13		      .byte.b	19
  10413  41f5
  10414  41f5		       07 0d		      .byte.b	7,13
  10415  41f7
  10416  41f7		       00		      .byte.b	0
  10417  41f8
  10418  41f8		       07 0d		      .byte.b	7,13
  10419  41fa
  10420  41fa		       13		      .byte.b	19
  10421  41fb
  10422  41fb		       07 0d		      .byte.b	7,13
  10423  41fd
  10424  41fd		       00		      .byte.b	0
  10425  41fe
  10426  41fe		       07 0d		      .byte.b	7,13
  10427  4200
  10428  4200		       13		      .byte.b	19
  10429  4201
  10430  4201		       07 0d		      .byte.b	7,13
  10431  4203
  10432  4203		       00		      .byte.b	0
  10433  4204
  10434  4204		       07 0d		      .byte.b	7,13
  10435  4206
  10436  4206		       0c		      .byte.b	12
  10437  4207
  10438  4207		       07 0d		      .byte.b	7,13
  10439  4209
  10440  4209		       00		      .byte.b	0
  10441  420a
  10442  420a		       07 0d		      .byte.b	7,13
  10443  420c
  10444  420c		       0c		      .byte.b	12
  10445  420d
  10446  420d		       07 0d		      .byte.b	7,13
  10447  420f
  10448  420f		       00		      .byte.b	0
  10449  4210
  10450  4210		       07 0d		      .byte.b	7,13
  10451  4212
  10452  4212		       0c		      .byte.b	12
  10453  4213
  10454  4213		       07 0d		      .byte.b	7,13
  10455  4215
  10456  4215		       00		      .byte.b	0
  10457  4216
  10458  4216		       07 0d		      .byte.b	7,13
  10459  4218
  10460  4218		       13		      .byte.b	19
  10461  4219
  10462  4219		       07 0d		      .byte.b	7,13
  10463  421b
  10464  421b		       00		      .byte.b	0
  10465  421c
  10466  421c		       07 0d		      .byte.b	7,13
  10467  421e
  10468  421e		       13		      .byte.b	19
  10469  421f
  10470  421f		       07 0d		      .byte.b	7,13
  10471  4221
  10472  4221		       00		      .byte.b	0
  10473  4222
  10474  4222		       07 0d		      .byte.b	7,13
  10475  4224
  10476  4224		       13		      .byte.b	19
  10477  4225
  10478  4225		       07 0d		      .byte.b	7,13
  10479  4227
  10480  4227		       00		      .byte.b	0
  10481  4228
  10482  4228		       07 0d		      .byte.b	7,13
  10483  422a
  10484  422a		       14		      .byte.b	20
  10485  422b
  10486  422b		       06 0d		      .byte.b	6,13
  10487  422d
  10488  422d		       00		      .byte.b	0
  10489  422e
  10490  422e		       06 0d		      .byte.b	6,13
  10491  4230
  10492  4230		       14		      .byte.b	20
  10493  4231
  10494  4231		       05 0d		      .byte.b	5,13
  10495  4233
  10496  4233		       00		      .byte.b	0
  10497  4234
  10498  4234		       05 0d		      .byte.b	5,13
  10499  4236
  10500  4236		       14		      .byte.b	20
  10501  4237
  10502  4237		       04 0d		      .byte.b	4,13
  10503  4239
  10504  4239		       00		      .byte.b	0
  10505  423a
  10506  423a		       04 0d		      .byte.b	4,13
  10507  423c
  10508  423c		       13		      .byte.b	19
  10509  423d
  10510  423d		       03 0d		      .byte.b	3,13
  10511  423f
  10512  423f		       00		      .byte.b	0
  10513  4240
  10514  4240		       03 0d		      .byte.b	3,13
  10515  4242
  10516  4242		       13		      .byte.b	19
  10517  4243
  10518  4243		       02 0d		      .byte.b	2,13
  10519  4245
  10520  4245		       00		      .byte.b	0
  10521  4246
  10522  4246		       02 0d		      .byte.b	2,13
  10523  4248
  10524  4248		       13		      .byte.b	19
  10525  4249
  10526  4249		       01 0d		      .byte.b	1,13
  10527  424b
  10528  424b		       00		      .byte.b	0
  10529  424c
  10530  424c		       01 0d		      .byte.b	1,13
  10531  424e
  10532  424e		       1a		      .byte.b	26
  10533  424f
  10534  424f		       08 11		      .byte.b	8,17
  10535  4251
  10536  4251		       00		      .byte.b	0
  10537  4252
  10538  4252		       07 11		      .byte.b	7,17
  10539  4254
  10540  4254		       1a		      .byte.b	26
  10541  4255
  10542  4255		       08 11		      .byte.b	8,17
  10543  4257
  10544  4257		       00		      .byte.b	0
  10545  4258
  10546  4258		       07 11		      .byte.b	7,17
  10547  425a
  10548  425a		       1a		      .byte.b	26
  10549  425b
  10550  425b		       08 11		      .byte.b	8,17
  10551  425d
  10552  425d		       00		      .byte.b	0
  10553  425e
  10554  425e		       07 11		      .byte.b	7,17
  10555  4260
  10556  4260		       1a		      .byte.b	26
  10557  4261
  10558  4261		       08 11		      .byte.b	8,17
  10559  4263
  10560  4263		       00		      .byte.b	0
  10561  4264
  10562  4264		       07 11		      .byte.b	7,17
  10563  4266
  10564  4266		       14		      .byte.b	20
  10565  4267
  10566  4267		       06 11		      .byte.b	6,17
  10567  4269
  10568  4269		       00		      .byte.b	0
  10569  426a
  10570  426a		       06 11		      .byte.b	6,17
  10571  426c
  10572  426c		       14		      .byte.b	20
  10573  426d
  10574  426d		       05 11		      .byte.b	5,17
  10575  426f
  10576  426f		       00		      .byte.b	0
  10577  4270
  10578  4270		       05 11		      .byte.b	5,17
  10579  4272
  10580  4272		       14		      .byte.b	20
  10581  4273
  10582  4273		       04 11		      .byte.b	4,17
  10583  4275
  10584  4275		       00		      .byte.b	0
  10585  4276
  10586  4276		       04 11		      .byte.b	4,17
  10587  4278
  10588  4278		       13		      .byte.b	19
  10589  4279
  10590  4279		       03 11		      .byte.b	3,17
  10591  427b
  10592  427b		       00		      .byte.b	0
  10593  427c
  10594  427c		       03 11		      .byte.b	3,17
  10595  427e
  10596  427e		       13		      .byte.b	19
  10597  427f
  10598  427f		       02 11		      .byte.b	2,17
  10599  4281
  10600  4281		       00		      .byte.b	0
  10601  4282
  10602  4282		       02 11		      .byte.b	2,17
  10603  4284
  10604  4284		       13		      .byte.b	19
  10605  4285
  10606  4285		       01 11		      .byte.b	1,17
  10607  4287
  10608  4287		       00		      .byte.b	0
  10609  4288
  10610  4288		       01 11		      .byte.b	1,17
  10611  428a
  10612  428a		       1c		      .byte.b	28
  10613  428b
  10614  428b		       07 12		      .byte.b	7,18
  10615  428d
  10616  428d		       00		      .byte.b	0
  10617  428e
  10618  428e		       07 12		      .byte.b	7,18
  10619  4290
  10620  4290		       1c		      .byte.b	28
  10621  4291
  10622  4291		       07 12		      .byte.b	7,18
  10623  4293
  10624  4293		       00		      .byte.b	0
  10625  4294
  10626  4294		       07 12		      .byte.b	7,18
  10627  4296
  10628  4296		       1c		      .byte.b	28
  10629  4297
  10630  4297		       07 12		      .byte.b	7,18
  10631  4299
  10632  4299		       00		      .byte.b	0
  10633  429a
  10634  429a		       07 12		      .byte.b	7,18
  10635  429c
  10636  429c		       1c		      .byte.b	28
  10637  429d
  10638  429d		       07 12		      .byte.b	7,18
  10639  429f
  10640  429f		       00		      .byte.b	0
  10641  42a0
  10642  42a0		       07 12		      .byte.b	7,18
  10643  42a2
  10644  42a2		       1c		      .byte.b	28
  10645  42a3
  10646  42a3		       07 12		      .byte.b	7,18
  10647  42a5
  10648  42a5		       00		      .byte.b	0
  10649  42a6
  10650  42a6		       07 12		      .byte.b	7,18
  10651  42a8
  10652  42a8		       1c		      .byte.b	28
  10653  42a9
  10654  42a9		       07 12		      .byte.b	7,18
  10655  42ab
  10656  42ab		       00		      .byte.b	0
  10657  42ac
  10658  42ac		       07 12		      .byte.b	7,18
  10659  42ae
  10660  42ae		       14		      .byte.b	20
  10661  42af
  10662  42af		       06 12		      .byte.b	6,18
  10663  42b1
  10664  42b1		       00		      .byte.b	0
  10665  42b2
  10666  42b2		       06 12		      .byte.b	6,18
  10667  42b4
  10668  42b4		       14		      .byte.b	20
  10669  42b5
  10670  42b5		       05 12		      .byte.b	5,18
  10671  42b7
  10672  42b7		       00		      .byte.b	0
  10673  42b8
  10674  42b8		       05 12		      .byte.b	5,18
  10675  42ba
  10676  42ba		       14		      .byte.b	20
  10677  42bb
  10678  42bb		       04 12		      .byte.b	4,18
  10679  42bd
  10680  42bd		       00		      .byte.b	0
  10681  42be
  10682  42be		       04 12		      .byte.b	4,18
  10683  42c0
  10684  42c0		       13		      .byte.b	19
  10685  42c1
  10686  42c1		       03 12		      .byte.b	3,18
  10687  42c3
  10688  42c3		       00		      .byte.b	0
  10689  42c4
  10690  42c4		       03 12		      .byte.b	3,18
  10691  42c6
  10692  42c6		       13		      .byte.b	19
  10693  42c7
  10694  42c7		       02 12		      .byte.b	2,18
  10695  42c9
  10696  42c9		       00		      .byte.b	0
  10697  42ca
  10698  42ca		       02 12		      .byte.b	2,18
  10699  42cc
  10700  42cc		       13		      .byte.b	19
  10701  42cd
  10702  42cd		       01 12		      .byte.b	1,18
  10703  42cf
  10704  42cf		       00		      .byte.b	0
  10705  42d0
  10706  42d0		       01 12		      .byte.b	1,18
  10707  42d2
  10708  42d2		       ff		      .byte.b	255
  10709  42d3
  10710  42d3				   .skipL0402
  10711  42d3				   .L0403		;  goto TextLoop bank6
  10712  42d3
  10713  42d3		       85 d1		      sta	temp7
  10714  42d5		       a9 bc		      lda	#>(.TextLoop-1)
  10715  42d7		       48		      pha
  10716  42d8		       a9 95		      lda	#<(.TextLoop-1)
  10717  42da		       48		      pha
  10718  42db		       a5 d1		      lda	temp7
  10719  42dd		       48		      pha
  10720  42de		       8a		      txa
  10721  42df		       48		      pha
  10722  42e0		       a2 06		      ldx	#6
  10723  42e2		       4c eb ff 	      jmp	BS_jsr
  10724  42e5				   .
  10725  42e5							; 
  10726  42e5
  10727  42e5				   .
  10728  42e5							; 
  10729  42e5
  10730  42e5				   .
  10731  42e5							; 
  10732  42e5
  10733  42e5				   .L0404		;  bank 5
  10734  42e5
  10735  42e5					      if	ECHO4
      3311 bytes of ROM space left in bank 4
  10736  42e5					      echo	"    ",[(start_bank4 - *)]d , "bytes of ROM space left in bank 4")
  10737  42e5					      endif
  10738  42e5		       00 01	   ECHO4      =	1
  10739  4fd4					      ORG	$4FF4-bscode_length
  10740  4fd4					      RORG	$7FF4-bscode_length
  10741  4fd4		       a2 ff	   start_bank4 ldx	#$ff
  10742  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
  10743  4fd6				  -	      stx	FASTFETCH
  10744  4fd6					      endif
  10745  4fd6		       9a		      txs
  10746  4fd7				  -	      if	bankswitch == 64
  10747  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  10748  4fd7					      else
  10749  4fd7		       a9 f3		      lda	#>(start-1)
  10750  4fd9					      endif
  10751  4fd9		       48		      pha
  10752  4fda		       a9 6d		      lda	#<(start-1)
  10753  4fdc		       48		      pha
  10754  4fdd		       48		      pha
  10755  4fde		       8a		      txa
  10756  4fdf		       48		      pha
  10757  4fe0		       ba		      tsx
  10758  4fe1					      if	bankswitch != 64
  10759  4fe1		       b5 04		      lda	4,x	; get high byte of return address
  10760  4fe3		       2a		      rol
  10761  4fe4		       2a		      rol
  10762  4fe5		       2a		      rol
  10763  4fe6		       2a		      rol
  10764  4fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  10765  4fe9		       aa		      tax
  10766  4fea		       e8		      inx
  10767  4feb				  -	      else
  10768  4feb				  -	      lda	4,x	; get high byte of return address
  10769  4feb				  -	      tay
  10770  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  10771  4feb				  -	      sta	4,x
  10772  4feb				  -	      tya
  10773  4feb				  -	      lsr
  10774  4feb				  -	      lsr
  10775  4feb				  -	      lsr
  10776  4feb				  -	      lsr
  10777  4feb				  -	      tax
  10778  4feb				  -	      inx
  10779  4feb					      endif
  10780  4feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  10781  4fee		       68		      pla
  10782  4fef		       aa		      tax
  10783  4ff0		       68		      pla
  10784  4ff1		       60		      rts
  10785  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  10786  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  10787  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  10788  4ff2					      endif
  10789  4ffc					      ORG	$4FFC
  10790  4ffc					      RORG	$7FFC
  10791  4ffc		       d4 7f		      .word.w	start_bank4
  10792  4ffe		       d4 7f		      .word.w	start_bank4
  10793  5000					      ORG	$5000
  10794  5000					      RORG	$9000
  10795  5000				   .Nothing2
  10796  5000							; Nothing2
  10797  5000
  10798  5000				   .L0405		;  PowerUp_Counter = 160
  10799  5000
  10800  5000		       a9 a0		      LDA	#160
  10801  5002		       85 ef		      STA	PowerUp_Counter
  10802  5004				   .SomeCrazyStuff
  10803  5004							; SomeCrazyStuff
  10804  5004
  10805  5004				   .L0406		;  if e{1} then PowerUp_Counter = PowerUp_Counter - 1
  10806  5004
  10807  5004		       a5 db		      LDA	e
  10808  5006		       29 02		      AND	#2
  10809  5008		       f0 02		      BEQ	.skipL0406
  10810  500a				   .condpart172
  10811  500a		       c6 ef		      DEC	PowerUp_Counter
  10812  500c				   .skipL0406
  10813  500c				   .Its5
  10814  500c							; Its5
  10815  500c
  10816  500c				   .
  10817  500c							; 
  10818  500c
  10819  500c				   .L0407		;  if PowerUp_Counter = 0 then player5y = 160 :  goto No_Catch
  10820  500c
  10821  500c		       a5 ef		      LDA	PowerUp_Counter
  10822  500e		       c9 00		      CMP	#0
  10823  5010		       d0 07		      BNE	.skipL0407
  10824  5012				   .condpart173
  10825  5012		       a9 a0		      LDA	#160
  10826  5014		       85 92		      STA	player5y
  10827  5016		       4c 98 95 	      jmp	.No_Catch
  10828  5019
  10829  5019				   .skipL0407
  10830  5019				   .L0408		;  asm
  10831  5019
  10832  5019		       a9 07		      LDA	#7
  10833  501b
  10834  501b		       c5 81		      CMP	PowerUp_Type
  10835  501d
  10836  501d		       b0 02		      BCS	.skipL0309_1
  10837  501f
  10838  501f		       85 81		      STA	PowerUp_Type
  10839  5021
  10840  5021
  10841  5021
  10842  5021
  10843  5021
  10844  5021				   .skipL0309_1
  10845  5021
  10846  5021				   .
  10847  5021							; 
  10848  5021
  10849  5021				   .
  10850  5021							; 
  10851  5021
  10852  5021				   .L0409		;  on PowerUp_Type goto Power_0 Power_1 Power_2 NoDisappear Power_4 Power_5 Power_6 Power_7
  10853  5021
  10854  5021		       a6 81		      LDX	PowerUp_Type
  10855  5023		       bd 2c 90 	      LDA	.L0409jumptablehi,x
  10856  5026		       48		      PHA
  10857  5027		       bd 34 90 	      LDA	.L0409jumptablelo,x
  10858  502a		       48		      PHA
  10859  502b		       60		      RTS
  10860  502c				   .L0409jumptablehi
  10861  502c		       90		      .byte.b	>(.Power_0-1)
  10862  502d		       92		      .byte.b	>(.Power_1-1)
  10863  502e		       93		      .byte.b	>(.Power_2-1)
  10864  502f		       93		      .byte.b	>(.NoDisappear-1)
  10865  5030		       93		      .byte.b	>(.Power_4-1)
  10866  5031		       93		      .byte.b	>(.Power_5-1)
  10867  5032		       94		      .byte.b	>(.Power_6-1)
  10868  5033		       94		      .byte.b	>(.Power_7-1)
  10869  5034				   .L0409jumptablelo
  10870  5034		       3b		      .byte.b	<(.Power_0-1)
  10871  5035		       c5		      .byte.b	<(.Power_1-1)
  10872  5036		       24		      .byte.b	<(.Power_2-1)
  10873  5037		       d9		      .byte.b	<(.NoDisappear-1)
  10874  5038		       b0		      .byte.b	<(.Power_4-1)
  10875  5039		       e0		      .byte.b	<(.Power_5-1)
  10876  503a		       55		      .byte.b	<(.Power_6-1)
  10877  503b		       f8		      .byte.b	<(.Power_7-1)
  10878  503c				   .
  10879  503c							; 
  10880  503c
  10881  503c				   .Power_0
  10882  503c							; Power_0
  10883  503c
  10884  503c				   .L0410		;  COLUP5 = COLUP5 + 1
  10885  503c
  10886  503c		       e6 9c		      INC	COLUP5
  10887  503e				   .L0411		;  player5:
  10888  503e
  10889  503e		       a2 99		      LDX	#<playerL0411_5
  10890  5040		       86 aa		      STX	player5pointerlo
  10891  5042		       a9 f5		      LDA	#>playerL0411_5
  10892  5044		       85 af		      STA	player5pointerhi
  10893  5046		       a9 13		      LDA	#19
  10894  5048		       85 b5		      STA	player5height
  10895  504a				   .L0412		;  NUSIZ5 = $07
  10896  504a
  10897  504a		       a9 07		      LDA	#$07
  10898  504c		       85 97		      STA	NUSIZ5
  10899  504e				   .
  10900  504e							; 
  10901  504e
  10902  504e				   .L0413		;  asm  
  10903  504e
  10904  504e		       a5 db		      LDA	e
  10905  5050
  10906  5050		       4a		      LSR
  10907  5051
  10908  5051		       90 09		      BCC	.skipL010_24
  10909  5053
  10910  5053		       a5 ed		      LDA	w
  10911  5055
  10912  5055		       29 20		      AND	#32
  10913  5057
  10914  5057		       d0 09		      BNE	.DFD
  10915  5059
  10916  5059				   .condpart1565
  10917  5059
  10918  5059		       4c bf 92 	      jmp	.Shiiiit
  10919  505c
  10920  505c				   .skipL010_24
  10921  505c
  10922  505c		       a5 ed		      LDA	w
  10923  505e
  10924  505e		       29 20		      AND	#32
  10925  5060
  10926  5060		       d0 f7		      BNE	.condpart1565
  10927  5062
  10928  5062				   .DFD
  10929  5062
  10930  5062
  10931  5062
  10932  5062				   .skip165then_1
  10933  5062
  10934  5062		       a5 84		      LDA	player0x
  10935  5064
  10936  5064		       38		      SEC
  10937  5065
  10938  5065		       e9 06		      SBC	#6
  10939  5067
  10940  5067		       85 89		      STA	player5x
  10941  5069
  10942  5069		       a5 8d		      LDA	player0y
  10943  506b
  10944  506b		       38		      SEC
  10945  506c
  10946  506c		       e5 b0		      SBC	player0height
  10947  506e
  10948  506e		       18		      CLC
  10949  506f
  10950  506f		       69 12		      ADC	#18
  10951  5071
  10952  5071		       85 92		      STA	player5y
  10953  5073
  10954  5073				   .
  10955  5073							; 
  10956  5073
  10957  5073				   .
  10958  5073							; 
  10959  5073
  10960  5073				   .GotoKillthem
  10961  5073							; GotoKillthem
  10962  5073
  10963  5073				   .L0414		;  asm
  10964  5073
  10965  5073		       a0 00		      LDY	#0
  10966  5075
  10967  5075		       a5 92		      LDA	player5y
  10968  5077
  10969  5077		       38		      SEC
  10970  5078
  10971  5078		       e9 09		      SBC	#9
  10972  507a
  10973  507a		       85 ce		      STA	temp4
  10974  507c
  10975  507c		       a5 8e		      LDA	player1y
  10976  507e
  10977  507e		       38		      SEC
  10978  507f
  10979  507f		       e9 06		      SBC	#6
  10980  5081
  10981  5081		       85 cc		      STA	temp2
  10982  5083
  10983  5083		       c5 ce		      CMP	temp4
  10984  5085
  10985  5085		       b0 08		      BCS	.skipL0324_1
  10986  5087
  10987  5087		       a5 ce		      LDA	temp4
  10988  5089
  10989  5089		       38		      SEC
  10990  508a
  10991  508a		       e5 cc		      SBC	temp2
  10992  508c
  10993  508c		       4c 92 90 	      jmp	.skipelse17_1
  10994  508f
  10995  508f				   .skipL0324_1
  10996  508f
  10997  508f		       38		      SEC
  10998  5090
  10999  5090		       e5 ce		      SBC	temp4
  11000  5092
  11001  5092				   .skipelse17_1
  11002  5092
  11003  5092		       85 cf		      STA	temp5
  11004  5094
  11005  5094		       a5 85		      LDA	player1x
  11006  5096
  11007  5096		       38		      SEC
  11008  5097
  11009  5097		       e9 06		      SBC	#6
  11010  5099
  11011  5099		       85 cc		      STA	temp2
  11012  509b
  11013  509b
  11014  509b
  11015  509b		       c5 89		      CMP	player5x
  11016  509d
  11017  509d		       90 06		      BCC	.skipL0326_1
  11018  509f
  11019  509f		       38		      SEC
  11020  50a0
  11021  50a0		       e5 89		      SBC	player5x
  11022  50a2
  11023  50a2		       4c aa 90 	      jmp	.skipelse18_1
  11024  50a5
  11025  50a5				   .skipL0326_1
  11026  50a5
  11027  50a5		       a5 89		      LDA	player5x
  11028  50a7
  11029  50a7		       38		      SEC
  11030  50a8
  11031  50a8		       e5 cc		      SBC	temp2
  11032  50aa
  11033  50aa				   .skipelse18_1
  11034  50aa
  11035  50aa		       85 ce		      STA	temp4
  11036  50ac
  11037  50ac		       c9 0e		      CMP	#14
  11038  50ae
  11039  50ae		       b0 27		      BCS	.SecondOne
  11040  50b0
  11041  50b0		       a9 0a		      LDA	#10
  11042  50b2
  11043  50b2		       c5 cf		      CMP	temp5
  11044  50b4
  11045  50b4		       90 21		      BCC	.SecondOne
  11046  50b6
  11047  50b6		       a0 01		      LDY	#1
  11048  50b8
  11049  50b8				   .
  11050  50b8							; 
  11051  50b8
  11052  50b8				   .
  11053  50b8							; 
  11054  50b8
  11055  50b8				   .L0415		;  player1y = 120
  11056  50b8
  11057  50b8		       a9 78		      LDA	#120
  11058  50ba		       85 8e		      STA	player1y
  11059  50bc				   .L0416		;  if !w{5} then dec player2score = player2score + $01 else dec player3score = player3score + $01
  11060  50bc
  11061  50bc		       a5 ed		      LDA	w
  11062  50be		       29 20		      AND	#32
  11063  50c0		       d0 0c		      BNE	.skipL0416
  11064  50c2				   .condpart174
  11065  50c2		       f8		      SED
  11066  50c3		       a5 d2		      LDA	player2score
  11067  50c5		       18		      CLC
  11068  50c6		       69 01		      ADC	#$01
  11069  50c8		       85 d2		      STA	player2score
  11070  50ca		       d8		      CLD
  11071  50cb		       4c d7 90 	      jmp	.skipelse14
  11072  50ce				   .skipL0416
  11073  50ce		       f8		      SED
  11074  50cf		       a5 d3		      LDA	player3score
  11075  50d1		       18		      CLC
  11076  50d2		       69 01		      ADC	#$01
  11077  50d4		       85 d3		      STA	player3score
  11078  50d6		       d8		      CLD
  11079  50d7				   .skipelse14
  11080  50d7				   .
  11081  50d7							; 
  11082  50d7
  11083  50d7				   .SecondOne
  11084  50d7							; SecondOne
  11085  50d7
  11086  50d7				   .L0417		;  asm
  11087  50d7
  11088  50d7		       a5 92		      LDA	player5y
  11089  50d9
  11090  50d9		       38		      SEC
  11091  50da
  11092  50da		       e9 09		      SBC	#9
  11093  50dc
  11094  50dc		       85 ce		      STA	temp4
  11095  50de
  11096  50de		       a5 8f		      LDA	player2y
  11097  50e0
  11098  50e0		       38		      SEC
  11099  50e1
  11100  50e1		       e9 06		      SBC	#6
  11101  50e3
  11102  50e3		       85 cc		      STA	temp2
  11103  50e5
  11104  50e5		       c5 ce		      CMP	temp4
  11105  50e7
  11106  50e7		       b0 08		      BCS	.skipL0324_2
  11107  50e9
  11108  50e9		       a5 ce		      LDA	temp4
  11109  50eb
  11110  50eb		       38		      SEC
  11111  50ec
  11112  50ec		       e5 cc		      SBC	temp2
  11113  50ee
  11114  50ee		       4c f4 90 	      jmp	.skipelse17_2
  11115  50f1
  11116  50f1				   .skipL0324_2
  11117  50f1
  11118  50f1		       38		      SEC
  11119  50f2
  11120  50f2		       e5 ce		      SBC	temp4
  11121  50f4
  11122  50f4				   .skipelse17_2
  11123  50f4
  11124  50f4		       85 cf		      STA	temp5
  11125  50f6
  11126  50f6		       a5 86		      LDA	player2x
  11127  50f8
  11128  50f8		       38		      SEC
  11129  50f9
  11130  50f9		       e9 06		      SBC	#6
  11131  50fb
  11132  50fb		       85 cc		      STA	temp2
  11133  50fd
  11134  50fd
  11135  50fd
  11136  50fd		       c5 89		      CMP	player5x
  11137  50ff
  11138  50ff		       90 06		      BCC	.skipL0326_2
  11139  5101
  11140  5101		       38		      SEC
  11141  5102
  11142  5102		       e5 89		      SBC	player5x
  11143  5104
  11144  5104		       4c 0c 91 	      jmp	.skipelse18_2
  11145  5107
  11146  5107				   .skipL0326_2
  11147  5107
  11148  5107		       a5 89		      LDA	player5x
  11149  5109
  11150  5109		       38		      SEC
  11151  510a
  11152  510a		       e5 cc		      SBC	temp2
  11153  510c
  11154  510c				   .skipelse18_2
  11155  510c
  11156  510c		       85 ce		      STA	temp4
  11157  510e
  11158  510e		       c9 0e		      CMP	#14
  11159  5110
  11160  5110		       b0 27		      BCS	.ThirdOne
  11161  5112
  11162  5112		       a9 0a		      LDA	#10
  11163  5114
  11164  5114		       c5 cf		      CMP	temp5
  11165  5116
  11166  5116		       90 21		      BCC	.ThirdOne
  11167  5118
  11168  5118		       a0 01		      LDY	#1
  11169  511a
  11170  511a				   .L0418		;  player2y = 120
  11171  511a
  11172  511a		       a9 78		      LDA	#120
  11173  511c		       85 8f		      STA	player2y
  11174  511e				   .L0419		;  if !w{5} then dec player2score = player2score + $01 else dec player3score = player3score + $01
  11175  511e
  11176  511e		       a5 ed		      LDA	w
  11177  5120		       29 20		      AND	#32
  11178  5122		       d0 0c		      BNE	.skipL0419
  11179  5124				   .condpart175
  11180  5124		       f8		      SED
  11181  5125		       a5 d2		      LDA	player2score
  11182  5127		       18		      CLC
  11183  5128		       69 01		      ADC	#$01
  11184  512a		       85 d2		      STA	player2score
  11185  512c		       d8		      CLD
  11186  512d		       4c 39 91 	      jmp	.skipelse15
  11187  5130				   .skipL0419
  11188  5130		       f8		      SED
  11189  5131		       a5 d3		      LDA	player3score
  11190  5133		       18		      CLC
  11191  5134		       69 01		      ADC	#$01
  11192  5136		       85 d3		      STA	player3score
  11193  5138		       d8		      CLD
  11194  5139				   .skipelse15
  11195  5139				   .
  11196  5139							; 
  11197  5139
  11198  5139				   .ThirdOne
  11199  5139							; ThirdOne
  11200  5139
  11201  5139				   .L0420		;  asm
  11202  5139
  11203  5139		       a5 92		      LDA	player5y
  11204  513b
  11205  513b		       38		      SEC
  11206  513c
  11207  513c		       e9 09		      SBC	#9
  11208  513e
  11209  513e		       85 ce		      STA	temp4
  11210  5140
  11211  5140		       a5 90		      LDA	player3y
  11212  5142
  11213  5142		       38		      SEC
  11214  5143
  11215  5143		       e9 04		      SBC	#4
  11216  5145
  11217  5145		       85 cc		      STA	temp2
  11218  5147
  11219  5147		       c5 ce		      CMP	temp4
  11220  5149
  11221  5149		       b0 08		      BCS	.skipL0338_1
  11222  514b
  11223  514b		       a5 ce		      LDA	temp4
  11224  514d
  11225  514d		       38		      SEC
  11226  514e
  11227  514e		       e5 cc		      SBC	temp2
  11228  5150
  11229  5150		       4c 56 91 	      jmp	.skipelse23_11
  11230  5153
  11231  5153				   .skipL0338_1
  11232  5153
  11233  5153		       38		      SEC
  11234  5154
  11235  5154		       e5 ce		      SBC	temp4
  11236  5156
  11237  5156				   .skipelse23_11
  11238  5156
  11239  5156		       85 cf		      STA	temp5
  11240  5158
  11241  5158
  11242  5158
  11243  5158		       a5 87		      LDA	player3x
  11244  515a
  11245  515a		       38		      SEC
  11246  515b
  11247  515b		       e9 06		      SBC	#6
  11248  515d
  11249  515d		       85 cc		      STA	temp2
  11250  515f
  11251  515f		       c5 89		      CMP	player5x
  11252  5161
  11253  5161		       90 06		      BCC	.skipL0340_1
  11254  5163
  11255  5163		       38		      SEC
  11256  5164
  11257  5164		       e5 89		      SBC	player5x
  11258  5166
  11259  5166		       4c 6e 91 	      jmp	.skipelse24_111
  11260  5169
  11261  5169				   .skipL0340_1
  11262  5169
  11263  5169		       a5 89		      LDA	player5x
  11264  516b
  11265  516b		       38		      SEC
  11266  516c
  11267  516c		       e5 cc		      SBC	temp2
  11268  516e
  11269  516e				   .skipelse24_111
  11270  516e
  11271  516e		       85 ce		      STA	temp4
  11272  5170
  11273  5170
  11274  5170
  11275  5170		       c9 0e		      CMP	#14
  11276  5172
  11277  5172		       b0 27		      BCS	.FourthOne
  11278  5174
  11279  5174		       a9 0a		      LDA	#10
  11280  5176
  11281  5176		       c5 cf		      CMP	temp5
  11282  5178
  11283  5178		       90 21		      BCC	.FourthOne
  11284  517a
  11285  517a		       a0 01		      LDY	#1
  11286  517c
  11287  517c				   .L0421		;  player3y = 120
  11288  517c
  11289  517c		       a9 78		      LDA	#120
  11290  517e		       85 90		      STA	player3y
  11291  5180				   .L0422		;  if !w{5} then dec player2score = player2score + $01 else dec player3score = player3score + $01
  11292  5180
  11293  5180		       a5 ed		      LDA	w
  11294  5182		       29 20		      AND	#32
  11295  5184		       d0 0c		      BNE	.skipL0422
  11296  5186				   .condpart176
  11297  5186		       f8		      SED
  11298  5187		       a5 d2		      LDA	player2score
  11299  5189		       18		      CLC
  11300  518a		       69 01		      ADC	#$01
  11301  518c		       85 d2		      STA	player2score
  11302  518e		       d8		      CLD
  11303  518f		       4c 9b 91 	      jmp	.skipelse16
  11304  5192				   .skipL0422
  11305  5192		       f8		      SED
  11306  5193		       a5 d3		      LDA	player3score
  11307  5195		       18		      CLC
  11308  5196		       69 01		      ADC	#$01
  11309  5198		       85 d3		      STA	player3score
  11310  519a		       d8		      CLD
  11311  519b				   .skipelse16
  11312  519b				   .
  11313  519b							; 
  11314  519b
  11315  519b				   .FourthOne
  11316  519b							; FourthOne
  11317  519b
  11318  519b				   .L0423		;  asm
  11319  519b
  11320  519b		       a5 92		      LDA	player5y
  11321  519d
  11322  519d		       38		      SEC
  11323  519e
  11324  519e		       e9 09		      SBC	#9
  11325  51a0
  11326  51a0		       85 ce		      STA	temp4
  11327  51a2
  11328  51a2		       a5 91		      LDA	player4y
  11329  51a4
  11330  51a4		       38		      SEC
  11331  51a5
  11332  51a5		       e9 04		      SBC	#4
  11333  51a7
  11334  51a7		       85 cc		      STA	temp2
  11335  51a9
  11336  51a9		       c5 ce		      CMP	temp4
  11337  51ab
  11338  51ab		       b0 08		      BCS	.skipL0338_2
  11339  51ad
  11340  51ad		       a5 ce		      LDA	temp4
  11341  51af
  11342  51af		       38		      SEC
  11343  51b0
  11344  51b0		       e5 cc		      SBC	temp2
  11345  51b2
  11346  51b2		       4c b8 91 	      jmp	.skipelse23_22
  11347  51b5
  11348  51b5				   .skipL0338_2
  11349  51b5
  11350  51b5		       38		      SEC
  11351  51b6
  11352  51b6		       e5 ce		      SBC	temp4
  11353  51b8
  11354  51b8				   .skipelse23_22
  11355  51b8
  11356  51b8		       85 cf		      STA	temp5
  11357  51ba
  11358  51ba
  11359  51ba
  11360  51ba		       a5 88		      LDA	player4x
  11361  51bc
  11362  51bc		       38		      SEC
  11363  51bd
  11364  51bd		       e9 06		      SBC	#6
  11365  51bf
  11366  51bf		       85 cc		      STA	temp2
  11367  51c1
  11368  51c1		       c5 89		      CMP	player5x
  11369  51c3
  11370  51c3		       90 06		      BCC	.skipL0340_2
  11371  51c5
  11372  51c5		       38		      SEC
  11373  51c6
  11374  51c6		       e5 89		      SBC	player5x
  11375  51c8
  11376  51c8		       4c d0 91 	      jmp	.skipelse24_22
  11377  51cb
  11378  51cb				   .skipL0340_2
  11379  51cb
  11380  51cb		       a5 89		      LDA	player5x
  11381  51cd
  11382  51cd		       38		      SEC
  11383  51ce
  11384  51ce		       e5 cc		      SBC	temp2
  11385  51d0
  11386  51d0				   .skipelse24_22
  11387  51d0
  11388  51d0		       85 ce		      STA	temp4
  11389  51d2
  11390  51d2
  11391  51d2
  11392  51d2		       c9 0e		      CMP	#14
  11393  51d4
  11394  51d4		       b0 27		      BCS	.EnemyReaper
  11395  51d6
  11396  51d6		       a9 0a		      LDA	#10
  11397  51d8
  11398  51d8		       c5 cf		      CMP	temp5
  11399  51da
  11400  51da		       90 21		      BCC	.EnemyReaper
  11401  51dc
  11402  51dc		       a0 01		      LDY	#1
  11403  51de
  11404  51de				   .
  11405  51de							; 
  11406  51de
  11407  51de				   .
  11408  51de							; 
  11409  51de
  11410  51de				   .L0424		;  player4y = 120
  11411  51de
  11412  51de		       a9 78		      LDA	#120
  11413  51e0		       85 91		      STA	player4y
  11414  51e2				   .L0425		;  if !w{5} then dec player2score = player2score + $01 else dec player3score = player3score + $01
  11415  51e2
  11416  51e2		       a5 ed		      LDA	w
  11417  51e4		       29 20		      AND	#32
  11418  51e6		       d0 0c		      BNE	.skipL0425
  11419  51e8				   .condpart177
  11420  51e8		       f8		      SED
  11421  51e9		       a5 d2		      LDA	player2score
  11422  51eb		       18		      CLC
  11423  51ec		       69 01		      ADC	#$01
  11424  51ee		       85 d2		      STA	player2score
  11425  51f0		       d8		      CLD
  11426  51f1		       4c fd 91 	      jmp	.skipelse17
  11427  51f4				   .skipL0425
  11428  51f4		       f8		      SED
  11429  51f5		       a5 d3		      LDA	player3score
  11430  51f7		       18		      CLC
  11431  51f8		       69 01		      ADC	#$01
  11432  51fa		       85 d3		      STA	player3score
  11433  51fc		       d8		      CLD
  11434  51fd				   .skipelse17
  11435  51fd				   .EnemyReaper
  11436  51fd							; EnemyReaper
  11437  51fd
  11438  51fd				   .L0426		;  asm
  11439  51fd
  11440  51fd		       a5 ed		      LDA	w
  11441  51ff
  11442  51ff		       29 20		      AND	#32
  11443  5201
  11444  5201		       d0 5e		      BNE	.EnemyReaper2
  11445  5203
  11446  5203				   .
  11447  5203							; 
  11448  5203
  11449  5203				   .L0427		;  if o{3} then goto No_Catch
  11450  5203
  11451  5203		       a5 e5		      LDA	o
  11452  5205		       29 08		      AND	#8
  11453  5207		       f0 03		      BEQ	.skipL0427
  11454  5209				   .condpart178
  11455  5209		       4c 98 95 	      jmp	.No_Catch
  11456  520c
  11457  520c				   .skipL0427
  11458  520c				   .L0428		;  asm
  11459  520c
  11460  520c		       a5 de		      LDA	Reaper2_Y
  11461  520e
  11462  520e		       c5 92		      CMP	player5y
  11463  5210
  11464  5210		       b0 08		      BCS	.skipL0353_1
  11465  5212
  11466  5212		       a5 92		      LDA	player5y
  11467  5214
  11468  5214		       38		      SEC
  11469  5215
  11470  5215		       e5 de		      SBC	Reaper2_Y
  11471  5217
  11472  5217		       4c 1d 92 	      jmp	.skipelse29_1
  11473  521a
  11474  521a				   .skipL0353_1
  11475  521a
  11476  521a		       38		      SEC
  11477  521b
  11478  521b		       e5 92		      SBC	player5y
  11479  521d
  11480  521d				   .skipelse29_1
  11481  521d
  11482  521d		       85 cf		      STA	temp5
  11483  521f
  11484  521f
  11485  521f
  11486  521f		       a5 dd		      LDA	Reaper2_X
  11487  5221
  11488  5221		       38		      SEC
  11489  5222
  11490  5222		       e9 06		      SBC	#6
  11491  5224
  11492  5224		       85 cc		      STA	temp2
  11493  5226
  11494  5226
  11495  5226
  11496  5226		       c5 89		      CMP	player5x
  11497  5228
  11498  5228		       90 06		      BCC	.skipL0355_1
  11499  522a
  11500  522a		       38		      SEC
  11501  522b
  11502  522b		       e5 89		      SBC	player5x
  11503  522d
  11504  522d		       4c 35 92 	      jmp	.skipelse30_1
  11505  5230
  11506  5230				   .skipL0355_1
  11507  5230
  11508  5230		       a5 89		      LDA	player5x
  11509  5232
  11510  5232		       38		      SEC
  11511  5233
  11512  5233		       e5 cc		      SBC	temp2
  11513  5235
  11514  5235				   .skipelse30_1
  11515  5235
  11516  5235		       85 ce		      STA	temp4
  11517  5237
  11518  5237		       c9 10		      CMP	#16
  11519  5239
  11520  5239		       90 03		      BCC	.Nope1_1
  11521  523b
  11522  523b		       4c 98 95 	      jmp	.No_Catch
  11523  523e
  11524  523e				   .Nope1_1
  11525  523e
  11526  523e		       a9 0e		      LDA	#14
  11527  5240
  11528  5240		       c5 cf		      CMP	temp5
  11529  5242
  11530  5242		       b0 03		      BCS	.Nope2_1
  11531  5244
  11532  5244		       4c 98 95 	      jmp	.No_Catch
  11533  5247
  11534  5247				   .Nope2_1
  11535  5247
  11536  5247		       a0 01		      LDY	#1
  11537  5249
  11538  5249				   .L0429		;  if Life2 > 0  &&  !o{4} then dec Life2 = Life2 - $01
  11539  5249
  11540  5249		       a9 00		      LDA	#0
  11541  524b		       c5 c2		      CMP	Life2
  11542  524d		       b0 0f		      BCS	.skipL0429
  11543  524f				   .condpart179
  11544  524f		       a5 e5		      LDA	o
  11545  5251		       29 10		      AND	#16
  11546  5253		       d0 09		      BNE	.skip179then
  11547  5255				   .condpart180
  11548  5255		       f8		      SED
  11549  5256		       a5 c2		      LDA	Life2
  11550  5258		       38		      SEC
  11551  5259		       e9 01		      SBC	#$01
  11552  525b		       85 c2		      STA	Life2
  11553  525d		       d8		      CLD
  11554  525e				   .skip179then
  11555  525e				   .skipL0429
  11556  525e				   .L0430		;  goto No_Catch
  11557  525e
  11558  525e		       4c 98 95 	      jmp	.No_Catch
  11559  5261
  11560  5261				   .
  11561  5261							; 
  11562  5261
  11563  5261				   .EnemyReaper2
  11564  5261							; EnemyReaper2
  11565  5261
  11566  5261				   .L0431		;  if o{4} then goto No_Catch
  11567  5261
  11568  5261		       a5 e5		      LDA	o
  11569  5263		       29 10		      AND	#16
  11570  5265		       f0 03		      BEQ	.skipL0431
  11571  5267				   .condpart181
  11572  5267		       4c 98 95 	      jmp	.No_Catch
  11573  526a
  11574  526a				   .skipL0431
  11575  526a				   .
  11576  526a							; 
  11577  526a
  11578  526a				   .L0432		;  asm
  11579  526a
  11580  526a		       a5 dc		      LDA	Reaper1_Y
  11581  526c
  11582  526c		       c5 92		      CMP	player5y
  11583  526e
  11584  526e		       b0 08		      BCS	.skipL0353_2
  11585  5270
  11586  5270		       a5 92		      LDA	player5y
  11587  5272
  11588  5272		       38		      SEC
  11589  5273
  11590  5273		       e5 dc		      SBC	Reaper1_Y
  11591  5275
  11592  5275		       4c 7b 92 	      jmp	.skipelse29_2
  11593  5278
  11594  5278				   .skipL0353_2
  11595  5278
  11596  5278		       38		      SEC
  11597  5279
  11598  5279		       e5 92		      SBC	player5y
  11599  527b
  11600  527b				   .skipelse29_2
  11601  527b
  11602  527b		       85 cf		      STA	temp5
  11603  527d
  11604  527d
  11605  527d
  11606  527d		       a5 da		      LDA	Reaper1_X
  11607  527f
  11608  527f		       38		      SEC
  11609  5280
  11610  5280		       e9 06		      SBC	#6
  11611  5282
  11612  5282		       85 cc		      STA	temp2
  11613  5284
  11614  5284
  11615  5284
  11616  5284		       c5 89		      CMP	player5x
  11617  5286
  11618  5286		       90 06		      BCC	.skipL0355_2
  11619  5288
  11620  5288		       38		      SEC
  11621  5289
  11622  5289		       e5 89		      SBC	player5x
  11623  528b
  11624  528b		       4c 93 92 	      jmp	.skipelse30_2
  11625  528e
  11626  528e				   .skipL0355_2
  11627  528e
  11628  528e		       a5 89		      LDA	player5x
  11629  5290
  11630  5290		       38		      SEC
  11631  5291
  11632  5291		       e5 cc		      SBC	temp2
  11633  5293
  11634  5293				   .skipelse30_2
  11635  5293
  11636  5293		       85 ce		      STA	temp4
  11637  5295
  11638  5295
  11639  5295
  11640  5295		       c9 10		      CMP	#16
  11641  5297
  11642  5297		       90 03		      BCC	.Nope1_2
  11643  5299
  11644  5299		       4c 98 95 	      jmp	.No_Catch
  11645  529c
  11646  529c				   .Nope1_2
  11647  529c
  11648  529c		       a9 0e		      LDA	#14
  11649  529e
  11650  529e		       c5 cf		      CMP	temp5
  11651  52a0
  11652  52a0		       b0 03		      BCS	.Nope2_2
  11653  52a2
  11654  52a2		       4c 98 95 	      jmp	.No_Catch
  11655  52a5
  11656  52a5				   .Nope2_2
  11657  52a5
  11658  52a5		       a0 01		      LDY	#1
  11659  52a7
  11660  52a7				   .
  11661  52a7							; 
  11662  52a7
  11663  52a7				   .L0433		;  if Life1 > 0  &&  !o{3} then dec Life1 = Life1 - $01
  11664  52a7
  11665  52a7		       a9 00		      LDA	#0
  11666  52a9		       c5 c1		      CMP	Life1
  11667  52ab		       b0 0f		      BCS	.skipL0433
  11668  52ad				   .condpart182
  11669  52ad		       a5 e5		      LDA	o
  11670  52af		       29 08		      AND	#8
  11671  52b1		       d0 09		      BNE	.skip182then
  11672  52b3				   .condpart183
  11673  52b3		       f8		      SED
  11674  52b4		       a5 c1		      LDA	Life1
  11675  52b6		       38		      SEC
  11676  52b7		       e9 01		      SBC	#$01
  11677  52b9		       85 c1		      STA	Life1
  11678  52bb		       d8		      CLD
  11679  52bc				   .skip182then
  11680  52bc				   .skipL0433
  11681  52bc				   .L0434		;  goto No_Catch
  11682  52bc
  11683  52bc		       4c 98 95 	      jmp	.No_Catch
  11684  52bf
  11685  52bf				   .Shiiiit
  11686  52bf							; Shiiiit
  11687  52bf
  11688  52bf				   .L0435		;  player5y = 120 :  goto No_Catch
  11689  52bf
  11690  52bf		       a9 78		      LDA	#120
  11691  52c1		       85 92		      STA	player5y
  11692  52c3		       4c 98 95 	      jmp	.No_Catch
  11693  52c6
  11694  52c6				   .
  11695  52c6							; 
  11696  52c6
  11697  52c6				   .
  11698  52c6							; 
  11699  52c6
  11700  52c6				   .Power_1
  11701  52c6							; Power_1
  11702  52c6
  11703  52c6				   .L0436		;  player5y = 120
  11704  52c6
  11705  52c6		       a9 78		      LDA	#120
  11706  52c8		       85 92		      STA	player5y
  11707  52ca				   .L0437		;  if w{5} then goto Double_2
  11708  52ca
  11709  52ca		       a5 ed		      LDA	w
  11710  52cc		       29 20		      AND	#32
  11711  52ce		       f0 03		      BEQ	.skipL0437
  11712  52d0				   .condpart184
  11713  52d0		       4c fa 92 	      jmp	.Double_2
  11714  52d3
  11715  52d3				   .skipL0437
  11716  52d3				   .
  11717  52d3							; 
  11718  52d3
  11719  52d3				   .L0438		;  if e{0} then goto No_Catch
  11720  52d3
  11721  52d3		       a5 db		      LDA	e
  11722  52d5		       4a		      LSR
  11723  52d6		       90 03		      BCC	.skipL0438
  11724  52d8				   .condpart185
  11725  52d8		       4c 98 95 	      jmp	.No_Catch
  11726  52db
  11727  52db				   .skipL0438
  11728  52db				   .L0439		;  NUSIZ0 = $32
  11729  52db
  11730  52db		       a9 32		      LDA	#$32
  11731  52dd		       85 04		      STA	NUSIZ0
  11732  52df				   .L0440		;  asm
  11733  52df
  11734  52df		       a9 62		      LDA	#98
  11735  52e1
  11736  52e1		       c5 da		      CMP	Reaper1_X
  11737  52e3
  11738  52e3		       b0 02		      BCS	.skipL0371_11
  11739  52e5
  11740  52e5		       85 da		      STA	Reaper1_X
  11741  52e7
  11742  52e7				   .skipL0371_11
  11743  52e7
  11744  52e7		       c5 e1		      CMP	Shoot1_X
  11745  52e9
  11746  52e9		       b0 0c		      BCS	.skipL0372_11
  11747  52eb
  11748  52eb		       a9 a0		      LDA	#160
  11749  52ed
  11750  52ed		       85 e2		      STA	Shoot1_Y
  11751  52ef
  11752  52ef		       a5 e5		      LDA	o
  11753  52f1
  11754  52f1		       29 7f		      AND	#127
  11755  52f3
  11756  52f3		       29 df		      AND	#223
  11757  52f5
  11758  52f5		       85 e5		      STA	o
  11759  52f7
  11760  52f7				   .skipL0372_11
  11761  52f7
  11762  52f7
  11763  52f7
  11764  52f7				   .L0441		;  goto No_Catch
  11765  52f7
  11766  52f7		       4c 98 95 	      jmp	.No_Catch
  11767  52fa
  11768  52fa				   .Double_2
  11769  52fa							; Double_2
  11770  52fa
  11771  52fa				   .L0442		;  if !e{0} then goto No_Catch
  11772  52fa
  11773  52fa		       a5 db		      LDA	e
  11774  52fc		       4a		      LSR
  11775  52fd		       b0 03		      BCS	.skipL0442
  11776  52ff				   .condpart186
  11777  52ff		       4c 98 95 	      jmp	.No_Catch
  11778  5302
  11779  5302				   .skipL0442
  11780  5302				   .L0443		;  NUSIZ0 = $32
  11781  5302
  11782  5302		       a9 32		      LDA	#$32
  11783  5304		       85 04		      STA	NUSIZ0
  11784  5306				   .
  11785  5306							; 
  11786  5306
  11787  5306				   .L0444		;  asm
  11788  5306
  11789  5306		       a9 62		      LDA	#98
  11790  5308
  11791  5308		       c5 dd		      CMP	Reaper2_X
  11792  530a
  11793  530a		       b0 02		      BCS	.skipL0371_22
  11794  530c
  11795  530c		       85 dd		      STA	Reaper2_X
  11796  530e
  11797  530e				   .skipL0371_22
  11798  530e
  11799  530e		       c5 e3		      CMP	Shoot2_X
  11800  5310
  11801  5310		       b0 10		      BCS	.skipL0372_22
  11802  5312
  11803  5312		       a9 a0		      LDA	#160
  11804  5314
  11805  5314		       85 e4		      STA	Shoot2_Y
  11806  5316
  11807  5316		       a5 e9		      LDA	s
  11808  5318
  11809  5318		       29 fe		      AND	#254
  11810  531a
  11811  531a		       85 e9		      STA	s
  11812  531c
  11813  531c		       a5 e5		      LDA	o
  11814  531e
  11815  531e		       29 bf		      AND	#191
  11816  5320
  11817  5320		       85 e5		      STA	o
  11818  5322
  11819  5322				   .skipL0372_22
  11820  5322
  11821  5322
  11822  5322
  11823  5322				   .
  11824  5322							; 
  11825  5322
  11826  5322				   .L0445		;  goto No_Catch
  11827  5322
  11828  5322		       4c 98 95 	      jmp	.No_Catch
  11829  5325
  11830  5325				   .Power_2
  11831  5325							; Power_2
  11832  5325
  11833  5325				   .L0446		;  player5y = 120
  11834  5325
  11835  5325		       a9 78		      LDA	#120
  11836  5327		       85 92		      STA	player5y
  11837  5329				   .
  11838  5329							; 
  11839  5329
  11840  5329				   .L0447		;  if w{5} then goto Homing_2
  11841  5329
  11842  5329		       a5 ed		      LDA	w
  11843  532b		       29 20		      AND	#32
  11844  532d		       f0 03		      BEQ	.skipL0447
  11845  532f				   .condpart187
  11846  532f		       4c 71 93 	      jmp	.Homing_2
  11847  5332
  11848  5332				   .skipL0447
  11849  5332				   .L0448		;  asm
  11850  5332
  11851  5332		       a5 db		      LDA	e
  11852  5334
  11853  5334		       4a		      LSR
  11854  5335
  11855  5335		       b0 04		      BCS	.condpart211_11
  11856  5337
  11857  5337		       24 e5		      BIT	o
  11858  5339
  11859  5339		       30 03		      BMI	.skip63OR_1
  11860  533b
  11861  533b				   .condpart211_11
  11862  533b
  11863  533b		       4c 98 95 	      jmp	.No_Catch
  11864  533e
  11865  533e				   .skip63OR_1
  11866  533e
  11867  533e		       a5 de		      LDA	Reaper2_Y
  11868  5340
  11869  5340		       38		      SEC
  11870  5341
  11871  5341		       e9 0a		      SBC	#10
  11872  5343
  11873  5343		       85 ce		      STA	temp4
  11874  5345
  11875  5345		       c5 e2		      CMP	Shoot1_Y
  11876  5347
  11877  5347		       90 06		      BCC	.skipL0383_1
  11878  5349
  11879  5349		       38		      SEC
  11880  534a
  11881  534a		       e5 e2		      SBC	Shoot1_Y
  11882  534c
  11883  534c		       4c 54 93 	      jmp	.skipelse33_1
  11884  534f
  11885  534f				   .skipL0383_1
  11886  534f
  11887  534f		       a5 e2		      LDA	Shoot1_Y
  11888  5351
  11889  5351		       38		      SEC
  11890  5352
  11891  5352		       e5 ce		      SBC	temp4
  11892  5354
  11893  5354				   .skipelse33_1
  11894  5354
  11895  5354		       85 cf		      STA	temp5
  11896  5356
  11897  5356		       c9 04		      CMP	#4
  11898  5358
  11899  5358		       b0 03		      BCS	.skipL0384_1
  11900  535a
  11901  535a		       4c 98 95 	      jmp	.No_Catch
  11902  535d
  11903  535d				   .skipL0384_1
  11904  535d
  11905  535d		       a5 e2		      LDA	Shoot1_Y
  11906  535f
  11907  535f		       c5 ce		      CMP	temp4
  11908  5361
  11909  5361		       90 06		      BCC	.skipL0385_1
  11910  5363
  11911  5363		       38		      SEC
  11912  5364
  11913  5364		       e9 04		      SBC	#4
  11914  5366
  11915  5366		       4c 6c 93 	      jmp	.skipelse34_1
  11916  5369
  11917  5369				   .skipL0385_1
  11918  5369
  11919  5369		       18		      CLC
  11920  536a
  11921  536a		       69 04		      ADC	#4
  11922  536c
  11923  536c				   .skipelse34_1
  11924  536c
  11925  536c		       85 e2		      STA	Shoot1_Y
  11926  536e
  11927  536e				   .
  11928  536e							; 
  11929  536e
  11930  536e				   .L0449		;  goto No_Catch
  11931  536e
  11932  536e		       4c 98 95 	      jmp	.No_Catch
  11933  5371
  11934  5371				   .Homing_2
  11935  5371							; Homing_2
  11936  5371
  11937  5371				   .L0450		;  asm
  11938  5371
  11939  5371		       a5 db		      LDA	e
  11940  5373
  11941  5373		       4a		      LSR
  11942  5374
  11943  5374		       90 05		      BCC	.condpart211_22
  11944  5376
  11945  5376		       a5 e9		      LDA	s
  11946  5378
  11947  5378		       4a		      LSR
  11948  5379
  11949  5379		       b0 03		      BCS	.skip63OR_2
  11950  537b
  11951  537b				   .condpart211_22
  11952  537b
  11953  537b		       4c 98 95 	      jmp	.No_Catch
  11954  537e
  11955  537e				   .skip63OR_2
  11956  537e
  11957  537e		       a5 dc		      LDA	Reaper1_Y
  11958  5380
  11959  5380		       38		      SEC
  11960  5381
  11961  5381		       e9 0a		      SBC	#10
  11962  5383
  11963  5383		       85 ce		      STA	temp4
  11964  5385
  11965  5385		       c5 e4		      CMP	Shoot2_Y
  11966  5387
  11967  5387		       90 06		      BCC	.skipL0383_2
  11968  5389
  11969  5389		       38		      SEC
  11970  538a
  11971  538a		       e5 e4		      SBC	Shoot2_Y
  11972  538c
  11973  538c		       4c 94 93 	      jmp	.skipelse33_2
  11974  538f
  11975  538f				   .skipL0383_2
  11976  538f
  11977  538f		       a5 e4		      LDA	Shoot2_Y
  11978  5391
  11979  5391		       38		      SEC
  11980  5392
  11981  5392		       e5 ce		      SBC	temp4
  11982  5394
  11983  5394				   .skipelse33_2
  11984  5394
  11985  5394		       85 cf		      STA	temp5
  11986  5396
  11987  5396		       c9 04		      CMP	#4
  11988  5398
  11989  5398		       b0 03		      BCS	.skipL0384_2
  11990  539a
  11991  539a		       4c 98 95 	      jmp	.No_Catch
  11992  539d
  11993  539d				   .skipL0384_2
  11994  539d
  11995  539d		       a5 e4		      LDA	Shoot2_Y
  11996  539f
  11997  539f		       c5 ce		      CMP	temp4
  11998  53a1
  11999  53a1		       90 06		      BCC	.skipL0385_2
  12000  53a3
  12001  53a3		       38		      SEC
  12002  53a4
  12003  53a4		       e9 04		      SBC	#4
  12004  53a6
  12005  53a6		       4c ac 93 	      jmp	.skipelse34_2
  12006  53a9
  12007  53a9				   .skipL0385_2
  12008  53a9
  12009  53a9		       18		      CLC
  12010  53aa
  12011  53aa		       69 04		      ADC	#4
  12012  53ac
  12013  53ac				   .skipelse34_2
  12014  53ac
  12015  53ac		       85 e4		      STA	Shoot2_Y
  12016  53ae
  12017  53ae				   .
  12018  53ae							; 
  12019  53ae
  12020  53ae				   .L0451		;  goto No_Catch
  12021  53ae
  12022  53ae		       4c 98 95 	      jmp	.No_Catch
  12023  53b1
  12024  53b1				   .
  12025  53b1							; 
  12026  53b1
  12027  53b1				   .
  12028  53b1							; 
  12029  53b1
  12030  53b1				   .Power_4
  12031  53b1							; Power_4
  12032  53b1
  12033  53b1				   .
  12034  53b1							; 
  12035  53b1
  12036  53b1				   .L0452		;  asm
  12037  53b1
  12038  53b1		       a5 ed		      LDA	w
  12039  53b3
  12040  53b3		       29 20		      AND	#32
  12041  53b5
  12042  53b5		       d0 0e		      BNE	.w5is1
  12043  53b7
  12044  53b7		       a5 e5		      LDA	o
  12045  53b9
  12046  53b9		       29 20		      AND	#32
  12047  53bb
  12048  53bb		       d0 1d		      BNE	.NoDisappear
  12049  53bd
  12050  53bd		       a5 db		      LDA	e
  12051  53bf
  12052  53bf		       4a		      LSR
  12053  53c0
  12054  53c0		       b0 18		      BCS	.NoDisappear
  12055  53c2
  12056  53c2		       4c ce 93 	      jmp	.Disappear
  12057  53c5
  12058  53c5
  12059  53c5
  12060  53c5				   .w5is1
  12061  53c5
  12062  53c5		       24 e5		      BIT	o
  12063  53c7
  12064  53c7		       70 11		      BVS	.NoDisappear
  12065  53c9
  12066  53c9		       a5 db		      LDA	e
  12067  53cb
  12068  53cb		       4a		      LSR
  12069  53cc
  12070  53cc		       90 0c		      BCC	.NoDisappear
  12071  53ce
  12072  53ce				   .Disappear
  12073  53ce
  12074  53ce				   .L0453		;  player0:
  12075  53ce
  12076  53ce		       a2 ab		      LDX	#<playerL0453_0
  12077  53d0		       86 a2		      STX	player0pointerlo
  12078  53d2		       a9 f5		      LDA	#>playerL0453_0
  12079  53d4		       85 a3		      STA	player0pointerhi
  12080  53d6		       a9 03		      LDA	#3
  12081  53d8		       85 b0		      STA	player0height
  12082  53da				   .NoDisappear
  12083  53da							; NoDisappear
  12084  53da
  12085  53da				   .
  12086  53da							; 
  12087  53da
  12088  53da				   .
  12089  53da							; 
  12090  53da
  12091  53da				   .
  12092  53da							; 
  12093  53da
  12094  53da				   .L0454		;  player5y = 120 :  goto No_Catch
  12095  53da
  12096  53da		       a9 78		      LDA	#120
  12097  53dc		       85 92		      STA	player5y
  12098  53de		       4c 98 95 	      jmp	.No_Catch
  12099  53e1
  12100  53e1				   .
  12101  53e1							; 
  12102  53e1
  12103  53e1				   .Power_5
  12104  53e1							; Power_5
  12105  53e1
  12106  53e1				   .L0455		;  player5y = 120 :  COLUBK = $0e
  12107  53e1
  12108  53e1		       a9 78		      LDA	#120
  12109  53e3		       85 92		      STA	player5y
  12110  53e5		       a9 0e		      LDA	#$0e
  12111  53e7		       85 09		      STA	COLUBK
  12112  53e9				   .L0456		;  asm
  12113  53e9
  12114  53e9		       a5 c2		      LDA	Life2
  12115  53eb
  12116  53eb		       c5 c1		      CMP	Life1
  12117  53ed
  12118  53ed		       b0 09		      BCS	.skipL0398_1
  12119  53ef
  12120  53ef		       f8		      SED
  12121  53f0
  12122  53f0		       a5 c1		      LDA	Life1
  12123  53f2
  12124  53f2		       38		      SEC
  12125  53f3
  12126  53f3		       e5 c2		      SBC	Life2
  12127  53f5
  12128  53f5		       4c fb 93 	      jmp	.skipelse37_111
  12129  53f8
  12130  53f8				   .skipL0398_1
  12131  53f8
  12132  53f8		       38		      SEC
  12133  53f9
  12134  53f9		       e5 c1		      SBC	Life1
  12135  53fb
  12136  53fb				   .skipelse37_111
  12137  53fb
  12138  53fb		       4a		      lsr
  12139  53fc
  12140  53fc		       85 ce		      STA	temp4
  12141  53fe
  12142  53fe		       f8		      SED
  12143  53ff
  12144  53ff		       a5 c1		      LDA	Life1
  12145  5401
  12146  5401		       c5 c2		      CMP	Life2
  12147  5403
  12148  5403		       90 06		      BCC	.skipL0400_11
  12149  5405
  12150  5405		       38		      SEC
  12151  5406
  12152  5406		       e5 ce		      SBC	temp4
  12153  5408
  12154  5408		       4c 0e 94 	      jmp	.skipelse38_11
  12155  540b
  12156  540b				   .skipL0400_11
  12157  540b
  12158  540b		       18		      CLC
  12159  540c
  12160  540c		       65 ce		      ADC	temp4
  12161  540e
  12162  540e				   .skipelse38_11
  12163  540e
  12164  540e		       85 c2		      STA	Life2
  12165  5410
  12166  5410		       85 c1		      STA	Life1
  12167  5412
  12168  5412		       a5 d2		      LDA	Kills1
  12169  5414
  12170  5414		       c5 d3		      CMP	Kills2
  12171  5416
  12172  5416		       90 06		      BCC	.skipL0402_1
  12173  5418
  12174  5418		       38		      SEC
  12175  5419
  12176  5419		       e5 d3		      SBC	Kills2
  12177  541b
  12178  541b		       4c 23 94 	      jmp	.skipelse39_11
  12179  541e
  12180  541e				   .skipL0402_1
  12181  541e
  12182  541e		       a5 d3		      LDA	Kills2
  12183  5420
  12184  5420		       38		      SEC
  12185  5421
  12186  5421		       e5 d2		      SBC	Kills1
  12187  5423
  12188  5423				   .skipelse39_11
  12189  5423
  12190  5423		       4a		      lsr
  12191  5424
  12192  5424		       85 ce		      STA	temp4
  12193  5426
  12194  5426		       a5 d2		      LDA	Kills1
  12195  5428
  12196  5428		       c5 d3		      CMP	Kills2
  12197  542a
  12198  542a		       90 06		      BCC	.skipL0404_12
  12199  542c
  12200  542c		       38		      SEC
  12201  542d
  12202  542d		       e5 ce		      SBC	temp4
  12203  542f
  12204  542f		       4c 35 94 	      jmp	.skipelse40_1
  12205  5432
  12206  5432				   .skipL0404_12
  12207  5432
  12208  5432
  12209  5432
  12210  5432		       18		      CLC
  12211  5433
  12212  5433		       65 ce		      ADC	temp4
  12213  5435
  12214  5435				   .skipelse40_1
  12215  5435
  12216  5435		       85 d2		      STA	Kills1
  12217  5437
  12218  5437		       85 d3		      STA	Kills2
  12219  5439
  12220  5439		       d8		      CLD
  12221  543a
  12222  543a				   .L0457		;  HouseHeight = 0 :  playfield:
  12223  543a
  12224  543a		       a9 00		      LDA	#0
  12225  543c		       85 f0		      STA	HouseHeight
  12226  543e		       a9 42		      LDA	#<PF1_data2
  12227  5440		       85 bb		      STA	PF1pointer
  12228  5442		       a9 fd		      LDA	#>PF1_data2
  12229  5444		       85 bc		      STA	PF1pointer+1
  12230  5446		       a9 58		      LDA	#<PF2_data2
  12231  5448		       85 bd		      STA	PF2pointer
  12232  544a		       a9 fd		      LDA	#>PF2_data2
  12233  544c		       85 be		      STA	PF2pointer+1
  12234  544e				   .L0458		;  asm
  12235  544e
  12236  544e		       a5 ed		      LDA	w
  12237  5450
  12238  5450		       29 f7		      AND	#247
  12239  5452
  12240  5452		       29 ef		      AND	#239
  12241  5454
  12242  5454		       85 ed		      STA	w
  12243  5456
  12244  5456				   .Power_6
  12245  5456							; Power_6
  12246  5456
  12247  5456				   .L0459		;  COLUP5 = COLUP5 + 1
  12248  5456
  12249  5456		       e6 9c		      INC	COLUP5
  12250  5458				   .L0460		;  if Enemy_Sprite_Counter = 0 then player5:
  12251  5458
  12252  5458		       a5 ee		      LDA	Enemy_Sprite_Counter
  12253  545a		       c9 00		      CMP	#0
  12254  545c		       d0 0c		      BNE	.skipL0460
  12255  545e				   .condpart188
  12256  545e		       a2 ae		      LDX	#<player188then_5
  12257  5460		       86 aa		      STX	player5pointerlo
  12258  5462		       a9 f5		      LDA	#>player188then_5
  12259  5464		       85 af		      STA	player5pointerhi
  12260  5466		       a9 0d		      LDA	#13
  12261  5468		       85 b5		      STA	player5height
  12262  546a				   .skipL0460
  12263  546a				   .
  12264  546a							; 
  12265  546a
  12266  546a				   .L0461		;  asm
  12267  546a
  12268  546a		       a5 ee		      LDA	Enemy_Sprite_Counter
  12269  546c
  12270  546c		       c9 01		      CMP	#1
  12271  546e
  12272  546e		       f0 04		      BEQ	.condpart232_1
  12273  5470
  12274  5470		       c9 03		      CMP	#3
  12275  5472
  12276  5472		       d0 0c		      BNE	.gogogoo
  12277  5474
  12278  5474				   .condpart232_1
  12279  5474
  12280  5474				   .L0462		;  player5:
  12281  5474
  12282  5474		       a2 ba		      LDX	#<playerL0462_5
  12283  5476		       86 aa		      STX	player5pointerlo
  12284  5478		       a9 f5		      LDA	#>playerL0462_5
  12285  547a		       85 af		      STA	player5pointerhi
  12286  547c		       a9 0d		      LDA	#13
  12287  547e		       85 b5		      STA	player5height
  12288  5480				   .gogogoo
  12289  5480							; gogogoo
  12290  5480
  12291  5480				   .L0463		;  if Enemy_Sprite_Counter = 2 then player5:
  12292  5480
  12293  5480		       a5 ee		      LDA	Enemy_Sprite_Counter
  12294  5482		       c9 02		      CMP	#2
  12295  5484		       d0 0c		      BNE	.skipL0463
  12296  5486				   .condpart189
  12297  5486		       a2 c6		      LDX	#<player189then_5
  12298  5488		       86 aa		      STX	player5pointerlo
  12299  548a		       a9 f5		      LDA	#>player189then_5
  12300  548c		       85 af		      STA	player5pointerhi
  12301  548e		       a9 0d		      LDA	#13
  12302  5490		       85 b5		      STA	player5height
  12303  5492				   .skipL0463
  12304  5492				   .L0464		;  if !w{5} then goto Follow_player_2
  12305  5492
  12306  5492		       a5 ed		      LDA	w
  12307  5494		       29 20		      AND	#32
  12308  5496		       d0 03		      BNE	.skipL0464
  12309  5498				   .condpart190
  12310  5498		       4c ca 94 	      jmp	.Follow_player_2
  12311  549b
  12312  549b				   .skipL0464
  12313  549b				   .L0465		;  asm
  12314  549b
  12315  549b		       a5 da		      LDA	Reaper1_X
  12316  549d
  12317  549d		       18		      CLC
  12318  549e
  12319  549e		       69 06		      ADC	#6
  12320  54a0
  12321  54a0		       85 ce		      STA	temp4
  12322  54a2
  12323  54a2		       c5 89		      CMP	player5x
  12324  54a4
  12325  54a4		       b0 02		      BCS	.skipL0414_12
  12326  54a6
  12327  54a6		       c6 89		      DEC	player5x
  12328  54a8
  12329  54a8				   .skipL0414_12
  12330  54a8
  12331  54a8		       a5 89		      LDA	player5x
  12332  54aa
  12333  54aa		       c5 ce		      CMP	temp4
  12334  54ac
  12335  54ac		       b0 02		      BCS	.skipL0413_12
  12336  54ae
  12337  54ae		       e6 89		      INC	player5x
  12338  54b0
  12339  54b0				   .skipL0413_12
  12340  54b0
  12341  54b0
  12342  54b0
  12343  54b0		       a5 dc		      LDA	Reaper1_Y
  12344  54b2
  12345  54b2		       e5 b0		      SBC	player0height
  12346  54b4
  12347  54b4		       18		      CLC
  12348  54b5
  12349  54b5		       69 10		      ADC	#16
  12350  54b7
  12351  54b7		       85 cf		      STA	temp5
  12352  54b9
  12353  54b9		       c5 92		      CMP	player5y
  12354  54bb
  12355  54bb		       b0 02		      BCS	.skipL0416_12
  12356  54bd
  12357  54bd		       c6 92		      DEC	player5y
  12358  54bf
  12359  54bf				   .skipL0416_12
  12360  54bf
  12361  54bf		       a5 92		      LDA	player5y
  12362  54c1
  12363  54c1		       c5 cf		      CMP	temp5
  12364  54c3
  12365  54c3		       b0 02		      BCS	.skipL0415_12
  12366  54c5
  12367  54c5		       e6 92		      INC	player5y
  12368  54c7
  12369  54c7				   .skipL0415_12
  12370  54c7
  12371  54c7				   .L0466		;  goto GotoKillthem
  12372  54c7
  12373  54c7		       4c 73 90 	      jmp	.GotoKillthem
  12374  54ca
  12375  54ca				   .
  12376  54ca							; 
  12377  54ca
  12378  54ca				   .Follow_player_2
  12379  54ca							; Follow_player_2
  12380  54ca
  12381  54ca				   .L0467		;  asm
  12382  54ca
  12383  54ca		       a5 dd		      LDA	Reaper2_X
  12384  54cc
  12385  54cc		       18		      CLC
  12386  54cd
  12387  54cd		       69 06		      ADC	#6
  12388  54cf
  12389  54cf		       85 ce		      STA	temp4
  12390  54d1
  12391  54d1		       c5 89		      CMP	player5x
  12392  54d3
  12393  54d3		       b0 02		      BCS	.skipL0414_123
  12394  54d5
  12395  54d5		       c6 89		      DEC	player5x
  12396  54d7
  12397  54d7				   .skipL0414_123
  12398  54d7
  12399  54d7		       a5 89		      LDA	player5x
  12400  54d9
  12401  54d9		       c5 ce		      CMP	temp4
  12402  54db
  12403  54db		       b0 02		      BCS	.skipL0413_123
  12404  54dd
  12405  54dd		       e6 89		      INC	player5x
  12406  54df
  12407  54df				   .skipL0413_123
  12408  54df
  12409  54df
  12410  54df
  12411  54df		       a5 de		      LDA	Reaper2_Y
  12412  54e1
  12413  54e1		       e5 b0		      SBC	player0height
  12414  54e3
  12415  54e3		       18		      CLC
  12416  54e4
  12417  54e4		       69 10		      ADC	#16
  12418  54e6
  12419  54e6		       85 cf		      STA	temp5
  12420  54e8
  12421  54e8		       c5 92		      CMP	player5y
  12422  54ea
  12423  54ea		       b0 02		      BCS	.skipL0416_123
  12424  54ec
  12425  54ec		       c6 92		      DEC	player5y
  12426  54ee
  12427  54ee				   .skipL0416_123
  12428  54ee
  12429  54ee		       a5 92		      LDA	player5y
  12430  54f0
  12431  54f0		       c5 cf		      CMP	temp5
  12432  54f2
  12433  54f2		       b0 02		      BCS	.skipL0415_123
  12434  54f4
  12435  54f4		       e6 92		      INC	player5y
  12436  54f6
  12437  54f6				   .skipL0415_123
  12438  54f6
  12439  54f6				   .L0468		;  goto GotoKillthem
  12440  54f6
  12441  54f6		       4c 73 90 	      jmp	.GotoKillthem
  12442  54f9
  12443  54f9				   .Power_7
  12444  54f9							; Power_7
  12445  54f9
  12446  54f9				   .
  12447  54f9							; 
  12448  54f9
  12449  54f9				   .L0469		;  player5y = 120
  12450  54f9
  12451  54f9		       a9 78		      LDA	#120
  12452  54fb		       85 92		      STA	player5y
  12453  54fd				   .L0470		;  asm
  12454  54fd
  12455  54fd		       a5 ed		      LDA	w
  12456  54ff
  12457  54ff		       29 20		      AND	#32
  12458  5501
  12459  5501		       d0 36		      BNE	.Player2_BOOM
  12460  5503
  12461  5503				   .L0471		;  COLUBK = $42
  12462  5503
  12463  5503		       a9 42		      LDA	#$42
  12464  5505		       85 09		      STA	COLUBK
  12465  5507				   .
  12466  5507							; 
  12467  5507
  12468  5507				   .L0472		;  asm
  12469  5507
  12470  5507		       f8		      SED
  12471  5508
  12472  5508		       a5 d2		      LDA	player2score
  12473  550a
  12474  550a		       18		      CLC
  12475  550b
  12476  550b		       69 01		      ADC	#$01
  12477  550d
  12478  550d		       a2 78		      LDX	#120
  12479  550f
  12480  550f		       e4 8e		      CPX	player1y
  12481  5511
  12482  5511		       90 02		      BCC	.skipL0428_1
  12483  5513
  12484  5513		       85 d2		      STA	player2score
  12485  5515
  12486  5515				   .skipL0428_1
  12487  5515
  12488  5515		       e4 8f		      CPX	player2y
  12489  5517
  12490  5517		       90 02		      BCC	.skipL0429_1
  12491  5519
  12492  5519		       85 d2		      STA	player2score
  12493  551b
  12494  551b				   .skipL0429_1
  12495  551b
  12496  551b		       e4 90		      CPX	player3y
  12497  551d
  12498  551d		       90 02		      BCC	.skipL0430_12
  12499  551f
  12500  551f		       85 d2		      STA	player2score
  12501  5521
  12502  5521				   .skipL0430_12
  12503  5521
  12504  5521		       e4 91		      CPX	player4y
  12505  5523
  12506  5523		       90 02		      BCC	.skipL0431_1
  12507  5525
  12508  5525		       85 d2		      STA	player2score
  12509  5527
  12510  5527				   .skipL0431_1
  12511  5527
  12512  5527		       d8		      CLD
  12513  5528
  12514  5528				   .
  12515  5528							; 
  12516  5528
  12517  5528				   .L0473		;  player1score = $00 :  AUDC0 = 2 :  AUDF0 = 9 :  AUDV0 = 9
  12518  5528
  12519  5528		       a9 00		      LDA	#$00
  12520  552a		       85 c2		      STA	player1score
  12521  552c		       a9 02		      LDA	#2
  12522  552e		       85 15		      STA	AUDC0
  12523  5530		       a9 09		      LDA	#9
  12524  5532		       85 17		      STA	AUDF0
  12525  5534		       85 19		      STA	AUDV0
  12526  5536				   .L0474		;  goto Shitstorm
  12527  5536
  12528  5536		       4c 6c 95 	      jmp	.Shitstorm
  12529  5539
  12530  5539				   .Player2_BOOM
  12531  5539							; Player2_BOOM
  12532  5539
  12533  5539				   .L0475		;  COLUBK = $82
  12534  5539
  12535  5539		       a9 82		      LDA	#$82
  12536  553b		       85 09		      STA	COLUBK
  12537  553d				   .L0476		;  asm
  12538  553d
  12539  553d		       f8		      SED
  12540  553e
  12541  553e		       a5 d3		      LDA	player3score
  12542  5540
  12543  5540		       18		      CLC
  12544  5541
  12545  5541		       69 01		      ADC	#$01
  12546  5543
  12547  5543		       a2 78		      LDX	#120
  12548  5545
  12549  5545		       e4 8e		      CPX	player1y
  12550  5547
  12551  5547		       90 02		      BCC	.skipL0428_12
  12552  5549
  12553  5549		       85 d3		      STA	player3score
  12554  554b
  12555  554b				   .skipL0428_12
  12556  554b
  12557  554b		       e4 8f		      CPX	player2y
  12558  554d
  12559  554d		       90 02		      BCC	.skipL0429_12
  12560  554f
  12561  554f		       85 d3		      STA	player3score
  12562  5551
  12563  5551				   .skipL0429_12
  12564  5551
  12565  5551		       e4 90		      CPX	player3y
  12566  5553
  12567  5553		       90 02		      BCC	.skipL0430_122
  12568  5555
  12569  5555		       85 d3		      STA	player3score
  12570  5557
  12571  5557				   .skipL0430_122
  12572  5557
  12573  5557		       e4 91		      CPX	player4y
  12574  5559
  12575  5559		       90 02		      BCC	.skipL0431_12
  12576  555b
  12577  555b		       85 d3		      STA	player3score
  12578  555d
  12579  555d				   .skipL0431_12
  12580  555d
  12581  555d		       d8		      CLD
  12582  555e
  12583  555e				   .
  12584  555e							; 
  12585  555e
  12586  555e				   .
  12587  555e							; 
  12588  555e
  12589  555e				   .
  12590  555e							; 
  12591  555e
  12592  555e				   .
  12593  555e							; 
  12594  555e
  12595  555e				   .L0477		;  player0score = $00 :  AUDC0 = 2 :  AUDF0 = 9 :  AUDV0 = 9
  12596  555e
  12597  555e		       a9 00		      LDA	#$00
  12598  5560		       85 c1		      STA	player0score
  12599  5562		       a9 02		      LDA	#2
  12600  5564		       85 15		      STA	AUDC0
  12601  5566		       a9 09		      LDA	#9
  12602  5568		       85 17		      STA	AUDF0
  12603  556a		       85 19		      STA	AUDV0
  12604  556c				   .Shitstorm
  12605  556c							; Shitstorm
  12606  556c
  12607  556c				   .L0478		;  player1y = 130 :  player2y = 130 :	player3y = 130 :  player4y = 130
  12608  556c
  12609  556c		       a9 82		      LDA	#130
  12610  556e		       85 8e		      STA	player1y
  12611  5570		       85 8f		      STA	player2y
  12612  5572		       85 90		      STA	player3y
  12613  5574		       85 91		      STA	player4y
  12614  5576				   .
  12615  5576							; 
  12616  5576
  12617  5576				   .L0479		;  if PowerUp_Counter = 2 then HouseHeight = HouseHeight + 1 :  goto ChangePF bank7
  12618  5576
  12619  5576		       a5 ef		      LDA	PowerUp_Counter
  12620  5578		       c9 02		      CMP	#2
  12621  557a		       d0 14		      BNE	.skipL0479
  12622  557c				   .condpart191
  12623  557c		       e6 f0		      INC	HouseHeight
  12624  557e		       85 d1		      sta	temp7
  12625  5580		       a9 d1		      lda	#>(.ChangePF-1)
  12626  5582		       48		      pha
  12627  5583		       a9 49		      lda	#<(.ChangePF-1)
  12628  5585		       48		      pha
  12629  5586		       a5 d1		      lda	temp7
  12630  5588		       48		      pha
  12631  5589		       8a		      txa
  12632  558a		       48		      pha
  12633  558b		       a2 07		      ldx	#7
  12634  558d		       4c eb ff 	      jmp	BS_jsr
  12635  5590				   .skipL0479
  12636  5590				   .No_Pretty_Fly
  12637  5590							; No_Pretty_Fly
  12638  5590
  12639  5590				   .L0480		;  asm
  12640  5590
  12641  5590		       a5 ed		      LDA	w
  12642  5592
  12643  5592		       29 f7		      AND	#247
  12644  5594
  12645  5594		       29 ef		      AND	#239
  12646  5596
  12647  5596		       85 ed		      STA	w
  12648  5598
  12649  5598
  12650  5598
  12651  5598				   .No_Catch
  12652  5598
  12653  5598
  12654  5598
  12655  5598		       c0 01		      CPY	#1
  12656  559a
  12657  559a		       d0 0c		      BNE	.NO_SOUNDZ
  12658  559c
  12659  559c		       a9 09		      LDA	#9
  12660  559e
  12661  559e		       85 1a		      STA	AUDV1
  12662  55a0
  12663  55a0		       a9 03		      LDA	#3
  12664  55a2
  12665  55a2		       85 16		      STA	AUDC1
  12666  55a4
  12667  55a4		       a9 05		      LDA	#5
  12668  55a6
  12669  55a6		       85 18		      STA	AUDF1
  12670  55a8
  12671  55a8				   .NO_SOUNDZ
  12672  55a8
  12673  55a8
  12674  55a8
  12675  55a8
  12676  55a8
  12677  55a8		       a9 04		      LDA	#4
  12678  55aa
  12679  55aa		       18		      CLC
  12680  55ab
  12681  55ab		       65 b0		      ADC	player0height
  12682  55ad
  12683  55ad		       c5 8d		      CMP	player0y
  12684  55af
  12685  55af		       90 02		      BCC	.NotSmaller
  12686  55b1
  12687  55b1		       85 8d		      STA	player0y
  12688  55b3
  12689  55b3				   .NotSmaller
  12690  55b3
  12691  55b3				   .
  12692  55b3							; 
  12693  55b3
  12694  55b3				   .L0481		;  missile1y = 160 :  bally = 160
  12695  55b3
  12696  55b3		       a9 a0		      LDA	#160
  12697  55b5		       85 8b		      STA	missile1y
  12698  55b7		       85 8c		      STA	bally
  12699  55b9				   .L0482		;  drawscreen
  12700  55b9
  12701  55b9		       85 d1		      sta	temp7
  12702  55bb		       a9 95		      lda	#>(ret_point6-1)
  12703  55bd		       48		      pha
  12704  55be		       a9 d0		      lda	#<(ret_point6-1)
  12705  55c0		       48		      pha
  12706  55c1		       a9 f0		      lda	#>(drawscreen-1)
  12707  55c3		       48		      pha
  12708  55c4		       a9 39		      lda	#<(drawscreen-1)
  12709  55c6		       48		      pha
  12710  55c7		       a5 d1		      lda	temp7
  12711  55c9		       48		      pha
  12712  55ca		       8a		      txa
  12713  55cb		       48		      pha
  12714  55cc		       a2 08		      ldx	#8
  12715  55ce		       4c eb ff 	      jmp	BS_jsr
  12716  55d1				   ret_point6
  12717  55d1				   .L0483		;  asm
  12718  55d1
  12719  55d1		       a5 e0		      LDA	MaxKill
  12720  55d3
  12721  55d3		       38		      SEC
  12722  55d4
  12723  55d4		       e9 01		      SBC	#1
  12724  55d6
  12725  55d6		       c5 d2		      CMP	Kills1
  12726  55d8
  12727  55d8		       90 04		      BCC	.condpart171_33
  12728  55da
  12729  55da		       c5 d3		      CMP	Kills2
  12730  55dc
  12731  55dc		       b0 11		      BCS	.skip55OR_18
  12732  55de
  12733  55de				   .condpart171_33
  12734  55de
  12735  55de		       85 d1		      sta	temp7
  12736  55e0
  12737  55e0		       a9 b8		      lda	#>(.Ending-1)
  12738  55e2
  12739  55e2		       48		      pha
  12740  55e3
  12741  55e3		       a9 ca		      lda	#<(.Ending-1)
  12742  55e5
  12743  55e5		       48		      pha
  12744  55e6
  12745  55e6		       a5 d1		      lda	temp7
  12746  55e8
  12747  55e8		       48		      pha
  12748  55e9
  12749  55e9
  12750  55e9
  12751  55e9		       48		      pha
  12752  55ea
  12753  55ea		       a2 06		      ldx	#6
  12754  55ec
  12755  55ec		       4c eb ff 	      jmp	BS_jsr
  12756  55ef
  12757  55ef				   .skip55OR_18
  12758  55ef
  12759  55ef
  12760  55ef
  12761  55ef		       a9 00		      LDA	#0
  12762  55f1
  12763  55f1		       c5 ef		      CMP	PowerUp_Counter
  12764  55f3
  12765  55f3		       b0 08		      BCS	.skipL0649_197
  12766  55f5
  12767  55f5		       a5 e5		      LDA	o
  12768  55f7
  12769  55f7		       29 f7		      AND	#247
  12770  55f9
  12771  55f9		       29 ef		      AND	#239
  12772  55fb
  12773  55fb		       85 e5		      STA	o
  12774  55fd
  12775  55fd				   .skipL0649_197
  12776  55fd
  12777  55fd		       a2 58		      LDX	#88
  12778  55ff
  12779  55ff		       a0 7a		      LDY	#122
  12780  5601
  12781  5601		       e4 90		      CPX	player3y
  12782  5603
  12783  5603		       b0 08		      BCS	.skipL0650_876
  12784  5605
  12785  5605		       a5 ed		      LDA	w
  12786  5607
  12787  5607		       29 f7		      AND	#247
  12788  5609
  12789  5609		       85 ed		      STA	w
  12790  560b
  12791  560b		       84 90		      STY	player3y
  12792  560d
  12793  560d				   .skipL0650_876
  12794  560d
  12795  560d		       e4 91		      CPX	player4y
  12796  560f
  12797  560f		       b0 08		      BCS	.skipL0651_876
  12798  5611
  12799  5611		       a5 ed		      LDA	w
  12800  5613
  12801  5613		       29 ef		      AND	#239
  12802  5615
  12803  5615		       85 ed		      STA	w
  12804  5617
  12805  5617		       84 91		      STY	player4y
  12806  5619
  12807  5619				   .skipL0651_876
  12808  5619
  12809  5619				   .
  12810  5619							; 
  12811  5619
  12812  5619				   .
  12813  5619							; 
  12814  5619
  12815  5619				   .
  12816  5619							; 
  12817  5619
  12818  5619				   .
  12819  5619							; 
  12820  5619
  12821  5619				   .
  12822  5619							; 
  12823  5619
  12824  5619				   .MusicBox2
  12825  5619							; MusicBox2
  12826  5619
  12827  5619				   .
  12828  5619							; 
  12829  5619
  12830  5619				   .L0484		;  duration = duration - 1
  12831  5619
  12832  5619		       c6 d9		      DEC	duration
  12833  561b				   .L0485		;  if duration  > 0 then goto GameLoop bank3
  12834  561b
  12835  561b		       a9 00		      LDA	#0
  12836  561d		       c5 d9		      CMP	duration
  12837  561f		       b0 12		      BCS	.skipL0485
  12838  5621				   .condpart192
  12839  5621		       85 d1		      sta	temp7
  12840  5623		       a9 4f		      lda	#>(.GameLoop-1)
  12841  5625		       48		      pha
  12842  5626		       a9 ff		      lda	#<(.GameLoop-1)
  12843  5628		       48		      pha
  12844  5629		       a5 d1		      lda	temp7
  12845  562b		       48		      pha
  12846  562c		       8a		      txa
  12847  562d		       48		      pha
  12848  562e		       a2 03		      ldx	#3
  12849  5630		       4c eb ff 	      jmp	BS_jsr
  12850  5633				   .skipL0485
  12851  5633				   .
  12852  5633							; 
  12853  5633
  12854  5633				   .L0486		;  asm
  12855  5633
  12856  5633		       a2 d7		      ldx	#Music2
  12857  5635
  12858  5635		       a1 00		      lda	(0,x)
  12859  5637
  12860  5637		       f6 00		      inc	0,x
  12861  5639
  12862  5639		       d0 02		      bne	*+4
  12863  563b
  12864  563b		       f6 01		      inc	1,x
  12865  563d
  12866  563d		       85 ce		      STA	temp4
  12867  563f
  12868  563f		       c9 ff		      CMP	#255
  12869  5641
  12870  5641		       d0 07		      BNE	.skipL0546_1
  12871  5643
  12872  5643
  12873  5643
  12874  5643		       a9 01		      LDA	#1
  12875  5645
  12876  5645		       85 d9		      STA	duration
  12877  5647
  12878  5647		       4c d0 96 	      jmp	.MusicSetup3
  12879  564a
  12880  564a
  12881  564a
  12882  564a				   .skipL0546_1
  12883  564a
  12884  564a		       a5 ce		      LDA	temp4
  12885  564c
  12886  564c		       c9 00		      CMP	#0
  12887  564e
  12888  564e		       d0 09		      BNE	.skipL0547_1
  12889  5650
  12890  5650
  12891  5650
  12892  5650		       a2 00		      LDX	#0
  12893  5652
  12894  5652		       86 19		      STX	AUDV0
  12895  5654
  12896  5654		       86 17		      STX	AUDF0
  12897  5656
  12898  5656		       4c 7a 96 	      jmp	.Channel1_3
  12899  5659
  12900  5659
  12901  5659
  12902  5659				   .skipL0547_1
  12903  5659
  12904  5659		       85 19		      STA	AUDV0
  12905  565b
  12906  565b		       c9 08		      CMP	#8
  12907  565d
  12908  565d		       f0 06		      BEQ	.condpart417_1
  12909  565f
  12910  565f				   .skipL0548_1
  12911  565f
  12912  565f		       a5 ce		      LDA	temp4
  12913  5661
  12914  5661		       c9 02		      CMP	#2
  12915  5663
  12916  5663		       d0 05		      BNE	.skip121OR_1
  12917  5665
  12918  5665				   .condpart417_1
  12919  5665
  12920  5665		       a9 01		      LDA	#1
  12921  5667
  12922  5667
  12923  5667
  12924  5667		       4c 6c 96 	      jmp	.skipelse38_1
  12925  566a
  12926  566a				   .skip121OR_1
  12927  566a
  12928  566a		       a9 07		      LDA	#7
  12929  566c
  12930  566c
  12931  566c
  12932  566c				   .skipelse38_1
  12933  566c
  12934  566c		       85 15		      STA	AUDC0
  12935  566e
  12936  566e
  12937  566e
  12938  566e
  12939  566e
  12940  566e				   .
  12941  566e							; 
  12942  566e
  12943  566e				   .L0487		;  AUDF0 = sread ( Music2 ) 
  12944  566e
  12945  566e		       a2 d7		      ldx	#Music2
  12946  5670		       a1 00		      lda	(0,x)
  12947  5672		       f6 00		      inc	0,x
  12948  5674		       d0 02		      bne	*+4
  12949  5676		       f6 01		      inc	1,x
  12950  5678		       85 17		      STA	AUDF0
  12951  567a				   .Channel1_3
  12952  567a							; Channel1_3
  12953  567a
  12954  567a				   .L0488		;  asm
  12955  567a
  12956  567a		       a2 d7		      ldx	#Music2
  12957  567c
  12958  567c		       a1 00		      lda	(0,x)
  12959  567e
  12960  567e		       f6 00		      inc	0,x
  12961  5680
  12962  5680		       d0 02		      bne	*+4
  12963  5682
  12964  5682		       f6 01		      inc	1,x
  12965  5684
  12966  5684		       85 cf		      STA	temp5
  12967  5686
  12968  5686		       c9 00		      CMP	#0
  12969  5688
  12970  5688
  12971  5688
  12972  5688		       d0 09		      BNE	.skipL0551_1
  12973  568a
  12974  568a		       a2 00		      LDX	#0
  12975  568c
  12976  568c		       86 1a		      STX	AUDV1
  12977  568e
  12978  568e		       86 18		      STX	AUDF1
  12979  5690
  12980  5690		       4c b2 96 	      jmp	.ChannelNO_3
  12981  5693
  12982  5693				   .skipL0551_1
  12983  5693
  12984  5693		       85 1a		      STA	AUDV1
  12985  5695
  12986  5695
  12987  5695
  12988  5695		       c9 08		      CMP	#8
  12989  5697
  12990  5697		       f0 04		      BEQ	.condpart420_1
  12991  5699
  12992  5699		       c9 02		      CMP	#2
  12993  569b
  12994  569b		       d0 05		      BNE	.skip122OR_1
  12995  569d
  12996  569d				   .condpart420_1
  12997  569d
  12998  569d		       a9 01		      LDA	#1
  12999  569f
  13000  569f		       4c a4 96 	      jmp	.skipelse39_1
  13001  56a2
  13002  56a2				   .skip122OR_1
  13003  56a2
  13004  56a2		       a9 07		      LDA	#7
  13005  56a4
  13006  56a4				   .skipelse39_1
  13007  56a4
  13008  56a4		       85 16		      STA	AUDC1
  13009  56a6
  13010  56a6
  13011  56a6
  13012  56a6
  13013  56a6
  13014  56a6				   .
  13015  56a6							; 
  13016  56a6
  13017  56a6				   .L0489		;  AUDF1 = sread ( Music2 ) 
  13018  56a6
  13019  56a6		       a2 d7		      ldx	#Music2
  13020  56a8		       a1 00		      lda	(0,x)
  13021  56aa		       f6 00		      inc	0,x
  13022  56ac		       d0 02		      bne	*+4
  13023  56ae		       f6 01		      inc	1,x
  13024  56b0		       85 18		      STA	AUDF1
  13025  56b2				   .ChannelNO_3
  13026  56b2							; ChannelNO_3
  13027  56b2
  13028  56b2				   .
  13029  56b2							; 
  13030  56b2
  13031  56b2				   .L0490		;  duration = sread ( Music2 ) 
  13032  56b2
  13033  56b2		       a2 d7		      ldx	#Music2
  13034  56b4		       a1 00		      lda	(0,x)
  13035  56b6		       f6 00		      inc	0,x
  13036  56b8		       d0 02		      bne	*+4
  13037  56ba		       f6 01		      inc	1,x
  13038  56bc		       85 d9		      STA	duration
  13039  56be				   .L0491		;  goto GameLoop bank3
  13040  56be
  13041  56be		       85 d1		      sta	temp7
  13042  56c0		       a9 4f		      lda	#>(.GameLoop-1)
  13043  56c2		       48		      pha
  13044  56c3		       a9 ff		      lda	#<(.GameLoop-1)
  13045  56c5		       48		      pha
  13046  56c6		       a5 d1		      lda	temp7
  13047  56c8		       48		      pha
  13048  56c9		       8a		      txa
  13049  56ca		       48		      pha
  13050  56cb		       a2 03		      ldx	#3
  13051  56cd		       4c eb ff 	      jmp	BS_jsr
  13052  56d0				   .
  13053  56d0							; 
  13054  56d0
  13055  56d0				   .MusicSetup3
  13056  56d0							; MusicSetup3
  13057  56d0
  13058  56d0				   .L0492		;  sdata Music2  =  a
  13059  56d0
  13060  56d0		       a9 db		      lda	#<Music2_begin
  13061  56d2		       85 d7		      sta	a
  13062  56d4		       a9 96		      lda	#>Music2_begin
  13063  56d6		       85 d8		      sta	a+1
  13064  56d8		       4c 88 9f 	      JMP	.skipL0492
  13065  56db				   Music2_begin
  13066  56db		       08 0a		      .byte.b	8,10
  13067  56dd
  13068  56dd		       07 0a		      .byte.b	7,10
  13069  56df
  13070  56df		       02		      .byte.b	2
  13071  56e0
  13072  56e0		       02 0a		      .byte.b	2,10
  13073  56e2
  13074  56e2		       07 0a		      .byte.b	7,10
  13075  56e4
  13076  56e4		       02		      .byte.b	2
  13077  56e5
  13078  56e5		       08 0a		      .byte.b	8,10
  13079  56e7
  13080  56e7		       07 0a		      .byte.b	7,10
  13081  56e9
  13082  56e9		       02		      .byte.b	2
  13083  56ea
  13084  56ea		       02 0a		      .byte.b	2,10
  13085  56ec
  13086  56ec		       07 0a		      .byte.b	7,10
  13087  56ee
  13088  56ee		       02		      .byte.b	2
  13089  56ef
  13090  56ef		       08 0a		      .byte.b	8,10
  13091  56f1
  13092  56f1		       07 0a		      .byte.b	7,10
  13093  56f3
  13094  56f3		       02		      .byte.b	2
  13095  56f4
  13096  56f4		       02 0a		      .byte.b	2,10
  13097  56f6
  13098  56f6		       07 0a		      .byte.b	7,10
  13099  56f8
  13100  56f8		       02		      .byte.b	2
  13101  56f9
  13102  56f9		       08 0c		      .byte.b	8,12
  13103  56fb
  13104  56fb		       07 0b		      .byte.b	7,11
  13105  56fd
  13106  56fd		       02		      .byte.b	2
  13107  56fe
  13108  56fe		       02 0c		      .byte.b	2,12
  13109  5700
  13110  5700		       07 0b		      .byte.b	7,11
  13111  5702
  13112  5702		       02		      .byte.b	2
  13113  5703
  13114  5703		       08 0c		      .byte.b	8,12
  13115  5705
  13116  5705		       07 0b		      .byte.b	7,11
  13117  5707
  13118  5707		       02		      .byte.b	2
  13119  5708
  13120  5708		       02 0c		      .byte.b	2,12
  13121  570a
  13122  570a		       07 0b		      .byte.b	7,11
  13123  570c
  13124  570c		       02		      .byte.b	2
  13125  570d
  13126  570d		       08 0c		      .byte.b	8,12
  13127  570f
  13128  570f		       07 0b		      .byte.b	7,11
  13129  5711
  13130  5711		       02		      .byte.b	2
  13131  5712
  13132  5712		       02 0c		      .byte.b	2,12
  13133  5714
  13134  5714		       07 0b		      .byte.b	7,11
  13135  5716
  13136  5716		       02		      .byte.b	2
  13137  5717
  13138  5717		       08 0d		      .byte.b	8,13
  13139  5719
  13140  5719		       07 0c		      .byte.b	7,12
  13141  571b
  13142  571b		       02		      .byte.b	2
  13143  571c
  13144  571c		       02 0d		      .byte.b	2,13
  13145  571e
  13146  571e		       07 0c		      .byte.b	7,12
  13147  5720
  13148  5720		       02		      .byte.b	2
  13149  5721
  13150  5721		       08 0d		      .byte.b	8,13
  13151  5723
  13152  5723		       07 0c		      .byte.b	7,12
  13153  5725
  13154  5725		       02		      .byte.b	2
  13155  5726
  13156  5726		       02 0d		      .byte.b	2,13
  13157  5728
  13158  5728		       07 0c		      .byte.b	7,12
  13159  572a
  13160  572a		       02		      .byte.b	2
  13161  572b
  13162  572b		       08 0d		      .byte.b	8,13
  13163  572d
  13164  572d		       07 0c		      .byte.b	7,12
  13165  572f
  13166  572f		       02		      .byte.b	2
  13167  5730
  13168  5730		       02 0d		      .byte.b	2,13
  13169  5732
  13170  5732		       07 0c		      .byte.b	7,12
  13171  5734
  13172  5734		       02		      .byte.b	2
  13173  5735
  13174  5735		       08 0e		      .byte.b	8,14
  13175  5737
  13176  5737		       07 0e		      .byte.b	7,14
  13177  5739
  13178  5739		       02		      .byte.b	2
  13179  573a
  13180  573a		       02 0e		      .byte.b	2,14
  13181  573c
  13182  573c		       07 0e		      .byte.b	7,14
  13183  573e
  13184  573e		       02		      .byte.b	2
  13185  573f
  13186  573f		       08 0e		      .byte.b	8,14
  13187  5741
  13188  5741		       07 0e		      .byte.b	7,14
  13189  5743
  13190  5743		       02		      .byte.b	2
  13191  5744
  13192  5744		       02 0e		      .byte.b	2,14
  13193  5746
  13194  5746		       07 0e		      .byte.b	7,14
  13195  5748
  13196  5748		       02		      .byte.b	2
  13197  5749
  13198  5749		       08 0e		      .byte.b	8,14
  13199  574b
  13200  574b		       07 0e		      .byte.b	7,14
  13201  574d
  13202  574d		       02		      .byte.b	2
  13203  574e
  13204  574e		       02 0e		      .byte.b	2,14
  13205  5750
  13206  5750		       07 0e		      .byte.b	7,14
  13207  5752
  13208  5752		       02		      .byte.b	2
  13209  5753
  13210  5753		       08 10		      .byte.b	8,16
  13211  5755
  13212  5755		       07 10		      .byte.b	7,16
  13213  5757
  13214  5757		       02		      .byte.b	2
  13215  5758
  13216  5758		       02 10		      .byte.b	2,16
  13217  575a
  13218  575a		       07 10		      .byte.b	7,16
  13219  575c
  13220  575c		       02		      .byte.b	2
  13221  575d
  13222  575d		       08 10		      .byte.b	8,16
  13223  575f
  13224  575f		       07 10		      .byte.b	7,16
  13225  5761
  13226  5761		       02		      .byte.b	2
  13227  5762
  13228  5762		       02 10		      .byte.b	2,16
  13229  5764
  13230  5764		       07 10		      .byte.b	7,16
  13231  5766
  13232  5766		       02		      .byte.b	2
  13233  5767
  13234  5767		       08 10		      .byte.b	8,16
  13235  5769
  13236  5769		       07 10		      .byte.b	7,16
  13237  576b
  13238  576b		       02		      .byte.b	2
  13239  576c
  13240  576c		       02 10		      .byte.b	2,16
  13241  576e
  13242  576e		       07 10		      .byte.b	7,16
  13243  5770
  13244  5770		       02		      .byte.b	2
  13245  5771
  13246  5771		       08 11		      .byte.b	8,17
  13247  5773
  13248  5773		       07 11		      .byte.b	7,17
  13249  5775
  13250  5775		       02		      .byte.b	2
  13251  5776
  13252  5776		       02 11		      .byte.b	2,17
  13253  5778
  13254  5778		       07 11		      .byte.b	7,17
  13255  577a
  13256  577a		       02		      .byte.b	2
  13257  577b
  13258  577b		       08 11		      .byte.b	8,17
  13259  577d
  13260  577d		       07 11		      .byte.b	7,17
  13261  577f
  13262  577f		       02		      .byte.b	2
  13263  5780
  13264  5780		       02 11		      .byte.b	2,17
  13265  5782
  13266  5782		       07 11		      .byte.b	7,17
  13267  5784
  13268  5784		       02		      .byte.b	2
  13269  5785
  13270  5785		       08 11		      .byte.b	8,17
  13271  5787
  13272  5787		       07 11		      .byte.b	7,17
  13273  5789
  13274  5789		       02		      .byte.b	2
  13275  578a
  13276  578a		       02 11		      .byte.b	2,17
  13277  578c
  13278  578c		       07 11		      .byte.b	7,17
  13279  578e
  13280  578e		       02		      .byte.b	2
  13281  578f
  13282  578f		       08 16		      .byte.b	8,22
  13283  5791
  13284  5791		       07 15		      .byte.b	7,21
  13285  5793
  13286  5793		       02		      .byte.b	2
  13287  5794
  13288  5794		       02 16		      .byte.b	2,22
  13289  5796
  13290  5796		       07 15		      .byte.b	7,21
  13291  5798
  13292  5798		       02		      .byte.b	2
  13293  5799
  13294  5799		       08 16		      .byte.b	8,22
  13295  579b
  13296  579b		       07 15		      .byte.b	7,21
  13297  579d
  13298  579d		       02		      .byte.b	2
  13299  579e
  13300  579e		       02 16		      .byte.b	2,22
  13301  57a0
  13302  57a0		       07 15		      .byte.b	7,21
  13303  57a2
  13304  57a2		       02		      .byte.b	2
  13305  57a3
  13306  57a3		       08 16		      .byte.b	8,22
  13307  57a5
  13308  57a5		       07 15		      .byte.b	7,21
  13309  57a7
  13310  57a7		       02		      .byte.b	2
  13311  57a8
  13312  57a8		       02 16		      .byte.b	2,22
  13313  57aa
  13314  57aa		       07 15		      .byte.b	7,21
  13315  57ac
  13316  57ac		       02		      .byte.b	2
  13317  57ad
  13318  57ad		       08 17		      .byte.b	8,23
  13319  57af
  13320  57af		       07 16		      .byte.b	7,22
  13321  57b1
  13322  57b1		       02		      .byte.b	2
  13323  57b2
  13324  57b2		       02 17		      .byte.b	2,23
  13325  57b4
  13326  57b4		       07 16		      .byte.b	7,22
  13327  57b6
  13328  57b6		       02		      .byte.b	2
  13329  57b7
  13330  57b7		       08 17		      .byte.b	8,23
  13331  57b9
  13332  57b9		       07 16		      .byte.b	7,22
  13333  57bb
  13334  57bb		       02		      .byte.b	2
  13335  57bc
  13336  57bc		       02 17		      .byte.b	2,23
  13337  57be
  13338  57be		       07 16		      .byte.b	7,22
  13339  57c0
  13340  57c0		       02		      .byte.b	2
  13341  57c1
  13342  57c1		       08 17		      .byte.b	8,23
  13343  57c3
  13344  57c3		       07 16		      .byte.b	7,22
  13345  57c5
  13346  57c5		       02		      .byte.b	2
  13347  57c6
  13348  57c6		       02 17		      .byte.b	2,23
  13349  57c8
  13350  57c8		       07 16		      .byte.b	7,22
  13351  57ca
  13352  57ca		       02		      .byte.b	2
  13353  57cb
  13354  57cb		       08 19		      .byte.b	8,25
  13355  57cd
  13356  57cd		       07 19		      .byte.b	7,25
  13357  57cf
  13358  57cf		       28		      .byte.b	40
  13359  57d0
  13360  57d0		       07 19		      .byte.b	7,25
  13361  57d2
  13362  57d2		       06 19		      .byte.b	6,25
  13363  57d4
  13364  57d4		       02		      .byte.b	2
  13365  57d5
  13366  57d5		       06 19		      .byte.b	6,25
  13367  57d7
  13368  57d7		       05 19		      .byte.b	5,25
  13369  57d9
  13370  57d9		       02		      .byte.b	2
  13371  57da
  13372  57da		       05 19		      .byte.b	5,25
  13373  57dc
  13374  57dc		       04 19		      .byte.b	4,25
  13375  57de
  13376  57de		       02		      .byte.b	2
  13377  57df
  13378  57df		       04 19		      .byte.b	4,25
  13379  57e1
  13380  57e1		       02 19		      .byte.b	2,25
  13381  57e3
  13382  57e3		       02		      .byte.b	2
  13383  57e4
  13384  57e4		       02 19		      .byte.b	2,25
  13385  57e6
  13386  57e6		       02 19		      .byte.b	2,25
  13387  57e8
  13388  57e8		       02		      .byte.b	2
  13389  57e9
  13390  57e9		       08 0a		      .byte.b	8,10
  13391  57eb
  13392  57eb		       08 0a		      .byte.b	8,10
  13393  57ed
  13394  57ed		       02		      .byte.b	2
  13395  57ee
  13396  57ee		       02 0a		      .byte.b	2,10
  13397  57f0
  13398  57f0		       08 0a		      .byte.b	8,10
  13399  57f2
  13400  57f2		       02		      .byte.b	2
  13401  57f3
  13402  57f3		       08 0a		      .byte.b	8,10
  13403  57f5
  13404  57f5		       08 0a		      .byte.b	8,10
  13405  57f7
  13406  57f7		       02		      .byte.b	2
  13407  57f8
  13408  57f8		       02 0a		      .byte.b	2,10
  13409  57fa
  13410  57fa		       08 0a		      .byte.b	8,10
  13411  57fc
  13412  57fc		       02		      .byte.b	2
  13413  57fd
  13414  57fd		       08 0a		      .byte.b	8,10
  13415  57ff
  13416  57ff		       07 0a		      .byte.b	7,10
  13417  5801
  13418  5801		       02		      .byte.b	2
  13419  5802
  13420  5802		       02 0a		      .byte.b	2,10
  13421  5804
  13422  5804		       07 0a		      .byte.b	7,10
  13423  5806
  13424  5806		       02		      .byte.b	2
  13425  5807
  13426  5807		       08 0c		      .byte.b	8,12
  13427  5809
  13428  5809		       07 0c		      .byte.b	7,12
  13429  580b
  13430  580b		       02		      .byte.b	2
  13431  580c
  13432  580c		       02 0c		      .byte.b	2,12
  13433  580e
  13434  580e		       07 0c		      .byte.b	7,12
  13435  5810
  13436  5810		       02		      .byte.b	2
  13437  5811
  13438  5811		       08 0c		      .byte.b	8,12
  13439  5813
  13440  5813		       07 0c		      .byte.b	7,12
  13441  5815
  13442  5815		       02		      .byte.b	2
  13443  5816
  13444  5816		       02 0c		      .byte.b	2,12
  13445  5818
  13446  5818		       07 0c		      .byte.b	7,12
  13447  581a
  13448  581a		       02		      .byte.b	2
  13449  581b
  13450  581b		       08 0c		      .byte.b	8,12
  13451  581d
  13452  581d		       07 0c		      .byte.b	7,12
  13453  581f
  13454  581f		       02		      .byte.b	2
  13455  5820
  13456  5820		       02 0c		      .byte.b	2,12
  13457  5822
  13458  5822		       07 0c		      .byte.b	7,12
  13459  5824
  13460  5824		       02		      .byte.b	2
  13461  5825
  13462  5825		       08 10		      .byte.b	8,16
  13463  5827
  13464  5827		       07 10		      .byte.b	7,16
  13465  5829
  13466  5829		       02		      .byte.b	2
  13467  582a
  13468  582a		       02 10		      .byte.b	2,16
  13469  582c
  13470  582c		       07 10		      .byte.b	7,16
  13471  582e
  13472  582e		       02		      .byte.b	2
  13473  582f
  13474  582f		       08 10		      .byte.b	8,16
  13475  5831
  13476  5831		       07 10		      .byte.b	7,16
  13477  5833
  13478  5833		       02		      .byte.b	2
  13479  5834
  13480  5834		       02 10		      .byte.b	2,16
  13481  5836
  13482  5836		       07 10		      .byte.b	7,16
  13483  5838
  13484  5838		       02		      .byte.b	2
  13485  5839
  13486  5839		       08 10		      .byte.b	8,16
  13487  583b
  13488  583b		       07 10		      .byte.b	7,16
  13489  583d
  13490  583d		       02		      .byte.b	2
  13491  583e
  13492  583e		       02 10		      .byte.b	2,16
  13493  5840
  13494  5840		       07 10		      .byte.b	7,16
  13495  5842
  13496  5842		       02		      .byte.b	2
  13497  5843
  13498  5843		       08 11		      .byte.b	8,17
  13499  5845
  13500  5845		       07 11		      .byte.b	7,17
  13501  5847
  13502  5847		       02		      .byte.b	2
  13503  5848
  13504  5848		       02 11		      .byte.b	2,17
  13505  584a
  13506  584a		       07 11		      .byte.b	7,17
  13507  584c
  13508  584c		       02		      .byte.b	2
  13509  584d
  13510  584d		       08 11		      .byte.b	8,17
  13511  584f
  13512  584f		       07 11		      .byte.b	7,17
  13513  5851
  13514  5851		       02		      .byte.b	2
  13515  5852
  13516  5852		       02 11		      .byte.b	2,17
  13517  5854
  13518  5854		       07 11		      .byte.b	7,17
  13519  5856
  13520  5856		       02		      .byte.b	2
  13521  5857
  13522  5857		       08 11		      .byte.b	8,17
  13523  5859
  13524  5859		       07 11		      .byte.b	7,17
  13525  585b
  13526  585b		       02		      .byte.b	2
  13527  585c
  13528  585c		       02 11		      .byte.b	2,17
  13529  585e
  13530  585e		       07 11		      .byte.b	7,17
  13531  5860
  13532  5860		       02		      .byte.b	2
  13533  5861
  13534  5861		       08 16		      .byte.b	8,22
  13535  5863
  13536  5863		       07 15		      .byte.b	7,21
  13537  5865
  13538  5865		       02		      .byte.b	2
  13539  5866
  13540  5866		       02 16		      .byte.b	2,22
  13541  5868
  13542  5868		       07 15		      .byte.b	7,21
  13543  586a
  13544  586a		       02		      .byte.b	2
  13545  586b
  13546  586b		       08 16		      .byte.b	8,22
  13547  586d
  13548  586d		       07 15		      .byte.b	7,21
  13549  586f
  13550  586f		       02		      .byte.b	2
  13551  5870
  13552  5870		       02 16		      .byte.b	2,22
  13553  5872
  13554  5872		       07 15		      .byte.b	7,21
  13555  5874
  13556  5874		       02		      .byte.b	2
  13557  5875
  13558  5875		       08 16		      .byte.b	8,22
  13559  5877
  13560  5877		       07 15		      .byte.b	7,21
  13561  5879
  13562  5879		       02		      .byte.b	2
  13563  587a
  13564  587a		       02 16		      .byte.b	2,22
  13565  587c
  13566  587c		       07 15		      .byte.b	7,21
  13567  587e
  13568  587e		       02		      .byte.b	2
  13569  587f
  13570  587f		       08 17		      .byte.b	8,23
  13571  5881
  13572  5881		       07 16		      .byte.b	7,22
  13573  5883
  13574  5883		       02		      .byte.b	2
  13575  5884
  13576  5884		       02 17		      .byte.b	2,23
  13577  5886
  13578  5886		       07 16		      .byte.b	7,22
  13579  5888
  13580  5888		       02		      .byte.b	2
  13581  5889
  13582  5889		       08 17		      .byte.b	8,23
  13583  588b
  13584  588b		       07 16		      .byte.b	7,22
  13585  588d
  13586  588d		       02		      .byte.b	2
  13587  588e
  13588  588e		       02 17		      .byte.b	2,23
  13589  5890
  13590  5890		       07 16		      .byte.b	7,22
  13591  5892
  13592  5892		       02		      .byte.b	2
  13593  5893
  13594  5893		       08 17		      .byte.b	8,23
  13595  5895
  13596  5895		       07 16		      .byte.b	7,22
  13597  5897
  13598  5897		       02		      .byte.b	2
  13599  5898
  13600  5898		       02 17		      .byte.b	2,23
  13601  589a
  13602  589a		       07 16		      .byte.b	7,22
  13603  589c
  13604  589c		       02		      .byte.b	2
  13605  589d
  13606  589d		       08 16		      .byte.b	8,22
  13607  589f
  13608  589f		       07 15		      .byte.b	7,21
  13609  58a1
  13610  58a1		       05		      .byte.b	5
  13611  58a2
  13612  58a2		       08 17		      .byte.b	8,23
  13613  58a4
  13614  58a4		       07 16		      .byte.b	7,22
  13615  58a6
  13616  58a6		       05		      .byte.b	5
  13617  58a7
  13618  58a7		       08 1a		      .byte.b	8,26
  13619  58a9
  13620  58a9		       07 1c		      .byte.b	7,28
  13621  58ab
  13622  58ab		       05		      .byte.b	5
  13623  58ac
  13624  58ac		       08 17		      .byte.b	8,23
  13625  58ae
  13626  58ae		       07 16		      .byte.b	7,22
  13627  58b0
  13628  58b0		       05		      .byte.b	5
  13629  58b1
  13630  58b1		       08 19		      .byte.b	8,25
  13631  58b3
  13632  58b3		       07 18		      .byte.b	7,24
  13633  58b5
  13634  58b5		       05		      .byte.b	5
  13635  58b6
  13636  58b6		       08 1a		      .byte.b	8,26
  13637  58b8
  13638  58b8		       07 1c		      .byte.b	7,28
  13639  58ba
  13640  58ba		       05		      .byte.b	5
  13641  58bb
  13642  58bb		       08 16		      .byte.b	8,22
  13643  58bd
  13644  58bd		       07 15		      .byte.b	7,21
  13645  58bf
  13646  58bf		       05		      .byte.b	5
  13647  58c0
  13648  58c0		       08 17		      .byte.b	8,23
  13649  58c2
  13650  58c2		       07 16		      .byte.b	7,22
  13651  58c4
  13652  58c4		       05		      .byte.b	5
  13653  58c5
  13654  58c5		       08 1a		      .byte.b	8,26
  13655  58c7
  13656  58c7		       07 19		      .byte.b	7,25
  13657  58c9
  13658  58c9		       05		      .byte.b	5
  13659  58ca
  13660  58ca		       08 13		      .byte.b	8,19
  13661  58cc
  13662  58cc		       07 13		      .byte.b	7,19
  13663  58ce
  13664  58ce		       05		      .byte.b	5
  13665  58cf
  13666  58cf		       08 14		      .byte.b	8,20
  13667  58d1
  13668  58d1		       07 14		      .byte.b	7,20
  13669  58d3
  13670  58d3		       05		      .byte.b	5
  13671  58d4
  13672  58d4		       08 1a		      .byte.b	8,26
  13673  58d6
  13674  58d6		       07 19		      .byte.b	7,25
  13675  58d8
  13676  58d8		       05		      .byte.b	5
  13677  58d9
  13678  58d9		       08 16		      .byte.b	8,22
  13679  58db
  13680  58db		       07 15		      .byte.b	7,21
  13681  58dd
  13682  58dd		       05		      .byte.b	5
  13683  58de
  13684  58de		       08 17		      .byte.b	8,23
  13685  58e0
  13686  58e0		       07 16		      .byte.b	7,22
  13687  58e2
  13688  58e2		       05		      .byte.b	5
  13689  58e3
  13690  58e3		       08 1a		      .byte.b	8,26
  13691  58e5
  13692  58e5		       07 19		      .byte.b	7,25
  13693  58e7
  13694  58e7		       05		      .byte.b	5
  13695  58e8
  13696  58e8		       08 17		      .byte.b	8,23
  13697  58ea
  13698  58ea		       07 16		      .byte.b	7,22
  13699  58ec
  13700  58ec		       05		      .byte.b	5
  13701  58ed
  13702  58ed		       08 18		      .byte.b	8,24
  13703  58ef
  13704  58ef		       07 18		      .byte.b	7,24
  13705  58f1
  13706  58f1		       05		      .byte.b	5
  13707  58f2
  13708  58f2		       08 1a		      .byte.b	8,26
  13709  58f4
  13710  58f4		       07 19		      .byte.b	7,25
  13711  58f6
  13712  58f6		       05		      .byte.b	5
  13713  58f7
  13714  58f7		       08 16		      .byte.b	8,22
  13715  58f9
  13716  58f9		       07 15		      .byte.b	7,21
  13717  58fb
  13718  58fb		       05		      .byte.b	5
  13719  58fc
  13720  58fc		       08 17		      .byte.b	8,23
  13721  58fe
  13722  58fe		       07 16		      .byte.b	7,22
  13723  5900
  13724  5900		       05		      .byte.b	5
  13725  5901
  13726  5901		       08 1a		      .byte.b	8,26
  13727  5903
  13728  5903		       07 19		      .byte.b	7,25
  13729  5905
  13730  5905		       05		      .byte.b	5
  13731  5906
  13732  5906		       08 12		      .byte.b	8,18
  13733  5908
  13734  5908		       07 12		      .byte.b	7,18
  13735  590a
  13736  590a		       14		      .byte.b	20
  13737  590b
  13738  590b		       08 16		      .byte.b	8,22
  13739  590d
  13740  590d		       07 15		      .byte.b	7,21
  13741  590f
  13742  590f		       05		      .byte.b	5
  13743  5910
  13744  5910		       08 17		      .byte.b	8,23
  13745  5912
  13746  5912		       07 16		      .byte.b	7,22
  13747  5914
  13748  5914		       05		      .byte.b	5
  13749  5915
  13750  5915		       08 1a		      .byte.b	8,26
  13751  5917
  13752  5917		       07 1c		      .byte.b	7,28
  13753  5919
  13754  5919		       05		      .byte.b	5
  13755  591a
  13756  591a		       08 17		      .byte.b	8,23
  13757  591c
  13758  591c		       07 16		      .byte.b	7,22
  13759  591e
  13760  591e		       05		      .byte.b	5
  13761  591f
  13762  591f		       08 19		      .byte.b	8,25
  13763  5921
  13764  5921		       07 18		      .byte.b	7,24
  13765  5923
  13766  5923		       05		      .byte.b	5
  13767  5924
  13768  5924		       08 1a		      .byte.b	8,26
  13769  5926
  13770  5926		       07 1c		      .byte.b	7,28
  13771  5928
  13772  5928		       05		      .byte.b	5
  13773  5929
  13774  5929		       08 16		      .byte.b	8,22
  13775  592b
  13776  592b		       07 15		      .byte.b	7,21
  13777  592d
  13778  592d		       05		      .byte.b	5
  13779  592e
  13780  592e		       08 17		      .byte.b	8,23
  13781  5930
  13782  5930		       07 16		      .byte.b	7,22
  13783  5932
  13784  5932		       05		      .byte.b	5
  13785  5933
  13786  5933		       08 1a		      .byte.b	8,26
  13787  5935
  13788  5935		       07 19		      .byte.b	7,25
  13789  5937
  13790  5937		       05		      .byte.b	5
  13791  5938
  13792  5938		       08 13		      .byte.b	8,19
  13793  593a
  13794  593a		       07 13		      .byte.b	7,19
  13795  593c
  13796  593c		       05		      .byte.b	5
  13797  593d
  13798  593d		       08 14		      .byte.b	8,20
  13799  593f
  13800  593f		       07 14		      .byte.b	7,20
  13801  5941
  13802  5941		       05		      .byte.b	5
  13803  5942
  13804  5942		       08 1a		      .byte.b	8,26
  13805  5944
  13806  5944		       07 19		      .byte.b	7,25
  13807  5946
  13808  5946		       05		      .byte.b	5
  13809  5947
  13810  5947		       08 16		      .byte.b	8,22
  13811  5949
  13812  5949		       07 15		      .byte.b	7,21
  13813  594b
  13814  594b		       05		      .byte.b	5
  13815  594c
  13816  594c		       08 17		      .byte.b	8,23
  13817  594e
  13818  594e		       07 16		      .byte.b	7,22
  13819  5950
  13820  5950		       05		      .byte.b	5
  13821  5951
  13822  5951		       08 1a		      .byte.b	8,26
  13823  5953
  13824  5953		       07 19		      .byte.b	7,25
  13825  5955
  13826  5955		       05		      .byte.b	5
  13827  5956
  13828  5956		       08 17		      .byte.b	8,23
  13829  5958
  13830  5958		       07 16		      .byte.b	7,22
  13831  595a
  13832  595a		       05		      .byte.b	5
  13833  595b
  13834  595b		       08 18		      .byte.b	8,24
  13835  595d
  13836  595d		       07 18		      .byte.b	7,24
  13837  595f
  13838  595f		       05		      .byte.b	5
  13839  5960
  13840  5960		       08 1a		      .byte.b	8,26
  13841  5962
  13842  5962		       07 19		      .byte.b	7,25
  13843  5964
  13844  5964		       05		      .byte.b	5
  13845  5965
  13846  5965		       08 16		      .byte.b	8,22
  13847  5967
  13848  5967		       07 15		      .byte.b	7,21
  13849  5969
  13850  5969		       05		      .byte.b	5
  13851  596a
  13852  596a		       08 17		      .byte.b	8,23
  13853  596c
  13854  596c		       07 16		      .byte.b	7,22
  13855  596e
  13856  596e		       05		      .byte.b	5
  13857  596f
  13858  596f		       08 1a		      .byte.b	8,26
  13859  5971
  13860  5971		       07 19		      .byte.b	7,25
  13861  5973
  13862  5973		       05		      .byte.b	5
  13863  5974
  13864  5974		       08 12		      .byte.b	8,18
  13865  5976
  13866  5976		       07 12		      .byte.b	7,18
  13867  5978
  13868  5978		       14		      .byte.b	20
  13869  5979
  13870  5979		       08 1a		      .byte.b	8,26
  13871  597b
  13872  597b		       07 19		      .byte.b	7,25
  13873  597d
  13874  597d		       03		      .byte.b	3
  13875  597e
  13876  597e		       02 1a		      .byte.b	2,26
  13877  5980
  13878  5980		       01 19		      .byte.b	1,25
  13879  5982
  13880  5982		       02		      .byte.b	2
  13881  5983
  13882  5983		       08 1a		      .byte.b	8,26
  13883  5985
  13884  5985		       07 19		      .byte.b	7,25
  13885  5987
  13886  5987		       03		      .byte.b	3
  13887  5988
  13888  5988		       02 1a		      .byte.b	2,26
  13889  598a
  13890  598a		       01 19		      .byte.b	1,25
  13891  598c
  13892  598c		       02		      .byte.b	2
  13893  598d
  13894  598d		       08 1a		      .byte.b	8,26
  13895  598f
  13896  598f		       07 19		      .byte.b	7,25
  13897  5991
  13898  5991		       03		      .byte.b	3
  13899  5992
  13900  5992		       02 1a		      .byte.b	2,26
  13901  5994
  13902  5994		       01 19		      .byte.b	1,25
  13903  5996
  13904  5996		       02		      .byte.b	2
  13905  5997
  13906  5997		       08 1a		      .byte.b	8,26
  13907  5999
  13908  5999		       07 19		      .byte.b	7,25
  13909  599b
  13910  599b		       03		      .byte.b	3
  13911  599c
  13912  599c		       02 1a		      .byte.b	2,26
  13913  599e
  13914  599e		       01 19		      .byte.b	1,25
  13915  59a0
  13916  59a0		       02		      .byte.b	2
  13917  59a1
  13918  59a1		       08 1a		      .byte.b	8,26
  13919  59a3
  13920  59a3		       07 19		      .byte.b	7,25
  13921  59a5
  13922  59a5		       03		      .byte.b	3
  13923  59a6
  13924  59a6		       02 1a		      .byte.b	2,26
  13925  59a8
  13926  59a8		       01 19		      .byte.b	1,25
  13927  59aa
  13928  59aa		       02		      .byte.b	2
  13929  59ab
  13930  59ab		       08 1a		      .byte.b	8,26
  13931  59ad
  13932  59ad		       07 19		      .byte.b	7,25
  13933  59af
  13934  59af		       03		      .byte.b	3
  13935  59b0
  13936  59b0		       02 1a		      .byte.b	2,26
  13937  59b2
  13938  59b2		       01 19		      .byte.b	1,25
  13939  59b4
  13940  59b4		       02		      .byte.b	2
  13941  59b5
  13942  59b5		       08 1a		      .byte.b	8,26
  13943  59b7
  13944  59b7		       07 19		      .byte.b	7,25
  13945  59b9
  13946  59b9		       03		      .byte.b	3
  13947  59ba
  13948  59ba		       02 1a		      .byte.b	2,26
  13949  59bc
  13950  59bc		       01 19		      .byte.b	1,25
  13951  59be
  13952  59be		       02		      .byte.b	2
  13953  59bf
  13954  59bf		       08 1a		      .byte.b	8,26
  13955  59c1
  13956  59c1		       07 19		      .byte.b	7,25
  13957  59c3
  13958  59c3		       03		      .byte.b	3
  13959  59c4
  13960  59c4		       02 1a		      .byte.b	2,26
  13961  59c6
  13962  59c6		       01 19		      .byte.b	1,25
  13963  59c8
  13964  59c8		       02		      .byte.b	2
  13965  59c9
  13966  59c9		       08 1a		      .byte.b	8,26
  13967  59cb
  13968  59cb		       07 19		      .byte.b	7,25
  13969  59cd
  13970  59cd		       03		      .byte.b	3
  13971  59ce
  13972  59ce		       02 1a		      .byte.b	2,26
  13973  59d0
  13974  59d0		       01 19		      .byte.b	1,25
  13975  59d2
  13976  59d2		       02		      .byte.b	2
  13977  59d3
  13978  59d3		       08 1a		      .byte.b	8,26
  13979  59d5
  13980  59d5		       07 19		      .byte.b	7,25
  13981  59d7
  13982  59d7		       03		      .byte.b	3
  13983  59d8
  13984  59d8		       02 1a		      .byte.b	2,26
  13985  59da
  13986  59da		       01 19		      .byte.b	1,25
  13987  59dc
  13988  59dc		       02		      .byte.b	2
  13989  59dd
  13990  59dd		       08 1a		      .byte.b	8,26
  13991  59df
  13992  59df		       07 19		      .byte.b	7,25
  13993  59e1
  13994  59e1		       03		      .byte.b	3
  13995  59e2
  13996  59e2		       02 1a		      .byte.b	2,26
  13997  59e4
  13998  59e4		       01 19		      .byte.b	1,25
  13999  59e6
  14000  59e6		       02		      .byte.b	2
  14001  59e7
  14002  59e7		       08 1a		      .byte.b	8,26
  14003  59e9
  14004  59e9		       07 19		      .byte.b	7,25
  14005  59eb
  14006  59eb		       03		      .byte.b	3
  14007  59ec
  14008  59ec		       02 1a		      .byte.b	2,26
  14009  59ee
  14010  59ee		       01 19		      .byte.b	1,25
  14011  59f0
  14012  59f0		       02		      .byte.b	2
  14013  59f1
  14014  59f1		       08 10		      .byte.b	8,16
  14015  59f3
  14016  59f3		       07 10		      .byte.b	7,16
  14017  59f5
  14018  59f5		       05		      .byte.b	5
  14019  59f6
  14020  59f6		       08 11		      .byte.b	8,17
  14021  59f8
  14022  59f8		       07 11		      .byte.b	7,17
  14023  59fa
  14024  59fa		       05		      .byte.b	5
  14025  59fb
  14026  59fb		       08 0e		      .byte.b	8,14
  14027  59fd
  14028  59fd		       07 0e		      .byte.b	7,14
  14029  59ff
  14030  59ff		       05		      .byte.b	5
  14031  5a00
  14032  5a00		       08 10		      .byte.b	8,16
  14033  5a02
  14034  5a02		       07 10		      .byte.b	7,16
  14035  5a04
  14036  5a04		       05		      .byte.b	5
  14037  5a05
  14038  5a05		       08 11		      .byte.b	8,17
  14039  5a07
  14040  5a07		       07 11		      .byte.b	7,17
  14041  5a09
  14042  5a09		       03		      .byte.b	3
  14043  5a0a
  14044  5a0a		       02 11		      .byte.b	2,17
  14045  5a0c
  14046  5a0c		       01 11		      .byte.b	1,17
  14047  5a0e
  14048  5a0e		       02		      .byte.b	2
  14049  5a0f
  14050  5a0f		       08 11		      .byte.b	8,17
  14051  5a11
  14052  5a11		       07 11		      .byte.b	7,17
  14053  5a13
  14054  5a13		       03		      .byte.b	3
  14055  5a14
  14056  5a14		       02 11		      .byte.b	2,17
  14057  5a16
  14058  5a16		       01 11		      .byte.b	1,17
  14059  5a18
  14060  5a18		       02		      .byte.b	2
  14061  5a19
  14062  5a19		       08 11		      .byte.b	8,17
  14063  5a1b
  14064  5a1b		       07 11		      .byte.b	7,17
  14065  5a1d
  14066  5a1d		       03		      .byte.b	3
  14067  5a1e
  14068  5a1e		       02 11		      .byte.b	2,17
  14069  5a20
  14070  5a20		       01 11		      .byte.b	1,17
  14071  5a22
  14072  5a22		       02		      .byte.b	2
  14073  5a23
  14074  5a23		       08 11		      .byte.b	8,17
  14075  5a25
  14076  5a25		       07 11		      .byte.b	7,17
  14077  5a27
  14078  5a27		       03		      .byte.b	3
  14079  5a28
  14080  5a28		       02 11		      .byte.b	2,17
  14081  5a2a
  14082  5a2a		       01 11		      .byte.b	1,17
  14083  5a2c
  14084  5a2c		       02		      .byte.b	2
  14085  5a2d
  14086  5a2d		       08 11		      .byte.b	8,17
  14087  5a2f
  14088  5a2f		       07 11		      .byte.b	7,17
  14089  5a31
  14090  5a31		       03		      .byte.b	3
  14091  5a32
  14092  5a32		       02 11		      .byte.b	2,17
  14093  5a34
  14094  5a34		       01 11		      .byte.b	1,17
  14095  5a36
  14096  5a36		       02		      .byte.b	2
  14097  5a37
  14098  5a37		       08 11		      .byte.b	8,17
  14099  5a39
  14100  5a39		       07 11		      .byte.b	7,17
  14101  5a3b
  14102  5a3b		       03		      .byte.b	3
  14103  5a3c
  14104  5a3c		       02 11		      .byte.b	2,17
  14105  5a3e
  14106  5a3e		       01 11		      .byte.b	1,17
  14107  5a40
  14108  5a40		       02		      .byte.b	2
  14109  5a41
  14110  5a41		       08 11		      .byte.b	8,17
  14111  5a43
  14112  5a43		       07 11		      .byte.b	7,17
  14113  5a45
  14114  5a45		       03		      .byte.b	3
  14115  5a46
  14116  5a46		       02 11		      .byte.b	2,17
  14117  5a48
  14118  5a48		       01 11		      .byte.b	1,17
  14119  5a4a
  14120  5a4a		       02		      .byte.b	2
  14121  5a4b
  14122  5a4b		       08 11		      .byte.b	8,17
  14123  5a4d
  14124  5a4d		       07 11		      .byte.b	7,17
  14125  5a4f
  14126  5a4f		       03		      .byte.b	3
  14127  5a50
  14128  5a50		       02 11		      .byte.b	2,17
  14129  5a52
  14130  5a52		       01 11		      .byte.b	1,17
  14131  5a54
  14132  5a54		       02		      .byte.b	2
  14133  5a55
  14134  5a55		       08 10		      .byte.b	8,16
  14135  5a57
  14136  5a57		       07 10		      .byte.b	7,16
  14137  5a59
  14138  5a59		       03		      .byte.b	3
  14139  5a5a
  14140  5a5a		       02 10		      .byte.b	2,16
  14141  5a5c
  14142  5a5c		       01 10		      .byte.b	1,16
  14143  5a5e
  14144  5a5e		       02		      .byte.b	2
  14145  5a5f
  14146  5a5f		       08 10		      .byte.b	8,16
  14147  5a61
  14148  5a61		       07 10		      .byte.b	7,16
  14149  5a63
  14150  5a63		       03		      .byte.b	3
  14151  5a64
  14152  5a64		       02 10		      .byte.b	2,16
  14153  5a66
  14154  5a66		       01 10		      .byte.b	1,16
  14155  5a68
  14156  5a68		       02		      .byte.b	2
  14157  5a69
  14158  5a69		       08 11		      .byte.b	8,17
  14159  5a6b
  14160  5a6b		       07 11		      .byte.b	7,17
  14161  5a6d
  14162  5a6d		       03		      .byte.b	3
  14163  5a6e
  14164  5a6e		       02 11		      .byte.b	2,17
  14165  5a70
  14166  5a70		       01 11		      .byte.b	1,17
  14167  5a72
  14168  5a72		       02		      .byte.b	2
  14169  5a73
  14170  5a73		       08 11		      .byte.b	8,17
  14171  5a75
  14172  5a75		       07 11		      .byte.b	7,17
  14173  5a77
  14174  5a77		       03		      .byte.b	3
  14175  5a78
  14176  5a78		       02 11		      .byte.b	2,17
  14177  5a7a
  14178  5a7a		       01 11		      .byte.b	1,17
  14179  5a7c
  14180  5a7c		       02		      .byte.b	2
  14181  5a7d
  14182  5a7d		       08 0e		      .byte.b	8,14
  14183  5a7f
  14184  5a7f		       07 0e		      .byte.b	7,14
  14185  5a81
  14186  5a81		       03		      .byte.b	3
  14187  5a82
  14188  5a82		       02 0e		      .byte.b	2,14
  14189  5a84
  14190  5a84		       01 0e		      .byte.b	1,14
  14191  5a86
  14192  5a86		       02		      .byte.b	2
  14193  5a87
  14194  5a87		       08 11		      .byte.b	8,17
  14195  5a89
  14196  5a89		       07 11		      .byte.b	7,17
  14197  5a8b
  14198  5a8b		       03		      .byte.b	3
  14199  5a8c
  14200  5a8c		       02 11		      .byte.b	2,17
  14201  5a8e
  14202  5a8e		       01 11		      .byte.b	1,17
  14203  5a90
  14204  5a90		       02		      .byte.b	2
  14205  5a91
  14206  5a91		       08 11		      .byte.b	8,17
  14207  5a93
  14208  5a93		       07 11		      .byte.b	7,17
  14209  5a95
  14210  5a95		       03		      .byte.b	3
  14211  5a96
  14212  5a96		       02 11		      .byte.b	2,17
  14213  5a98
  14214  5a98		       01 11		      .byte.b	1,17
  14215  5a9a
  14216  5a9a		       02		      .byte.b	2
  14217  5a9b
  14218  5a9b		       08 1a		      .byte.b	8,26
  14219  5a9d
  14220  5a9d		       07 19		      .byte.b	7,25
  14221  5a9f
  14222  5a9f		       03		      .byte.b	3
  14223  5aa0
  14224  5aa0		       02 1a		      .byte.b	2,26
  14225  5aa2
  14226  5aa2		       01 19		      .byte.b	1,25
  14227  5aa4
  14228  5aa4		       02		      .byte.b	2
  14229  5aa5
  14230  5aa5		       08 1a		      .byte.b	8,26
  14231  5aa7
  14232  5aa7		       07 19		      .byte.b	7,25
  14233  5aa9
  14234  5aa9		       03		      .byte.b	3
  14235  5aaa
  14236  5aaa		       02 1a		      .byte.b	2,26
  14237  5aac
  14238  5aac		       01 19		      .byte.b	1,25
  14239  5aae
  14240  5aae		       02		      .byte.b	2
  14241  5aaf
  14242  5aaf		       08 1a		      .byte.b	8,26
  14243  5ab1
  14244  5ab1		       07 19		      .byte.b	7,25
  14245  5ab3
  14246  5ab3		       03		      .byte.b	3
  14247  5ab4
  14248  5ab4		       02 1a		      .byte.b	2,26
  14249  5ab6
  14250  5ab6		       01 19		      .byte.b	1,25
  14251  5ab8
  14252  5ab8		       02		      .byte.b	2
  14253  5ab9
  14254  5ab9		       08 1a		      .byte.b	8,26
  14255  5abb
  14256  5abb		       07 19		      .byte.b	7,25
  14257  5abd
  14258  5abd		       03		      .byte.b	3
  14259  5abe
  14260  5abe		       02 1a		      .byte.b	2,26
  14261  5ac0
  14262  5ac0		       01 19		      .byte.b	1,25
  14263  5ac2
  14264  5ac2		       02		      .byte.b	2
  14265  5ac3
  14266  5ac3		       08 1a		      .byte.b	8,26
  14267  5ac5
  14268  5ac5		       07 19		      .byte.b	7,25
  14269  5ac7
  14270  5ac7		       03		      .byte.b	3
  14271  5ac8
  14272  5ac8		       02 1a		      .byte.b	2,26
  14273  5aca
  14274  5aca		       01 19		      .byte.b	1,25
  14275  5acc
  14276  5acc		       02		      .byte.b	2
  14277  5acd
  14278  5acd		       08 1a		      .byte.b	8,26
  14279  5acf
  14280  5acf		       07 19		      .byte.b	7,25
  14281  5ad1
  14282  5ad1		       03		      .byte.b	3
  14283  5ad2
  14284  5ad2		       02 1a		      .byte.b	2,26
  14285  5ad4
  14286  5ad4		       01 19		      .byte.b	1,25
  14287  5ad6
  14288  5ad6		       02		      .byte.b	2
  14289  5ad7
  14290  5ad7		       08 1a		      .byte.b	8,26
  14291  5ad9
  14292  5ad9		       07 19		      .byte.b	7,25
  14293  5adb
  14294  5adb		       03		      .byte.b	3
  14295  5adc
  14296  5adc		       02 1a		      .byte.b	2,26
  14297  5ade
  14298  5ade		       01 19		      .byte.b	1,25
  14299  5ae0
  14300  5ae0		       02		      .byte.b	2
  14301  5ae1
  14302  5ae1		       08 1a		      .byte.b	8,26
  14303  5ae3
  14304  5ae3		       07 19		      .byte.b	7,25
  14305  5ae5
  14306  5ae5		       03		      .byte.b	3
  14307  5ae6
  14308  5ae6		       02 1a		      .byte.b	2,26
  14309  5ae8
  14310  5ae8		       01 19		      .byte.b	1,25
  14311  5aea
  14312  5aea		       02		      .byte.b	2
  14313  5aeb
  14314  5aeb		       08 1a		      .byte.b	8,26
  14315  5aed
  14316  5aed		       07 19		      .byte.b	7,25
  14317  5aef
  14318  5aef		       03		      .byte.b	3
  14319  5af0
  14320  5af0		       02 1a		      .byte.b	2,26
  14321  5af2
  14322  5af2		       01 19		      .byte.b	1,25
  14323  5af4
  14324  5af4		       02		      .byte.b	2
  14325  5af5
  14326  5af5		       08 1a		      .byte.b	8,26
  14327  5af7
  14328  5af7		       07 19		      .byte.b	7,25
  14329  5af9
  14330  5af9		       03		      .byte.b	3
  14331  5afa
  14332  5afa		       02 1a		      .byte.b	2,26
  14333  5afc
  14334  5afc		       01 19		      .byte.b	1,25
  14335  5afe
  14336  5afe		       02		      .byte.b	2
  14337  5aff
  14338  5aff		       08 1a		      .byte.b	8,26
  14339  5b01
  14340  5b01		       07 19		      .byte.b	7,25
  14341  5b03
  14342  5b03		       03		      .byte.b	3
  14343  5b04
  14344  5b04		       02 1a		      .byte.b	2,26
  14345  5b06
  14346  5b06		       01 19		      .byte.b	1,25
  14347  5b08
  14348  5b08		       02		      .byte.b	2
  14349  5b09
  14350  5b09		       08 1a		      .byte.b	8,26
  14351  5b0b
  14352  5b0b		       07 19		      .byte.b	7,25
  14353  5b0d
  14354  5b0d		       03		      .byte.b	3
  14355  5b0e
  14356  5b0e		       02 1a		      .byte.b	2,26
  14357  5b10
  14358  5b10		       01 19		      .byte.b	1,25
  14359  5b12
  14360  5b12		       02		      .byte.b	2
  14361  5b13
  14362  5b13		       08 10		      .byte.b	8,16
  14363  5b15
  14364  5b15		       07 10		      .byte.b	7,16
  14365  5b17
  14366  5b17		       05		      .byte.b	5
  14367  5b18
  14368  5b18		       08 11		      .byte.b	8,17
  14369  5b1a
  14370  5b1a		       07 11		      .byte.b	7,17
  14371  5b1c
  14372  5b1c		       05		      .byte.b	5
  14373  5b1d
  14374  5b1d		       08 0e		      .byte.b	8,14
  14375  5b1f
  14376  5b1f		       07 0e		      .byte.b	7,14
  14377  5b21
  14378  5b21		       05		      .byte.b	5
  14379  5b22
  14380  5b22		       08 10		      .byte.b	8,16
  14381  5b24
  14382  5b24		       07 10		      .byte.b	7,16
  14383  5b26
  14384  5b26		       05		      .byte.b	5
  14385  5b27
  14386  5b27		       08 11		      .byte.b	8,17
  14387  5b29
  14388  5b29		       07 11		      .byte.b	7,17
  14389  5b2b
  14390  5b2b		       03		      .byte.b	3
  14391  5b2c
  14392  5b2c		       02 11		      .byte.b	2,17
  14393  5b2e
  14394  5b2e		       01 11		      .byte.b	1,17
  14395  5b30
  14396  5b30		       02		      .byte.b	2
  14397  5b31
  14398  5b31		       08 11		      .byte.b	8,17
  14399  5b33
  14400  5b33		       07 11		      .byte.b	7,17
  14401  5b35
  14402  5b35		       03		      .byte.b	3
  14403  5b36
  14404  5b36		       02 11		      .byte.b	2,17
  14405  5b38
  14406  5b38		       01 11		      .byte.b	1,17
  14407  5b3a
  14408  5b3a		       02		      .byte.b	2
  14409  5b3b
  14410  5b3b		       08 11		      .byte.b	8,17
  14411  5b3d
  14412  5b3d		       07 11		      .byte.b	7,17
  14413  5b3f
  14414  5b3f		       03		      .byte.b	3
  14415  5b40
  14416  5b40		       02 11		      .byte.b	2,17
  14417  5b42
  14418  5b42		       01 11		      .byte.b	1,17
  14419  5b44
  14420  5b44		       02		      .byte.b	2
  14421  5b45
  14422  5b45		       08 11		      .byte.b	8,17
  14423  5b47
  14424  5b47		       07 11		      .byte.b	7,17
  14425  5b49
  14426  5b49		       03		      .byte.b	3
  14427  5b4a
  14428  5b4a		       02 11		      .byte.b	2,17
  14429  5b4c
  14430  5b4c		       01 11		      .byte.b	1,17
  14431  5b4e
  14432  5b4e		       02		      .byte.b	2
  14433  5b4f
  14434  5b4f		       08 11		      .byte.b	8,17
  14435  5b51
  14436  5b51		       07 11		      .byte.b	7,17
  14437  5b53
  14438  5b53		       03		      .byte.b	3
  14439  5b54
  14440  5b54		       02 11		      .byte.b	2,17
  14441  5b56
  14442  5b56		       01 11		      .byte.b	1,17
  14443  5b58
  14444  5b58		       02		      .byte.b	2
  14445  5b59
  14446  5b59		       08 11		      .byte.b	8,17
  14447  5b5b
  14448  5b5b		       07 11		      .byte.b	7,17
  14449  5b5d
  14450  5b5d		       03		      .byte.b	3
  14451  5b5e
  14452  5b5e		       02 11		      .byte.b	2,17
  14453  5b60
  14454  5b60		       01 11		      .byte.b	1,17
  14455  5b62
  14456  5b62		       02		      .byte.b	2
  14457  5b63
  14458  5b63		       08 11		      .byte.b	8,17
  14459  5b65
  14460  5b65		       07 11		      .byte.b	7,17
  14461  5b67
  14462  5b67		       03		      .byte.b	3
  14463  5b68
  14464  5b68		       02 11		      .byte.b	2,17
  14465  5b6a
  14466  5b6a		       01 11		      .byte.b	1,17
  14467  5b6c
  14468  5b6c		       02		      .byte.b	2
  14469  5b6d
  14470  5b6d		       08 11		      .byte.b	8,17
  14471  5b6f
  14472  5b6f		       07 11		      .byte.b	7,17
  14473  5b71
  14474  5b71		       03		      .byte.b	3
  14475  5b72
  14476  5b72		       02 11		      .byte.b	2,17
  14477  5b74
  14478  5b74		       01 11		      .byte.b	1,17
  14479  5b76
  14480  5b76		       02		      .byte.b	2
  14481  5b77
  14482  5b77		       08 10		      .byte.b	8,16
  14483  5b79
  14484  5b79		       07 10		      .byte.b	7,16
  14485  5b7b
  14486  5b7b		       03		      .byte.b	3
  14487  5b7c
  14488  5b7c		       02 10		      .byte.b	2,16
  14489  5b7e
  14490  5b7e		       01 10		      .byte.b	1,16
  14491  5b80
  14492  5b80		       02		      .byte.b	2
  14493  5b81
  14494  5b81		       08 10		      .byte.b	8,16
  14495  5b83
  14496  5b83		       07 10		      .byte.b	7,16
  14497  5b85
  14498  5b85		       03		      .byte.b	3
  14499  5b86
  14500  5b86		       02 10		      .byte.b	2,16
  14501  5b88
  14502  5b88		       01 10		      .byte.b	1,16
  14503  5b8a
  14504  5b8a		       02		      .byte.b	2
  14505  5b8b
  14506  5b8b		       08 11		      .byte.b	8,17
  14507  5b8d
  14508  5b8d		       07 11		      .byte.b	7,17
  14509  5b8f
  14510  5b8f		       03		      .byte.b	3
  14511  5b90
  14512  5b90		       02 11		      .byte.b	2,17
  14513  5b92
  14514  5b92		       01 11		      .byte.b	1,17
  14515  5b94
  14516  5b94		       02		      .byte.b	2
  14517  5b95
  14518  5b95		       08 11		      .byte.b	8,17
  14519  5b97
  14520  5b97		       07 11		      .byte.b	7,17
  14521  5b99
  14522  5b99		       03		      .byte.b	3
  14523  5b9a
  14524  5b9a		       02 11		      .byte.b	2,17
  14525  5b9c
  14526  5b9c		       01 11		      .byte.b	1,17
  14527  5b9e
  14528  5b9e		       02		      .byte.b	2
  14529  5b9f
  14530  5b9f		       08 0e		      .byte.b	8,14
  14531  5ba1
  14532  5ba1		       07 0e		      .byte.b	7,14
  14533  5ba3
  14534  5ba3		       03		      .byte.b	3
  14535  5ba4
  14536  5ba4		       02 0e		      .byte.b	2,14
  14537  5ba6
  14538  5ba6		       01 0e		      .byte.b	1,14
  14539  5ba8
  14540  5ba8		       02		      .byte.b	2
  14541  5ba9
  14542  5ba9		       08 11		      .byte.b	8,17
  14543  5bab
  14544  5bab		       07 11		      .byte.b	7,17
  14545  5bad
  14546  5bad		       03		      .byte.b	3
  14547  5bae
  14548  5bae		       02 11		      .byte.b	2,17
  14549  5bb0
  14550  5bb0		       01 11		      .byte.b	1,17
  14551  5bb2
  14552  5bb2		       02		      .byte.b	2
  14553  5bb3
  14554  5bb3		       08 11		      .byte.b	8,17
  14555  5bb5
  14556  5bb5		       07 11		      .byte.b	7,17
  14557  5bb7
  14558  5bb7		       03		      .byte.b	3
  14559  5bb8
  14560  5bb8		       02 11		      .byte.b	2,17
  14561  5bba
  14562  5bba		       01 11		      .byte.b	1,17
  14563  5bbc
  14564  5bbc		       02		      .byte.b	2
  14565  5bbd
  14566  5bbd		       08 1a		      .byte.b	8,26
  14567  5bbf
  14568  5bbf		       07 19		      .byte.b	7,25
  14569  5bc1
  14570  5bc1		       08		      .byte.b	8
  14571  5bc2
  14572  5bc2		       02 1a		      .byte.b	2,26
  14573  5bc4
  14574  5bc4		       01 19		      .byte.b	1,25
  14575  5bc6
  14576  5bc6		       02		      .byte.b	2
  14577  5bc7
  14578  5bc7		       08 1a		      .byte.b	8,26
  14579  5bc9
  14580  5bc9		       07 19		      .byte.b	7,25
  14581  5bcb
  14582  5bcb		       08		      .byte.b	8
  14583  5bcc
  14584  5bcc		       02 1a		      .byte.b	2,26
  14585  5bce
  14586  5bce		       01 19		      .byte.b	1,25
  14587  5bd0
  14588  5bd0		       02		      .byte.b	2
  14589  5bd1
  14590  5bd1		       08 1a		      .byte.b	8,26
  14591  5bd3
  14592  5bd3		       07 19		      .byte.b	7,25
  14593  5bd5
  14594  5bd5		       08		      .byte.b	8
  14595  5bd6
  14596  5bd6		       02 1a		      .byte.b	2,26
  14597  5bd8
  14598  5bd8		       01 19		      .byte.b	1,25
  14599  5bda
  14600  5bda		       02		      .byte.b	2
  14601  5bdb
  14602  5bdb		       08 13		      .byte.b	8,19
  14603  5bdd
  14604  5bdd		       07 13		      .byte.b	7,19
  14605  5bdf
  14606  5bdf		       0a		      .byte.b	10
  14607  5be0
  14608  5be0		       08 0e		      .byte.b	8,14
  14609  5be2
  14610  5be2		       07 0e		      .byte.b	7,14
  14611  5be4
  14612  5be4		       0a		      .byte.b	10
  14613  5be5
  14614  5be5		       08 0f		      .byte.b	8,15
  14615  5be7
  14616  5be7		       07 0f		      .byte.b	7,15
  14617  5be9
  14618  5be9		       0a		      .byte.b	10
  14619  5bea
  14620  5bea		       08 13		      .byte.b	8,19
  14621  5bec
  14622  5bec		       07 13		      .byte.b	7,19
  14623  5bee
  14624  5bee		       0a		      .byte.b	10
  14625  5bef
  14626  5bef		       08 0d		      .byte.b	8,13
  14627  5bf1
  14628  5bf1		       07 0d		      .byte.b	7,13
  14629  5bf3
  14630  5bf3		       0a		      .byte.b	10
  14631  5bf4
  14632  5bf4		       08 0e		      .byte.b	8,14
  14633  5bf6
  14634  5bf6		       07 0e		      .byte.b	7,14
  14635  5bf8
  14636  5bf8		       0a		      .byte.b	10
  14637  5bf9
  14638  5bf9		       08 13		      .byte.b	8,19
  14639  5bfb
  14640  5bfb		       07 13		      .byte.b	7,19
  14641  5bfd
  14642  5bfd		       0a		      .byte.b	10
  14643  5bfe
  14644  5bfe		       08 0b		      .byte.b	8,11
  14645  5c00
  14646  5c00		       07 05		      .byte.b	7,5
  14647  5c02
  14648  5c02		       0a		      .byte.b	10
  14649  5c03
  14650  5c03		       08 0c		      .byte.b	8,12
  14651  5c05
  14652  5c05		       07 06		      .byte.b	7,6
  14653  5c07
  14654  5c07		       0a		      .byte.b	10
  14655  5c08
  14656  5c08		       08 08		      .byte.b	8,8
  14657  5c0a
  14658  5c0a		       07 07		      .byte.b	7,7
  14659  5c0c
  14660  5c0c		       0a		      .byte.b	10
  14661  5c0d
  14662  5c0d		       08 09		      .byte.b	8,9
  14663  5c0f
  14664  5c0f		       07 08		      .byte.b	7,8
  14665  5c11
  14666  5c11		       0a		      .byte.b	10
  14667  5c12
  14668  5c12		       08 1a		      .byte.b	8,26
  14669  5c14
  14670  5c14		       07 19		      .byte.b	7,25
  14671  5c16
  14672  5c16		       08		      .byte.b	8
  14673  5c17
  14674  5c17		       02 1a		      .byte.b	2,26
  14675  5c19
  14676  5c19		       01 19		      .byte.b	1,25
  14677  5c1b
  14678  5c1b		       02		      .byte.b	2
  14679  5c1c
  14680  5c1c		       08 1a		      .byte.b	8,26
  14681  5c1e
  14682  5c1e		       07 19		      .byte.b	7,25
  14683  5c20
  14684  5c20		       08		      .byte.b	8
  14685  5c21
  14686  5c21		       02 1a		      .byte.b	2,26
  14687  5c23
  14688  5c23		       01 19		      .byte.b	1,25
  14689  5c25
  14690  5c25		       02		      .byte.b	2
  14691  5c26
  14692  5c26		       08 1a		      .byte.b	8,26
  14693  5c28
  14694  5c28		       07 19		      .byte.b	7,25
  14695  5c2a
  14696  5c2a		       08		      .byte.b	8
  14697  5c2b
  14698  5c2b		       02 1a		      .byte.b	2,26
  14699  5c2d
  14700  5c2d		       01 19		      .byte.b	1,25
  14701  5c2f
  14702  5c2f		       02		      .byte.b	2
  14703  5c30
  14704  5c30		       08 13		      .byte.b	8,19
  14705  5c32
  14706  5c32		       07 13		      .byte.b	7,19
  14707  5c34
  14708  5c34		       0a		      .byte.b	10
  14709  5c35
  14710  5c35		       08 0e		      .byte.b	8,14
  14711  5c37
  14712  5c37		       07 0e		      .byte.b	7,14
  14713  5c39
  14714  5c39		       0a		      .byte.b	10
  14715  5c3a
  14716  5c3a		       08 0f		      .byte.b	8,15
  14717  5c3c
  14718  5c3c		       07 0f		      .byte.b	7,15
  14719  5c3e
  14720  5c3e		       0a		      .byte.b	10
  14721  5c3f
  14722  5c3f		       08 13		      .byte.b	8,19
  14723  5c41
  14724  5c41		       07 13		      .byte.b	7,19
  14725  5c43
  14726  5c43		       0a		      .byte.b	10
  14727  5c44
  14728  5c44		       08 0d		      .byte.b	8,13
  14729  5c46
  14730  5c46		       07 0d		      .byte.b	7,13
  14731  5c48
  14732  5c48		       0a		      .byte.b	10
  14733  5c49
  14734  5c49		       08 0e		      .byte.b	8,14
  14735  5c4b
  14736  5c4b		       07 0e		      .byte.b	7,14
  14737  5c4d
  14738  5c4d		       0a		      .byte.b	10
  14739  5c4e
  14740  5c4e		       08 13		      .byte.b	8,19
  14741  5c50
  14742  5c50		       07 13		      .byte.b	7,19
  14743  5c52
  14744  5c52		       0a		      .byte.b	10
  14745  5c53
  14746  5c53		       08 0b		      .byte.b	8,11
  14747  5c55
  14748  5c55		       07 05		      .byte.b	7,5
  14749  5c57
  14750  5c57		       0a		      .byte.b	10
  14751  5c58
  14752  5c58		       08 0c		      .byte.b	8,12
  14753  5c5a
  14754  5c5a		       07 06		      .byte.b	7,6
  14755  5c5c
  14756  5c5c		       0a		      .byte.b	10
  14757  5c5d
  14758  5c5d		       08 08		      .byte.b	8,8
  14759  5c5f
  14760  5c5f		       07 07		      .byte.b	7,7
  14761  5c61
  14762  5c61		       0a		      .byte.b	10
  14763  5c62
  14764  5c62		       08 09		      .byte.b	8,9
  14765  5c64
  14766  5c64		       07 08		      .byte.b	7,8
  14767  5c66
  14768  5c66		       0a		      .byte.b	10
  14769  5c67
  14770  5c67		       08 1a		      .byte.b	8,26
  14771  5c69
  14772  5c69		       07 19		      .byte.b	7,25
  14773  5c6b
  14774  5c6b		       08		      .byte.b	8
  14775  5c6c
  14776  5c6c		       02 1a		      .byte.b	2,26
  14777  5c6e
  14778  5c6e		       01 19		      .byte.b	1,25
  14779  5c70
  14780  5c70		       02		      .byte.b	2
  14781  5c71
  14782  5c71		       08 1a		      .byte.b	8,26
  14783  5c73
  14784  5c73		       07 19		      .byte.b	7,25
  14785  5c75
  14786  5c75		       08		      .byte.b	8
  14787  5c76
  14788  5c76		       02 1a		      .byte.b	2,26
  14789  5c78
  14790  5c78		       01 19		      .byte.b	1,25
  14791  5c7a
  14792  5c7a		       02		      .byte.b	2
  14793  5c7b
  14794  5c7b		       08 1a		      .byte.b	8,26
  14795  5c7d
  14796  5c7d		       07 19		      .byte.b	7,25
  14797  5c7f
  14798  5c7f		       08		      .byte.b	8
  14799  5c80
  14800  5c80		       02 1a		      .byte.b	2,26
  14801  5c82
  14802  5c82		       01 19		      .byte.b	1,25
  14803  5c84
  14804  5c84		       02		      .byte.b	2
  14805  5c85
  14806  5c85		       08 13		      .byte.b	8,19
  14807  5c87
  14808  5c87		       07 13		      .byte.b	7,19
  14809  5c89
  14810  5c89		       0a		      .byte.b	10
  14811  5c8a
  14812  5c8a		       08 0e		      .byte.b	8,14
  14813  5c8c
  14814  5c8c		       07 0e		      .byte.b	7,14
  14815  5c8e
  14816  5c8e		       0a		      .byte.b	10
  14817  5c8f
  14818  5c8f		       08 0f		      .byte.b	8,15
  14819  5c91
  14820  5c91		       07 0f		      .byte.b	7,15
  14821  5c93
  14822  5c93		       0a		      .byte.b	10
  14823  5c94
  14824  5c94		       08 13		      .byte.b	8,19
  14825  5c96
  14826  5c96		       07 13		      .byte.b	7,19
  14827  5c98
  14828  5c98		       0a		      .byte.b	10
  14829  5c99
  14830  5c99		       08 0d		      .byte.b	8,13
  14831  5c9b
  14832  5c9b		       07 0d		      .byte.b	7,13
  14833  5c9d
  14834  5c9d		       0a		      .byte.b	10
  14835  5c9e
  14836  5c9e		       08 0e		      .byte.b	8,14
  14837  5ca0
  14838  5ca0		       07 0e		      .byte.b	7,14
  14839  5ca2
  14840  5ca2		       0a		      .byte.b	10
  14841  5ca3
  14842  5ca3		       08 13		      .byte.b	8,19
  14843  5ca5
  14844  5ca5		       07 13		      .byte.b	7,19
  14845  5ca7
  14846  5ca7		       0a		      .byte.b	10
  14847  5ca8
  14848  5ca8		       08 0b		      .byte.b	8,11
  14849  5caa
  14850  5caa		       07 05		      .byte.b	7,5
  14851  5cac
  14852  5cac		       0a		      .byte.b	10
  14853  5cad
  14854  5cad		       08 0c		      .byte.b	8,12
  14855  5caf
  14856  5caf		       07 06		      .byte.b	7,6
  14857  5cb1
  14858  5cb1		       0a		      .byte.b	10
  14859  5cb2
  14860  5cb2		       08 08		      .byte.b	8,8
  14861  5cb4
  14862  5cb4		       07 07		      .byte.b	7,7
  14863  5cb6
  14864  5cb6		       0a		      .byte.b	10
  14865  5cb7
  14866  5cb7		       08 09		      .byte.b	8,9
  14867  5cb9
  14868  5cb9		       07 08		      .byte.b	7,8
  14869  5cbb
  14870  5cbb		       0a		      .byte.b	10
  14871  5cbc
  14872  5cbc		       08 1a		      .byte.b	8,26
  14873  5cbe
  14874  5cbe		       07 19		      .byte.b	7,25
  14875  5cc0
  14876  5cc0		       08		      .byte.b	8
  14877  5cc1
  14878  5cc1		       02 1a		      .byte.b	2,26
  14879  5cc3
  14880  5cc3		       01 19		      .byte.b	1,25
  14881  5cc5
  14882  5cc5		       02		      .byte.b	2
  14883  5cc6
  14884  5cc6		       08 1a		      .byte.b	8,26
  14885  5cc8
  14886  5cc8		       07 19		      .byte.b	7,25
  14887  5cca
  14888  5cca		       08		      .byte.b	8
  14889  5ccb
  14890  5ccb		       02 1a		      .byte.b	2,26
  14891  5ccd
  14892  5ccd		       01 19		      .byte.b	1,25
  14893  5ccf
  14894  5ccf		       02		      .byte.b	2
  14895  5cd0
  14896  5cd0		       08 1a		      .byte.b	8,26
  14897  5cd2
  14898  5cd2		       07 19		      .byte.b	7,25
  14899  5cd4
  14900  5cd4		       08		      .byte.b	8
  14901  5cd5
  14902  5cd5		       02 1a		      .byte.b	2,26
  14903  5cd7
  14904  5cd7		       01 19		      .byte.b	1,25
  14905  5cd9
  14906  5cd9		       02		      .byte.b	2
  14907  5cda
  14908  5cda		       08 13		      .byte.b	8,19
  14909  5cdc
  14910  5cdc		       07 13		      .byte.b	7,19
  14911  5cde
  14912  5cde		       0a		      .byte.b	10
  14913  5cdf
  14914  5cdf		       08 0e		      .byte.b	8,14
  14915  5ce1
  14916  5ce1		       07 0e		      .byte.b	7,14
  14917  5ce3
  14918  5ce3		       0a		      .byte.b	10
  14919  5ce4
  14920  5ce4		       08 0f		      .byte.b	8,15
  14921  5ce6
  14922  5ce6		       07 0f		      .byte.b	7,15
  14923  5ce8
  14924  5ce8		       0a		      .byte.b	10
  14925  5ce9
  14926  5ce9		       08 13		      .byte.b	8,19
  14927  5ceb
  14928  5ceb		       07 13		      .byte.b	7,19
  14929  5ced
  14930  5ced		       0a		      .byte.b	10
  14931  5cee
  14932  5cee		       08 0d		      .byte.b	8,13
  14933  5cf0
  14934  5cf0		       07 0d		      .byte.b	7,13
  14935  5cf2
  14936  5cf2		       0a		      .byte.b	10
  14937  5cf3
  14938  5cf3		       08 0e		      .byte.b	8,14
  14939  5cf5
  14940  5cf5		       07 0e		      .byte.b	7,14
  14941  5cf7
  14942  5cf7		       0a		      .byte.b	10
  14943  5cf8
  14944  5cf8		       08 13		      .byte.b	8,19
  14945  5cfa
  14946  5cfa		       07 13		      .byte.b	7,19
  14947  5cfc
  14948  5cfc		       0a		      .byte.b	10
  14949  5cfd
  14950  5cfd		       08 0b		      .byte.b	8,11
  14951  5cff
  14952  5cff		       07 05		      .byte.b	7,5
  14953  5d01
  14954  5d01		       0a		      .byte.b	10
  14955  5d02
  14956  5d02		       08 0c		      .byte.b	8,12
  14957  5d04
  14958  5d04		       07 06		      .byte.b	7,6
  14959  5d06
  14960  5d06		       0a		      .byte.b	10
  14961  5d07
  14962  5d07		       08 08		      .byte.b	8,8
  14963  5d09
  14964  5d09		       07 07		      .byte.b	7,7
  14965  5d0b
  14966  5d0b		       0a		      .byte.b	10
  14967  5d0c
  14968  5d0c		       08 09		      .byte.b	8,9
  14969  5d0e
  14970  5d0e		       07 08		      .byte.b	7,8
  14971  5d10
  14972  5d10		       0a		      .byte.b	10
  14973  5d11
  14974  5d11		       08 1a		      .byte.b	8,26
  14975  5d13
  14976  5d13		       07 19		      .byte.b	7,25
  14977  5d15
  14978  5d15		       03		      .byte.b	3
  14979  5d16
  14980  5d16		       02 1a		      .byte.b	2,26
  14981  5d18
  14982  5d18		       01 19		      .byte.b	1,25
  14983  5d1a
  14984  5d1a		       02		      .byte.b	2
  14985  5d1b
  14986  5d1b		       08 1a		      .byte.b	8,26
  14987  5d1d
  14988  5d1d		       07 19		      .byte.b	7,25
  14989  5d1f
  14990  5d1f		       03		      .byte.b	3
  14991  5d20
  14992  5d20		       02 1a		      .byte.b	2,26
  14993  5d22
  14994  5d22		       01 19		      .byte.b	1,25
  14995  5d24
  14996  5d24		       02		      .byte.b	2
  14997  5d25
  14998  5d25		       08 1a		      .byte.b	8,26
  14999  5d27
  15000  5d27		       07 19		      .byte.b	7,25
  15001  5d29
  15002  5d29		       03		      .byte.b	3
  15003  5d2a
  15004  5d2a		       02 1a		      .byte.b	2,26
  15005  5d2c
  15006  5d2c		       01 19		      .byte.b	1,25
  15007  5d2e
  15008  5d2e		       02		      .byte.b	2
  15009  5d2f
  15010  5d2f		       08 1a		      .byte.b	8,26
  15011  5d31
  15012  5d31		       07 19		      .byte.b	7,25
  15013  5d33
  15014  5d33		       03		      .byte.b	3
  15015  5d34
  15016  5d34		       02 1a		      .byte.b	2,26
  15017  5d36
  15018  5d36		       01 19		      .byte.b	1,25
  15019  5d38
  15020  5d38		       02		      .byte.b	2
  15021  5d39
  15022  5d39		       08 1a		      .byte.b	8,26
  15023  5d3b
  15024  5d3b		       07 19		      .byte.b	7,25
  15025  5d3d
  15026  5d3d		       03		      .byte.b	3
  15027  5d3e
  15028  5d3e		       02 1a		      .byte.b	2,26
  15029  5d40
  15030  5d40		       01 19		      .byte.b	1,25
  15031  5d42
  15032  5d42		       02		      .byte.b	2
  15033  5d43
  15034  5d43		       08 1a		      .byte.b	8,26
  15035  5d45
  15036  5d45		       07 19		      .byte.b	7,25
  15037  5d47
  15038  5d47		       03		      .byte.b	3
  15039  5d48
  15040  5d48		       02 1a		      .byte.b	2,26
  15041  5d4a
  15042  5d4a		       01 19		      .byte.b	1,25
  15043  5d4c
  15044  5d4c		       02		      .byte.b	2
  15045  5d4d
  15046  5d4d		       08 1a		      .byte.b	8,26
  15047  5d4f
  15048  5d4f		       07 19		      .byte.b	7,25
  15049  5d51
  15050  5d51		       03		      .byte.b	3
  15051  5d52
  15052  5d52		       02 1a		      .byte.b	2,26
  15053  5d54
  15054  5d54		       01 19		      .byte.b	1,25
  15055  5d56
  15056  5d56		       02		      .byte.b	2
  15057  5d57
  15058  5d57		       08 1a		      .byte.b	8,26
  15059  5d59
  15060  5d59		       07 19		      .byte.b	7,25
  15061  5d5b
  15062  5d5b		       03		      .byte.b	3
  15063  5d5c
  15064  5d5c		       02 1a		      .byte.b	2,26
  15065  5d5e
  15066  5d5e		       01 19		      .byte.b	1,25
  15067  5d60
  15068  5d60		       02		      .byte.b	2
  15069  5d61
  15070  5d61		       08 1a		      .byte.b	8,26
  15071  5d63
  15072  5d63		       07 19		      .byte.b	7,25
  15073  5d65
  15074  5d65		       03		      .byte.b	3
  15075  5d66
  15076  5d66		       02 1a		      .byte.b	2,26
  15077  5d68
  15078  5d68		       01 19		      .byte.b	1,25
  15079  5d6a
  15080  5d6a		       02		      .byte.b	2
  15081  5d6b
  15082  5d6b		       08 1a		      .byte.b	8,26
  15083  5d6d
  15084  5d6d		       07 19		      .byte.b	7,25
  15085  5d6f
  15086  5d6f		       03		      .byte.b	3
  15087  5d70
  15088  5d70		       02 1a		      .byte.b	2,26
  15089  5d72
  15090  5d72		       01 19		      .byte.b	1,25
  15091  5d74
  15092  5d74		       02		      .byte.b	2
  15093  5d75
  15094  5d75		       08 1a		      .byte.b	8,26
  15095  5d77
  15096  5d77		       07 19		      .byte.b	7,25
  15097  5d79
  15098  5d79		       03		      .byte.b	3
  15099  5d7a
  15100  5d7a		       02 1a		      .byte.b	2,26
  15101  5d7c
  15102  5d7c		       01 19		      .byte.b	1,25
  15103  5d7e
  15104  5d7e		       02		      .byte.b	2
  15105  5d7f
  15106  5d7f		       08 1a		      .byte.b	8,26
  15107  5d81
  15108  5d81		       07 19		      .byte.b	7,25
  15109  5d83
  15110  5d83		       03		      .byte.b	3
  15111  5d84
  15112  5d84		       02 1a		      .byte.b	2,26
  15113  5d86
  15114  5d86		       01 19		      .byte.b	1,25
  15115  5d88
  15116  5d88		       02		      .byte.b	2
  15117  5d89
  15118  5d89		       08 19		      .byte.b	8,25
  15119  5d8b
  15120  5d8b		       07 19		      .byte.b	7,25
  15121  5d8d
  15122  5d8d		       03		      .byte.b	3
  15123  5d8e
  15124  5d8e		       02 19		      .byte.b	2,25
  15125  5d90
  15126  5d90		       01 19		      .byte.b	1,25
  15127  5d92
  15128  5d92		       02		      .byte.b	2
  15129  5d93
  15130  5d93		       08 1a		      .byte.b	8,26
  15131  5d95
  15132  5d95		       07 19		      .byte.b	7,25
  15133  5d97
  15134  5d97		       03		      .byte.b	3
  15135  5d98
  15136  5d98		       02 1a		      .byte.b	2,26
  15137  5d9a
  15138  5d9a		       01 19		      .byte.b	1,25
  15139  5d9c
  15140  5d9c		       02		      .byte.b	2
  15141  5d9d
  15142  5d9d		       08 16		      .byte.b	8,22
  15143  5d9f
  15144  5d9f		       07 19		      .byte.b	7,25
  15145  5da1
  15146  5da1		       03		      .byte.b	3
  15147  5da2
  15148  5da2		       02 16		      .byte.b	2,22
  15149  5da4
  15150  5da4		       01 19		      .byte.b	1,25
  15151  5da6
  15152  5da6		       02		      .byte.b	2
  15153  5da7
  15154  5da7		       08 19		      .byte.b	8,25
  15155  5da9
  15156  5da9		       07 19		      .byte.b	7,25
  15157  5dab
  15158  5dab		       03		      .byte.b	3
  15159  5dac
  15160  5dac		       02 19		      .byte.b	2,25
  15161  5dae
  15162  5dae		       01 19		      .byte.b	1,25
  15163  5db0
  15164  5db0		       02		      .byte.b	2
  15165  5db1
  15166  5db1		       08 19		      .byte.b	8,25
  15167  5db3
  15168  5db3		       07 18		      .byte.b	7,24
  15169  5db5
  15170  5db5		       03		      .byte.b	3
  15171  5db6
  15172  5db6		       02 19		      .byte.b	2,25
  15173  5db8
  15174  5db8		       01 18		      .byte.b	1,24
  15175  5dba
  15176  5dba		       02		      .byte.b	2
  15177  5dbb
  15178  5dbb		       08 19		      .byte.b	8,25
  15179  5dbd
  15180  5dbd		       07 18		      .byte.b	7,24
  15181  5dbf
  15182  5dbf		       03		      .byte.b	3
  15183  5dc0
  15184  5dc0		       02 19		      .byte.b	2,25
  15185  5dc2
  15186  5dc2		       01 18		      .byte.b	1,24
  15187  5dc4
  15188  5dc4		       02		      .byte.b	2
  15189  5dc5
  15190  5dc5		       08 19		      .byte.b	8,25
  15191  5dc7
  15192  5dc7		       07 18		      .byte.b	7,24
  15193  5dc9
  15194  5dc9		       03		      .byte.b	3
  15195  5dca
  15196  5dca		       02 19		      .byte.b	2,25
  15197  5dcc
  15198  5dcc		       01 18		      .byte.b	1,24
  15199  5dce
  15200  5dce		       02		      .byte.b	2
  15201  5dcf
  15202  5dcf		       08 19		      .byte.b	8,25
  15203  5dd1
  15204  5dd1		       07 18		      .byte.b	7,24
  15205  5dd3
  15206  5dd3		       03		      .byte.b	3
  15207  5dd4
  15208  5dd4		       02 19		      .byte.b	2,25
  15209  5dd6
  15210  5dd6		       01 18		      .byte.b	1,24
  15211  5dd8
  15212  5dd8		       02		      .byte.b	2
  15213  5dd9
  15214  5dd9		       08 19		      .byte.b	8,25
  15215  5ddb
  15216  5ddb		       07 18		      .byte.b	7,24
  15217  5ddd
  15218  5ddd		       03		      .byte.b	3
  15219  5dde
  15220  5dde		       02 19		      .byte.b	2,25
  15221  5de0
  15222  5de0		       01 18		      .byte.b	1,24
  15223  5de2
  15224  5de2		       02		      .byte.b	2
  15225  5de3
  15226  5de3		       08 19		      .byte.b	8,25
  15227  5de5
  15228  5de5		       07 18		      .byte.b	7,24
  15229  5de7
  15230  5de7		       03		      .byte.b	3
  15231  5de8
  15232  5de8		       02 19		      .byte.b	2,25
  15233  5dea
  15234  5dea		       01 18		      .byte.b	1,24
  15235  5dec
  15236  5dec		       02		      .byte.b	2
  15237  5ded
  15238  5ded		       08 19		      .byte.b	8,25
  15239  5def
  15240  5def		       07 18		      .byte.b	7,24
  15241  5df1
  15242  5df1		       03		      .byte.b	3
  15243  5df2
  15244  5df2		       02 19		      .byte.b	2,25
  15245  5df4
  15246  5df4		       01 18		      .byte.b	1,24
  15247  5df6
  15248  5df6		       02		      .byte.b	2
  15249  5df7
  15250  5df7		       08 19		      .byte.b	8,25
  15251  5df9
  15252  5df9		       07 18		      .byte.b	7,24
  15253  5dfb
  15254  5dfb		       03		      .byte.b	3
  15255  5dfc
  15256  5dfc		       02 19		      .byte.b	2,25
  15257  5dfe
  15258  5dfe		       01 18		      .byte.b	1,24
  15259  5e00
  15260  5e00		       02		      .byte.b	2
  15261  5e01
  15262  5e01		       08 19		      .byte.b	8,25
  15263  5e03
  15264  5e03		       07 18		      .byte.b	7,24
  15265  5e05
  15266  5e05		       03		      .byte.b	3
  15267  5e06
  15268  5e06		       02 19		      .byte.b	2,25
  15269  5e08
  15270  5e08		       01 18		      .byte.b	1,24
  15271  5e0a
  15272  5e0a		       02		      .byte.b	2
  15273  5e0b
  15274  5e0b		       08 19		      .byte.b	8,25
  15275  5e0d
  15276  5e0d		       07 18		      .byte.b	7,24
  15277  5e0f
  15278  5e0f		       03		      .byte.b	3
  15279  5e10
  15280  5e10		       02 19		      .byte.b	2,25
  15281  5e12
  15282  5e12		       01 18		      .byte.b	1,24
  15283  5e14
  15284  5e14		       02		      .byte.b	2
  15285  5e15
  15286  5e15		       08 19		      .byte.b	8,25
  15287  5e17
  15288  5e17		       07 18		      .byte.b	7,24
  15289  5e19
  15290  5e19		       03		      .byte.b	3
  15291  5e1a
  15292  5e1a		       02 19		      .byte.b	2,25
  15293  5e1c
  15294  5e1c		       01 18		      .byte.b	1,24
  15295  5e1e
  15296  5e1e		       02		      .byte.b	2
  15297  5e1f
  15298  5e1f		       08 19		      .byte.b	8,25
  15299  5e21
  15300  5e21		       07 18		      .byte.b	7,24
  15301  5e23
  15302  5e23		       03		      .byte.b	3
  15303  5e24
  15304  5e24		       02 19		      .byte.b	2,25
  15305  5e26
  15306  5e26		       01 18		      .byte.b	1,24
  15307  5e28
  15308  5e28		       02		      .byte.b	2
  15309  5e29
  15310  5e29		       08 19		      .byte.b	8,25
  15311  5e2b
  15312  5e2b		       07 18		      .byte.b	7,24
  15313  5e2d
  15314  5e2d		       03		      .byte.b	3
  15315  5e2e
  15316  5e2e		       02 19		      .byte.b	2,25
  15317  5e30
  15318  5e30		       01 18		      .byte.b	1,24
  15319  5e32
  15320  5e32		       02		      .byte.b	2
  15321  5e33
  15322  5e33		       08 19		      .byte.b	8,25
  15323  5e35
  15324  5e35		       07 18		      .byte.b	7,24
  15325  5e37
  15326  5e37		       03		      .byte.b	3
  15327  5e38
  15328  5e38		       02 19		      .byte.b	2,25
  15329  5e3a
  15330  5e3a		       01 18		      .byte.b	1,24
  15331  5e3c
  15332  5e3c		       02		      .byte.b	2
  15333  5e3d
  15334  5e3d		       08 19		      .byte.b	8,25
  15335  5e3f
  15336  5e3f		       07 18		      .byte.b	7,24
  15337  5e41
  15338  5e41		       03		      .byte.b	3
  15339  5e42
  15340  5e42		       02 19		      .byte.b	2,25
  15341  5e44
  15342  5e44		       01 18		      .byte.b	1,24
  15343  5e46
  15344  5e46		       02		      .byte.b	2
  15345  5e47
  15346  5e47		       08 19		      .byte.b	8,25
  15347  5e49
  15348  5e49		       07 18		      .byte.b	7,24
  15349  5e4b
  15350  5e4b		       03		      .byte.b	3
  15351  5e4c
  15352  5e4c		       02 19		      .byte.b	2,25
  15353  5e4e
  15354  5e4e		       01 18		      .byte.b	1,24
  15355  5e50
  15356  5e50		       02		      .byte.b	2
  15357  5e51
  15358  5e51		       08 13		      .byte.b	8,19
  15359  5e53
  15360  5e53		       07 13		      .byte.b	7,19
  15361  5e55
  15362  5e55		       03		      .byte.b	3
  15363  5e56
  15364  5e56		       02 13		      .byte.b	2,19
  15365  5e58
  15366  5e58		       01 13		      .byte.b	1,19
  15367  5e5a
  15368  5e5a		       02		      .byte.b	2
  15369  5e5b
  15370  5e5b		       08 13		      .byte.b	8,19
  15371  5e5d
  15372  5e5d		       07 13		      .byte.b	7,19
  15373  5e5f
  15374  5e5f		       03		      .byte.b	3
  15375  5e60
  15376  5e60		       02 13		      .byte.b	2,19
  15377  5e62
  15378  5e62		       01 13		      .byte.b	1,19
  15379  5e64
  15380  5e64		       02		      .byte.b	2
  15381  5e65
  15382  5e65		       08 13		      .byte.b	8,19
  15383  5e67
  15384  5e67		       07 13		      .byte.b	7,19
  15385  5e69
  15386  5e69		       03		      .byte.b	3
  15387  5e6a
  15388  5e6a		       02 13		      .byte.b	2,19
  15389  5e6c
  15390  5e6c		       01 13		      .byte.b	1,19
  15391  5e6e
  15392  5e6e		       02		      .byte.b	2
  15393  5e6f
  15394  5e6f		       08 13		      .byte.b	8,19
  15395  5e71
  15396  5e71		       07 13		      .byte.b	7,19
  15397  5e73
  15398  5e73		       03		      .byte.b	3
  15399  5e74
  15400  5e74		       02 13		      .byte.b	2,19
  15401  5e76
  15402  5e76		       01 13		      .byte.b	1,19
  15403  5e78
  15404  5e78		       02		      .byte.b	2
  15405  5e79
  15406  5e79		       08 13		      .byte.b	8,19
  15407  5e7b
  15408  5e7b		       07 13		      .byte.b	7,19
  15409  5e7d
  15410  5e7d		       03		      .byte.b	3
  15411  5e7e
  15412  5e7e		       02 13		      .byte.b	2,19
  15413  5e80
  15414  5e80		       01 13		      .byte.b	1,19
  15415  5e82
  15416  5e82		       02		      .byte.b	2
  15417  5e83
  15418  5e83		       08 13		      .byte.b	8,19
  15419  5e85
  15420  5e85		       07 13		      .byte.b	7,19
  15421  5e87
  15422  5e87		       03		      .byte.b	3
  15423  5e88
  15424  5e88		       02 13		      .byte.b	2,19
  15425  5e8a
  15426  5e8a		       01 13		      .byte.b	1,19
  15427  5e8c
  15428  5e8c		       02		      .byte.b	2
  15429  5e8d
  15430  5e8d		       08 13		      .byte.b	8,19
  15431  5e8f
  15432  5e8f		       07 13		      .byte.b	7,19
  15433  5e91
  15434  5e91		       03		      .byte.b	3
  15435  5e92
  15436  5e92		       02 13		      .byte.b	2,19
  15437  5e94
  15438  5e94		       01 13		      .byte.b	1,19
  15439  5e96
  15440  5e96		       02		      .byte.b	2
  15441  5e97
  15442  5e97		       08 13		      .byte.b	8,19
  15443  5e99
  15444  5e99		       07 13		      .byte.b	7,19
  15445  5e9b
  15446  5e9b		       03		      .byte.b	3
  15447  5e9c
  15448  5e9c		       02 13		      .byte.b	2,19
  15449  5e9e
  15450  5e9e		       01 13		      .byte.b	1,19
  15451  5ea0
  15452  5ea0		       02		      .byte.b	2
  15453  5ea1
  15454  5ea1		       08 13		      .byte.b	8,19
  15455  5ea3
  15456  5ea3		       07 13		      .byte.b	7,19
  15457  5ea5
  15458  5ea5		       03		      .byte.b	3
  15459  5ea6
  15460  5ea6		       02 13		      .byte.b	2,19
  15461  5ea8
  15462  5ea8		       01 13		      .byte.b	1,19
  15463  5eaa
  15464  5eaa		       02		      .byte.b	2
  15465  5eab
  15466  5eab		       08 13		      .byte.b	8,19
  15467  5ead
  15468  5ead		       07 13		      .byte.b	7,19
  15469  5eaf
  15470  5eaf		       03		      .byte.b	3
  15471  5eb0
  15472  5eb0		       02 13		      .byte.b	2,19
  15473  5eb2
  15474  5eb2		       01 13		      .byte.b	1,19
  15475  5eb4
  15476  5eb4		       02		      .byte.b	2
  15477  5eb5
  15478  5eb5		       08 13		      .byte.b	8,19
  15479  5eb7
  15480  5eb7		       07 13		      .byte.b	7,19
  15481  5eb9
  15482  5eb9		       03		      .byte.b	3
  15483  5eba
  15484  5eba		       02 13		      .byte.b	2,19
  15485  5ebc
  15486  5ebc		       01 13		      .byte.b	1,19
  15487  5ebe
  15488  5ebe		       02		      .byte.b	2
  15489  5ebf
  15490  5ebf		       08 13		      .byte.b	8,19
  15491  5ec1
  15492  5ec1		       07 13		      .byte.b	7,19
  15493  5ec3
  15494  5ec3		       03		      .byte.b	3
  15495  5ec4
  15496  5ec4		       02 13		      .byte.b	2,19
  15497  5ec6
  15498  5ec6		       01 13		      .byte.b	1,19
  15499  5ec8
  15500  5ec8		       02		      .byte.b	2
  15501  5ec9
  15502  5ec9		       08 12		      .byte.b	8,18
  15503  5ecb
  15504  5ecb		       07 13		      .byte.b	7,19
  15505  5ecd
  15506  5ecd		       03		      .byte.b	3
  15507  5ece
  15508  5ece		       02 12		      .byte.b	2,18
  15509  5ed0
  15510  5ed0		       01 13		      .byte.b	1,19
  15511  5ed2
  15512  5ed2		       02		      .byte.b	2
  15513  5ed3
  15514  5ed3		       08 13		      .byte.b	8,19
  15515  5ed5
  15516  5ed5		       07 13		      .byte.b	7,19
  15517  5ed7
  15518  5ed7		       03		      .byte.b	3
  15519  5ed8
  15520  5ed8		       02 13		      .byte.b	2,19
  15521  5eda
  15522  5eda		       01 13		      .byte.b	1,19
  15523  5edc
  15524  5edc		       02		      .byte.b	2
  15525  5edd
  15526  5edd		       08 10		      .byte.b	8,16
  15527  5edf
  15528  5edf		       07 13		      .byte.b	7,19
  15529  5ee1
  15530  5ee1		       03		      .byte.b	3
  15531  5ee2
  15532  5ee2		       02 10		      .byte.b	2,16
  15533  5ee4
  15534  5ee4		       01 13		      .byte.b	1,19
  15535  5ee6
  15536  5ee6		       02		      .byte.b	2
  15537  5ee7
  15538  5ee7		       08 12		      .byte.b	8,18
  15539  5ee9
  15540  5ee9		       07 12		      .byte.b	7,18
  15541  5eeb
  15542  5eeb		       03		      .byte.b	3
  15543  5eec
  15544  5eec		       02 12		      .byte.b	2,18
  15545  5eee
  15546  5eee		       01 12		      .byte.b	1,18
  15547  5ef0
  15548  5ef0		       02		      .byte.b	2
  15549  5ef1
  15550  5ef1		       08 12		      .byte.b	8,18
  15551  5ef3
  15552  5ef3		       07 12		      .byte.b	7,18
  15553  5ef5
  15554  5ef5		       03		      .byte.b	3
  15555  5ef6
  15556  5ef6		       02 12		      .byte.b	2,18
  15557  5ef8
  15558  5ef8		       01 12		      .byte.b	1,18
  15559  5efa
  15560  5efa		       02		      .byte.b	2
  15561  5efb
  15562  5efb		       08 12		      .byte.b	8,18
  15563  5efd
  15564  5efd		       07 12		      .byte.b	7,18
  15565  5eff
  15566  5eff		       03		      .byte.b	3
  15567  5f00
  15568  5f00		       02 12		      .byte.b	2,18
  15569  5f02
  15570  5f02		       01 12		      .byte.b	1,18
  15571  5f04
  15572  5f04		       02		      .byte.b	2
  15573  5f05
  15574  5f05		       08 12		      .byte.b	8,18
  15575  5f07
  15576  5f07		       07 12		      .byte.b	7,18
  15577  5f09
  15578  5f09		       03		      .byte.b	3
  15579  5f0a
  15580  5f0a		       02 12		      .byte.b	2,18
  15581  5f0c
  15582  5f0c		       01 12		      .byte.b	1,18
  15583  5f0e
  15584  5f0e		       02		      .byte.b	2
  15585  5f0f
  15586  5f0f		       08 12		      .byte.b	8,18
  15587  5f11
  15588  5f11		       07 12		      .byte.b	7,18
  15589  5f13
  15590  5f13		       03		      .byte.b	3
  15591  5f14
  15592  5f14		       02 12		      .byte.b	2,18
  15593  5f16
  15594  5f16		       01 12		      .byte.b	1,18
  15595  5f18
  15596  5f18		       02		      .byte.b	2
  15597  5f19
  15598  5f19		       08 12		      .byte.b	8,18
  15599  5f1b
  15600  5f1b		       07 12		      .byte.b	7,18
  15601  5f1d
  15602  5f1d		       03		      .byte.b	3
  15603  5f1e
  15604  5f1e		       02 12		      .byte.b	2,18
  15605  5f20
  15606  5f20		       01 12		      .byte.b	1,18
  15607  5f22
  15608  5f22		       02		      .byte.b	2
  15609  5f23
  15610  5f23		       08 12		      .byte.b	8,18
  15611  5f25
  15612  5f25		       07 12		      .byte.b	7,18
  15613  5f27
  15614  5f27		       03		      .byte.b	3
  15615  5f28
  15616  5f28		       02 12		      .byte.b	2,18
  15617  5f2a
  15618  5f2a		       01 12		      .byte.b	1,18
  15619  5f2c
  15620  5f2c		       02		      .byte.b	2
  15621  5f2d
  15622  5f2d		       08 12		      .byte.b	8,18
  15623  5f2f
  15624  5f2f		       07 12		      .byte.b	7,18
  15625  5f31
  15626  5f31		       03		      .byte.b	3
  15627  5f32
  15628  5f32		       02 12		      .byte.b	2,18
  15629  5f34
  15630  5f34		       01 12		      .byte.b	1,18
  15631  5f36
  15632  5f36		       02		      .byte.b	2
  15633  5f37
  15634  5f37		       08 12		      .byte.b	8,18
  15635  5f39
  15636  5f39		       07 12		      .byte.b	7,18
  15637  5f3b
  15638  5f3b		       03		      .byte.b	3
  15639  5f3c
  15640  5f3c		       02 12		      .byte.b	2,18
  15641  5f3e
  15642  5f3e		       01 12		      .byte.b	1,18
  15643  5f40
  15644  5f40		       02		      .byte.b	2
  15645  5f41
  15646  5f41		       08 12		      .byte.b	8,18
  15647  5f43
  15648  5f43		       07 12		      .byte.b	7,18
  15649  5f45
  15650  5f45		       03		      .byte.b	3
  15651  5f46
  15652  5f46		       02 12		      .byte.b	2,18
  15653  5f48
  15654  5f48		       01 12		      .byte.b	1,18
  15655  5f4a
  15656  5f4a		       02		      .byte.b	2
  15657  5f4b
  15658  5f4b		       08 12		      .byte.b	8,18
  15659  5f4d
  15660  5f4d		       07 12		      .byte.b	7,18
  15661  5f4f
  15662  5f4f		       03		      .byte.b	3
  15663  5f50
  15664  5f50		       02 12		      .byte.b	2,18
  15665  5f52
  15666  5f52		       01 12		      .byte.b	1,18
  15667  5f54
  15668  5f54		       02		      .byte.b	2
  15669  5f55
  15670  5f55		       08 12		      .byte.b	8,18
  15671  5f57
  15672  5f57		       07 12		      .byte.b	7,18
  15673  5f59
  15674  5f59		       03		      .byte.b	3
  15675  5f5a
  15676  5f5a		       02 12		      .byte.b	2,18
  15677  5f5c
  15678  5f5c		       01 12		      .byte.b	1,18
  15679  5f5e
  15680  5f5e		       02		      .byte.b	2
  15681  5f5f
  15682  5f5f		       08 12		      .byte.b	8,18
  15683  5f61
  15684  5f61		       07 12		      .byte.b	7,18
  15685  5f63
  15686  5f63		       03		      .byte.b	3
  15687  5f64
  15688  5f64		       02 12		      .byte.b	2,18
  15689  5f66
  15690  5f66		       01 12		      .byte.b	1,18
  15691  5f68
  15692  5f68		       02		      .byte.b	2
  15693  5f69
  15694  5f69		       08 13		      .byte.b	8,19
  15695  5f6b
  15696  5f6b		       07 12		      .byte.b	7,18
  15697  5f6d
  15698  5f6d		       03		      .byte.b	3
  15699  5f6e
  15700  5f6e		       02 13		      .byte.b	2,19
  15701  5f70
  15702  5f70		       01 12		      .byte.b	1,18
  15703  5f72
  15704  5f72		       02		      .byte.b	2
  15705  5f73
  15706  5f73		       08 12		      .byte.b	8,18
  15707  5f75
  15708  5f75		       07 12		      .byte.b	7,18
  15709  5f77
  15710  5f77		       03		      .byte.b	3
  15711  5f78
  15712  5f78		       02 12		      .byte.b	2,18
  15713  5f7a
  15714  5f7a		       01 12		      .byte.b	1,18
  15715  5f7c
  15716  5f7c		       02		      .byte.b	2
  15717  5f7d
  15718  5f7d		       08 10		      .byte.b	8,16
  15719  5f7f
  15720  5f7f		       07 12		      .byte.b	7,18
  15721  5f81
  15722  5f81		       03		      .byte.b	3
  15723  5f82
  15724  5f82		       02 10		      .byte.b	2,16
  15725  5f84
  15726  5f84		       01 12		      .byte.b	1,18
  15727  5f86
  15728  5f86		       02		      .byte.b	2
  15729  5f87
  15730  5f87		       ff		      .byte.b	255
  15731  5f88
  15732  5f88				   .skipL0492
  15733  5f88				   .L0493		;  goto GameLoop bank3
  15734  5f88
  15735  5f88		       85 d1		      sta	temp7
  15736  5f8a		       a9 4f		      lda	#>(.GameLoop-1)
  15737  5f8c		       48		      pha
  15738  5f8d		       a9 ff		      lda	#<(.GameLoop-1)
  15739  5f8f		       48		      pha
  15740  5f90		       a5 d1		      lda	temp7
  15741  5f92		       48		      pha
  15742  5f93		       8a		      txa
  15743  5f94		       48		      pha
  15744  5f95		       a2 03		      ldx	#3
  15745  5f97		       4c eb ff 	      jmp	BS_jsr
  15746  5f9a				   .
  15747  5f9a							; 
  15748  5f9a
  15749  5f9a				   .
  15750  5f9a							; 
  15751  5f9a
  15752  5f9a				   .
  15753  5f9a							; 
  15754  5f9a
  15755  5f9a				   .L0494		;  bank 6
  15756  5f9a
  15757  5f9a					      if	ECHO5
      58 bytes of ROM space left in bank 5
  15758  5f9a					      echo	"    ",[(start_bank5 - *)]d , "bytes of ROM space left in bank 5")
  15759  5f9a					      endif
  15760  5f9a		       00 01	   ECHO5      =	1
  15761  5fd4					      ORG	$5FF4-bscode_length
  15762  5fd4					      RORG	$9FF4-bscode_length
  15763  5fd4		       a2 ff	   start_bank5 ldx	#$ff
  15764  5fd6				  -	      ifconst	FASTFETCH	; using DPC+
  15765  5fd6				  -	      stx	FASTFETCH
  15766  5fd6					      endif
  15767  5fd6		       9a		      txs
  15768  5fd7				  -	      if	bankswitch == 64
  15769  5fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  15770  5fd7					      else
  15771  5fd7		       a9 f3		      lda	#>(start-1)
  15772  5fd9					      endif
  15773  5fd9		       48		      pha
  15774  5fda		       a9 6d		      lda	#<(start-1)
  15775  5fdc		       48		      pha
  15776  5fdd		       48		      pha
  15777  5fde		       8a		      txa
  15778  5fdf		       48		      pha
  15779  5fe0		       ba		      tsx
  15780  5fe1					      if	bankswitch != 64
  15781  5fe1		       b5 04		      lda	4,x	; get high byte of return address
  15782  5fe3		       2a		      rol
  15783  5fe4		       2a		      rol
  15784  5fe5		       2a		      rol
  15785  5fe6		       2a		      rol
  15786  5fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  15787  5fe9		       aa		      tax
  15788  5fea		       e8		      inx
  15789  5feb				  -	      else
  15790  5feb				  -	      lda	4,x	; get high byte of return address
  15791  5feb				  -	      tay
  15792  5feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  15793  5feb				  -	      sta	4,x
  15794  5feb				  -	      tya
  15795  5feb				  -	      lsr
  15796  5feb				  -	      lsr
  15797  5feb				  -	      lsr
  15798  5feb				  -	      lsr
  15799  5feb				  -	      tax
  15800  5feb				  -	      inx
  15801  5feb					      endif
  15802  5feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  15803  5fee		       68		      pla
  15804  5fef		       aa		      tax
  15805  5ff0		       68		      pla
  15806  5ff1		       60		      rts
  15807  5ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  15808  5ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  15809  5ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  15810  5ff2					      endif
  15811  5ffc					      ORG	$5FFC
  15812  5ffc					      RORG	$9FFC
  15813  5ffc		       d4 9f		      .word.w	start_bank5
  15814  5ffe		       d4 9f		      .word.w	start_bank5
  15815  6000					      ORG	$6000
  15816  6000					      RORG	$B000
  15817  6000				   .BullShit
  15818  6000							; BullShit
  15819  6000
  15820  6000				   .L0495		;  asm
  15821  6000
  15822  6000		       a9 58		      LDA	#88
  15823  6002
  15824  6002		       c5 e2		      CMP	Shoot1_Y
  15825  6004
  15826  6004		       90 3a		      BCC	.MovePowerUp
  15827  6006
  15828  6006		       c5 e4		      CMP	Shoot2_Y
  15829  6008
  15830  6008		       90 36		      BCC	.MovePowerUp
  15831  600a
  15832  600a		       a5 e3		      LDA	Shoot2_X
  15833  600c
  15834  600c		       c5 e1		      CMP	Shoot1_X
  15835  600e
  15836  600e		       b0 08		      BCS	.OOO15
  15837  6010
  15838  6010		       a5 e1		      LDA	Shoot1_X
  15839  6012
  15840  6012		       38		      SEC
  15841  6013
  15842  6013		       e5 e3		      SBC	Shoot2_X
  15843  6015
  15844  6015		       4c 1b b0 	      jmp	.skipelse20_15
  15845  6018
  15846  6018				   .OOO15
  15847  6018
  15848  6018		       38		      SEC
  15849  6019
  15850  6019		       e5 e1		      SBC	Shoot1_X
  15851  601b
  15852  601b				   .skipelse20_15
  15853  601b
  15854  601b		       85 ce		      STA	temp4
  15855  601d
  15856  601d
  15857  601d
  15858  601d		       a5 e4		      LDA	Shoot2_Y
  15859  601f
  15860  601f		       c5 e2		      CMP	Shoot1_Y
  15861  6021
  15862  6021		       b0 08		      BCS	.skipL0547_15
  15863  6023
  15864  6023		       a5 e2		      LDA	Shoot1_Y
  15865  6025
  15866  6025		       38		      SEC
  15867  6026
  15868  6026		       e5 e4		      SBC	Shoot2_Y
  15869  6028
  15870  6028		       4c 2e b0 	      jmp	.skipelse21_15
  15871  602b
  15872  602b				   .skipL0547_15
  15873  602b
  15874  602b		       38		      SEC
  15875  602c
  15876  602c		       e5 e2		      SBC	Shoot1_Y
  15877  602e
  15878  602e				   .skipelse21_15
  15879  602e
  15880  602e		       85 cf		      STA	temp5
  15881  6030
  15882  6030		       c9 04		      CMP	#4
  15883  6032
  15884  6032		       b0 0c		      BCS	.skip242then_1
  15885  6034
  15886  6034		       a5 ce		      LDA	temp4
  15887  6036
  15888  6036		       c9 06		      CMP	#6
  15889  6038
  15890  6038		       b0 06		      BCS	.skip242then_1
  15891  603a
  15892  603a		       a9 78		      LDA	#120
  15893  603c
  15894  603c		       85 e2		      STA	Shoot1_Y
  15895  603e
  15896  603e		       85 e4		      STA	Shoot2_Y
  15897  6040
  15898  6040				   .skip242then_1
  15899  6040
  15900  6040				   .MovePowerUp
  15901  6040							; MovePowerUp
  15902  6040
  15903  6040				   .L0496		;  if player5y > 119  ||  PowerUp_Counter > 0 then goto NYET
  15904  6040
  15905  6040		       a9 77		      LDA	#119
  15906  6042		       c5 92		      CMP	player5y
  15907  6044		       b0 03		      BCS	.skipL0496
  15908  6046				   .condpart193
  15909  6046		       4c 4f b0 	      jmp	.condpart194
  15910  6049				   .skipL0496
  15911  6049		       a9 00		      LDA	#0
  15912  604b		       c5 ef		      CMP	PowerUp_Counter
  15913  604d		       b0 03		      BCS	.skip57OR
  15914  604f				   .condpart194
  15915  604f		       4c a5 b0 	      jmp	.NYET
  15916  6052
  15917  6052				   .skip57OR
  15918  6052				   .
  15919  6052							; 
  15920  6052
  15921  6052				   .L0497		;  NUSIZ5 = $00
  15922  6052
  15923  6052		       a9 00		      LDA	#$00
  15924  6054		       85 97		      STA	NUSIZ5
  15925  6056				   .L0498		;  asm
  15926  6056
  15927  6056		       24 ed		      BIT	w
  15928  6058
  15929  6058		       70 05		      BVS	.condpart238_18
  15930  605a
  15931  605a		       e6 89		      INC	player5x
  15932  605c
  15933  605c		       4c 61 b0 	      jmp	.skipelse19_18
  15934  605f
  15935  605f				   .condpart238_18
  15936  605f
  15937  605f		       c6 89		      DEC	player5x
  15938  6061
  15939  6061				   .skipelse19_18
  15940  6061
  15941  6061
  15942  6061
  15943  6061		       24 ed		      BIT	w
  15944  6063
  15945  6063		       70 06		      BVS	.skipL0545_18
  15946  6065
  15947  6065		       a9 8a		      LDA	#138
  15948  6067
  15949  6067		       c5 89		      CMP	player5x
  15950  6069
  15951  6069		       90 0a		      BCC	.condpart242_18
  15952  606b
  15953  606b				   .skipL0545_18
  15954  606b
  15955  606b		       24 ed		      BIT	w
  15956  606d
  15957  606d		       50 0d		      BVC	.skipL0546_18
  15958  606f
  15959  606f		       a5 89		      LDA	player5x
  15960  6071
  15961  6071		       c9 1e		      CMP	#30
  15962  6073
  15963  6073		       b0 07		      BCS	.skipL0546_18
  15964  6075
  15965  6075				   .condpart242_18
  15966  6075
  15967  6075		       a9 78		      LDA	#120
  15968  6077
  15969  6077		       85 92		      STA	player5y
  15970  6079
  15971  6079		       4c a5 b0 	      jmp	.NYET
  15972  607c
  15973  607c				   .skipL0546_18
  15974  607c
  15975  607c
  15976  607c
  15977  607c
  15978  607c
  15979  607c		       24 ed		      BIT	w
  15980  607e
  15981  607e		       10 14		      BPL	.skipL0547_18
  15982  6080
  15983  6080		       a5 92		      LDA	player5y
  15984  6082
  15985  6082		       18		      CLC
  15986  6083
  15987  6083		       69 01		      ADC	#1
  15988  6085
  15989  6085		       85 92		      STA	player5y
  15990  6087
  15991  6087		       c9 57		      CMP	#87
  15992  6089
  15993  6089		       90 1a		      BCC	.skipelse20_18
  15994  608b
  15995  608b		       a5 ed		      LDA	w
  15996  608d
  15997  608d		       29 7f		      AND	#127
  15998  608f
  15999  608f		       85 ed		      STA	w
  16000  6091
  16001  6091		       4c a5 b0 	      jmp	.skipelse20_18
  16002  6094
  16003  6094				   .skipL0547_18
  16004  6094
  16005  6094		       a5 92		      LDA	player5y
  16006  6096
  16007  6096		       38		      SEC
  16008  6097
  16009  6097		       e9 01		      SBC	#1
  16010  6099
  16011  6099		       85 92		      STA	player5y
  16012  609b
  16013  609b		       c9 33		      CMP	#51
  16014  609d
  16015  609d		       b0 06		      BCS	.skipelse20_18
  16016  609f
  16017  609f		       a5 ed		      LDA	w
  16018  60a1
  16019  60a1		       09 80		      ORA	#128
  16020  60a3
  16021  60a3		       85 ed		      STA	w
  16022  60a5
  16023  60a5				   .skipelse20_18
  16024  60a5
  16025  60a5
  16026  60a5
  16027  60a5
  16028  60a5
  16029  60a5				   .
  16030  60a5							; 
  16031  60a5
  16032  60a5				   .
  16033  60a5							; 
  16034  60a5
  16035  60a5				   .NYET
  16036  60a5							; NYET
  16037  60a5
  16038  60a5				   .
  16039  60a5							; 
  16040  60a5
  16041  60a5				   .L0499		;  if HouseHeight = 7 then player3y = 0 :  player4y = 120 :  COLUP3 = $00 :  COLUP4 = $00 :  goto CantFall
  16042  60a5
  16043  60a5		       a5 f0		      LDA	HouseHeight
  16044  60a7		       c9 07		      CMP	#7
  16045  60a9		       d0 11		      BNE	.skipL0499
  16046  60ab				   .condpart195
  16047  60ab		       a9 00		      LDA	#0
  16048  60ad		       85 90		      STA	player3y
  16049  60af		       a9 78		      LDA	#120
  16050  60b1		       85 91		      STA	player4y
  16051  60b3		       a9 00		      LDA	#$00
  16052  60b5		       85 9a		      STA	COLUP3
  16053  60b7		       85 9b		      STA	COLUP4
  16054  60b9		       4c 14 b4 	      jmp	.CantFall
  16055  60bc
  16056  60bc				   .skipL0499
  16057  60bc				   .L0500		;  asm
  16058  60bc
  16059  60bc		       a0 00		      LDY	#0
  16060  60be
  16061  60be				   .L0501		;  if w{3} then goto FallPerson_3
  16062  60be
  16063  60be		       a5 ed		      LDA	w
  16064  60c0		       29 08		      AND	#8
  16065  60c2		       f0 03		      BEQ	.skipL0501
  16066  60c4				   .condpart196
  16067  60c4		       4c f8 b1 	      jmp	.FallPerson_3
  16068  60c7
  16069  60c7				   .skipL0501
  16070  60c7				   .L0502		;  asm
  16071  60c7
  16072  60c7		       a5 d6		      lda	rand
  16073  60c9
  16074  60c9		       4a		      lsr
  16075  60ca
  16076  60ca		       90 02		      bcc	*+4
  16077  60cc
  16078  60cc		       49 b4		      eor	#$B4
  16079  60ce
  16080  60ce		       85 d6		      sta	rand
  16081  60d0
  16082  60d0		       29 03		      AND	#3
  16083  60d2
  16084  60d2		       85 ce		      STA	temp4
  16085  60d4
  16086  60d4		       a5 d6		      lda	rand
  16087  60d6
  16088  60d6		       4a		      lsr
  16089  60d7
  16090  60d7		       90 02		      bcc	*+4
  16091  60d9
  16092  60d9		       49 b4		      eor	#$B4
  16093  60db
  16094  60db		       85 d6		      sta	rand
  16095  60dd
  16096  60dd		       85 cb		      sta	temp1
  16097  60df
  16098  60df				   .L0503		;  asm
  16099  60df
  16100  60df		       c9 fc		      CMP	#252
  16101  60e1
  16102  60e1		       90 0a		      BCC	.skipL0623_1
  16103  60e3
  16104  60e3		       a5 ed		      LDA	w
  16105  60e5
  16106  60e5		       29 f7		      AND	#247
  16107  60e7
  16108  60e7		       85 ed		      STA	w
  16109  60e9
  16110  60e9		       a9 78		      LDA	#120
  16111  60eb
  16112  60eb		       85 90		      STA	player3y
  16113  60ed
  16114  60ed				   .skipL0623_1
  16115  60ed
  16116  60ed		       a5 90		      LDA	player3y
  16117  60ef
  16118  60ef		       c9 78		      CMP	#120
  16119  60f1
  16120  60f1		       b0 03		      BCS	.skipL0624_1
  16121  60f3
  16122  60f3		       4c 97 b1 	      jmp	.JustDrawHim3
  16123  60f6
  16124  60f6				   .skipL0624_1
  16125  60f6
  16126  60f6
  16127  60f6
  16128  60f6				   .L0504		;  temp5 = temp4 +  ( rand & 3 ) 
  16129  60f6
  16130  60f6							; complex statement detected
  16131  60f6		       a5 ce		      LDA	temp4
  16132  60f8		       48		      PHA
  16133  60f9		       a5 d6		      lda	rand
  16134  60fb		       4a		      lsr
  16135  60fc				  -	      ifconst	rand16
  16136  60fc				  -	      rol	rand16
  16137  60fc					      endif
  16138  60fc		       90 02		      bcc	*+4
  16139  60fe		       49 b4		      eor	#$B4
  16140  6100		       85 d6		      sta	rand
  16141  6102				  -	      ifconst	rand16
  16142  6102				  -	      eor	rand16
  16143  6102					      endif
  16144  6102		       29 03		      AND	#3
  16145  6104		       ba		      TSX
  16146  6105		       e8		      INX
  16147  6106		       9a		      TXS
  16148  6107		       18		      CLC
  16149  6108		       75 00		      ADC	$00,x
  16150  610a		       85 cf		      STA	temp5
  16151  610c				   .L0505		;  temp6 = 6 - HouseHeight
  16152  610c
  16153  610c		       a9 06		      LDA	#6
  16154  610e		       38		      SEC
  16155  610f		       e5 f0		      SBC	HouseHeight
  16156  6111		       85 d0		      STA	temp6
  16157  6113				   .L0506		;  asm
  16158  6113
  16159  6113		       a5 d0		      LDA	temp6
  16160  6115
  16161  6115		       c5 cf		      CMP	temp5
  16162  6117
  16163  6117		       b0 02		      BCS	.skipL0450_1
  16164  6119
  16165  6119		       85 cf		      STA	temp5
  16166  611b
  16167  611b				   .skipL0450_1
  16168  611b
  16169  611b		       c5 d0		      CMP	temp6
  16170  611d
  16171  611d		       d0 0a		      BNE	.skipL0451_1
  16172  611f
  16173  611f		       a5 db		      LDA	e
  16174  6121
  16175  6121		       29 02		      AND	#2
  16176  6123
  16177  6123		       f0 04		      BEQ	.skipL0451_1
  16178  6125
  16179  6125		       a9 00		      LDA	#0
  16180  6127
  16181  6127		       85 cf		      STA	temp5
  16182  6129
  16183  6129				   .skipL0451_1
  16184  6129
  16185  6129
  16186  6129
  16187  6129		       a5 cf		      LDA	temp5
  16188  612b
  16189  612b		       0a		      asl
  16190  612c
  16191  612c		       0a		      asl
  16192  612d
  16193  612d		       0a		      asl
  16194  612e
  16195  612e		       18		      CLC
  16196  612f
  16197  612f		       69 0f		      ADC	#15
  16198  6131
  16199  6131		       85 90		      STA	player3y
  16200  6133
  16201  6133		       c9 17		      CMP	#23
  16202  6135
  16203  6135		       b0 0a		      BCS	.skip231then_1
  16204  6137
  16205  6137		       a5 f0		      LDA	HouseHeight
  16206  6139
  16207  6139		       c9 00		      CMP	#0
  16208  613b
  16209  613b		       d0 04		      BNE	.skip231then_1
  16210  613d
  16211  613d		       a9 17		      LDA	#23
  16212  613f
  16213  613f		       85 90		      STA	player3y
  16214  6141
  16215  6141				   .skip231then_1
  16216  6141
  16217  6141
  16218  6141
  16219  6141		       a5 d6		      lda	rand
  16220  6143
  16221  6143		       4a		      lsr
  16222  6144
  16223  6144		       90 02		      bcc	*+4
  16224  6146
  16225  6146		       49 b4		      eor	#$B4
  16226  6148
  16227  6148		       85 d6		      sta	rand
  16228  614a
  16229  614a		       29 07		      AND	#7
  16230  614c
  16231  614c		       c9 00		      CMP	#0
  16232  614e
  16233  614e		       d0 05		      BNE	.skipL0456_1
  16234  6150
  16235  6150		       a9 21		      LDA	#33
  16236  6152
  16237  6152		       4c 91 b1 	      jmp	.Done3x
  16238  6155
  16239  6155				   .skipL0456_1
  16240  6155
  16241  6155		       c9 01		      CMP	#1
  16242  6157
  16243  6157		       d0 05		      BNE	.skipL0457_1
  16244  6159
  16245  6159		       a9 29		      LDA	#41
  16246  615b
  16247  615b		       4c 91 b1 	      jmp	.Done3x
  16248  615e
  16249  615e				   .skipL0457_1
  16250  615e
  16251  615e		       c9 02		      CMP	#2
  16252  6160
  16253  6160		       d0 05		      BNE	.skipL0458_1
  16254  6162
  16255  6162		       a9 3d		      LDA	#61
  16256  6164
  16257  6164		       4c 91 b1 	      jmp	.Done3x
  16258  6167
  16259  6167				   .skipL0458_1
  16260  6167
  16261  6167		       c9 03		      CMP	#3
  16262  6169
  16263  6169		       d0 05		      BNE	.skipL0459_1
  16264  616b
  16265  616b		       a9 45		      LDA	#69
  16266  616d
  16267  616d		       4c 91 b1 	      jmp	.Done3x
  16268  6170
  16269  6170				   .skipL0459_1
  16270  6170
  16271  6170		       c9 04		      CMP	#4
  16272  6172
  16273  6172		       d0 05		      BNE	.skipL0460_1
  16274  6174
  16275  6174		       a9 61		      LDA	#97
  16276  6176
  16277  6176		       4c 91 b1 	      jmp	.Done3x
  16278  6179
  16279  6179				   .skipL0460_1
  16280  6179
  16281  6179		       c9 05		      CMP	#5
  16282  617b
  16283  617b		       d0 05		      BNE	.skipL0461_1
  16284  617d
  16285  617d		       a9 69		      LDA	#105
  16286  617f
  16287  617f		       4c 91 b1 	      jmp	.Done3x
  16288  6182
  16289  6182				   .skipL0461_1
  16290  6182
  16291  6182		       c9 06		      CMP	#6
  16292  6184
  16293  6184		       d0 05		      BNE	.skipL0462_1
  16294  6186
  16295  6186		       a9 7d		      LDA	#125
  16296  6188
  16297  6188		       4c 91 b1 	      jmp	.Done3x
  16298  618b
  16299  618b				   .skipL0462_1
  16300  618b
  16301  618b		       c9 07		      CMP	#7
  16302  618d
  16303  618d		       d0 04		      BNE	.skipL0463_1
  16304  618f
  16305  618f
  16306  618f
  16307  618f		       a9 85		      LDA	#133
  16308  6191
  16309  6191				   .Done3x
  16310  6191
  16311  6191		       85 87		      STA	player3x
  16312  6193
  16313  6193				   .skipL0463_1
  16314  6193
  16315  6193				   .
  16316  6193							; 
  16317  6193
  16318  6193				   .
  16319  6193							; 
  16320  6193
  16321  6193				   .L0507		;  COLUP3 = $1e
  16322  6193
  16323  6193		       a9 1e		      LDA	#$1e
  16324  6195		       85 9a		      STA	COLUP3
  16325  6197				   .
  16326  6197							; 
  16327  6197
  16328  6197				   .
  16329  6197							; 
  16330  6197
  16331  6197				   .JustDrawHim3
  16332  6197							; JustDrawHim3
  16333  6197
  16334  6197				   .L0508		;  player3:
  16335  6197
  16336  6197		       a2 d2		      LDX	#<playerL0508_3
  16337  6199		       86 a8		      STX	player3pointerlo
  16338  619b		       a9 f5		      LDA	#>playerL0508_3
  16339  619d		       85 ad		      STA	player3pointerhi
  16340  619f		       a9 08		      LDA	#8
  16341  61a1		       85 b3		      STA	player3height
  16342  61a3				   .
  16343  61a3							; 
  16344  61a3
  16345  61a3				   .L0509		;  asm
  16346  61a3
  16347  61a3		       a5 da		      LDA	Reaper1_X
  16348  61a5
  16349  61a5		       18		      CLC
  16350  61a6
  16351  61a6		       69 0c		      ADC	#12
  16352  61a8
  16353  61a8		       85 cf		      STA	temp5
  16354  61aa
  16355  61aa		       c5 87		      CMP	player3x
  16356  61ac
  16357  61ac		       90 06		      BCC	.skipL0631_1
  16358  61ae
  16359  61ae		       38		      SEC
  16360  61af
  16361  61af		       e5 87		      SBC	player3x
  16362  61b1
  16363  61b1		       4c b9 b1 	      jmp	.skipelse52_1
  16364  61b4
  16365  61b4				   .skipL0631_1
  16366  61b4
  16367  61b4		       a5 87		      LDA	player3x
  16368  61b6
  16369  61b6		       38		      SEC
  16370  61b7
  16371  61b7		       e5 cf		      SBC	temp5
  16372  61b9
  16373  61b9				   .skipelse52_1
  16374  61b9
  16375  61b9		       85 d0		      STA	temp6
  16376  61bb
  16377  61bb		       c9 0c		      CMP	#12
  16378  61bd
  16379  61bd		       90 24		      BCC	.Not12
  16380  61bf
  16381  61bf		       a5 87		      LDA	player3x
  16382  61c1
  16383  61c1		       c5 cf		      CMP	temp5
  16384  61c3
  16385  61c3		       b0 0f		      BCS	.SmallerTemp5	; 
  16386  61c5
  16387  61c5				   .
  16388  61c5							; 
  16389  61c5
  16390  61c5				   .
  16391  61c5							; 
  16392  61c5
  16393  61c5				   .L0510		;  player3:
  16394  61c5
  16395  61c5		       a2 d9		      LDX	#<playerL0510_3
  16396  61c7		       86 a8		      STX	player3pointerlo
  16397  61c9		       a9 f5		      LDA	#>playerL0510_3
  16398  61cb		       85 ad		      STA	player3pointerhi
  16399  61cd		       a9 08		      LDA	#8
  16400  61cf		       85 b3		      STA	player3height
  16401  61d1				   .L0511		;  goto Person4
  16402  61d1
  16403  61d1		       4c 6b b2 	      jmp	.Person4
  16404  61d4
  16405  61d4				   .SmallerTemp5
  16406  61d4							; SmallerTemp5
  16407  61d4
  16408  61d4				   .L0512		;  player3:
  16409  61d4
  16410  61d4		       a2 e0		      LDX	#<playerL0512_3
  16411  61d6		       86 a8		      STX	player3pointerlo
  16412  61d8		       a9 f5		      LDA	#>playerL0512_3
  16413  61da		       85 ad		      STA	player3pointerhi
  16414  61dc		       a9 08		      LDA	#8
  16415  61de		       85 b3		      STA	player3height
  16416  61e0				   .L0513		;  goto Person4
  16417  61e0
  16418  61e0		       4c 6b b2 	      jmp	.Person4
  16419  61e3
  16420  61e3				   .Not12
  16421  61e3							; Not12
  16422  61e3
  16423  61e3				   .L0514		;  if Reaper1_Y > player3y then player3:
  16424  61e3
  16425  61e3		       a5 90		      LDA	player3y
  16426  61e5		       c5 dc		      CMP	Reaper1_Y
  16427  61e7		       b0 0c		      BCS	.skipL0514
  16428  61e9				   .condpart197
  16429  61e9		       a2 e7		      LDX	#<player197then_3
  16430  61eb		       86 a8		      STX	player3pointerlo
  16431  61ed		       a9 f5		      LDA	#>player197then_3
  16432  61ef		       85 ad		      STA	player3pointerhi
  16433  61f1		       a9 08		      LDA	#8
  16434  61f3		       85 b3		      STA	player3height
  16435  61f5				   .skipL0514
  16436  61f5				   .L0515		;  goto Person4
  16437  61f5
  16438  61f5		       4c 6b b2 	      jmp	.Person4
  16439  61f8
  16440  61f8				   .
  16441  61f8							; 
  16442  61f8
  16443  61f8				   .FallPerson_3
  16444  61f8							; FallPerson_3
  16445  61f8
  16446  61f8				   .L0516		;  if temp4 > 3 then temp4 = 0
  16447  61f8
  16448  61f8		       a9 03		      LDA	#3
  16449  61fa		       c5 ce		      CMP	temp4
  16450  61fc		       b0 04		      BCS	.skipL0516
  16451  61fe				   .condpart198
  16452  61fe		       a9 00		      LDA	#0
  16453  6200		       85 ce		      STA	temp4
  16454  6202				   .skipL0516
  16455  6202				   .L0517		;  on temp4 goto Fall1_0 Fall1_1 Fall1_2 Fall1_3
  16456  6202
  16457  6202		       a6 ce		      LDX	temp4
  16458  6204		       bd 0d b2 	      LDA	.L0517jumptablehi,x
  16459  6207		       48		      PHA
  16460  6208		       bd 11 b2 	      LDA	.L0517jumptablelo,x
  16461  620b		       48		      PHA
  16462  620c		       60		      RTS
  16463  620d				   .L0517jumptablehi
  16464  620d		       b2		      .byte.b	>(.Fall1_0-1)
  16465  620e		       b2		      .byte.b	>(.Fall1_1-1)
  16466  620f		       b2		      .byte.b	>(.Fall1_2-1)
  16467  6210		       b2		      .byte.b	>(.Fall1_3-1)
  16468  6211				   .L0517jumptablelo
  16469  6211		       14		      .byte.b	<(.Fall1_0-1)
  16470  6212		       23		      .byte.b	<(.Fall1_1-1)
  16471  6213		       32		      .byte.b	<(.Fall1_2-1)
  16472  6214		       41		      .byte.b	<(.Fall1_3-1)
  16473  6215				   .Fall1_0
  16474  6215							; Fall1_0
  16475  6215
  16476  6215				   .L0518		;  player3:
  16477  6215
  16478  6215		       a2 ee		      LDX	#<playerL0518_3
  16479  6217		       86 a8		      STX	player3pointerlo
  16480  6219		       a9 f5		      LDA	#>playerL0518_3
  16481  621b		       85 ad		      STA	player3pointerhi
  16482  621d		       a9 0d		      LDA	#13
  16483  621f		       85 b3		      STA	player3height
  16484  6221				   .L0519		;  goto Sounder1
  16485  6221
  16486  6221		       4c 4e b2 	      jmp	.Sounder1
  16487  6224
  16488  6224				   .Fall1_1
  16489  6224							; Fall1_1
  16490  6224
  16491  6224				   .L0520		;  player3:
  16492  6224
  16493  6224		       a2 5a		      LDX	#<playerL0520_3
  16494  6226		       86 a8		      STX	player3pointerlo
  16495  6228		       a9 f6		      LDA	#>playerL0520_3
  16496  622a		       85 ad		      STA	player3pointerhi
  16497  622c		       a9 0d		      LDA	#13
  16498  622e		       85 b3		      STA	player3height
  16499  6230				   .L0521		;  goto Sounder1
  16500  6230
  16501  6230		       4c 4e b2 	      jmp	.Sounder1
  16502  6233
  16503  6233				   .Fall1_2
  16504  6233							; Fall1_2
  16505  6233
  16506  6233				   .
  16507  6233							; 
  16508  6233
  16509  6233				   .L0522		;  player3:
  16510  6233
  16511  6233		       a2 66		      LDX	#<playerL0522_3
  16512  6235		       86 a8		      STX	player3pointerlo
  16513  6237		       a9 f6		      LDA	#>playerL0522_3
  16514  6239		       85 ad		      STA	player3pointerhi
  16515  623b		       a9 0d		      LDA	#13
  16516  623d		       85 b3		      STA	player3height
  16517  623f				   .L0523		;  goto Sounder1
  16518  623f
  16519  623f		       4c 4e b2 	      jmp	.Sounder1
  16520  6242
  16521  6242				   .Fall1_3
  16522  6242							; Fall1_3
  16523  6242
  16524  6242				   .
  16525  6242							; 
  16526  6242
  16527  6242				   .L0524		;  player3:
  16528  6242
  16529  6242		       a2 72		      LDX	#<playerL0524_3
  16530  6244		       86 a8		      STX	player3pointerlo
  16531  6246		       a9 f6		      LDA	#>playerL0524_3
  16532  6248		       85 ad		      STA	player3pointerhi
  16533  624a		       a9 0d		      LDA	#13
  16534  624c		       85 b3		      STA	player3height
  16535  624e				   .Sounder1
  16536  624e							; Sounder1
  16537  624e
  16538  624e				   .L0525		;  asm
  16539  624e
  16540  624e		       a5 90		      LDA	player3y
  16541  6250
  16542  6250		       c9 10		      CMP	#16
  16543  6252
  16544  6252		       b0 0f		      BCS	.skipL0470_1
  16545  6254
  16546  6254		       a5 ed		      LDA	w
  16547  6256
  16548  6256		       29 f7		      AND	#247
  16549  6258
  16550  6258		       85 ed		      STA	w
  16551  625a
  16552  625a		       a9 78		      LDA	#120
  16553  625c
  16554  625c		       85 90		      STA	player3y
  16555  625e
  16556  625e		       a0 01		      LDY	#1
  16557  6260
  16558  6260		       4c 6b b2 	      jmp	.Person4
  16559  6263
  16560  6263				   .skipL0470_1
  16561  6263
  16562  6263		       4a		      lsr
  16563  6264
  16564  6264		       4a		      lsr
  16565  6265
  16566  6265		       4a		      lsr
  16567  6266
  16568  6266		       aa		      TAX
  16569  6267
  16570  6267		       c6 90		      dec	player3y
  16571  6269
  16572  6269		       a0 02		      LDY	#2
  16573  626b
  16574  626b				   .Person4
  16575  626b							; Person4
  16576  626b
  16577  626b				   .L0526		;  if w{4} then goto FallPerson_4
  16578  626b
  16579  626b		       a5 ed		      LDA	w
  16580  626d		       29 10		      AND	#16
  16581  626f		       f0 03		      BEQ	.skipL0526
  16582  6271				   .condpart199
  16583  6271		       4c a1 b3 	      jmp	.FallPerson_4
  16584  6274
  16585  6274				   .skipL0526
  16586  6274				   .
  16587  6274							; 
  16588  6274
  16589  6274				   .
  16590  6274							; 
  16591  6274
  16592  6274				   .L0527		;  if temp1 < 4 then player4y = 120 :	w{4} = 0
  16593  6274
  16594  6274		       a5 cb		      LDA	temp1
  16595  6276		       c9 04		      CMP	#4
  16596  6278		       b0 0a		      BCS	.skipL0527
  16597  627a				   .condpart200
  16598  627a		       a9 78		      LDA	#120
  16599  627c		       85 91		      STA	player4y
  16600  627e		       a5 ed		      LDA	w
  16601  6280		       29 ef		      AND	#239
  16602  6282		       85 ed		      STA	w
  16603  6284				   .skipL0527
  16604  6284				   .L0528		;  if player4y < 120 then goto JustDrawHim4
  16605  6284
  16606  6284		       a5 91		      LDA	player4y
  16607  6286		       c9 78		      CMP	#120
  16608  6288		       b0 03		      BCS	.skipL0528
  16609  628a				   .condpart201
  16610  628a		       4c 46 b3 	      jmp	.JustDrawHim4
  16611  628d
  16612  628d				   .skipL0528
  16613  628d				   .L0529		;  temp5 = temp4 +  ( rand & 3 ) 
  16614  628d
  16615  628d							; complex statement detected
  16616  628d		       a5 ce		      LDA	temp4
  16617  628f		       48		      PHA
  16618  6290		       a5 d6		      lda	rand
  16619  6292		       4a		      lsr
  16620  6293				  -	      ifconst	rand16
  16621  6293				  -	      rol	rand16
  16622  6293					      endif
  16623  6293		       90 02		      bcc	*+4
  16624  6295		       49 b4		      eor	#$B4
  16625  6297		       85 d6		      sta	rand
  16626  6299				  -	      ifconst	rand16
  16627  6299				  -	      eor	rand16
  16628  6299					      endif
  16629  6299		       29 03		      AND	#3
  16630  629b		       ba		      TSX
  16631  629c		       e8		      INX
  16632  629d		       9a		      TXS
  16633  629e		       18		      CLC
  16634  629f		       75 00		      ADC	$00,x
  16635  62a1		       85 cf		      STA	temp5
  16636  62a3				   .L0530		;  temp6 = 6 - HouseHeight
  16637  62a3
  16638  62a3		       a9 06		      LDA	#6
  16639  62a5		       38		      SEC
  16640  62a6		       e5 f0		      SBC	HouseHeight
  16641  62a8		       85 d0		      STA	temp6
  16642  62aa				   .L0531		;  asm
  16643  62aa
  16644  62aa		       a5 d0		      LDA	temp6
  16645  62ac
  16646  62ac		       c5 cf		      CMP	temp5
  16647  62ae
  16648  62ae		       b0 02		      BCS	.skipL0450_2
  16649  62b0
  16650  62b0		       85 cf		      STA	temp5
  16651  62b2
  16652  62b2				   .skipL0450_2
  16653  62b2
  16654  62b2		       c5 d0		      CMP	temp6
  16655  62b4
  16656  62b4		       d0 0a		      BNE	.skipL0451_2
  16657  62b6
  16658  62b6		       a5 db		      LDA	e
  16659  62b8
  16660  62b8		       29 02		      AND	#2
  16661  62ba
  16662  62ba		       f0 04		      BEQ	.skipL0451_2
  16663  62bc
  16664  62bc		       a9 00		      LDA	#0
  16665  62be
  16666  62be		       85 cf		      STA	temp5
  16667  62c0
  16668  62c0				   .skipL0451_2
  16669  62c0
  16670  62c0
  16671  62c0
  16672  62c0		       a5 cf		      LDA	temp5
  16673  62c2
  16674  62c2		       0a		      asl
  16675  62c3
  16676  62c3		       0a		      asl
  16677  62c4
  16678  62c4		       0a		      asl
  16679  62c5
  16680  62c5		       18		      CLC
  16681  62c6
  16682  62c6		       69 0f		      ADC	#15
  16683  62c8
  16684  62c8		       85 91		      STA	player4y
  16685  62ca
  16686  62ca		       c9 17		      CMP	#23
  16687  62cc
  16688  62cc		       b0 0a		      BCS	.skip231then_22
  16689  62ce
  16690  62ce		       a5 f0		      LDA	HouseHeight
  16691  62d0
  16692  62d0		       c9 00		      CMP	#0
  16693  62d2
  16694  62d2		       d0 04		      BNE	.skip231then_22
  16695  62d4
  16696  62d4		       a9 17		      LDA	#23
  16697  62d6
  16698  62d6		       85 91		      STA	player4y
  16699  62d8
  16700  62d8				   .skip231then_22
  16701  62d8
  16702  62d8
  16703  62d8
  16704  62d8
  16705  62d8
  16706  62d8		       a5 cf		      LDA	temp5
  16707  62da
  16708  62da		       0a		      asl
  16709  62db
  16710  62db		       0a		      asl
  16711  62dc
  16712  62dc		       0a		      asl
  16713  62dd
  16714  62dd		       18		      CLC
  16715  62de
  16716  62de		       69 0f		      ADC	#15
  16717  62e0
  16718  62e0		       85 91		      STA	player4y
  16719  62e2
  16720  62e2		       c9 17		      CMP	#23
  16721  62e4
  16722  62e4		       b0 0a		      BCS	.skip231then_2
  16723  62e6
  16724  62e6		       a5 f0		      LDA	HouseHeight
  16725  62e8
  16726  62e8		       c9 00		      CMP	#0
  16727  62ea
  16728  62ea		       d0 04		      BNE	.skip231then_2
  16729  62ec
  16730  62ec		       a9 17		      LDA	#23
  16731  62ee
  16732  62ee		       85 91		      STA	player4y
  16733  62f0
  16734  62f0				   .skip231then_2
  16735  62f0
  16736  62f0
  16737  62f0
  16738  62f0		       a5 d6		      lda	rand
  16739  62f2
  16740  62f2		       4a		      lsr
  16741  62f3
  16742  62f3		       90 02		      bcc	*+4
  16743  62f5
  16744  62f5		       49 b4		      eor	#$B4
  16745  62f7
  16746  62f7		       85 d6		      sta	rand
  16747  62f9
  16748  62f9		       29 07		      AND	#7
  16749  62fb
  16750  62fb		       c9 00		      CMP	#0
  16751  62fd
  16752  62fd		       d0 05		      BNE	.skipL0456_2
  16753  62ff
  16754  62ff		       a9 21		      LDA	#33
  16755  6301
  16756  6301		       4c 40 b3 	      jmp	.Done4x
  16757  6304
  16758  6304				   .skipL0456_2
  16759  6304
  16760  6304		       c9 01		      CMP	#1
  16761  6306
  16762  6306		       d0 05		      BNE	.skipL0457_2
  16763  6308
  16764  6308		       a9 29		      LDA	#41
  16765  630a
  16766  630a		       4c 40 b3 	      jmp	.Done4x
  16767  630d
  16768  630d				   .skipL0457_2
  16769  630d
  16770  630d		       c9 02		      CMP	#2
  16771  630f
  16772  630f		       d0 05		      BNE	.skipL0458_2
  16773  6311
  16774  6311		       a9 3d		      LDA	#61
  16775  6313
  16776  6313		       4c 40 b3 	      jmp	.Done4x
  16777  6316
  16778  6316				   .skipL0458_2
  16779  6316
  16780  6316		       c9 03		      CMP	#3
  16781  6318
  16782  6318		       d0 05		      BNE	.skipL0459_2
  16783  631a
  16784  631a		       a9 45		      LDA	#69
  16785  631c
  16786  631c		       4c 40 b3 	      jmp	.Done4x
  16787  631f
  16788  631f				   .skipL0459_2
  16789  631f
  16790  631f		       c9 04		      CMP	#4
  16791  6321
  16792  6321		       d0 05		      BNE	.skipL0460_2
  16793  6323
  16794  6323		       a9 61		      LDA	#97
  16795  6325
  16796  6325		       4c 40 b3 	      jmp	.Done4x
  16797  6328
  16798  6328				   .skipL0460_2
  16799  6328
  16800  6328		       c9 05		      CMP	#5
  16801  632a
  16802  632a		       d0 05		      BNE	.skipL0461_2
  16803  632c
  16804  632c		       a9 69		      LDA	#105
  16805  632e
  16806  632e		       4c 40 b3 	      jmp	.Done4x
  16807  6331
  16808  6331				   .skipL0461_2
  16809  6331
  16810  6331		       c9 06		      CMP	#6
  16811  6333
  16812  6333		       d0 05		      BNE	.skipL0462_2
  16813  6335
  16814  6335		       a9 7d		      LDA	#125
  16815  6337
  16816  6337		       4c 40 b3 	      jmp	.Done4x
  16817  633a
  16818  633a				   .skipL0462_2
  16819  633a
  16820  633a		       c9 07		      CMP	#7
  16821  633c
  16822  633c		       d0 04		      BNE	.skipL0463_2
  16823  633e
  16824  633e		       a9 85		      LDA	#133
  16825  6340
  16826  6340				   .Done4x
  16827  6340
  16828  6340		       85 88		      STA	player4x
  16829  6342
  16830  6342				   .skipL0463_2
  16831  6342
  16832  6342				   .
  16833  6342							; 
  16834  6342
  16835  6342				   .
  16836  6342							; 
  16837  6342
  16838  6342				   .L0532		;  COLUP4 = $1e
  16839  6342
  16840  6342		       a9 1e		      LDA	#$1e
  16841  6344		       85 9b		      STA	COLUP4
  16842  6346				   .
  16843  6346							; 
  16844  6346
  16845  6346				   .
  16846  6346							; 
  16847  6346
  16848  6346				   .JustDrawHim4
  16849  6346							; JustDrawHim4
  16850  6346
  16851  6346				   .L0533		;  player4:
  16852  6346
  16853  6346		       a2 7e		      LDX	#<playerL0533_4
  16854  6348		       86 a9		      STX	player4pointerlo
  16855  634a		       a9 f6		      LDA	#>playerL0533_4
  16856  634c		       85 ae		      STA	player4pointerhi
  16857  634e		       a9 08		      LDA	#8
  16858  6350		       85 b4		      STA	player4height
  16859  6352				   .L0534		;  asm
  16860  6352
  16861  6352		       a5 dd		      LDA	Reaper2_X
  16862  6354
  16863  6354		       18		      CLC
  16864  6355
  16865  6355		       69 0c		      ADC	#12
  16866  6357
  16867  6357		       85 cf		      STA	temp5
  16868  6359
  16869  6359		       c5 88		      CMP	player4x
  16870  635b
  16871  635b		       90 06		      BCC	.skipL0590_1
  16872  635d
  16873  635d		       38		      SEC
  16874  635e
  16875  635e		       e5 88		      SBC	player4x
  16876  6360
  16877  6360		       4c 68 b3 	      jmp	.skipelse24_113
  16878  6363
  16879  6363				   .skipL0590_1
  16880  6363
  16881  6363		       a5 88		      LDA	player4x
  16882  6365
  16883  6365		       38		      SEC
  16884  6366
  16885  6366		       e5 cf		      SBC	temp5
  16886  6368
  16887  6368				   .skipelse24_113
  16888  6368
  16889  6368		       85 d0		      STA	temp6
  16890  636a
  16891  636a		       c9 0c		      CMP	#12
  16892  636c
  16893  636c		       90 24		      BCC	.temp6smallerthan12_2
  16894  636e
  16895  636e		       a5 cf		      LDA	temp5
  16896  6370
  16897  6370		       c5 88		      CMP	player4x
  16898  6372
  16899  6372		       b0 0f		      BCS	.temp5smaller_2
  16900  6374
  16901  6374				   .L0535		;  player4:
  16902  6374
  16903  6374		       a2 85		      LDX	#<playerL0535_4
  16904  6376		       86 a9		      STX	player4pointerlo
  16905  6378		       a9 f6		      LDA	#>playerL0535_4
  16906  637a		       85 ae		      STA	player4pointerhi
  16907  637c		       a9 08		      LDA	#8
  16908  637e		       85 b4		      STA	player4height
  16909  6380				   .L0536		;  goto CantFall
  16910  6380
  16911  6380		       4c 14 b4 	      jmp	.CantFall
  16912  6383
  16913  6383				   .temp5smaller_2
  16914  6383							; temp5smaller_2
  16915  6383
  16916  6383				   .
  16917  6383							; 
  16918  6383
  16919  6383				   .L0537		;  player4:
  16920  6383
  16921  6383		       a2 8c		      LDX	#<playerL0537_4
  16922  6385		       86 a9		      STX	player4pointerlo
  16923  6387		       a9 f6		      LDA	#>playerL0537_4
  16924  6389		       85 ae		      STA	player4pointerhi
  16925  638b		       a9 08		      LDA	#8
  16926  638d		       85 b4		      STA	player4height
  16927  638f				   .L0538		;  goto CantFall
  16928  638f
  16929  638f		       4c 14 b4 	      jmp	.CantFall
  16930  6392
  16931  6392				   .temp6smallerthan12_2
  16932  6392							; temp6smallerthan12_2
  16933  6392
  16934  6392				   .
  16935  6392							; 
  16936  6392
  16937  6392				   .
  16938  6392							; 
  16939  6392
  16940  6392				   .L0539		;  player4:
  16941  6392
  16942  6392		       a2 93		      LDX	#<playerL0539_4
  16943  6394		       86 a9		      STX	player4pointerlo
  16944  6396		       a9 f6		      LDA	#>playerL0539_4
  16945  6398		       85 ae		      STA	player4pointerhi
  16946  639a		       a9 08		      LDA	#8
  16947  639c		       85 b4		      STA	player4height
  16948  639e				   .L0540		;  goto CantFall
  16949  639e
  16950  639e		       4c 14 b4 	      jmp	.CantFall
  16951  63a1
  16952  63a1				   .
  16953  63a1							; 
  16954  63a1
  16955  63a1				   .FallPerson_4
  16956  63a1							; FallPerson_4
  16957  63a1
  16958  63a1				   .L0541		;  if temp4 > 3 then temp4 = 0
  16959  63a1
  16960  63a1		       a9 03		      LDA	#3
  16961  63a3		       c5 ce		      CMP	temp4
  16962  63a5		       b0 04		      BCS	.skipL0541
  16963  63a7				   .condpart202
  16964  63a7		       a9 00		      LDA	#0
  16965  63a9		       85 ce		      STA	temp4
  16966  63ab				   .skipL0541
  16967  63ab				   .L0542		;  on temp4 goto Fall2_0 Fall2_1 Fall2_2 Fall2_3
  16968  63ab
  16969  63ab		       a6 ce		      LDX	temp4
  16970  63ad		       bd b6 b3 	      LDA	.L0542jumptablehi,x
  16971  63b0		       48		      PHA
  16972  63b1		       bd ba b3 	      LDA	.L0542jumptablelo,x
  16973  63b4		       48		      PHA
  16974  63b5		       60		      RTS
  16975  63b6				   .L0542jumptablehi
  16976  63b6		       b3		      .byte.b	>(.Fall2_0-1)
  16977  63b7		       b3		      .byte.b	>(.Fall2_1-1)
  16978  63b8		       b3		      .byte.b	>(.Fall2_2-1)
  16979  63b9		       b3		      .byte.b	>(.Fall2_3-1)
  16980  63ba				   .L0542jumptablelo
  16981  63ba		       bd		      .byte.b	<(.Fall2_0-1)
  16982  63bb		       cc		      .byte.b	<(.Fall2_1-1)
  16983  63bc		       db		      .byte.b	<(.Fall2_2-1)
  16984  63bd		       ea		      .byte.b	<(.Fall2_3-1)
  16985  63be				   .Fall2_0
  16986  63be							; Fall2_0
  16987  63be
  16988  63be				   .L0543		;  player4:
  16989  63be
  16990  63be		       a2 9a		      LDX	#<playerL0543_4
  16991  63c0		       86 a9		      STX	player4pointerlo
  16992  63c2		       a9 f6		      LDA	#>playerL0543_4
  16993  63c4		       85 ae		      STA	player4pointerhi
  16994  63c6		       a9 0d		      LDA	#13
  16995  63c8		       85 b4		      STA	player4height
  16996  63ca				   .L0544		;  goto Sounder2
  16997  63ca
  16998  63ca		       4c f7 b3 	      jmp	.Sounder2
  16999  63cd
  17000  63cd				   .Fall2_1
  17001  63cd							; Fall2_1
  17002  63cd
  17003  63cd				   .L0545		;  player4:
  17004  63cd
  17005  63cd		       a2 a6		      LDX	#<playerL0545_4
  17006  63cf		       86 a9		      STX	player4pointerlo
  17007  63d1		       a9 f6		      LDA	#>playerL0545_4
  17008  63d3		       85 ae		      STA	player4pointerhi
  17009  63d5		       a9 0d		      LDA	#13
  17010  63d7		       85 b4		      STA	player4height
  17011  63d9				   .L0546		;  goto Sounder2
  17012  63d9
  17013  63d9		       4c f7 b3 	      jmp	.Sounder2
  17014  63dc
  17015  63dc				   .
  17016  63dc							; 
  17017  63dc
  17018  63dc				   .Fall2_2
  17019  63dc							; Fall2_2
  17020  63dc
  17021  63dc				   .L0547		;  player4:
  17022  63dc
  17023  63dc		       a2 b2		      LDX	#<playerL0547_4
  17024  63de		       86 a9		      STX	player4pointerlo
  17025  63e0		       a9 f6		      LDA	#>playerL0547_4
  17026  63e2		       85 ae		      STA	player4pointerhi
  17027  63e4		       a9 0d		      LDA	#13
  17028  63e6		       85 b4		      STA	player4height
  17029  63e8				   .L0548		;  goto Sounder2
  17030  63e8
  17031  63e8		       4c f7 b3 	      jmp	.Sounder2
  17032  63eb
  17033  63eb				   .Fall2_3
  17034  63eb							; Fall2_3
  17035  63eb
  17036  63eb				   .L0549		;  player4:
  17037  63eb
  17038  63eb		       a2 be		      LDX	#<playerL0549_4
  17039  63ed		       86 a9		      STX	player4pointerlo
  17040  63ef		       a9 f6		      LDA	#>playerL0549_4
  17041  63f1		       85 ae		      STA	player4pointerhi
  17042  63f3		       a9 0d		      LDA	#13
  17043  63f5		       85 b4		      STA	player4height
  17044  63f7				   .Sounder2
  17045  63f7							; Sounder2
  17046  63f7
  17047  63f7				   .L0550		;  asm
  17048  63f7
  17049  63f7		       a5 91		      LDA	player4y
  17050  63f9
  17051  63f9		       c9 10		      CMP	#16
  17052  63fb
  17053  63fb		       b0 0f		      BCS	.skipL0470_2
  17054  63fd
  17055  63fd		       a5 ed		      LDA	w
  17056  63ff
  17057  63ff		       29 ef		      AND	#239
  17058  6401
  17059  6401		       85 ed		      STA	w
  17060  6403
  17061  6403		       a9 78		      LDA	#120
  17062  6405
  17063  6405		       85 91		      STA	player4y
  17064  6407
  17065  6407		       a0 01		      LDY	#1
  17066  6409
  17067  6409		       4c 14 b4 	      jmp	.CantFall
  17068  640c
  17069  640c				   .skipL0470_2
  17070  640c
  17071  640c		       4a		      lsr
  17072  640d
  17073  640d		       4a		      lsr
  17074  640e
  17075  640e		       4a		      lsr
  17076  640f
  17077  640f
  17078  640f
  17079  640f		       aa		      TAX
  17080  6410
  17081  6410		       a0 02		      LDY	#2
  17082  6412
  17083  6412		       c6 91		      dec	player4y
  17084  6414
  17085  6414				   .
  17086  6414							; 
  17087  6414
  17088  6414				   .CantFall
  17089  6414							; CantFall
  17090  6414
  17091  6414				   .
  17092  6414							; 
  17093  6414
  17094  6414				   .
  17095  6414							; 
  17096  6414
  17097  6414				   .L0551		;  asm
  17098  6414
  17099  6414		       c0 01		      CPY	#1
  17100  6416
  17101  6416		       d0 0f		      BNE	.NO_SOUNDZ2
  17102  6418
  17103  6418		       a9 06		      LDA	#6
  17104  641a
  17105  641a		       85 19		      STA	AUDV0
  17106  641c
  17107  641c		       a9 02		      LDA	#2
  17108  641e
  17109  641e		       85 15		      STA	AUDC0
  17110  6420
  17111  6420		       a9 0a		      LDA	#10
  17112  6422
  17113  6422		       85 17		      STA	AUDF0
  17114  6424
  17115  6424		       4c 35 b4 	      jmp	.NO_SOUNDZ3
  17116  6427
  17117  6427				   .NO_SOUNDZ2
  17118  6427
  17119  6427		       c0 02		      CPY	#2
  17120  6429
  17121  6429		       d0 0a		      BNE	.NO_SOUNDZ3
  17122  642b
  17123  642b		       86 17		      STX	AUDF0
  17124  642d
  17125  642d		       a9 09		      LDA	#9
  17126  642f
  17127  642f		       85 19		      STA	AUDV0
  17128  6431
  17129  6431		       a9 0a		      LDA	#10
  17130  6433
  17131  6433		       85 15		      STA	AUDC0
  17132  6435
  17133  6435				   .NO_SOUNDZ3
  17134  6435
  17135  6435
  17136  6435
  17137  6435
  17138  6435
  17139  6435		       a5 04		      lda	NUSIZ0
  17140  6437
  17141  6437		       c9 20		      cmp	#$20
  17142  6439
  17143  6439		       f0 07		      BEQ	.Its20_1
  17144  643b
  17145  643b		       a9 04		      lda	#4
  17146  643d
  17147  643d		       85 cb		      sta	temp1
  17148  643f
  17149  643f		       4c 46 b4 	      jmp	DoneThat_1
  17150  6442
  17151  6442				   .Its20_1
  17152  6442
  17153  6442		       a9 03		      lda	#3
  17154  6444
  17155  6444		       85 cb		      sta	temp1
  17156  6446
  17157  6446
  17158  6446
  17159  6446				   DoneThat_1
  17160  6446
  17161  6446				   .
  17162  6446							; 
  17163  6446
  17164  6446				   .L0552		;  asm
  17165  6446
  17166  6446		       a5 81		      LDA	PowerUp_Type
  17167  6448
  17168  6448		       c9 01		      CMP	#1
  17169  644a
  17170  644a		       d0 29		      BNE	.DontDoThat
  17171  644c
  17172  644c
  17173  644c
  17174  644c		       a5 db		      LDA	e
  17175  644e
  17176  644e		       29 02		      AND	#2
  17177  6450
  17178  6450		       f0 23		      BEQ	.DontDoThat
  17179  6452
  17180  6452		       a9 00		      LDA	#0
  17181  6454
  17182  6454		       c5 ef		      CMP	PowerUp_Counter
  17183  6456
  17184  6456		       b0 1d		      BCS	.DontDoThat
  17185  6458
  17186  6458		       a5 db		      LDA	e
  17187  645a
  17188  645a		       4a		      LSR
  17189  645b
  17190  645b		       b0 06		      BCS	.SecondChance
  17191  645d
  17192  645d		       a5 ed		      LDA	w
  17193  645f
  17194  645f		       29 20		      AND	#32
  17195  6461
  17196  6461		       f0 0b		      BEQ	.DoThatTemp1Shit
  17197  6463
  17198  6463				   .SecondChance
  17199  6463
  17200  6463		       a5 db		      LDA	e
  17201  6465
  17202  6465		       4a		      LSR
  17203  6466
  17204  6466		       90 0d		      BCC	.DontDoThat
  17205  6468
  17206  6468		       a5 ed		      LDA	w
  17207  646a
  17208  646a		       29 20		      AND	#32
  17209  646c
  17210  646c		       f0 07		      BEQ	.DontDoThat
  17211  646e
  17212  646e				   .DoThatTemp1Shit
  17213  646e
  17214  646e		       a5 cb		      LDA	temp1
  17215  6470
  17216  6470		       18		      CLC
  17217  6471
  17218  6471		       69 10		      ADC	#16
  17219  6473
  17220  6473		       85 cb		      STA	temp1
  17221  6475
  17222  6475
  17223  6475
  17224  6475				   .DontDoThat
  17225  6475
  17226  6475				   .
  17227  6475							; 
  17228  6475
  17229  6475				   .L0553		;  if e{0} then goto Player2Damages
  17230  6475
  17231  6475		       a5 db		      LDA	e
  17232  6477		       4a		      LSR
  17233  6478		       90 03		      BCC	.skipL0553
  17234  647a				   .condpart203
  17235  647a		       4c 7b b6 	      jmp	.Player2Damages
  17236  647d
  17237  647d				   .skipL0553
  17238  647d				   .L0554		;  if !o{5} then return otherbank
  17239  647d
  17240  647d		       a5 e5		      LDA	o
  17241  647f		       29 20		      AND	#32
  17242  6481		       d0 03		      BNE	.skipL0554
  17243  6483				   .condpart204
  17244  6483		       4c dd ff 	      JMP	BS_return
  17245  6486				   .skipL0554
  17246  6486				   .DoEvilThings_1
  17247  6486							; DoEvilThings_1
  17248  6486
  17249  6486				   .L0555		;  asm
  17250  6486
  17251  6486		       a5 80		      LDA	missile0x
  17252  6488
  17253  6488		       18		      CLC
  17254  6489
  17255  6489		       65 cb		      ADC	temp1
  17256  648b
  17257  648b		       85 ce		      STA	temp4
  17258  648d
  17259  648d		       a0 00		      LDY	#0
  17260  648f
  17261  648f				   .
  17262  648f							; 
  17263  648f
  17264  648f				   .L0556		;  if o{4} then goto PeopleHurt1
  17265  648f
  17266  648f		       a5 e5		      LDA	o
  17267  6491		       29 10		      AND	#16
  17268  6493		       f0 03		      BEQ	.skipL0556
  17269  6495				   .condpart205
  17270  6495		       4c 0a b5 	      jmp	.PeopleHurt1
  17271  6498
  17272  6498				   .skipL0556
  17273  6498				   .
  17274  6498							; 
  17275  6498
  17276  6498				   .L0557		;  asm
  17277  6498
  17278  6498		       a5 dd		      LDA	Reaper2_X
  17279  649a
  17280  649a		       18		      CLC
  17281  649b
  17282  649b		       69 04		      ADC	#4
  17283  649d
  17284  649d		       85 cc		      STA	temp2
  17285  649f
  17286  649f		       c5 ce		      CMP	temp4
  17287  64a1
  17288  64a1		       b0 08		      BCS	.skipL0514_1
  17289  64a3
  17290  64a3		       a5 ce		      LDA	temp4
  17291  64a5
  17292  64a5		       38		      SEC
  17293  64a6
  17294  64a6		       e5 cc		      SBC	temp2
  17295  64a8
  17296  64a8		       4c ae b4 	      jmp	.skipelse25_1
  17297  64ab
  17298  64ab				   .skipL0514_1
  17299  64ab
  17300  64ab		       38		      SEC
  17301  64ac
  17302  64ac		       e5 ce		      SBC	temp4
  17303  64ae
  17304  64ae				   .skipelse25_1
  17305  64ae
  17306  64ae		       85 cf		      STA	temp5
  17307  64b0
  17308  64b0
  17309  64b0
  17310  64b0		       a5 de		      LDA	Reaper2_Y
  17311  64b2
  17312  64b2		       38		      SEC
  17313  64b3
  17314  64b3		       e9 09		      SBC	#9
  17315  64b5
  17316  64b5		       85 cc		      STA	temp2
  17317  64b7
  17318  64b7		       c5 8a		      CMP	missile0y
  17319  64b9
  17320  64b9		       b0 08		      BCS	.skipL0516_1
  17321  64bb
  17322  64bb		       a5 8a		      LDA	missile0y
  17323  64bd
  17324  64bd		       38		      SEC
  17325  64be
  17326  64be		       e5 cc		      SBC	temp2
  17327  64c0
  17328  64c0		       4c c6 b4 	      jmp	.skipelse26_1
  17329  64c3
  17330  64c3				   .skipL0516_1
  17331  64c3
  17332  64c3		       38		      SEC
  17333  64c4
  17334  64c4		       e5 8a		      SBC	missile0y
  17335  64c6
  17336  64c6				   .skipelse26_1
  17337  64c6
  17338  64c6		       85 d0		      STA	temp6
  17339  64c8
  17340  64c8
  17341  64c8
  17342  64c8		       a5 cb		      LDA	temp1
  17343  64ca
  17344  64ca		       18		      CLC
  17345  64cb
  17346  64cb		       69 03		      ADC	#3
  17347  64cd
  17348  64cd		       85 cc		      STA	temp2
  17349  64cf
  17350  64cf				   .
  17351  64cf							; 
  17352  64cf
  17353  64cf				   .
  17354  64cf							; 
  17355  64cf
  17356  64cf				   .
  17357  64cf							; 
  17358  64cf
  17359  64cf				   .L0558		;  temp3 =  ( rand & 3 ) 
  17360  64cf
  17361  64cf							; complex statement detected
  17362  64cf		       a5 d6		      lda	rand
  17363  64d1		       4a		      lsr
  17364  64d2				  -	      ifconst	rand16
  17365  64d2				  -	      rol	rand16
  17366  64d2					      endif
  17367  64d2		       90 02		      bcc	*+4
  17368  64d4		       49 b4		      eor	#$B4
  17369  64d6		       85 d6		      sta	rand
  17370  64d8				  -	      ifconst	rand16
  17371  64d8				  -	      eor	rand16
  17372  64d8					      endif
  17373  64d8		       29 03		      AND	#3
  17374  64da		       85 cd		      STA	temp3
  17375  64dc				   .L0559		;  asm
  17376  64dc
  17377  64dc
  17378  64dc
  17379  64dc		       a5 cf		      LDA	temp5
  17380  64de
  17381  64de		       c5 cc		      CMP	temp2
  17382  64e0
  17383  64e0		       b0 28		      BCS	.skipL0520_1
  17384  64e2
  17385  64e2		       a5 d0		      LDA	temp6
  17386  64e4
  17387  64e4		       c9 08		      CMP	#8
  17388  64e6
  17389  64e6		       b0 22		      BCS	.skipL0520_1
  17390  64e8
  17391  64e8
  17392  64e8
  17393  64e8
  17394  64e8
  17395  64e8		       f8		      SED
  17396  64e9
  17397  64e9		       a5 c2		      LDA	player1score
  17398  64eb
  17399  64eb		       38		      SEC
  17400  64ec
  17401  64ec		       e5 cd		      SBC	temp3
  17402  64ee
  17403  64ee		       85 c2		      STA	player1score
  17404  64f0
  17405  64f0		       d8		      CLD
  17406  64f1
  17407  64f1		       a0 01		      LDY	#1
  17408  64f3
  17409  64f3		       24 e5		      BIT	o
  17410  64f5
  17411  64f5		       10 13		      BPL	.skipL0520_1
  17412  64f7
  17413  64f7		       a5 e5		      LDA	o
  17414  64f9
  17415  64f9		       29 7f		      AND	#127
  17416  64fb
  17417  64fb		       85 e5		      STA	o
  17418  64fd
  17419  64fd		       a9 a0		      LDA	#160
  17420  64ff
  17421  64ff		       85 e2		      STA	Shoot1_Y
  17422  6501
  17423  6501		       f8		      SED
  17424  6502
  17425  6502		       a5 c2		      LDA	player1score
  17426  6504
  17427  6504		       38		      SEC
  17428  6505
  17429  6505		       e9 05		      SBC	#$05
  17430  6507
  17431  6507		       85 c2		      STA	player1score
  17432  6509
  17433  6509		       d8		      CLD
  17434  650a
  17435  650a
  17436  650a
  17437  650a
  17438  650a
  17439  650a				   .skipL0520_1
  17440  650a
  17441  650a				   .
  17442  650a							; 
  17443  650a
  17444  650a				   .
  17445  650a							; 
  17446  650a
  17447  650a				   .PeopleHurt1
  17448  650a							; PeopleHurt1
  17449  650a
  17450  650a				   .L0560		;  asm
  17451  650a
  17452  650a		       a5 85		      LDA	player1x
  17453  650c
  17454  650c		       18		      CLC
  17455  650d
  17456  650d		       69 04		      ADC	#4
  17457  650f
  17458  650f		       85 cc		      STA	temp2
  17459  6511
  17460  6511		       c5 ce		      CMP	temp4
  17461  6513
  17462  6513		       b0 08		      BCS	.skipL0516_11
  17463  6515
  17464  6515		       a5 ce		      LDA	temp4
  17465  6517
  17466  6517		       38		      SEC
  17467  6518
  17468  6518		       e5 cc		      SBC	temp2
  17469  651a
  17470  651a		       4c 20 b5 	      jmp	.skipelse25_11
  17471  651d
  17472  651d				   .skipL0516_11
  17473  651d
  17474  651d		       38		      SEC
  17475  651e
  17476  651e		       e5 ce		      SBC	temp4
  17477  6520
  17478  6520				   .skipelse25_11
  17479  6520
  17480  6520		       85 cf		      STA	temp5
  17481  6522
  17482  6522		       a5 8e		      LDA	player1y
  17483  6524
  17484  6524		       38		      SEC
  17485  6525
  17486  6525		       e9 05		      SBC	#5
  17487  6527
  17488  6527		       85 cc		      STA	temp2
  17489  6529
  17490  6529		       c5 8a		      CMP	missile0y
  17491  652b
  17492  652b		       b0 08		      BCS	.skipL0518_11
  17493  652d
  17494  652d		       a5 8a		      LDA	missile0y
  17495  652f
  17496  652f		       38		      SEC
  17497  6530
  17498  6530		       e5 cc		      SBC	temp2
  17499  6532
  17500  6532		       4c 38 b5 	      jmp	.skipelse26_11
  17501  6535
  17502  6535				   .skipL0518_11
  17503  6535
  17504  6535		       38		      SEC
  17505  6536
  17506  6536		       e5 8a		      SBC	missile0y
  17507  6538
  17508  6538				   .skipelse26_11
  17509  6538
  17510  6538		       85 d0		      STA	temp6
  17511  653a
  17512  653a
  17513  653a
  17514  653a		       c9 08		      CMP	#8
  17515  653c
  17516  653c		       b0 23		      BCS	.skipL0519_11
  17517  653e
  17518  653e		       a5 cf		      LDA	temp5
  17519  6540
  17520  6540		       c9 08		      CMP	#8
  17521  6542
  17522  6542		       b0 1d		      BCS	.skipL0519_11
  17523  6544
  17524  6544		       a0 01		      LDY	#1
  17525  6546
  17526  6546		       a9 78		      LDA	#120
  17527  6548
  17528  6548		       85 8e		      STA	player1y
  17529  654a
  17530  654a		       f8		      SED
  17531  654b
  17532  654b		       a5 d2		      LDA	player2score
  17533  654d
  17534  654d		       18		      CLC
  17535  654e
  17536  654e		       69 01		      ADC	#$01
  17537  6550
  17538  6550		       85 d2		      STA	player2score
  17539  6552
  17540  6552		       d8		      CLD
  17541  6553
  17542  6553		       24 e5		      BIT	o
  17543  6555
  17544  6555		       10 0a		      BPL	.skipL0519_11
  17545  6557
  17546  6557
  17547  6557
  17548  6557		       a5 e5		      LDA	o
  17549  6559
  17550  6559		       29 7f		      AND	#127
  17551  655b
  17552  655b		       85 e5		      STA	o
  17553  655d
  17554  655d		       a9 a0		      LDA	#160
  17555  655f
  17556  655f		       85 e2		      STA	Shoot1_Y
  17557  6561
  17558  6561				   .skipL0519_11
  17559  6561
  17560  6561				   .
  17561  6561							; 
  17562  6561
  17563  6561				   .L0561		;  asm
  17564  6561
  17565  6561		       a5 86		      LDA	player2x
  17566  6563
  17567  6563		       18		      CLC
  17568  6564
  17569  6564		       69 04		      ADC	#4
  17570  6566
  17571  6566		       85 cc		      STA	temp2
  17572  6568
  17573  6568		       c5 ce		      CMP	temp4
  17574  656a
  17575  656a		       b0 08		      BCS	.skipL0516_22
  17576  656c
  17577  656c		       a5 ce		      LDA	temp4
  17578  656e
  17579  656e		       38		      SEC
  17580  656f
  17581  656f		       e5 cc		      SBC	temp2
  17582  6571
  17583  6571		       4c 77 b5 	      jmp	.skipelse25_22
  17584  6574
  17585  6574				   .skipL0516_22
  17586  6574
  17587  6574		       38		      SEC
  17588  6575
  17589  6575		       e5 ce		      SBC	temp4
  17590  6577
  17591  6577				   .skipelse25_22
  17592  6577
  17593  6577		       85 cf		      STA	temp5
  17594  6579
  17595  6579		       a5 8f		      LDA	player2y
  17596  657b
  17597  657b		       38		      SEC
  17598  657c
  17599  657c		       e9 05		      SBC	#5
  17600  657e
  17601  657e		       85 cc		      STA	temp2
  17602  6580
  17603  6580		       c5 8a		      CMP	missile0y
  17604  6582
  17605  6582		       b0 08		      BCS	.skipL0518_22
  17606  6584
  17607  6584		       a5 8a		      LDA	missile0y
  17608  6586
  17609  6586		       38		      SEC
  17610  6587
  17611  6587		       e5 cc		      SBC	temp2
  17612  6589
  17613  6589		       4c 8f b5 	      jmp	.skipelse26_22
  17614  658c
  17615  658c				   .skipL0518_22
  17616  658c
  17617  658c		       38		      SEC
  17618  658d
  17619  658d		       e5 8a		      SBC	missile0y
  17620  658f
  17621  658f				   .skipelse26_22
  17622  658f
  17623  658f		       85 d0		      STA	temp6
  17624  6591
  17625  6591
  17626  6591
  17627  6591		       c9 08		      CMP	#8
  17628  6593
  17629  6593		       b0 23		      BCS	.skipL0519_22
  17630  6595
  17631  6595		       a5 cf		      LDA	temp5
  17632  6597
  17633  6597		       c9 08		      CMP	#8
  17634  6599
  17635  6599		       b0 1d		      BCS	.skipL0519_22
  17636  659b
  17637  659b		       a0 01		      LDY	#1
  17638  659d
  17639  659d		       a9 78		      LDA	#120
  17640  659f
  17641  659f		       85 8f		      STA	player2y
  17642  65a1
  17643  65a1		       f8		      SED
  17644  65a2
  17645  65a2		       a5 d2		      LDA	player2score
  17646  65a4
  17647  65a4		       18		      CLC
  17648  65a5
  17649  65a5		       69 01		      ADC	#$01
  17650  65a7
  17651  65a7		       85 d2		      STA	player2score
  17652  65a9
  17653  65a9		       d8		      CLD
  17654  65aa
  17655  65aa		       24 e5		      BIT	o
  17656  65ac
  17657  65ac		       10 0a		      BPL	.skipL0519_22
  17658  65ae
  17659  65ae
  17660  65ae
  17661  65ae		       a5 e5		      LDA	o
  17662  65b0
  17663  65b0		       29 7f		      AND	#127
  17664  65b2
  17665  65b2		       85 e5		      STA	o
  17666  65b4
  17667  65b4		       a9 a0		      LDA	#160
  17668  65b6
  17669  65b6		       85 e2		      STA	Shoot1_Y
  17670  65b8
  17671  65b8				   .skipL0519_22
  17672  65b8
  17673  65b8				   .
  17674  65b8							; 
  17675  65b8
  17676  65b8				   .
  17677  65b8							; 
  17678  65b8
  17679  65b8				   .L0562		;  if w{3} then goto LookAt4_1
  17680  65b8
  17681  65b8		       a5 ed		      LDA	w
  17682  65ba		       29 08		      AND	#8
  17683  65bc		       f0 03		      BEQ	.skipL0562
  17684  65be				   .condpart206
  17685  65be		       4c 18 b6 	      jmp	.LookAt4_1
  17686  65c1
  17687  65c1				   .skipL0562
  17688  65c1				   .
  17689  65c1							; 
  17690  65c1
  17691  65c1				   .L0563		;  asm
  17692  65c1
  17693  65c1		       a5 87		      LDA	player3x
  17694  65c3
  17695  65c3		       18		      CLC
  17696  65c4
  17697  65c4		       69 04		      ADC	#4
  17698  65c6
  17699  65c6		       85 cc		      STA	temp2
  17700  65c8
  17701  65c8		       c5 ce		      CMP	temp4
  17702  65ca
  17703  65ca		       b0 08		      BCS	.skipL0516_33
  17704  65cc
  17705  65cc		       a5 ce		      LDA	temp4
  17706  65ce
  17707  65ce		       38		      SEC
  17708  65cf
  17709  65cf		       e5 cc		      SBC	temp2
  17710  65d1
  17711  65d1		       4c d7 b5 	      jmp	.skipelse25_33
  17712  65d4
  17713  65d4				   .skipL0516_33
  17714  65d4
  17715  65d4		       38		      SEC
  17716  65d5
  17717  65d5		       e5 ce		      SBC	temp4
  17718  65d7
  17719  65d7				   .skipelse25_33
  17720  65d7
  17721  65d7		       85 cf		      STA	temp5
  17722  65d9
  17723  65d9		       a5 90		      LDA	player3y
  17724  65db
  17725  65db		       38		      SEC
  17726  65dc
  17727  65dc		       e9 05		      SBC	#5
  17728  65de
  17729  65de		       85 cc		      STA	temp2
  17730  65e0
  17731  65e0		       c5 8a		      CMP	missile0y
  17732  65e2
  17733  65e2		       b0 08		      BCS	.skipL0518_33
  17734  65e4
  17735  65e4		       a5 8a		      LDA	missile0y
  17736  65e6
  17737  65e6		       38		      SEC
  17738  65e7
  17739  65e7		       e5 cc		      SBC	temp2
  17740  65e9
  17741  65e9		       4c ef b5 	      jmp	.skipelse26_33
  17742  65ec
  17743  65ec				   .skipL0518_33
  17744  65ec
  17745  65ec		       38		      SEC
  17746  65ed
  17747  65ed		       e5 8a		      SBC	missile0y
  17748  65ef
  17749  65ef				   .skipelse26_33
  17750  65ef
  17751  65ef		       85 d0		      STA	temp6
  17752  65f1
  17753  65f1
  17754  65f1
  17755  65f1		       c9 08		      CMP	#8
  17756  65f3
  17757  65f3		       b0 23		      BCS	.skipL0519_33
  17758  65f5
  17759  65f5		       a5 cf		      LDA	temp5
  17760  65f7
  17761  65f7		       c9 04		      CMP	#4
  17762  65f9
  17763  65f9		       b0 1d		      BCS	.skipL0519_33
  17764  65fb
  17765  65fb		       a0 01		      LDY	#1
  17766  65fd
  17767  65fd		       a9 78		      LDA	#120
  17768  65ff
  17769  65ff		       85 90		      STA	player3y
  17770  6601
  17771  6601		       f8		      SED
  17772  6602
  17773  6602		       a5 d2		      LDA	player2score
  17774  6604
  17775  6604		       18		      CLC
  17776  6605
  17777  6605		       69 01		      ADC	#$01
  17778  6607
  17779  6607		       85 d2		      STA	player2score
  17780  6609
  17781  6609		       d8		      CLD
  17782  660a
  17783  660a		       24 e5		      BIT	o
  17784  660c
  17785  660c		       10 0a		      BPL	.skipL0519_33
  17786  660e
  17787  660e
  17788  660e
  17789  660e		       a5 e5		      LDA	o
  17790  6610
  17791  6610		       29 7f		      AND	#127
  17792  6612
  17793  6612		       85 e5		      STA	o
  17794  6614
  17795  6614		       a9 a0		      LDA	#160
  17796  6616
  17797  6616		       85 e2		      STA	Shoot1_Y
  17798  6618
  17799  6618				   .skipL0519_33
  17800  6618
  17801  6618				   .LookAt4_1
  17802  6618							; LookAt4_1
  17803  6618
  17804  6618				   .L0564		;  if w{4} then goto CanReturn
  17805  6618
  17806  6618		       a5 ed		      LDA	w
  17807  661a		       29 10		      AND	#16
  17808  661c		       f0 03		      BEQ	.skipL0564
  17809  661e				   .condpart207
  17810  661e		       4c a8 b8 	      jmp	.CanReturn
  17811  6621
  17812  6621				   .skipL0564
  17813  6621				   .
  17814  6621							; 
  17815  6621
  17816  6621				   .L0565		;  asm
  17817  6621
  17818  6621		       a5 88		      LDA	player4x
  17819  6623
  17820  6623		       18		      CLC
  17821  6624
  17822  6624		       69 04		      ADC	#4
  17823  6626
  17824  6626		       85 cc		      STA	temp2
  17825  6628
  17826  6628		       c5 ce		      CMP	temp4
  17827  662a
  17828  662a		       b0 08		      BCS	.skipL0516_44
  17829  662c
  17830  662c		       a5 ce		      LDA	temp4
  17831  662e
  17832  662e		       38		      SEC
  17833  662f
  17834  662f		       e5 cc		      SBC	temp2
  17835  6631
  17836  6631		       4c 37 b6 	      jmp	.skipelse25_44
  17837  6634
  17838  6634				   .skipL0516_44
  17839  6634
  17840  6634		       38		      SEC
  17841  6635
  17842  6635		       e5 ce		      SBC	temp4
  17843  6637
  17844  6637				   .skipelse25_44
  17845  6637
  17846  6637		       85 cf		      STA	temp5
  17847  6639
  17848  6639		       a5 91		      LDA	player4y
  17849  663b
  17850  663b		       38		      SEC
  17851  663c
  17852  663c		       e9 05		      SBC	#5
  17853  663e
  17854  663e		       85 cc		      STA	temp2
  17855  6640
  17856  6640		       c5 8a		      CMP	missile0y
  17857  6642
  17858  6642		       b0 08		      BCS	.skipL0518_44
  17859  6644
  17860  6644		       a5 8a		      LDA	missile0y
  17861  6646
  17862  6646		       38		      SEC
  17863  6647
  17864  6647		       e5 cc		      SBC	temp2
  17865  6649
  17866  6649		       4c 4f b6 	      jmp	.skipelse26_44
  17867  664c
  17868  664c				   .skipL0518_44
  17869  664c
  17870  664c		       38		      SEC
  17871  664d
  17872  664d		       e5 8a		      SBC	missile0y
  17873  664f
  17874  664f				   .skipelse26_44
  17875  664f
  17876  664f		       85 d0		      STA	temp6
  17877  6651
  17878  6651
  17879  6651
  17880  6651		       c9 08		      CMP	#8
  17881  6653
  17882  6653		       b0 23		      BCS	.skipL0519_44
  17883  6655
  17884  6655		       a5 cf		      LDA	temp5
  17885  6657
  17886  6657		       c9 04		      CMP	#4
  17887  6659
  17888  6659		       b0 1d		      BCS	.skipL0519_44
  17889  665b
  17890  665b		       a0 01		      LDY	#1
  17891  665d
  17892  665d		       a9 78		      LDA	#120
  17893  665f
  17894  665f		       85 91		      STA	player4y
  17895  6661
  17896  6661		       f8		      SED
  17897  6662
  17898  6662		       a5 d2		      LDA	player2score
  17899  6664
  17900  6664		       18		      CLC
  17901  6665
  17902  6665		       69 01		      ADC	#$01
  17903  6667
  17904  6667		       85 d2		      STA	player2score
  17905  6669
  17906  6669		       d8		      CLD
  17907  666a
  17908  666a		       24 e5		      BIT	o
  17909  666c
  17910  666c		       10 0a		      BPL	.skipL0519_44
  17911  666e
  17912  666e
  17913  666e
  17914  666e		       a5 e5		      LDA	o
  17915  6670
  17916  6670		       29 7f		      AND	#127
  17917  6672
  17918  6672		       85 e5		      STA	o
  17919  6674
  17920  6674		       a9 a0		      LDA	#160
  17921  6676
  17922  6676		       85 e2		      STA	Shoot1_Y
  17923  6678
  17924  6678				   .skipL0519_44
  17925  6678
  17926  6678
  17927  6678
  17928  6678
  17929  6678
  17930  6678
  17931  6678
  17932  6678				   .
  17933  6678							; 
  17934  6678
  17935  6678				   .L0566		;  goto CanReturn
  17936  6678
  17937  6678		       4c a8 b8 	      jmp	.CanReturn
  17938  667b
  17939  667b				   .Player2Damages
  17940  667b							; Player2Damages
  17941  667b
  17942  667b				   .
  17943  667b							; 
  17944  667b
  17945  667b				   .L0567		;  if !o{6} then return otherbank
  17946  667b
  17947  667b		       24 e5		      BIT	o
  17948  667d		       70 03		      BVS	.skipL0567
  17949  667f				   .condpart208
  17950  667f		       4c dd ff 	      JMP	BS_return
  17951  6682				   .skipL0567
  17952  6682				   .DoEvilThings_2
  17953  6682							; DoEvilThings_2
  17954  6682
  17955  6682				   .
  17956  6682							; 
  17957  6682
  17958  6682				   .L0568		;  asm
  17959  6682
  17960  6682		       a5 80		      LDA	missile0x
  17961  6684
  17962  6684		       18		      CLC
  17963  6685
  17964  6685		       65 cb		      ADC	temp1
  17965  6687
  17966  6687		       85 ce		      STA	temp4
  17967  6689
  17968  6689		       a0 00		      LDY	#0
  17969  668b
  17970  668b				   .L0569		;  if o{3} then goto PeopleHurt2
  17971  668b
  17972  668b		       a5 e5		      LDA	o
  17973  668d		       29 08		      AND	#8
  17974  668f		       f0 03		      BEQ	.skipL0569
  17975  6691				   .condpart209
  17976  6691		       4c 36 b7 	      jmp	.PeopleHurt2
  17977  6694
  17978  6694				   .skipL0569
  17979  6694				   .
  17980  6694							; 
  17981  6694
  17982  6694				   .L0570		;  asm
  17983  6694
  17984  6694		       a5 da		      LDA	Reaper1_X
  17985  6696
  17986  6696		       18		      CLC
  17987  6697
  17988  6697		       69 04		      ADC	#4
  17989  6699
  17990  6699		       85 cc		      STA	temp2
  17991  669b
  17992  669b		       c5 ce		      CMP	temp4
  17993  669d
  17994  669d		       b0 08		      BCS	.skipL0514_2
  17995  669f
  17996  669f		       a5 ce		      LDA	temp4
  17997  66a1
  17998  66a1		       38		      SEC
  17999  66a2
  18000  66a2		       e5 cc		      SBC	temp2
  18001  66a4
  18002  66a4		       4c aa b6 	      jmp	.skipelse25_2
  18003  66a7
  18004  66a7				   .skipL0514_2
  18005  66a7
  18006  66a7		       38		      SEC
  18007  66a8
  18008  66a8		       e5 ce		      SBC	temp4
  18009  66aa
  18010  66aa				   .skipelse25_2
  18011  66aa
  18012  66aa		       85 cf		      STA	temp5
  18013  66ac
  18014  66ac
  18015  66ac
  18016  66ac		       a5 dc		      LDA	Reaper1_Y
  18017  66ae
  18018  66ae		       38		      SEC
  18019  66af
  18020  66af		       e9 09		      SBC	#9
  18021  66b1
  18022  66b1		       85 cc		      STA	temp2
  18023  66b3
  18024  66b3		       c5 8a		      CMP	missile0y
  18025  66b5
  18026  66b5		       b0 08		      BCS	.skipL0516_2
  18027  66b7
  18028  66b7		       a5 8a		      LDA	missile0y
  18029  66b9
  18030  66b9		       38		      SEC
  18031  66ba
  18032  66ba		       e5 cc		      SBC	temp2
  18033  66bc
  18034  66bc		       4c c2 b6 	      jmp	.skipelse26_2
  18035  66bf
  18036  66bf				   .skipL0516_2
  18037  66bf
  18038  66bf		       38		      SEC
  18039  66c0
  18040  66c0		       e5 8a		      SBC	missile0y
  18041  66c2
  18042  66c2				   .skipelse26_2
  18043  66c2
  18044  66c2		       85 d0		      STA	temp6
  18045  66c4
  18046  66c4
  18047  66c4
  18048  66c4		       a5 cb		      LDA	temp1
  18049  66c6
  18050  66c6		       18		      CLC
  18051  66c7
  18052  66c7		       69 03		      ADC	#3
  18053  66c9
  18054  66c9		       85 cc		      STA	temp2
  18055  66cb
  18056  66cb				   .L0571		;  temp3 =  ( rand & 3 ) 
  18057  66cb
  18058  66cb							; complex statement detected
  18059  66cb		       a5 d6		      lda	rand
  18060  66cd		       4a		      lsr
  18061  66ce				  -	      ifconst	rand16
  18062  66ce				  -	      rol	rand16
  18063  66ce					      endif
  18064  66ce		       90 02		      bcc	*+4
  18065  66d0		       49 b4		      eor	#$B4
  18066  66d2		       85 d6		      sta	rand
  18067  66d4				  -	      ifconst	rand16
  18068  66d4				  -	      eor	rand16
  18069  66d4					      endif
  18070  66d4		       29 03		      AND	#3
  18071  66d6		       85 cd		      STA	temp3
  18072  66d8				   .
  18073  66d8							; 
  18074  66d8
  18075  66d8				   .L0572		;  asm
  18076  66d8
  18077  66d8		       a5 cf		      LDA	temp5
  18078  66da
  18079  66da		       c5 cc		      CMP	temp2
  18080  66dc
  18081  66dc		       b0 29		      BCS	.skipL0520_2
  18082  66de
  18083  66de		       a5 d0		      LDA	temp6
  18084  66e0
  18085  66e0		       c9 08		      CMP	#8
  18086  66e2
  18087  66e2		       b0 23		      BCS	.skipL0520_2
  18088  66e4
  18089  66e4		       f8		      SED
  18090  66e5
  18091  66e5		       a5 c1		      LDA	player0score
  18092  66e7
  18093  66e7		       38		      SEC
  18094  66e8
  18095  66e8		       e5 cd		      SBC	temp3
  18096  66ea
  18097  66ea		       85 c1		      STA	player0score
  18098  66ec
  18099  66ec		       d8		      CLD
  18100  66ed
  18101  66ed		       a0 01		      LDY	#1
  18102  66ef
  18103  66ef		       a5 e9		      LDA	s
  18104  66f1
  18105  66f1		       4a		      LSR
  18106  66f2
  18107  66f2		       90 13		      BCC	.skipL0520_2
  18108  66f4
  18109  66f4		       a5 e9		      LDA	s
  18110  66f6
  18111  66f6		       29 fe		      AND	#254
  18112  66f8
  18113  66f8		       85 e9		      STA	s
  18114  66fa
  18115  66fa		       a9 a0		      LDA	#160
  18116  66fc
  18117  66fc		       85 e4		      STA	Shoot2_Y
  18118  66fe
  18119  66fe		       f8		      SED
  18120  66ff
  18121  66ff		       a5 c1		      LDA	player0score
  18122  6701
  18123  6701		       38		      SEC
  18124  6702
  18125  6702		       e9 05		      SBC	#$05
  18126  6704
  18127  6704		       85 c1		      STA	player0score
  18128  6706
  18129  6706		       d8		      CLD
  18130  6707
  18131  6707
  18132  6707
  18133  6707
  18134  6707
  18135  6707				   .skipL0520_2
  18136  6707
  18137  6707
  18138  6707
  18139  6707		       a5 cf		      LDA	temp5
  18140  6709
  18141  6709		       c5 cc		      CMP	temp2
  18142  670b
  18143  670b		       b0 29		      BCS	.NoNoNoNOOO
  18144  670d
  18145  670d		       a5 d0		      LDA	temp6
  18146  670f
  18147  670f		       c9 08		      CMP	#8
  18148  6711
  18149  6711		       b0 23		      BCS	.NoNoNoNOOO
  18150  6713
  18151  6713		       f8		      SED
  18152  6714
  18153  6714		       a5 c1		      LDA	player0score
  18154  6716
  18155  6716		       38		      SEC
  18156  6717
  18157  6717		       e5 cd		      SBC	temp3
  18158  6719
  18159  6719		       85 c1		      STA	player0score
  18160  671b
  18161  671b		       d8		      CLD
  18162  671c
  18163  671c		       a0 01		      LDY	#1
  18164  671e
  18165  671e		       a5 e9		      LDA	s
  18166  6720
  18167  6720		       4a		      LSR
  18168  6721
  18169  6721		       90 13		      BCC	.NoNoNoNOOO
  18170  6723
  18171  6723		       a5 e9		      LDA	s
  18172  6725
  18173  6725		       29 fe		      AND	#254
  18174  6727
  18175  6727		       85 e9		      STA	s
  18176  6729
  18177  6729		       a9 a0		      LDA	#160
  18178  672b
  18179  672b		       85 e4		      STA	Shoot2_Y
  18180  672d
  18181  672d		       f8		      SED
  18182  672e
  18183  672e		       a5 c1		      LDA	player0score
  18184  6730
  18185  6730		       38		      SEC
  18186  6731
  18187  6731		       e9 05		      SBC	#$05
  18188  6733
  18189  6733		       85 c1		      STA	player0score
  18190  6735
  18191  6735		       d8		      CLD
  18192  6736
  18193  6736				   .NoNoNoNOOO
  18194  6736
  18195  6736				   .
  18196  6736							; 
  18197  6736
  18198  6736				   .PeopleHurt2
  18199  6736							; PeopleHurt2
  18200  6736
  18201  6736				   .L0573		;  asm
  18202  6736
  18203  6736		       a5 85		      LDA	player1x
  18204  6738
  18205  6738		       18		      CLC
  18206  6739
  18207  6739		       69 04		      ADC	#4
  18208  673b
  18209  673b		       85 cc		      STA	temp2
  18210  673d
  18211  673d		       c5 ce		      CMP	temp4
  18212  673f
  18213  673f		       b0 08		      BCS	.skipL0516_55
  18214  6741
  18215  6741		       a5 ce		      LDA	temp4
  18216  6743
  18217  6743		       38		      SEC
  18218  6744
  18219  6744		       e5 cc		      SBC	temp2
  18220  6746
  18221  6746		       4c 4c b7 	      jmp	.skipelse25_55
  18222  6749
  18223  6749				   .skipL0516_55
  18224  6749
  18225  6749		       38		      SEC
  18226  674a
  18227  674a		       e5 ce		      SBC	temp4
  18228  674c
  18229  674c				   .skipelse25_55
  18230  674c
  18231  674c		       85 cf		      STA	temp5
  18232  674e
  18233  674e		       a5 8e		      LDA	player1y
  18234  6750
  18235  6750		       38		      SEC
  18236  6751
  18237  6751		       e9 05		      SBC	#5
  18238  6753
  18239  6753		       85 cc		      STA	temp2
  18240  6755
  18241  6755		       c5 8a		      CMP	missile0y
  18242  6757
  18243  6757		       b0 08		      BCS	.skipL0518_55
  18244  6759
  18245  6759		       a5 8a		      LDA	missile0y
  18246  675b
  18247  675b		       38		      SEC
  18248  675c
  18249  675c		       e5 cc		      SBC	temp2
  18250  675e
  18251  675e		       4c 64 b7 	      jmp	.skipelse26_55
  18252  6761
  18253  6761				   .skipL0518_55
  18254  6761
  18255  6761		       38		      SEC
  18256  6762
  18257  6762		       e5 8a		      SBC	missile0y
  18258  6764
  18259  6764				   .skipelse26_55
  18260  6764
  18261  6764		       85 d0		      STA	temp6
  18262  6766
  18263  6766
  18264  6766
  18265  6766		       c9 08		      CMP	#8
  18266  6768
  18267  6768		       b0 24		      BCS	.skipL0519_55
  18268  676a
  18269  676a		       a5 cf		      LDA	temp5
  18270  676c
  18271  676c		       c9 08		      CMP	#8
  18272  676e
  18273  676e		       b0 1e		      BCS	.skipL0519_55
  18274  6770
  18275  6770		       a0 01		      LDY	#1
  18276  6772
  18277  6772		       a9 78		      LDA	#120
  18278  6774
  18279  6774		       85 8e		      STA	player1y
  18280  6776
  18281  6776		       f8		      SED
  18282  6777
  18283  6777		       a5 d3		      LDA	player3score
  18284  6779
  18285  6779		       18		      CLC
  18286  677a
  18287  677a		       69 01		      ADC	#$01
  18288  677c
  18289  677c		       85 d3		      STA	player3score
  18290  677e
  18291  677e		       d8		      CLD
  18292  677f
  18293  677f		       a5 e9		      LDA	s
  18294  6781
  18295  6781		       4a		      LSR
  18296  6782
  18297  6782		       90 0a		      BCC	.skipL0519_55
  18298  6784
  18299  6784
  18300  6784
  18301  6784		       a5 e9		      LDA	s
  18302  6786
  18303  6786		       29 fe		      AND	#254
  18304  6788
  18305  6788		       85 e9		      STA	s
  18306  678a
  18307  678a		       a9 a0		      LDA	#160
  18308  678c
  18309  678c		       85 e4		      STA	Shoot2_Y
  18310  678e
  18311  678e				   .skipL0519_55
  18312  678e
  18313  678e				   .
  18314  678e							; 
  18315  678e
  18316  678e				   .L0574		;  asm
  18317  678e
  18318  678e		       a5 86		      LDA	player2x
  18319  6790
  18320  6790		       18		      CLC
  18321  6791
  18322  6791		       69 04		      ADC	#4
  18323  6793
  18324  6793		       85 cc		      STA	temp2
  18325  6795
  18326  6795		       c5 ce		      CMP	temp4
  18327  6797
  18328  6797		       b0 08		      BCS	.skipL0516_66
  18329  6799
  18330  6799		       a5 ce		      LDA	temp4
  18331  679b
  18332  679b		       38		      SEC
  18333  679c
  18334  679c		       e5 cc		      SBC	temp2
  18335  679e
  18336  679e		       4c a4 b7 	      jmp	.skipelse25_66
  18337  67a1
  18338  67a1				   .skipL0516_66
  18339  67a1
  18340  67a1		       38		      SEC
  18341  67a2
  18342  67a2		       e5 ce		      SBC	temp4
  18343  67a4
  18344  67a4				   .skipelse25_66
  18345  67a4
  18346  67a4		       85 cf		      STA	temp5
  18347  67a6
  18348  67a6		       a5 8f		      LDA	player2y
  18349  67a8
  18350  67a8		       38		      SEC
  18351  67a9
  18352  67a9		       e9 05		      SBC	#5
  18353  67ab
  18354  67ab		       85 cc		      STA	temp2
  18355  67ad
  18356  67ad		       c5 8a		      CMP	missile0y
  18357  67af
  18358  67af		       b0 08		      BCS	.skipL0518_66
  18359  67b1
  18360  67b1		       a5 8a		      LDA	missile0y
  18361  67b3
  18362  67b3		       38		      SEC
  18363  67b4
  18364  67b4		       e5 cc		      SBC	temp2
  18365  67b6
  18366  67b6		       4c bc b7 	      jmp	.skipelse26_66
  18367  67b9
  18368  67b9				   .skipL0518_66
  18369  67b9
  18370  67b9		       38		      SEC
  18371  67ba
  18372  67ba		       e5 8a		      SBC	missile0y
  18373  67bc
  18374  67bc				   .skipelse26_66
  18375  67bc
  18376  67bc		       85 d0		      STA	temp6
  18377  67be
  18378  67be
  18379  67be
  18380  67be		       c9 08		      CMP	#8
  18381  67c0
  18382  67c0		       b0 24		      BCS	.skipL0519_66
  18383  67c2
  18384  67c2		       a5 cf		      LDA	temp5
  18385  67c4
  18386  67c4		       c9 08		      CMP	#8
  18387  67c6
  18388  67c6		       b0 1e		      BCS	.skipL0519_66
  18389  67c8
  18390  67c8		       a0 01		      LDY	#1
  18391  67ca
  18392  67ca		       a9 78		      LDA	#120
  18393  67cc
  18394  67cc		       85 8f		      STA	player2y
  18395  67ce
  18396  67ce		       f8		      SED
  18397  67cf
  18398  67cf		       a5 d3		      LDA	player3score
  18399  67d1
  18400  67d1		       18		      CLC
  18401  67d2
  18402  67d2		       69 01		      ADC	#$01
  18403  67d4
  18404  67d4		       85 d3		      STA	player3score
  18405  67d6
  18406  67d6		       d8		      CLD
  18407  67d7
  18408  67d7		       a5 e9		      LDA	s
  18409  67d9
  18410  67d9		       4a		      LSR
  18411  67da
  18412  67da		       90 0a		      BCC	.skipL0519_66
  18413  67dc
  18414  67dc
  18415  67dc
  18416  67dc		       a5 e9		      LDA	s
  18417  67de
  18418  67de		       29 fe		      AND	#254
  18419  67e0
  18420  67e0		       85 e9		      STA	s
  18421  67e2
  18422  67e2		       a9 a0		      LDA	#160
  18423  67e4
  18424  67e4		       85 e4		      STA	Shoot2_Y
  18425  67e6
  18426  67e6				   .skipL0519_66
  18427  67e6
  18428  67e6				   .
  18429  67e6							; 
  18430  67e6
  18431  67e6				   .
  18432  67e6							; 
  18433  67e6
  18434  67e6				   .L0575		;  if w{3} then goto LookAt4_2
  18435  67e6
  18436  67e6		       a5 ed		      LDA	w
  18437  67e8		       29 08		      AND	#8
  18438  67ea		       f0 03		      BEQ	.skipL0575
  18439  67ec				   .condpart210
  18440  67ec		       4c 47 b8 	      jmp	.LookAt4_2
  18441  67ef
  18442  67ef				   .skipL0575
  18443  67ef				   .
  18444  67ef							; 
  18445  67ef
  18446  67ef				   .L0576		;  asm
  18447  67ef
  18448  67ef		       a5 87		      LDA	player3x
  18449  67f1
  18450  67f1		       18		      CLC
  18451  67f2
  18452  67f2		       69 04		      ADC	#4
  18453  67f4
  18454  67f4		       85 cc		      STA	temp2
  18455  67f6
  18456  67f6		       c5 ce		      CMP	temp4
  18457  67f8
  18458  67f8		       b0 08		      BCS	.skipL0516_77
  18459  67fa
  18460  67fa		       a5 ce		      LDA	temp4
  18461  67fc
  18462  67fc		       38		      SEC
  18463  67fd
  18464  67fd		       e5 cc		      SBC	temp2
  18465  67ff
  18466  67ff		       4c 05 b8 	      jmp	.skipelse25_77
  18467  6802
  18468  6802				   .skipL0516_77
  18469  6802
  18470  6802		       38		      SEC
  18471  6803
  18472  6803		       e5 ce		      SBC	temp4
  18473  6805
  18474  6805				   .skipelse25_77
  18475  6805
  18476  6805		       85 cf		      STA	temp5
  18477  6807
  18478  6807		       a5 90		      LDA	player3y
  18479  6809
  18480  6809		       38		      SEC
  18481  680a
  18482  680a		       e9 05		      SBC	#5
  18483  680c
  18484  680c		       85 cc		      STA	temp2
  18485  680e
  18486  680e		       c5 8a		      CMP	missile0y
  18487  6810
  18488  6810		       b0 08		      BCS	.skipL0518_77
  18489  6812
  18490  6812		       a5 8a		      LDA	missile0y
  18491  6814
  18492  6814		       38		      SEC
  18493  6815
  18494  6815		       e5 cc		      SBC	temp2
  18495  6817
  18496  6817		       4c 1d b8 	      jmp	.skipelse26_77
  18497  681a
  18498  681a				   .skipL0518_77
  18499  681a
  18500  681a		       38		      SEC
  18501  681b
  18502  681b		       e5 8a		      SBC	missile0y
  18503  681d
  18504  681d				   .skipelse26_77
  18505  681d
  18506  681d		       85 d0		      STA	temp6
  18507  681f
  18508  681f
  18509  681f
  18510  681f		       c9 08		      CMP	#8
  18511  6821
  18512  6821		       b0 24		      BCS	.skipL0519_77
  18513  6823
  18514  6823		       a5 cf		      LDA	temp5
  18515  6825
  18516  6825		       c9 04		      CMP	#4
  18517  6827
  18518  6827		       b0 1e		      BCS	.skipL0519_77
  18519  6829
  18520  6829		       a0 01		      LDY	#1
  18521  682b
  18522  682b		       a9 78		      LDA	#120
  18523  682d
  18524  682d		       85 90		      STA	player3y
  18525  682f
  18526  682f		       f8		      SED
  18527  6830
  18528  6830		       a5 d3		      LDA	player3score
  18529  6832
  18530  6832		       18		      CLC
  18531  6833
  18532  6833		       69 01		      ADC	#$01
  18533  6835
  18534  6835		       85 d3		      STA	player3score
  18535  6837
  18536  6837		       d8		      CLD
  18537  6838
  18538  6838		       a5 e9		      LDA	s
  18539  683a
  18540  683a		       4a		      LSR
  18541  683b
  18542  683b		       90 0a		      BCC	.skipL0519_77
  18543  683d
  18544  683d
  18545  683d
  18546  683d		       a5 e9		      LDA	s
  18547  683f
  18548  683f		       29 fe		      AND	#254
  18549  6841
  18550  6841		       85 e9		      STA	s
  18551  6843
  18552  6843		       a9 a0		      LDA	#160
  18553  6845
  18554  6845		       85 e4		      STA	Shoot2_Y
  18555  6847
  18556  6847				   .skipL0519_77
  18557  6847
  18558  6847				   .LookAt4_2
  18559  6847							; LookAt4_2
  18560  6847
  18561  6847				   .L0577		;  if w{4} then goto CanReturn
  18562  6847
  18563  6847		       a5 ed		      LDA	w
  18564  6849		       29 10		      AND	#16
  18565  684b		       f0 03		      BEQ	.skipL0577
  18566  684d				   .condpart211
  18567  684d		       4c a8 b8 	      jmp	.CanReturn
  18568  6850
  18569  6850				   .skipL0577
  18570  6850				   .
  18571  6850							; 
  18572  6850
  18573  6850				   .L0578		;  asm
  18574  6850
  18575  6850		       a5 88		      LDA	player4x
  18576  6852
  18577  6852		       18		      CLC
  18578  6853
  18579  6853		       69 04		      ADC	#4
  18580  6855
  18581  6855		       85 cc		      STA	temp2
  18582  6857
  18583  6857		       c5 ce		      CMP	temp4
  18584  6859
  18585  6859		       b0 08		      BCS	.skipL0516_88
  18586  685b
  18587  685b		       a5 ce		      LDA	temp4
  18588  685d
  18589  685d		       38		      SEC
  18590  685e
  18591  685e		       e5 cc		      SBC	temp2
  18592  6860
  18593  6860		       4c 66 b8 	      jmp	.skipelse25_88
  18594  6863
  18595  6863				   .skipL0516_88
  18596  6863
  18597  6863		       38		      SEC
  18598  6864
  18599  6864		       e5 ce		      SBC	temp4
  18600  6866
  18601  6866				   .skipelse25_88
  18602  6866
  18603  6866		       85 cf		      STA	temp5
  18604  6868
  18605  6868		       a5 91		      LDA	player4y
  18606  686a
  18607  686a		       38		      SEC
  18608  686b
  18609  686b		       e9 05		      SBC	#5
  18610  686d
  18611  686d		       85 cc		      STA	temp2
  18612  686f
  18613  686f		       c5 8a		      CMP	missile0y
  18614  6871
  18615  6871		       b0 08		      BCS	.skipL0518_88
  18616  6873
  18617  6873		       a5 8a		      LDA	missile0y
  18618  6875
  18619  6875		       38		      SEC
  18620  6876
  18621  6876		       e5 cc		      SBC	temp2
  18622  6878
  18623  6878		       4c 7e b8 	      jmp	.skipelse26_88
  18624  687b
  18625  687b				   .skipL0518_88
  18626  687b
  18627  687b		       38		      SEC
  18628  687c
  18629  687c		       e5 8a		      SBC	missile0y
  18630  687e
  18631  687e				   .skipelse26_88
  18632  687e
  18633  687e		       85 d0		      STA	temp6
  18634  6880
  18635  6880
  18636  6880
  18637  6880		       c9 08		      CMP	#8
  18638  6882
  18639  6882		       b0 24		      BCS	.skipL0519_88
  18640  6884
  18641  6884		       a5 cf		      LDA	temp5
  18642  6886
  18643  6886		       c9 04		      CMP	#4
  18644  6888
  18645  6888		       b0 1e		      BCS	.skipL0519_88
  18646  688a
  18647  688a		       a0 01		      LDY	#1
  18648  688c
  18649  688c		       a9 78		      LDA	#120
  18650  688e
  18651  688e		       85 91		      STA	player4y
  18652  6890
  18653  6890		       f8		      SED
  18654  6891
  18655  6891		       a5 d3		      LDA	player3score
  18656  6893
  18657  6893		       18		      CLC
  18658  6894
  18659  6894		       69 01		      ADC	#$01
  18660  6896
  18661  6896		       85 d3		      STA	player3score
  18662  6898
  18663  6898		       d8		      CLD
  18664  6899
  18665  6899		       a5 e9		      LDA	s
  18666  689b
  18667  689b		       4a		      LSR
  18668  689c
  18669  689c		       90 0a		      BCC	.skipL0519_88
  18670  689e
  18671  689e
  18672  689e
  18673  689e		       a5 e9		      LDA	s
  18674  68a0
  18675  68a0		       29 fe		      AND	#254
  18676  68a2
  18677  68a2		       85 e9		      STA	s
  18678  68a4
  18679  68a4		       a9 a0		      LDA	#160
  18680  68a6
  18681  68a6		       85 e4		      STA	Shoot2_Y
  18682  68a8
  18683  68a8				   .skipL0519_88
  18684  68a8
  18685  68a8				   .
  18686  68a8							; 
  18687  68a8
  18688  68a8				   .CanReturn
  18689  68a8							; CanReturn
  18690  68a8
  18691  68a8				   .L0579		;  asm
  18692  68a8
  18693  68a8		       c0 01		      CPY	#1
  18694  68aa
  18695  68aa		       d0 0c		      BNE	.NO_SOUNDZ4
  18696  68ac
  18697  68ac		       a9 08		      LDA	#8
  18698  68ae
  18699  68ae		       85 1a		      STA	AUDV1
  18700  68b0
  18701  68b0		       a9 0f		      LDA	#15
  18702  68b2
  18703  68b2		       85 16		      STA	AUDC1
  18704  68b4
  18705  68b4		       a9 05		      LDA	#5
  18706  68b6
  18707  68b6		       85 18		      STA	AUDF1
  18708  68b8
  18709  68b8				   .NO_SOUNDZ4
  18710  68b8
  18711  68b8		       a2 00		      LDX	#$00
  18712  68ba
  18713  68ba		       a5 df		      LDA	MaxLife
  18714  68bc
  18715  68bc		       c5 c1		      CMP	player0score
  18716  68be
  18717  68be		       b0 02		      BCS	.skipL0633_1
  18718  68c0
  18719  68c0		       86 c1		      STX	player0score
  18720  68c2
  18721  68c2				   .skipL0633_1
  18722  68c2
  18723  68c2		       c5 c2		      CMP	player1score
  18724  68c4
  18725  68c4		       b0 02		      BCS	.skipL0634_1
  18726  68c6
  18727  68c6		       86 c2		      STX	player1score
  18728  68c8
  18729  68c8				   .skipL0634_1
  18730  68c8
  18731  68c8				   .
  18732  68c8							; 
  18733  68c8
  18734  68c8				   .
  18735  68c8							; 
  18736  68c8
  18737  68c8				   .L0580		;  return otherbank
  18738  68c8
  18739  68c8		       4c dd ff 	      JMP	BS_return
  18740  68cb				   .
  18741  68cb							; 
  18742  68cb
  18743  68cb				   .
  18744  68cb							; 
  18745  68cb
  18746  68cb				   .
  18747  68cb							; 
  18748  68cb
  18749  68cb				   .Ending
  18750  68cb							; Ending
  18751  68cb
  18752  68cb				   .L0581		;  playfield:
  18753  68cb
  18754  68cb		       a9 6e		      LDA	#<PF1_data3
  18755  68cd		       85 bb		      STA	PF1pointer
  18756  68cf		       a9 fd		      LDA	#>PF1_data3
  18757  68d1		       85 bc		      STA	PF1pointer+1
  18758  68d3		       a9 84		      LDA	#<PF2_data3
  18759  68d5		       85 bd		      STA	PF2pointer
  18760  68d7		       a9 fd		      LDA	#>PF2_data3
  18761  68d9		       85 be		      STA	PF2pointer+1
  18762  68db				   .L0582		;  COLUBK = $00 :  player2y = 120 :  player3y = 120 :	player4y = 120 :  player5y = 120
  18763  68db
  18764  68db		       a9 00		      LDA	#$00
  18765  68dd		       85 09		      STA	COLUBK
  18766  68df		       a9 78		      LDA	#120
  18767  68e1		       85 8f		      STA	player2y
  18768  68e3		       85 90		      STA	player3y
  18769  68e5		       85 91		      STA	player4y
  18770  68e7		       85 92		      STA	player5y
  18771  68e9				   .
  18772  68e9							; 
  18773  68e9
  18774  68e9				   .L0583		;  player0:
  18775  68e9
  18776  68e9		       a2 ca		      LDX	#<playerL0583_0
  18777  68eb		       86 a2		      STX	player0pointerlo
  18778  68ed		       a9 f6		      LDA	#>playerL0583_0
  18779  68ef		       85 a3		      STA	player0pointerhi
  18780  68f1		       a9 19		      LDA	#25
  18781  68f3		       85 b0		      STA	player0height
  18782  68f5				   .L0584		;  player1:
  18783  68f5
  18784  68f5		       a2 e3		      LDX	#<playerL0584_1
  18785  68f7		       86 a6		      STX	player1pointerlo
  18786  68f9		       a9 f6		      LDA	#>playerL0584_1
  18787  68fb		       85 ab		      STA	player1pointerhi
  18788  68fd		       a9 19		      LDA	#25
  18789  68ff		       85 b1		      STA	player1height
  18790  6901				   .L0585		;  NUSIZ0 = $00 :  _NUSIZ1 = $00 :  player0scorecolor = $00 :	player1scorecolor = $00 :  _NUSIZ1{3} = 1 :  w{0}  =  0 :  AUDV0 = 0 :	AUDV1 = 0 :  REFP0 = 0 :  player2scorecolor = $48 :  player3scorecolor = $88
  18791  6901
  18792  6901		       a9 00		      LDA	#$00
  18793  6903		       85 04		      STA	NUSIZ0
  18794  6905		       85 93		      STA	_NUSIZ1
  18795  6907		       85 c0		      STA	player0scorecolor
  18796  6909		       85 bf		      STA	player1scorecolor
  18797  690b		       a5 93		      LDA	_NUSIZ1
  18798  690d		       09 08		      ORA	#8
  18799  690f		       85 93		      STA	_NUSIZ1
  18800  6911		       a5 ed		      LDA	w
  18801  6913		       29 fe		      AND	#254
  18802  6915		       85 ed		      STA	w
  18803  6917		       a9 00		      LDA	#0
  18804  6919		       85 19		      STA	AUDV0
  18805  691b		       85 1a		      STA	AUDV1
  18806  691d		       85 0b		      STA	REFP0
  18807  691f		       a9 48		      LDA	#$48
  18808  6921		       85 d4		      STA	player2scorecolor
  18809  6923		       a9 88		      LDA	#$88
  18810  6925		       85 c9		      STA	player3scorecolor
  18811  6927				   .L0586		;  player0x = Reaper1_X :  player0y = Reaper1_Y :  player1x = Reaper2_X :  player1y = Reaper2_Y
  18812  6927
  18813  6927		       a5 da		      LDA	Reaper1_X
  18814  6929		       85 84		      STA	player0x
  18815  692b		       a5 dc		      LDA	Reaper1_Y
  18816  692d		       85 8d		      STA	player0y
  18817  692f		       a5 dd		      LDA	Reaper2_X
  18818  6931		       85 85		      STA	player1x
  18819  6933		       a5 de		      LDA	Reaper2_Y
  18820  6935		       85 8e		      STA	player1y
  18821  6937				   .CountTillTheyAreFar
  18822  6937							; CountTillTheyAreFar
  18823  6937
  18824  6937				   .L0587		;  COLUP0 = $46 :  _COLUP1 = $86
  18825  6937
  18826  6937		       a9 46		      LDA	#$46
  18827  6939		       85 06		      STA	COLUP0
  18828  693b		       a9 86		      LDA	#$86
  18829  693d		       85 98		      STA	_COLUP1
  18830  693f				   .L0588		;  if player0x = 56  &&  player1x = 105  &&  player0y = 45  &&  player1y = 43 then ThunderCount = 0 :	StormPower = $0e :  Delay = 48 :  goto CallThunder
  18831  693f
  18832  693f		       a5 84		      LDA	player0x
  18833  6941		       c9 38		      CMP	#56
  18834  6943		       d0 21		      BNE	.skipL0588
  18835  6945				   .condpart212
  18836  6945		       a5 85		      LDA	player1x
  18837  6947		       c9 69		      CMP	#105
  18838  6949		       d0 1b		      BNE	.skip212then
  18839  694b				   .condpart213
  18840  694b		       a5 8d		      LDA	player0y
  18841  694d		       c9 2d		      CMP	#45
  18842  694f		       d0 15		      BNE	.skip213then
  18843  6951				   .condpart214
  18844  6951		       a5 8e		      LDA	player1y
  18845  6953		       c9 2b		      CMP	#43
  18846  6955		       d0 0f		      BNE	.skip214then
  18847  6957				   .condpart215
  18848  6957		       a9 00		      LDA	#0
  18849  6959		       85 dc		      STA	ThunderCount
  18850  695b		       a9 0e		      LDA	#$0e
  18851  695d		       85 dd		      STA	StormPower
  18852  695f		       a9 30		      LDA	#48
  18853  6961		       85 de		      STA	Delay
  18854  6963		       4c c9 b9 	      jmp	.CallThunder
  18855  6966
  18856  6966				   .skip214then
  18857  6966				   .skip213then
  18858  6966				   .skip212then
  18859  6966				   .skipL0588
  18860  6966				   .L0589		;  if player0x < 56 then player0x = player0x + 1
  18861  6966
  18862  6966		       a5 84		      LDA	player0x
  18863  6968		       c9 38		      CMP	#56
  18864  696a		       b0 02		      BCS	.skipL0589
  18865  696c				   .condpart216
  18866  696c		       e6 84		      INC	player0x
  18867  696e				   .skipL0589
  18868  696e				   .L0590		;  if player0y > 45 then player0y = player0y - 1
  18869  696e
  18870  696e		       a9 2d		      LDA	#45
  18871  6970		       c5 8d		      CMP	player0y
  18872  6972		       b0 02		      BCS	.skipL0590
  18873  6974				   .condpart217
  18874  6974		       c6 8d		      DEC	player0y
  18875  6976				   .skipL0590
  18876  6976				   .L0591		;  if player0x > 56 then player0x = player0x - 1
  18877  6976
  18878  6976		       a9 38		      LDA	#56
  18879  6978		       c5 84		      CMP	player0x
  18880  697a		       b0 02		      BCS	.skipL0591
  18881  697c				   .condpart218
  18882  697c		       c6 84		      DEC	player0x
  18883  697e				   .skipL0591
  18884  697e				   .L0592		;  if player0y < 45 then player0y = player0y + 1
  18885  697e
  18886  697e		       a5 8d		      LDA	player0y
  18887  6980		       c9 2d		      CMP	#45
  18888  6982		       b0 02		      BCS	.skipL0592
  18889  6984				   .condpart219
  18890  6984		       e6 8d		      INC	player0y
  18891  6986				   .skipL0592
  18892  6986				   .L0593		;  if player1x < 105 then player1x = player1x + 1
  18893  6986
  18894  6986		       a5 85		      LDA	player1x
  18895  6988		       c9 69		      CMP	#105
  18896  698a		       b0 02		      BCS	.skipL0593
  18897  698c				   .condpart220
  18898  698c		       e6 85		      INC	player1x
  18899  698e				   .skipL0593
  18900  698e				   .L0594		;  if player1y > 43 then player1y = player1y - 1
  18901  698e
  18902  698e		       a9 2b		      LDA	#43
  18903  6990		       c5 8e		      CMP	player1y
  18904  6992		       b0 02		      BCS	.skipL0594
  18905  6994				   .condpart221
  18906  6994		       c6 8e		      DEC	player1y
  18907  6996				   .skipL0594
  18908  6996				   .L0595		;  if player1x > 105 then player1x = player1x - 1
  18909  6996
  18910  6996		       a9 69		      LDA	#105
  18911  6998		       c5 85		      CMP	player1x
  18912  699a		       b0 02		      BCS	.skipL0595
  18913  699c				   .condpart222
  18914  699c		       c6 85		      DEC	player1x
  18915  699e				   .skipL0595
  18916  699e				   .L0596		;  if player1y < 43 then player1y = player1y + 1
  18917  699e
  18918  699e		       a5 8e		      LDA	player1y
  18919  69a0		       c9 2b		      CMP	#43
  18920  69a2		       b0 02		      BCS	.skipL0596
  18921  69a4				   .condpart223
  18922  69a4		       e6 8e		      INC	player1y
  18923  69a6				   .skipL0596
  18924  69a6				   .L0597		;  bally = 160 :  missile1y = 160 :  missile0y = 160
  18925  69a6
  18926  69a6		       a9 a0		      LDA	#160
  18927  69a8		       85 8c		      STA	bally
  18928  69aa		       85 8b		      STA	missile1y
  18929  69ac		       85 8a		      STA	missile0y
  18930  69ae				   .L0598		;  drawscreen
  18931  69ae
  18932  69ae		       85 d1		      sta	temp7
  18933  69b0		       a9 b9		      lda	#>(ret_point7-1)
  18934  69b2		       48		      pha
  18935  69b3		       a9 c5		      lda	#<(ret_point7-1)
  18936  69b5		       48		      pha
  18937  69b6		       a9 f0		      lda	#>(drawscreen-1)
  18938  69b8		       48		      pha
  18939  69b9		       a9 39		      lda	#<(drawscreen-1)
  18940  69bb		       48		      pha
  18941  69bc		       a5 d1		      lda	temp7
  18942  69be		       48		      pha
  18943  69bf		       8a		      txa
  18944  69c0		       48		      pha
  18945  69c1		       a2 08		      ldx	#8
  18946  69c3		       4c eb ff 	      jmp	BS_jsr
  18947  69c6				   ret_point7
  18948  69c6				   .
  18949  69c6							; 
  18950  69c6
  18951  69c6				   .L0599		;  goto CountTillTheyAreFar
  18952  69c6
  18953  69c6		       4c 37 b9 	      jmp	.CountTillTheyAreFar
  18954  69c9
  18955  69c9				   .CallThunder
  18956  69c9							; CallThunder
  18957  69c9
  18958  69c9				   .L0600		;  COLUBK = StormPower
  18959  69c9
  18960  69c9		       a5 dd		      LDA	StormPower
  18961  69cb		       85 09		      STA	COLUBK
  18962  69cd				   .L0601		;  if StormPower > $08 then COLUP0 = $00 :  _COLUP1 = $00 else COLUP0 = $46 :	_COLUP1 = $86
  18963  69cd
  18964  69cd		       a9 08		      LDA	#$08
  18965  69cf		       c5 dd		      CMP	StormPower
  18966  69d1		       b0 09		      BCS	.skipL0601
  18967  69d3				   .condpart224
  18968  69d3		       a9 00		      LDA	#$00
  18969  69d5		       85 06		      STA	COLUP0
  18970  69d7		       85 98		      STA	_COLUP1
  18971  69d9		       4c e4 b9 	      jmp	.skipelse18
  18972  69dc				   .skipL0601
  18973  69dc		       a9 46		      LDA	#$46
  18974  69de		       85 06		      STA	COLUP0
  18975  69e0		       a9 86		      LDA	#$86
  18976  69e2		       85 98		      STA	_COLUP1
  18977  69e4				   .skipelse18
  18978  69e4				   .L0602		;  AUDV0 = StormPower :  AUDC0 = 8 :  AUDF0 = 20 - StormPower
  18979  69e4
  18980  69e4		       a5 dd		      LDA	StormPower
  18981  69e6		       85 19		      STA	AUDV0
  18982  69e8		       a9 08		      LDA	#8
  18983  69ea		       85 15		      STA	AUDC0
  18984  69ec		       a9 14		      LDA	#20
  18985  69ee		       38		      SEC
  18986  69ef		       e5 dd		      SBC	StormPower
  18987  69f1		       85 17		      STA	AUDF0
  18988  69f3				   .L0603		;  if StormPower > $00 then dec StormPower = StormPower - $01 else Delay = Delay - 1
  18989  69f3
  18990  69f3		       a9 00		      LDA	#$00
  18991  69f5		       c5 dd		      CMP	StormPower
  18992  69f7		       b0 0c		      BCS	.skipL0603
  18993  69f9				   .condpart225
  18994  69f9		       f8		      SED
  18995  69fa		       a5 dd		      LDA	StormPower
  18996  69fc		       38		      SEC
  18997  69fd		       e9 01		      SBC	#$01
  18998  69ff		       85 dd		      STA	StormPower
  18999  6a01		       d8		      CLD
  19000  6a02		       4c 07 ba 	      jmp	.skipelse19
  19001  6a05				   .skipL0603
  19002  6a05		       c6 de		      DEC	Delay
  19003  6a07				   .skipelse19
  19004  6a07				   .L0604		;  if Delay = 0 then ThunderCount = ThunderCount + 1 :  StormPower = $0e :  Delay = 48
  19005  6a07
  19006  6a07		       a5 de		      LDA	Delay
  19007  6a09		       c9 00		      CMP	#0
  19008  6a0b		       d0 0a		      BNE	.skipL0604
  19009  6a0d				   .condpart226
  19010  6a0d		       e6 dc		      INC	ThunderCount
  19011  6a0f		       a9 0e		      LDA	#$0e
  19012  6a11		       85 dd		      STA	StormPower
  19013  6a13		       a9 30		      LDA	#48
  19014  6a15		       85 de		      STA	Delay
  19015  6a17				   .skipL0604
  19016  6a17				   .L0605		;  drawscreen
  19017  6a17
  19018  6a17		       85 d1		      sta	temp7
  19019  6a19		       a9 ba		      lda	#>(ret_point8-1)
  19020  6a1b		       48		      pha
  19021  6a1c		       a9 2e		      lda	#<(ret_point8-1)
  19022  6a1e		       48		      pha
  19023  6a1f		       a9 f0		      lda	#>(drawscreen-1)
  19024  6a21		       48		      pha
  19025  6a22		       a9 39		      lda	#<(drawscreen-1)
  19026  6a24		       48		      pha
  19027  6a25		       a5 d1		      lda	temp7
  19028  6a27		       48		      pha
  19029  6a28		       8a		      txa
  19030  6a29		       48		      pha
  19031  6a2a		       a2 08		      ldx	#8
  19032  6a2c		       4c eb ff 	      jmp	BS_jsr
  19033  6a2f				   ret_point8
  19034  6a2f				   .L0606		;  if ThunderCount > 2 then Delay = 48 :  goto ThunderGO
  19035  6a2f
  19036  6a2f		       a9 02		      LDA	#2
  19037  6a31		       c5 dc		      CMP	ThunderCount
  19038  6a33		       b0 07		      BCS	.skipL0606
  19039  6a35				   .condpart227
  19040  6a35		       a9 30		      LDA	#48
  19041  6a37		       85 de		      STA	Delay
  19042  6a39		       4c 3f ba 	      jmp	.ThunderGO
  19043  6a3c
  19044  6a3c				   .skipL0606
  19045  6a3c				   .
  19046  6a3c							; 
  19047  6a3c
  19048  6a3c				   .L0607		;  goto CallThunder
  19049  6a3c
  19050  6a3c		       4c c9 b9 	      jmp	.CallThunder
  19051  6a3f
  19052  6a3f				   .ThunderGO
  19053  6a3f							; ThunderGO
  19054  6a3f
  19055  6a3f				   .L0608		;  if Kills1 = Kills2 then goto TextDraw
  19056  6a3f
  19057  6a3f		       a5 d2		      LDA	Kills1
  19058  6a41		       c5 d3		      CMP	Kills2
  19059  6a43		       d0 03		      BNE	.skipL0608
  19060  6a45				   .condpart228
  19061  6a45		       4c b1 bb 	      jmp	.TextDraw
  19062  6a48
  19063  6a48				   .skipL0608
  19064  6a48				   .L0609		;  COLUBK = $0e :  COLUP0 = $00 :  _COLUP1 = $00
  19065  6a48
  19066  6a48		       a9 0e		      LDA	#$0e
  19067  6a4a		       85 09		      STA	COLUBK
  19068  6a4c		       a9 00		      LDA	#$00
  19069  6a4e		       85 06		      STA	COLUP0
  19070  6a50		       85 98		      STA	_COLUP1
  19071  6a52				   .L0610		;  e{0} = !e{0}
  19072  6a52
  19073  6a52		       a5 db		      LDA	e
  19074  6a54		       29 01		      AND	#1
  19075  6a56		       08		      PHP
  19076  6a57		       a5 db		      LDA	e
  19077  6a59		       29 fe		      AND	#254
  19078  6a5b		       28		      PLP
  19079  6a5c		       d0 02		      .byte.b	$D0, $02
  19080  6a5e		       09 01		      ORA	#1
  19081  6a60		       85 db		      STA	e
  19082  6a62				   .L0611		;  if e{0} then player0x = 98 :  REFP0 = 8 else player0x = 56 :  REFP0 = 0
  19083  6a62
  19084  6a62		       a5 db		      LDA	e
  19085  6a64		       4a		      LSR
  19086  6a65		       90 0b		      BCC	.skipL0611
  19087  6a67				   .condpart229
  19088  6a67		       a9 62		      LDA	#98
  19089  6a69		       85 84		      STA	player0x
  19090  6a6b		       a9 08		      LDA	#8
  19091  6a6d		       85 0b		      STA	REFP0
  19092  6a6f		       4c 7a ba 	      jmp	.skipelse20
  19093  6a72				   .skipL0611
  19094  6a72		       a9 38		      LDA	#56
  19095  6a74		       85 84		      STA	player0x
  19096  6a76		       a9 00		      LDA	#0
  19097  6a78		       85 0b		      STA	REFP0
  19098  6a7a				   .skipelse20
  19099  6a7a				   .L0612		;  if Kills1 > Kills2 then player1x = 106 else player1x = 64
  19100  6a7a
  19101  6a7a		       a5 d3		      LDA	Kills2
  19102  6a7c		       c5 d2		      CMP	Kills1
  19103  6a7e		       b0 07		      BCS	.skipL0612
  19104  6a80				   .condpart230
  19105  6a80		       a9 6a		      LDA	#106
  19106  6a82		       85 85		      STA	player1x
  19107  6a84		       4c 8b ba 	      jmp	.skipelse21
  19108  6a87				   .skipL0612
  19109  6a87		       a9 40		      LDA	#64
  19110  6a89		       85 85		      STA	player1x
  19111  6a8b				   .skipelse21
  19112  6a8b				   .L0613		;  player1y = 80 :  player1:
  19113  6a8b
  19114  6a8b		       a9 50		      LDA	#80
  19115  6a8d		       85 8e		      STA	player1y
  19116  6a8f		       a2 5a		      LDX	#<playerL0613_1
  19117  6a91		       86 a6		      STX	player1pointerlo
  19118  6a93		       a9 f7		      LDA	#>playerL0613_1
  19119  6a95		       85 ab		      STA	player1pointerhi
  19120  6a97		       a9 3d		      LDA	#61
  19121  6a99		       85 b1		      STA	player1height
  19122  6a9b				   .L0614		;  Delay = Delay - 1 :  AUDV0 = 10 :  AUDC0 = 7 :  AUDF0 =  ( rand & 15 )  + 1
  19123  6a9b
  19124  6a9b		       c6 de		      DEC	Delay
  19125  6a9d		       a9 0a		      LDA	#10
  19126  6a9f		       85 19		      STA	AUDV0
  19127  6aa1		       a9 07		      LDA	#7
  19128  6aa3		       85 15		      STA	AUDC0
  19129  6aa5							; complex statement detected
  19130  6aa5		       a5 d6		      lda	rand
  19131  6aa7		       4a		      lsr
  19132  6aa8				  -	      ifconst	rand16
  19133  6aa8				  -	      rol	rand16
  19134  6aa8					      endif
  19135  6aa8		       90 02		      bcc	*+4
  19136  6aaa		       49 b4		      eor	#$B4
  19137  6aac		       85 d6		      sta	rand
  19138  6aae				  -	      ifconst	rand16
  19139  6aae				  -	      eor	rand16
  19140  6aae					      endif
  19141  6aae		       29 0f		      AND	#15
  19142  6ab0		       18		      CLC
  19143  6ab1		       69 01		      ADC	#1
  19144  6ab3		       85 17		      STA	AUDF0
  19145  6ab5				   .
  19146  6ab5							; 
  19147  6ab5
  19148  6ab5				   .L0615		;  drawscreen
  19149  6ab5
  19150  6ab5		       85 d1		      sta	temp7
  19151  6ab7		       a9 ba		      lda	#>(ret_point9-1)
  19152  6ab9		       48		      pha
  19153  6aba		       a9 cc		      lda	#<(ret_point9-1)
  19154  6abc		       48		      pha
  19155  6abd		       a9 f0		      lda	#>(drawscreen-1)
  19156  6abf		       48		      pha
  19157  6ac0		       a9 39		      lda	#<(drawscreen-1)
  19158  6ac2		       48		      pha
  19159  6ac3		       a5 d1		      lda	temp7
  19160  6ac5		       48		      pha
  19161  6ac6		       8a		      txa
  19162  6ac7		       48		      pha
  19163  6ac8		       a2 08		      ldx	#8
  19164  6aca		       4c eb ff 	      jmp	BS_jsr
  19165  6acd				   ret_point9
  19166  6acd				   .L0616		;  if Delay = 0 then goto Ashes
  19167  6acd
  19168  6acd		       a5 de		      LDA	Delay
  19169  6acf		       c9 00		      CMP	#0
  19170  6ad1		       d0 03		      BNE	.skipL0616
  19171  6ad3				   .condpart231
  19172  6ad3		       4c d9 ba 	      jmp	.Ashes
  19173  6ad6
  19174  6ad6				   .skipL0616
  19175  6ad6				   .L0617		;  goto ThunderGO
  19176  6ad6
  19177  6ad6		       4c 3f ba 	      jmp	.ThunderGO
  19178  6ad9
  19179  6ad9				   .Ashes
  19180  6ad9							; Ashes
  19181  6ad9
  19182  6ad9				   .L0618		;  if Kills1 > Kills2 then player0x = 56 :  player1x = 105 :  _NUSIZ1{3} = 1 else player0x = 98 :  player1x = 62 :  _NUSIZ1{3} = 0
  19183  6ad9
  19184  6ad9		       a5 d3		      LDA	Kills2
  19185  6adb		       c5 d2		      CMP	Kills1
  19186  6add		       b0 11		      BCS	.skipL0618
  19187  6adf				   .condpart232
  19188  6adf		       a9 38		      LDA	#56
  19189  6ae1		       85 84		      STA	player0x
  19190  6ae3		       a9 69		      LDA	#105
  19191  6ae5		       85 85		      STA	player1x
  19192  6ae7		       a5 93		      LDA	_NUSIZ1
  19193  6ae9		       09 08		      ORA	#8
  19194  6aeb		       85 93		      STA	_NUSIZ1
  19195  6aed		       4c fe ba 	      jmp	.skipelse22
  19196  6af0				   .skipL0618
  19197  6af0		       a9 62		      LDA	#98
  19198  6af2		       85 84		      STA	player0x
  19199  6af4		       a9 3e		      LDA	#62
  19200  6af6		       85 85		      STA	player1x
  19201  6af8		       a5 93		      LDA	_NUSIZ1
  19202  6afa		       29 f7		      AND	#247
  19203  6afc		       85 93		      STA	_NUSIZ1
  19204  6afe				   .skipelse22
  19205  6afe				   .L0619		;  player1y = 43 :  Delay = 31
  19206  6afe
  19207  6afe		       a9 2b		      LDA	#43
  19208  6b00		       85 8e		      STA	player1y
  19209  6b02		       a9 1f		      LDA	#31
  19210  6b04		       85 de		      STA	Delay
  19211  6b06				   .AshesLoop
  19212  6b06							; AshesLoop
  19213  6b06
  19214  6b06				   .L0620		;  if Kills1 > Kills2 then COLUP0 = $46 :  REFP0 = 0 :  _COLUP1 = $86 else COLUP0 = $86 :  _COLUP1 = $46  :  REFP0 = 8
  19215  6b06
  19216  6b06		       a5 d3		      LDA	Kills2
  19217  6b08		       c5 d2		      CMP	Kills1
  19218  6b0a		       b0 0f		      BCS	.skipL0620
  19219  6b0c				   .condpart233
  19220  6b0c		       a9 46		      LDA	#$46
  19221  6b0e		       85 06		      STA	COLUP0
  19222  6b10		       a9 00		      LDA	#0
  19223  6b12		       85 0b		      STA	REFP0
  19224  6b14		       a9 86		      LDA	#$86
  19225  6b16		       85 98		      STA	_COLUP1
  19226  6b18		       4c 27 bb 	      jmp	.skipelse23
  19227  6b1b				   .skipL0620
  19228  6b1b		       a9 86		      LDA	#$86
  19229  6b1d		       85 06		      STA	COLUP0
  19230  6b1f		       a9 46		      LDA	#$46
  19231  6b21		       85 98		      STA	_COLUP1
  19232  6b23		       a9 08		      LDA	#8
  19233  6b25		       85 0b		      STA	REFP0
  19234  6b27				   .skipelse23
  19235  6b27				   .L0621		;  temp4 = Delay / 8
  19236  6b27
  19237  6b27		       a5 de		      LDA	Delay
  19238  6b29		       4a		      lsr
  19239  6b2a		       4a		      lsr
  19240  6b2b		       4a		      lsr
  19241  6b2c		       85 ce		      STA	temp4
  19242  6b2e				   .
  19243  6b2e							; 
  19244  6b2e
  19245  6b2e				   .L0622		;  if temp4 = 3 then player1:
  19246  6b2e
  19247  6b2e		       a5 ce		      LDA	temp4
  19248  6b30		       c9 03		      CMP	#3
  19249  6b32		       d0 0c		      BNE	.skipL0622
  19250  6b34				   .condpart234
  19251  6b34		       a2 96		      LDX	#<player234then_1
  19252  6b36		       86 a6		      STX	player1pointerlo
  19253  6b38		       a9 f7		      LDA	#>player234then_1
  19254  6b3a		       85 ab		      STA	player1pointerhi
  19255  6b3c		       a9 19		      LDA	#25
  19256  6b3e		       85 b1		      STA	player1height
  19257  6b40				   .skipL0622
  19258  6b40				   .
  19259  6b40							; 
  19260  6b40
  19261  6b40				   .L0623		;  if temp4 = 2 then player1:
  19262  6b40
  19263  6b40		       a5 ce		      LDA	temp4
  19264  6b42		       c9 02		      CMP	#2
  19265  6b44		       d0 0c		      BNE	.skipL0623
  19266  6b46				   .condpart235
  19267  6b46		       a2 ae		      LDX	#<player235then_1
  19268  6b48		       86 a6		      STX	player1pointerlo
  19269  6b4a		       a9 f7		      LDA	#>player235then_1
  19270  6b4c		       85 ab		      STA	player1pointerhi
  19271  6b4e		       a9 19		      LDA	#25
  19272  6b50		       85 b1		      STA	player1height
  19273  6b52				   .skipL0623
  19274  6b52				   .L0624		;  if temp4 = 1 then player1:
  19275  6b52
  19276  6b52		       a5 ce		      LDA	temp4
  19277  6b54		       c9 01		      CMP	#1
  19278  6b56		       d0 0c		      BNE	.skipL0624
  19279  6b58				   .condpart236
  19280  6b58		       a2 c6		      LDX	#<player236then_1
  19281  6b5a		       86 a6		      STX	player1pointerlo
  19282  6b5c		       a9 f7		      LDA	#>player236then_1
  19283  6b5e		       85 ab		      STA	player1pointerhi
  19284  6b60		       a9 19		      LDA	#25
  19285  6b62		       85 b1		      STA	player1height
  19286  6b64				   .skipL0624
  19287  6b64				   .L0625		;  if temp4 = 0 then player1:
  19288  6b64
  19289  6b64		       a5 ce		      LDA	temp4
  19290  6b66		       c9 00		      CMP	#0
  19291  6b68		       d0 0c		      BNE	.skipL0625
  19292  6b6a				   .condpart237
  19293  6b6a		       a2 de		      LDX	#<player237then_1
  19294  6b6c		       86 a6		      STX	player1pointerlo
  19295  6b6e		       a9 f7		      LDA	#>player237then_1
  19296  6b70		       85 ab		      STA	player1pointerhi
  19297  6b72		       a9 19		      LDA	#25
  19298  6b74		       85 b1		      STA	player1height
  19299  6b76				   .skipL0625
  19300  6b76				   .L0626		;  temp5 =  Delay / 4 : AUDV0 = 8 :  AUDC0 = 7 :  AUDF0 = 16 - temp5
  19301  6b76
  19302  6b76		       a5 de		      LDA	Delay
  19303  6b78		       4a		      lsr
  19304  6b79		       4a		      lsr
  19305  6b7a		       85 cf		      STA	temp5
  19306  6b7c		       a9 08		      LDA	#8
  19307  6b7e		       85 19		      STA	AUDV0
  19308  6b80		       a9 07		      LDA	#7
  19309  6b82		       85 15		      STA	AUDC0
  19310  6b84		       a9 10		      LDA	#16
  19311  6b86		       38		      SEC
  19312  6b87		       e5 cf		      SBC	temp5
  19313  6b89		       85 17		      STA	AUDF0
  19314  6b8b				   .L0627		;  Delay = Delay - 1
  19315  6b8b
  19316  6b8b		       c6 de		      DEC	Delay
  19317  6b8d				   .L0628		;  if Delay = 0 then goto TextDraw
  19318  6b8d
  19319  6b8d		       a5 de		      LDA	Delay
  19320  6b8f		       c9 00		      CMP	#0
  19321  6b91		       d0 03		      BNE	.skipL0628
  19322  6b93				   .condpart238
  19323  6b93		       4c b1 bb 	      jmp	.TextDraw
  19324  6b96
  19325  6b96				   .skipL0628
  19326  6b96				   .L0629		;  drawscreen
  19327  6b96
  19328  6b96		       85 d1		      sta	temp7
  19329  6b98		       a9 bb		      lda	#>(ret_point10-1)
  19330  6b9a		       48		      pha
  19331  6b9b		       a9 ad		      lda	#<(ret_point10-1)
  19332  6b9d		       48		      pha
  19333  6b9e		       a9 f0		      lda	#>(drawscreen-1)
  19334  6ba0		       48		      pha
  19335  6ba1		       a9 39		      lda	#<(drawscreen-1)
  19336  6ba3		       48		      pha
  19337  6ba4		       a5 d1		      lda	temp7
  19338  6ba6		       48		      pha
  19339  6ba7		       8a		      txa
  19340  6ba8		       48		      pha
  19341  6ba9		       a2 08		      ldx	#8
  19342  6bab		       4c eb ff 	      jmp	BS_jsr
  19343  6bae				   ret_point10
  19344  6bae				   .L0630		;  goto AshesLoop
  19345  6bae
  19346  6bae		       4c 06 bb 	      jmp	.AshesLoop
  19347  6bb1
  19348  6bb1				   .TextDraw
  19349  6bb1							; TextDraw
  19350  6bb1
  19351  6bb1				   .L0631		;  e{0} = 0 :	AddToColor = $00 :  player2y = 60 :  AUDV0 = 0 :  e{1} = 0 :  e{2} = 0 :  e{3} = 0 :  duration = 1 :  b = 0 :  w = 0
  19352  6bb1
  19353  6bb1		       a5 db		      LDA	e
  19354  6bb3		       29 fe		      AND	#254
  19355  6bb5		       85 db		      STA	e
  19356  6bb7		       a9 00		      LDA	#$00
  19357  6bb9		       85 db		      STA	AddToColor
  19358  6bbb		       a9 3c		      LDA	#60
  19359  6bbd		       85 8f		      STA	player2y
  19360  6bbf		       a9 00		      LDA	#0
  19361  6bc1		       85 19		      STA	AUDV0
  19362  6bc3		       a5 db		      LDA	e
  19363  6bc5		       29 fd		      AND	#253
  19364  6bc7		       85 db		      STA	e
  19365  6bc9		       a5 db		      LDA	e
  19366  6bcb		       29 fb		      AND	#251
  19367  6bcd		       85 db		      STA	e
  19368  6bcf		       a5 db		      LDA	e
  19369  6bd1		       29 f7		      AND	#247
  19370  6bd3		       85 db		      STA	e
  19371  6bd5		       a9 01		      LDA	#1
  19372  6bd7		       85 d9		      STA	duration
  19373  6bd9		       a9 00		      LDA	#0
  19374  6bdb		       85 d8		      STA	b
  19375  6bdd		       85 ed		      STA	w
  19376  6bdf				   .L0632		;  NUSIZ2{3} = 0 :  NUSIZ3{3} = 0 :  NUSIZ4{3} = 0
  19377  6bdf
  19378  6bdf		       a5 94		      LDA	NUSIZ2
  19379  6be1		       29 f7		      AND	#247
  19380  6be3		       85 94		      STA	NUSIZ2
  19381  6be5		       a5 95		      LDA	NUSIZ3
  19382  6be7		       29 f7		      AND	#247
  19383  6be9		       85 95		      STA	NUSIZ3
  19384  6beb		       a5 96		      LDA	NUSIZ4
  19385  6bed		       29 f7		      AND	#247
  19386  6bef		       85 96		      STA	NUSIZ4
  19387  6bf1				   .L0633		;  if Kills2 > Kills1 then goto Won_2
  19388  6bf1
  19389  6bf1		       a5 d2		      LDA	Kills1
  19390  6bf3		       c5 d3		      CMP	Kills2
  19391  6bf5		       b0 03		      BCS	.skipL0633
  19392  6bf7				   .condpart239
  19393  6bf7		       4c 38 bc 	      jmp	.Won_2
  19394  6bfa
  19395  6bfa				   .skipL0633
  19396  6bfa				   .L0634		;  if Kills2 < Kills1 then goto Won_1
  19397  6bfa
  19398  6bfa		       a5 d3		      LDA	Kills2
  19399  6bfc		       c5 d2		      CMP	Kills1
  19400  6bfe		       b0 03		      BCS	.skipL0634
  19401  6c00				   .condpart240
  19402  6c00		       4c 29 bc 	      jmp	.Won_1
  19403  6c03
  19404  6c03				   .skipL0634
  19405  6c03				   .
  19406  6c03							; 
  19407  6c03
  19408  6c03				   .L0635		;  player2:
  19409  6c03
  19410  6c03		       a2 f6		      LDX	#<playerL0635_2
  19411  6c05		       86 a7		      STX	player2pointerlo
  19412  6c07		       a9 f7		      LDA	#>playerL0635_2
  19413  6c09		       85 ac		      STA	player2pointerhi
  19414  6c0b		       a9 06		      LDA	#6
  19415  6c0d		       85 b2		      STA	player2height
  19416  6c0f				   .L0636		;  player3:
  19417  6c0f
  19418  6c0f		       a2 fb		      LDX	#<playerL0636_3
  19419  6c11		       86 a8		      STX	player3pointerlo
  19420  6c13		       a9 f7		      LDA	#>playerL0636_3
  19421  6c15		       85 ad		      STA	player3pointerhi
  19422  6c17		       a9 06		      LDA	#6
  19423  6c19		       85 b3		      STA	player3height
  19424  6c1b				   .L0637		;  player2x = 79 :  player3x = player2x + 8
  19425  6c1b
  19426  6c1b		       a9 4f		      LDA	#79
  19427  6c1d		       85 86		      STA	player2x
  19428  6c1f		       a5 86		      LDA	player2x
  19429  6c21		       18		      CLC
  19430  6c22		       69 08		      ADC	#8
  19431  6c24		       85 87		      STA	player3x
  19432  6c26				   .L0638		;  goto TextLoop
  19433  6c26
  19434  6c26		       4c 96 bc 	      jmp	.TextLoop
  19435  6c29
  19436  6c29				   .Won_1
  19437  6c29							; Won_1
  19438  6c29
  19439  6c29				   .L0639		;  player2:
  19440  6c29
  19441  6c29		       a2 5a		      LDX	#<playerL0639_2
  19442  6c2b		       86 a7		      STX	player2pointerlo
  19443  6c2d		       a9 f8		      LDA	#>playerL0639_2
  19444  6c2f		       85 ac		      STA	player2pointerhi
  19445  6c31		       a9 09		      LDA	#9
  19446  6c33		       85 b2		      STA	player2height
  19447  6c35				   .L0640		;  goto Winners
  19448  6c35
  19449  6c35		       4c 5a bc 	      jmp	.Winners
  19450  6c38
  19451  6c38				   .Won_2
  19452  6c38							; Won_2
  19453  6c38
  19454  6c38				   .L0641		;  if !o{0} then player2:
  19455  6c38
  19456  6c38		       a5 e5		      LDA	o
  19457  6c3a		       4a		      LSR
  19458  6c3b		       b0 0c		      BCS	.skipL0641
  19459  6c3d				   .condpart241
  19460  6c3d		       a2 62		      LDX	#<player241then_2
  19461  6c3f		       86 a7		      STX	player2pointerlo
  19462  6c41		       a9 f8		      LDA	#>player241then_2
  19463  6c43		       85 ac		      STA	player2pointerhi
  19464  6c45		       a9 09		      LDA	#9
  19465  6c47		       85 b2		      STA	player2height
  19466  6c49				   .skipL0641
  19467  6c49				   .L0642		;  if o{0} then player2:
  19468  6c49
  19469  6c49		       a5 e5		      LDA	o
  19470  6c4b		       4a		      LSR
  19471  6c4c		       90 0c		      BCC	.skipL0642
  19472  6c4e				   .condpart242
  19473  6c4e		       a2 6a		      LDX	#<player242then_2
  19474  6c50		       86 a7		      STX	player2pointerlo
  19475  6c52		       a9 f8		      LDA	#>player242then_2
  19476  6c54		       85 ac		      STA	player2pointerhi
  19477  6c56		       a9 09		      LDA	#9
  19478  6c58		       85 b2		      STA	player2height
  19479  6c5a				   .skipL0642
  19480  6c5a				   .
  19481  6c5a							; 
  19482  6c5a
  19483  6c5a				   .
  19484  6c5a							; 
  19485  6c5a
  19486  6c5a				   .Winners
  19487  6c5a							; Winners
  19488  6c5a
  19489  6c5a				   .L0643		;  player3:
  19490  6c5a
  19491  6c5a		       a2 72		      LDX	#<playerL0643_3
  19492  6c5c		       86 a8		      STX	player3pointerlo
  19493  6c5e		       a9 f8		      LDA	#>playerL0643_3
  19494  6c60		       85 ad		      STA	player3pointerhi
  19495  6c62		       a9 06		      LDA	#6
  19496  6c64		       85 b3		      STA	player3height
  19497  6c66				   .L0644		;  player4:
  19498  6c66
  19499  6c66		       a2 77		      LDX	#<playerL0644_4
  19500  6c68		       86 a9		      STX	player4pointerlo
  19501  6c6a		       a9 f8		      LDA	#>playerL0644_4
  19502  6c6c		       85 ae		      STA	player4pointerhi
  19503  6c6e		       a9 06		      LDA	#6
  19504  6c70		       85 b4		      STA	player4height
  19505  6c72				   .L0645		;  player2x = 75 :  player3x = player2x + 12 :  player4x = player2x + 20
  19506  6c72
  19507  6c72		       a9 4b		      LDA	#75
  19508  6c74		       85 86		      STA	player2x
  19509  6c76		       a5 86		      LDA	player2x
  19510  6c78		       18		      CLC
  19511  6c79		       69 0c		      ADC	#12
  19512  6c7b		       85 87		      STA	player3x
  19513  6c7d		       a5 86		      LDA	player2x
  19514  6c7f		       18		      CLC
  19515  6c80		       69 14		      ADC	#20
  19516  6c82		       85 88		      STA	player4x
  19517  6c84				   .L0646		;  goto MusicSetup4 bank4
  19518  6c84
  19519  6c84		       85 d1		      sta	temp7
  19520  6c86		       a9 70		      lda	#>(.MusicSetup4-1)
  19521  6c88		       48		      pha
  19522  6c89		       a9 9e		      lda	#<(.MusicSetup4-1)
  19523  6c8b		       48		      pha
  19524  6c8c		       a5 d1		      lda	temp7
  19525  6c8e		       48		      pha
  19526  6c8f		       8a		      txa
  19527  6c90		       48		      pha
  19528  6c91		       a2 04		      ldx	#4
  19529  6c93		       4c eb ff 	      jmp	BS_jsr
  19530  6c96				   .TextLoop
  19531  6c96							; TextLoop
  19532  6c96
  19533  6c96				   .L0647		;  e{1} = !e{1} :  if e{1} then e{2} = !e{2}
  19534  6c96
  19535  6c96		       a5 db		      LDA	e
  19536  6c98		       29 02		      AND	#2
  19537  6c9a		       08		      PHP
  19538  6c9b		       a5 db		      LDA	e
  19539  6c9d		       29 fd		      AND	#253
  19540  6c9f		       28		      PLP
  19541  6ca0		       d0 02		      .byte.b	$D0, $02
  19542  6ca2		       09 02		      ORA	#2
  19543  6ca4		       85 db		      STA	e
  19544  6ca6		       a5 db		      LDA	e
  19545  6ca8		       29 02		      AND	#2
  19546  6caa		       f0 10		      BEQ	.skipL0647
  19547  6cac				   .condpart243
  19548  6cac		       a5 db		      LDA	e
  19549  6cae		       29 04		      AND	#4
  19550  6cb0		       08		      PHP
  19551  6cb1		       a5 db		      LDA	e
  19552  6cb3		       29 fb		      AND	#251
  19553  6cb5		       28		      PLP
  19554  6cb6		       d0 02		      .byte.b	$D0, $02
  19555  6cb8		       09 04		      ORA	#4
  19556  6cba		       85 db		      STA	e
  19557  6cbc				   .skipL0647
  19558  6cbc				   .
  19559  6cbc							; 
  19560  6cbc
  19561  6cbc				   .L0648		;  if Kills1 = Kills2 then COLUP0 = $46 :  REFP0 = 0 :  _COLUP1 = $86 :  ColorForText = $10 :	goto NoOOO
  19562  6cbc
  19563  6cbc		       a5 d2		      LDA	Kills1
  19564  6cbe		       c5 d3		      CMP	Kills2
  19565  6cc0		       d0 13		      BNE	.skipL0648
  19566  6cc2				   .condpart244
  19567  6cc2		       a9 46		      LDA	#$46
  19568  6cc4		       85 06		      STA	COLUP0
  19569  6cc6		       a9 00		      LDA	#0
  19570  6cc8		       85 0b		      STA	REFP0
  19571  6cca		       a9 86		      LDA	#$86
  19572  6ccc		       85 98		      STA	_COLUP1
  19573  6cce		       a9 10		      LDA	#$10
  19574  6cd0		       85 da		      STA	ColorForText
  19575  6cd2		       4c fe bc 	      jmp	.NoOOO
  19576  6cd5
  19577  6cd5				   .skipL0648
  19578  6cd5				   .L0649		;  if Kills1 > Kills2 then COLUP0 = $46 :  REFP0 = 0 :  _COLUP1 = $86 :  ColorForText = $40 else COLUP0 = $86 :  _COLUP1 = $46  :  REFP0 = 8 :  ColorForText = $80
  19579  6cd5
  19580  6cd5		       a5 d3		      LDA	Kills2
  19581  6cd7		       c5 d2		      CMP	Kills1
  19582  6cd9		       b0 13		      BCS	.skipL0649
  19583  6cdb				   .condpart245
  19584  6cdb		       a9 46		      LDA	#$46
  19585  6cdd		       85 06		      STA	COLUP0
  19586  6cdf		       a9 00		      LDA	#0
  19587  6ce1		       85 0b		      STA	REFP0
  19588  6ce3		       a9 86		      LDA	#$86
  19589  6ce5		       85 98		      STA	_COLUP1
  19590  6ce7		       a9 40		      LDA	#$40
  19591  6ce9		       85 da		      STA	ColorForText
  19592  6ceb		       4c fe bc 	      jmp	.skipelse24
  19593  6cee				   .skipL0649
  19594  6cee		       a9 86		      LDA	#$86
  19595  6cf0		       85 06		      STA	COLUP0
  19596  6cf2		       a9 46		      LDA	#$46
  19597  6cf4		       85 98		      STA	_COLUP1
  19598  6cf6		       a9 08		      LDA	#8
  19599  6cf8		       85 0b		      STA	REFP0
  19600  6cfa		       a9 80		      LDA	#$80
  19601  6cfc		       85 da		      STA	ColorForText
  19602  6cfe				   .skipelse24
  19603  6cfe				   .NoOOO
  19604  6cfe							; NoOOO
  19605  6cfe
  19606  6cfe				   .L0650		;  if !e{2} then goto NoShitzz
  19607  6cfe
  19608  6cfe		       a5 db		      LDA	e
  19609  6d00		       29 04		      AND	#4
  19610  6d02		       d0 03		      BNE	.skipL0650
  19611  6d04				   .condpart246
  19612  6d04		       4c 6c bd 	      jmp	.NoShitzz
  19613  6d07
  19614  6d07				   .skipL0650
  19615  6d07				   .L0651		;  if player2y > 55  &&  !e{3} then player2y = player2y - 1
  19616  6d07
  19617  6d07		       a9 37		      LDA	#55
  19618  6d09		       c5 8f		      CMP	player2y
  19619  6d0b		       b0 08		      BCS	.skipL0651
  19620  6d0d				   .condpart247
  19621  6d0d		       a5 db		      LDA	e
  19622  6d0f		       29 08		      AND	#8
  19623  6d11		       d0 02		      BNE	.skip247then
  19624  6d13				   .condpart248
  19625  6d13		       c6 8f		      DEC	player2y
  19626  6d15				   .skip247then
  19627  6d15				   .skipL0651
  19628  6d15				   .L0652		;  if player2y < 56  &&  !e{3} then e{3} = 1 :  goto NoShitzz
  19629  6d15
  19630  6d15		       a5 8f		      LDA	player2y
  19631  6d17		       c9 38		      CMP	#56
  19632  6d19		       b0 0f		      BCS	.skipL0652
  19633  6d1b				   .condpart249
  19634  6d1b		       a5 db		      LDA	e
  19635  6d1d		       29 08		      AND	#8
  19636  6d1f		       d0 09		      BNE	.skip249then
  19637  6d21				   .condpart250
  19638  6d21		       a5 db		      LDA	e
  19639  6d23		       09 08		      ORA	#8
  19640  6d25		       85 db		      STA	e
  19641  6d27		       4c 6c bd 	      jmp	.NoShitzz
  19642  6d2a
  19643  6d2a				   .skip249then
  19644  6d2a				   .skipL0652
  19645  6d2a				   .L0653		;  if player2y < 65  &&  e{3} then player2y = player2y + 1
  19646  6d2a
  19647  6d2a		       a5 8f		      LDA	player2y
  19648  6d2c		       c9 41		      CMP	#65
  19649  6d2e		       b0 08		      BCS	.skipL0653
  19650  6d30				   .condpart251
  19651  6d30		       a5 db		      LDA	e
  19652  6d32		       29 08		      AND	#8
  19653  6d34		       f0 02		      BEQ	.skip251then
  19654  6d36				   .condpart252
  19655  6d36		       e6 8f		      INC	player2y
  19656  6d38				   .skip251then
  19657  6d38				   .skipL0653
  19658  6d38				   .L0654		;  if player2y > 64  &&  e{3} then e{3} = 0
  19659  6d38
  19660  6d38		       a9 40		      LDA	#64
  19661  6d3a		       c5 8f		      CMP	player2y
  19662  6d3c		       b0 0c		      BCS	.skipL0654
  19663  6d3e				   .condpart253
  19664  6d3e		       a5 db		      LDA	e
  19665  6d40		       29 08		      AND	#8
  19666  6d42		       f0 06		      BEQ	.skip253then
  19667  6d44				   .condpart254
  19668  6d44		       a5 db		      LDA	e
  19669  6d46		       29 f7		      AND	#247
  19670  6d48		       85 db		      STA	e
  19671  6d4a				   .skip253then
  19672  6d4a				   .skipL0654
  19673  6d4a				   .L0655		;  if Kills1 = Kills2 then player2y = player2y - 3 :  player4y = 120 else player4y = player2y - 3
  19674  6d4a
  19675  6d4a		       a5 d2		      LDA	Kills1
  19676  6d4c		       c5 d3		      CMP	Kills2
  19677  6d4e		       d0 0e		      BNE	.skipL0655
  19678  6d50				   .condpart255
  19679  6d50		       a5 8f		      LDA	player2y
  19680  6d52		       38		      SEC
  19681  6d53		       e9 03		      SBC	#3
  19682  6d55		       85 8f		      STA	player2y
  19683  6d57		       a9 78		      LDA	#120
  19684  6d59		       85 91		      STA	player4y
  19685  6d5b		       4c 65 bd 	      jmp	.skipelse25
  19686  6d5e				   .skipL0655
  19687  6d5e		       a5 8f		      LDA	player2y
  19688  6d60		       38		      SEC
  19689  6d61		       e9 03		      SBC	#3
  19690  6d63		       85 91		      STA	player4y
  19691  6d65				   .skipelse25
  19692  6d65				   .L0656		;  player3y = player2y - 3
  19693  6d65
  19694  6d65		       a5 8f		      LDA	player2y
  19695  6d67		       38		      SEC
  19696  6d68		       e9 03		      SBC	#3
  19697  6d6a		       85 90		      STA	player3y
  19698  6d6c				   .NoShitzz
  19699  6d6c							; NoShitzz
  19700  6d6c
  19701  6d6c				   .
  19702  6d6c							; 
  19703  6d6c
  19704  6d6c				   .L0657		;  if !e{0}  &&  AddToColor > $0a then e{0}  = 1
  19705  6d6c
  19706  6d6c		       a5 db		      LDA	e
  19707  6d6e		       4a		      LSR
  19708  6d6f		       b0 0c		      BCS	.skipL0657
  19709  6d71				   .condpart256
  19710  6d71		       a9 0a		      LDA	#$0a
  19711  6d73		       c5 db		      CMP	AddToColor
  19712  6d75		       b0 06		      BCS	.skip256then
  19713  6d77				   .condpart257
  19714  6d77		       a5 db		      LDA	e
  19715  6d79		       09 01		      ORA	#1
  19716  6d7b		       85 db		      STA	e
  19717  6d7d				   .skip256then
  19718  6d7d				   .skipL0657
  19719  6d7d				   .L0658		;  if !e{0}  &&  AddToColor < $0e then dec AddToColor = AddToColor + $02
  19720  6d7d
  19721  6d7d		       a5 db		      LDA	e
  19722  6d7f		       4a		      LSR
  19723  6d80		       b0 0f		      BCS	.skipL0658
  19724  6d82				   .condpart258
  19725  6d82		       a5 db		      LDA	AddToColor
  19726  6d84		       c9 0e		      CMP	#$0e
  19727  6d86		       b0 09		      BCS	.skip258then
  19728  6d88				   .condpart259
  19729  6d88		       f8		      SED
  19730  6d89		       a5 db		      LDA	AddToColor
  19731  6d8b		       18		      CLC
  19732  6d8c		       69 02		      ADC	#$02
  19733  6d8e		       85 db		      STA	AddToColor
  19734  6d90		       d8		      CLD
  19735  6d91				   .skip258then
  19736  6d91				   .skipL0658
  19737  6d91				   .L0659		;  if e{0}  &&  AddToColor < $02 then e{0}  = 0
  19738  6d91
  19739  6d91		       a5 db		      LDA	e
  19740  6d93		       4a		      LSR
  19741  6d94		       90 0c		      BCC	.skipL0659
  19742  6d96				   .condpart260
  19743  6d96		       a5 db		      LDA	AddToColor
  19744  6d98		       c9 02		      CMP	#$02
  19745  6d9a		       b0 06		      BCS	.skip260then
  19746  6d9c				   .condpart261
  19747  6d9c		       a5 db		      LDA	e
  19748  6d9e		       29 fe		      AND	#254
  19749  6da0		       85 db		      STA	e
  19750  6da2				   .skip260then
  19751  6da2				   .skipL0659
  19752  6da2				   .L0660		;  if e{0}  &&  AddToColor > $00 then dec AddToColor = AddToColor - $02
  19753  6da2
  19754  6da2		       a5 db		      LDA	e
  19755  6da4		       4a		      LSR
  19756  6da5		       90 0f		      BCC	.skipL0660
  19757  6da7				   .condpart262
  19758  6da7		       a9 00		      LDA	#$00
  19759  6da9		       c5 db		      CMP	AddToColor
  19760  6dab		       b0 09		      BCS	.skip262then
  19761  6dad				   .condpart263
  19762  6dad		       f8		      SED
  19763  6dae		       a5 db		      LDA	AddToColor
  19764  6db0		       38		      SEC
  19765  6db1		       e9 02		      SBC	#$02
  19766  6db3		       85 db		      STA	AddToColor
  19767  6db5		       d8		      CLD
  19768  6db6				   .skip262then
  19769  6db6				   .skipL0660
  19770  6db6				   .NoMoreChange
  19771  6db6							; NoMoreChange
  19772  6db6
  19773  6db6				   .L0661		;  temp4 = ColorForText + AddToColor :  COLUP2 =  temp4 :  COLUP3 = temp4 :  COLUP4 = temp4
  19774  6db6
  19775  6db6		       a5 da		      LDA	ColorForText
  19776  6db8		       18		      CLC
  19777  6db9		       65 db		      ADC	AddToColor
  19778  6dbb		       85 ce		      STA	temp4
  19779  6dbd		       a5 ce		      LDA	temp4
  19780  6dbf		       85 99		      STA	COLUP2
  19781  6dc1		       85 9a		      STA	COLUP3
  19782  6dc3		       85 9b		      STA	COLUP4
  19783  6dc5				   .
  19784  6dc5							; 
  19785  6dc5
  19786  6dc5				   .L0662		;  if switchselect then Selection = 0 :  e{6} = 1 :  e{4}  =  1 :  back = $08 :  duration = 1 :  goto MusicSetup1 bank1
  19787  6dc5
  19788  6dc5		       a9 02		      lda	#2
  19789  6dc7		       2c 82 02 	      bit	SWCHB
  19790  6dca		       d0 2a		      BNE	.skipL0662
  19791  6dcc				   .condpart264
  19792  6dcc		       a9 00		      LDA	#0
  19793  6dce		       85 e1		      STA	Selection
  19794  6dd0		       a5 db		      LDA	e
  19795  6dd2		       09 40		      ORA	#64
  19796  6dd4		       85 db		      STA	e
  19797  6dd6		       a5 db		      LDA	e
  19798  6dd8		       09 10		      ORA	#16
  19799  6dda		       85 db		      STA	e
  19800  6ddc		       a9 08		      LDA	#$08
  19801  6dde		       85 de		      STA	back
  19802  6de0		       a9 01		      LDA	#1
  19803  6de2		       85 d9		      STA	duration
  19804  6de4		       85 d1		      sta	temp7
  19805  6de6		       a9 12		      lda	#>(.MusicSetup1-1)
  19806  6de8		       48		      pha
  19807  6de9		       a9 2a		      lda	#<(.MusicSetup1-1)
  19808  6deb		       48		      pha
  19809  6dec		       a5 d1		      lda	temp7
  19810  6dee		       48		      pha
  19811  6def		       8a		      txa
  19812  6df0		       48		      pha
  19813  6df1		       a2 01		      ldx	#1
  19814  6df3		       4c eb ff 	      jmp	BS_jsr
  19815  6df6				   .skipL0662
  19816  6df6				   .L0663		;  if !switchreset  &&  !joy0fire  &&	!joy1fire then goto PPPP
  19817  6df6
  19818  6df6		       a9 01		      lda	#1
  19819  6df8		       2c 82 02 	      bit	SWCHB
  19820  6dfb		       f0 0b		      BEQ	.skipL0663
  19821  6dfd				   .condpart265
  19822  6dfd		       24 0c		      bit	INPT4
  19823  6dff		       10 07		      BPL	.skip265then
  19824  6e01				   .condpart266
  19825  6e01		       24 0d		      bit	INPT5
  19826  6e03		       10 03		      BPL	.skip266then
  19827  6e05				   .condpart267
  19828  6e05		       4c 20 be 	      jmp	.PPPP
  19829  6e08
  19830  6e08				   .skip266then
  19831  6e08				   .skip265then
  19832  6e08				   .skipL0663
  19833  6e08				   .L0664		;  Kills1 = 0 :  Kills2 = 0 :	goto Start_Game bank2
  19834  6e08
  19835  6e08		       a9 00		      LDA	#0
  19836  6e0a		       85 d2		      STA	Kills1
  19837  6e0c		       85 d3		      STA	Kills2
  19838  6e0e		       85 d1		      sta	temp7
  19839  6e10		       a9 38		      lda	#>(.Start_Game-1)
  19840  6e12		       48		      pha
  19841  6e13		       a9 92		      lda	#<(.Start_Game-1)
  19842  6e15		       48		      pha
  19843  6e16		       a5 d1		      lda	temp7
  19844  6e18		       48		      pha
  19845  6e19		       8a		      txa
  19846  6e1a		       48		      pha
  19847  6e1b		       a2 02		      ldx	#2
  19848  6e1d		       4c eb ff 	      jmp	BS_jsr
  19849  6e20				   .
  19850  6e20							; 
  19851  6e20
  19852  6e20				   .PPPP
  19853  6e20							; PPPP
  19854  6e20
  19855  6e20				   .L0665		;  if HowWhite > $08 then COLUP0 = $00 :  _COLUP1 = $00 :  COLUP2 = $00 :  COLUP3 = $00 :  COLUP4 = $00
  19856  6e20
  19857  6e20		       a9 08		      LDA	#$08
  19858  6e22		       c5 e1		      CMP	HowWhite
  19859  6e24		       b0 0c		      BCS	.skipL0665
  19860  6e26				   .condpart268
  19861  6e26		       a9 00		      LDA	#$00
  19862  6e28		       85 06		      STA	COLUP0
  19863  6e2a		       85 98		      STA	_COLUP1
  19864  6e2c		       85 99		      STA	COLUP2
  19865  6e2e		       85 9a		      STA	COLUP3
  19866  6e30		       85 9b		      STA	COLUP4
  19867  6e32				   .skipL0665
  19868  6e32				   .L0666		;  drawscreen
  19869  6e32
  19870  6e32		       85 d1		      sta	temp7
  19871  6e34		       a9 be		      lda	#>(ret_point11-1)
  19872  6e36		       48		      pha
  19873  6e37		       a9 49		      lda	#<(ret_point11-1)
  19874  6e39		       48		      pha
  19875  6e3a		       a9 f0		      lda	#>(drawscreen-1)
  19876  6e3c		       48		      pha
  19877  6e3d		       a9 39		      lda	#<(drawscreen-1)
  19878  6e3f		       48		      pha
  19879  6e40		       a5 d1		      lda	temp7
  19880  6e42		       48		      pha
  19881  6e43		       8a		      txa
  19882  6e44		       48		      pha
  19883  6e45		       a2 08		      ldx	#8
  19884  6e47		       4c eb ff 	      jmp	BS_jsr
  19885  6e4a				   ret_point11
  19886  6e4a				   .L0667		;  goto EndMusic bank4
  19887  6e4a
  19888  6e4a		       85 d1		      sta	temp7
  19889  6e4c		       a9 6f		      lda	#>(.EndMusic-1)
  19890  6e4e		       48		      pha
  19891  6e4f		       a9 ff		      lda	#<(.EndMusic-1)
  19892  6e51		       48		      pha
  19893  6e52		       a5 d1		      lda	temp7
  19894  6e54		       48		      pha
  19895  6e55		       8a		      txa
  19896  6e56		       48		      pha
  19897  6e57		       a2 04		      ldx	#4
  19898  6e59		       4c eb ff 	      jmp	BS_jsr
  19899  6e5c				   .
  19900  6e5c							; 
  19901  6e5c
  19902  6e5c				   .L0668		;  bank 7
  19903  6e5c
  19904  6e5c					      if	ECHO6
      376 bytes of ROM space left in bank 6
  19905  6e5c					      echo	"    ",[(start_bank6 - *)]d , "bytes of ROM space left in bank 6")
  19906  6e5c					      endif
  19907  6e5c		       00 01	   ECHO6      =	1
  19908  6fd4					      ORG	$6FF4-bscode_length
  19909  6fd4					      RORG	$BFF4-bscode_length
  19910  6fd4		       a2 ff	   start_bank6 ldx	#$ff
  19911  6fd6				  -	      ifconst	FASTFETCH	; using DPC+
  19912  6fd6				  -	      stx	FASTFETCH
  19913  6fd6					      endif
  19914  6fd6		       9a		      txs
  19915  6fd7				  -	      if	bankswitch == 64
  19916  6fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  19917  6fd7					      else
  19918  6fd7		       a9 f3		      lda	#>(start-1)
  19919  6fd9					      endif
  19920  6fd9		       48		      pha
  19921  6fda		       a9 6d		      lda	#<(start-1)
  19922  6fdc		       48		      pha
  19923  6fdd		       48		      pha
  19924  6fde		       8a		      txa
  19925  6fdf		       48		      pha
  19926  6fe0		       ba		      tsx
  19927  6fe1					      if	bankswitch != 64
  19928  6fe1		       b5 04		      lda	4,x	; get high byte of return address
  19929  6fe3		       2a		      rol
  19930  6fe4		       2a		      rol
  19931  6fe5		       2a		      rol
  19932  6fe6		       2a		      rol
  19933  6fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  19934  6fe9		       aa		      tax
  19935  6fea		       e8		      inx
  19936  6feb				  -	      else
  19937  6feb				  -	      lda	4,x	; get high byte of return address
  19938  6feb				  -	      tay
  19939  6feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  19940  6feb				  -	      sta	4,x
  19941  6feb				  -	      tya
  19942  6feb				  -	      lsr
  19943  6feb				  -	      lsr
  19944  6feb				  -	      lsr
  19945  6feb				  -	      lsr
  19946  6feb				  -	      tax
  19947  6feb				  -	      inx
  19948  6feb					      endif
  19949  6feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  19950  6fee		       68		      pla
  19951  6fef		       aa		      tax
  19952  6ff0		       68		      pla
  19953  6ff1		       60		      rts
  19954  6ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  19955  6ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  19956  6ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  19957  6ff2					      endif
  19958  6ffc					      ORG	$6FFC
  19959  6ffc					      RORG	$BFFC
  19960  6ffc		       d4 bf		      .word.w	start_bank6
  19961  6ffe		       d4 bf		      .word.w	start_bank6
  19962  7000					      ORG	$7000
  19963  7000					      RORG	$D000
  19964  7000				   .
  19965  7000							; 
  19966  7000
  19967  7000				   .
  19968  7000							; 
  19969  7000
  19970  7000				   .PlayerStand
  19971  7000							; PlayerStand
  19972  7000
  19973  7000				   .L0669		;  player0:
  19974  7000
  19975  7000		       a2 7c		      LDX	#<playerL0669_0
  19976  7002		       86 a2		      STX	player0pointerlo
  19977  7004		       a9 f8		      LDA	#>playerL0669_0
  19978  7006		       85 a3		      STA	player0pointerhi
  19979  7008		       a9 13		      LDA	#19
  19980  700a		       85 b0		      STA	player0height
  19981  700c				   .
  19982  700c							; 
  19983  700c
  19984  700c				   .L0670		;  goto PlayerDone
  19985  700c
  19986  700c		       4c b2 d9 	      jmp	.PlayerDone
  19987  700f
  19988  700f				   .
  19989  700f							; 
  19990  700f
  19991  700f				   .Attack_Player
  19992  700f							; Attack_Player
  19993  700f
  19994  700f				   .
  19995  700f							; 
  19996  700f
  19997  700f				   .L0671		;  if temp4 = 0 then player0:
  19998  700f
  19999  700f		       a5 ce		      LDA	temp4
  20000  7011		       c9 00		      CMP	#0
  20001  7013		       d0 0c		      BNE	.skipL0671
  20002  7015				   .condpart269
  20003  7015		       a2 8f		      LDX	#<player269then_0
  20004  7017		       86 a2		      STX	player0pointerlo
  20005  7019		       a9 f8		      LDA	#>player269then_0
  20006  701b		       85 a3		      STA	player0pointerhi
  20007  701d		       a9 19		      LDA	#25
  20008  701f		       85 b0		      STA	player0height
  20009  7021				   .skipL0671
  20010  7021				   .
  20011  7021							; 
  20012  7021
  20013  7021				   .L0672		;  if temp4 = 1 then player0:
  20014  7021
  20015  7021		       a5 ce		      LDA	temp4
  20016  7023		       c9 01		      CMP	#1
  20017  7025		       d0 0c		      BNE	.skipL0672
  20018  7027				   .condpart270
  20019  7027		       a2 a8		      LDX	#<player270then_0
  20020  7029		       86 a2		      STX	player0pointerlo
  20021  702b		       a9 f8		      LDA	#>player270then_0
  20022  702d		       85 a3		      STA	player0pointerhi
  20023  702f		       a9 15		      LDA	#21
  20024  7031		       85 b0		      STA	player0height
  20025  7033				   .skipL0672
  20026  7033				   .
  20027  7033							; 
  20028  7033
  20029  7033				   .L0673		;  if temp4 = 2 then player0:
  20030  7033
  20031  7033		       a5 ce		      LDA	temp4
  20032  7035		       c9 02		      CMP	#2
  20033  7037		       d0 0c		      BNE	.skipL0673
  20034  7039				   .condpart271
  20035  7039		       a2 bd		      LDX	#<player271then_0
  20036  703b		       86 a2		      STX	player0pointerlo
  20037  703d		       a9 f8		      LDA	#>player271then_0
  20038  703f		       85 a3		      STA	player0pointerhi
  20039  7041		       a9 13		      LDA	#19
  20040  7043		       85 b0		      STA	player0height
  20041  7045				   .skipL0673
  20042  7045				   .L0674		;  goto PlayerDone
  20043  7045
  20044  7045		       4c b2 d9 	      jmp	.PlayerDone
  20045  7048
  20046  7048				   .
  20047  7048							; 
  20048  7048
  20049  7048				   .Move_Player
  20050  7048							; Move_Player
  20051  7048
  20052  7048				   .L0675		;  if temp4 = 0 then player0:
  20053  7048
  20054  7048		       a5 ce		      LDA	temp4
  20055  704a		       c9 00		      CMP	#0
  20056  704c		       d0 0c		      BNE	.skipL0675
  20057  704e				   .condpart272
  20058  704e		       a2 d0		      LDX	#<player272then_0
  20059  7050		       86 a2		      STX	player0pointerlo
  20060  7052		       a9 f8		      LDA	#>player272then_0
  20061  7054		       85 a3		      STA	player0pointerhi
  20062  7056		       a9 13		      LDA	#19
  20063  7058		       85 b0		      STA	player0height
  20064  705a				   .skipL0675
  20065  705a				   .
  20066  705a							; 
  20067  705a
  20068  705a				   .L0676		;  if temp4 = 1 then player0:
  20069  705a
  20070  705a		       a5 ce		      LDA	temp4
  20071  705c		       c9 01		      CMP	#1
  20072  705e		       d0 0c		      BNE	.skipL0676
  20073  7060				   .condpart273
  20074  7060		       a2 e3		      LDX	#<player273then_0
  20075  7062		       86 a2		      STX	player0pointerlo
  20076  7064		       a9 f8		      LDA	#>player273then_0
  20077  7066		       85 a3		      STA	player0pointerhi
  20078  7068		       a9 13		      LDA	#19
  20079  706a		       85 b0		      STA	player0height
  20080  706c				   .skipL0676
  20081  706c				   .
  20082  706c							; 
  20083  706c
  20084  706c				   .L0677		;  if temp4 = 2 then player0:
  20085  706c
  20086  706c		       a5 ce		      LDA	temp4
  20087  706e		       c9 02		      CMP	#2
  20088  7070		       d0 0c		      BNE	.skipL0677
  20089  7072				   .condpart274
  20090  7072		       a2 5a		      LDX	#<player274then_0
  20091  7074		       86 a2		      STX	player0pointerlo
  20092  7076		       a9 f9		      LDA	#>player274then_0
  20093  7078		       85 a3		      STA	player0pointerhi
  20094  707a		       a9 13		      LDA	#19
  20095  707c		       85 b0		      STA	player0height
  20096  707e				   .skipL0677
  20097  707e				   .
  20098  707e							; 
  20099  707e
  20100  707e				   .L0678		;  if temp4 = 3 then player0:
  20101  707e
  20102  707e		       a5 ce		      LDA	temp4
  20103  7080		       c9 03		      CMP	#3
  20104  7082		       d0 0c		      BNE	.skipL0678
  20105  7084				   .condpart275
  20106  7084		       a2 6d		      LDX	#<player275then_0
  20107  7086		       86 a2		      STX	player0pointerlo
  20108  7088		       a9 f9		      LDA	#>player275then_0
  20109  708a		       85 a3		      STA	player0pointerhi
  20110  708c		       a9 13		      LDA	#19
  20111  708e		       85 b0		      STA	player0height
  20112  7090				   .skipL0678
  20113  7090				   .
  20114  7090							; 
  20115  7090
  20116  7090				   .L0679		;  if temp4 = 4 then player0:
  20117  7090
  20118  7090		       a5 ce		      LDA	temp4
  20119  7092		       c9 04		      CMP	#4
  20120  7094		       d0 0c		      BNE	.skipL0679
  20121  7096				   .condpart276
  20122  7096		       a2 80		      LDX	#<player276then_0
  20123  7098		       86 a2		      STX	player0pointerlo
  20124  709a		       a9 f9		      LDA	#>player276then_0
  20125  709c		       85 a3		      STA	player0pointerhi
  20126  709e		       a9 13		      LDA	#19
  20127  70a0		       85 b0		      STA	player0height
  20128  70a2				   .skipL0679
  20129  70a2				   .
  20130  70a2							; 
  20131  70a2
  20132  70a2				   .L0680		;  if temp4 = 5 then player0:
  20133  70a2
  20134  70a2		       a5 ce		      LDA	temp4
  20135  70a4		       c9 05		      CMP	#5
  20136  70a6		       d0 0c		      BNE	.skipL0680
  20137  70a8				   .condpart277
  20138  70a8		       a2 93		      LDX	#<player277then_0
  20139  70aa		       86 a2		      STX	player0pointerlo
  20140  70ac		       a9 f9		      LDA	#>player277then_0
  20141  70ae		       85 a3		      STA	player0pointerhi
  20142  70b0		       a9 13		      LDA	#19
  20143  70b2		       85 b0		      STA	player0height
  20144  70b4				   .skipL0680
  20145  70b4				   .L0681		;  goto PlayerDone
  20146  70b4
  20147  70b4		       4c b2 d9 	      jmp	.PlayerDone
  20148  70b7
  20149  70b7				   .
  20150  70b7							; 
  20151  70b7
  20152  70b7				   .Player_Duck
  20153  70b7							; Player_Duck
  20154  70b7
  20155  70b7				   .L0682		;  player0:
  20156  70b7
  20157  70b7		       a2 a6		      LDX	#<playerL0682_0
  20158  70b9		       86 a2		      STX	player0pointerlo
  20159  70bb		       a9 f9		      LDA	#>playerL0682_0
  20160  70bd		       85 a3		      STA	player0pointerhi
  20161  70bf		       a9 13		      LDA	#19
  20162  70c1		       85 b0		      STA	player0height
  20163  70c3				   .L0683		;  goto PlayerDone
  20164  70c3
  20165  70c3		       4c b2 d9 	      jmp	.PlayerDone
  20166  70c6
  20167  70c6				   .
  20168  70c6							; 
  20169  70c6
  20170  70c6				   .
  20171  70c6							; 
  20172  70c6
  20173  70c6				   .Attack_Player_Dash
  20174  70c6							; Attack_Player_Dash
  20175  70c6
  20176  70c6				   .L0684		;  if temp4 = 0 then player0:
  20177  70c6
  20178  70c6		       a5 ce		      LDA	temp4
  20179  70c8		       c9 00		      CMP	#0
  20180  70ca		       d0 0c		      BNE	.skipL0684
  20181  70cc				   .condpart278
  20182  70cc		       a2 b9		      LDX	#<player278then_0
  20183  70ce		       86 a2		      STX	player0pointerlo
  20184  70d0		       a9 f9		      LDA	#>player278then_0
  20185  70d2		       85 a3		      STA	player0pointerhi
  20186  70d4		       a9 1a		      LDA	#26
  20187  70d6		       85 b0		      STA	player0height
  20188  70d8				   .skipL0684
  20189  70d8				   .L0685		;  if temp4 = 1 then player0:
  20190  70d8
  20191  70d8		       a5 ce		      LDA	temp4
  20192  70da		       c9 01		      CMP	#1
  20193  70dc		       d0 0c		      BNE	.skipL0685
  20194  70de				   .condpart279
  20195  70de		       a2 d3		      LDX	#<player279then_0
  20196  70e0		       86 a2		      STX	player0pointerlo
  20197  70e2		       a9 f9		      LDA	#>player279then_0
  20198  70e4		       85 a3		      STA	player0pointerhi
  20199  70e6		       a9 1a		      LDA	#26
  20200  70e8		       85 b0		      STA	player0height
  20201  70ea				   .skipL0685
  20202  70ea				   .L0686		;  if temp4 = 2 then player0:
  20203  70ea
  20204  70ea		       a5 ce		      LDA	temp4
  20205  70ec		       c9 02		      CMP	#2
  20206  70ee		       d0 0c		      BNE	.skipL0686
  20207  70f0				   .condpart280
  20208  70f0		       a2 5a		      LDX	#<player280then_0
  20209  70f2		       86 a2		      STX	player0pointerlo
  20210  70f4		       a9 fa		      LDA	#>player280then_0
  20211  70f6		       85 a3		      STA	player0pointerhi
  20212  70f8		       a9 1a		      LDA	#26
  20213  70fa		       85 b0		      STA	player0height
  20214  70fc				   .skipL0686
  20215  70fc				   .L0687		;  goto PlayerDone
  20216  70fc
  20217  70fc		       4c b2 d9 	      jmp	.PlayerDone
  20218  70ff
  20219  70ff				   .
  20220  70ff							; 
  20221  70ff
  20222  70ff				   .PlayerShoot1
  20223  70ff							; PlayerShoot1
  20224  70ff
  20225  70ff				   .L0688		;  player0:
  20226  70ff
  20227  70ff		       a2 74		      LDX	#<playerL0688_0
  20228  7101		       86 a2		      STX	player0pointerlo
  20229  7103		       a9 fa		      LDA	#>playerL0688_0
  20230  7105		       85 a3		      STA	player0pointerhi
  20231  7107		       a9 1a		      LDA	#26
  20232  7109		       85 b0		      STA	player0height
  20233  710b				   .L0689		;  goto PlayerDone
  20234  710b
  20235  710b		       4c b2 d9 	      jmp	.PlayerDone
  20236  710e
  20237  710e				   .
  20238  710e							; 
  20239  710e
  20240  710e				   .PlayerShoot2
  20241  710e							; PlayerShoot2
  20242  710e
  20243  710e				   .L0690		;  player0:
  20244  710e
  20245  710e		       a2 8e		      LDX	#<playerL0690_0
  20246  7110		       86 a2		      STX	player0pointerlo
  20247  7112		       a9 fa		      LDA	#>playerL0690_0
  20248  7114		       85 a3		      STA	player0pointerhi
  20249  7116		       a9 1a		      LDA	#26
  20250  7118		       85 b0		      STA	player0height
  20251  711a				   .L0691		;  goto PlayerDone
  20252  711a
  20253  711a		       4c b2 d9 	      jmp	.PlayerDone
  20254  711d
  20255  711d				   .Common_Jump_Up
  20256  711d							; Common_Jump_Up
  20257  711d
  20258  711d				   .L0692		;  player0:
  20259  711d
  20260  711d		       a2 a8		      LDX	#<playerL0692_0
  20261  711f		       86 a2		      STX	player0pointerlo
  20262  7121		       a9 fa		      LDA	#>playerL0692_0
  20263  7123		       85 a3		      STA	player0pointerhi
  20264  7125		       a9 1a		      LDA	#26
  20265  7127		       85 b0		      STA	player0height
  20266  7129				   .L0693		;  goto PlayerDone
  20267  7129
  20268  7129		       4c b2 d9 	      jmp	.PlayerDone
  20269  712c
  20270  712c				   .
  20271  712c							; 
  20272  712c
  20273  712c				   .Common_Jump_Down
  20274  712c							; Common_Jump_Down
  20275  712c
  20276  712c				   .L0694		;  player0:
  20277  712c
  20278  712c		       a2 c2		      LDX	#<playerL0694_0
  20279  712e		       86 a2		      STX	player0pointerlo
  20280  7130		       a9 fa		      LDA	#>playerL0694_0
  20281  7132		       85 a3		      STA	player0pointerhi
  20282  7134		       a9 1a		      LDA	#26
  20283  7136		       85 b0		      STA	player0height
  20284  7138				   .L0695		;  goto PlayerDone
  20285  7138
  20286  7138		       4c b2 d9 	      jmp	.PlayerDone
  20287  713b
  20288  713b				   .
  20289  713b							; 
  20290  713b
  20291  713b				   .ReaperStomp
  20292  713b							; ReaperStomp
  20293  713b
  20294  713b				   .L0696		;  player0:
  20295  713b
  20296  713b		       a2 dc		      LDX	#<playerL0696_0
  20297  713d		       86 a2		      STX	player0pointerlo
  20298  713f		       a9 fa		      LDA	#>playerL0696_0
  20299  7141		       85 a3		      STA	player0pointerhi
  20300  7143		       a9 17		      LDA	#23
  20301  7145		       85 b0		      STA	player0height
  20302  7147				   .L0697		;  goto PlayerDone
  20303  7147
  20304  7147		       4c b2 d9 	      jmp	.PlayerDone
  20305  714a
  20306  714a				   .
  20307  714a							; 
  20308  714a
  20309  714a				   .ChangePF
  20310  714a							; ChangePF
  20311  714a
  20312  714a				   .L0698		;  asm
  20313  714a
  20314  714a		       a9 07		      LDA	#7
  20315  714c
  20316  714c		       c5 f0		      CMP	HouseHeight
  20317  714e
  20318  714e		       b0 02		      BCS	.skipL0768_99
  20319  7150
  20320  7150		       85 f0		      STA	HouseHeight
  20321  7152
  20322  7152				   .skipL0768_99
  20323  7152
  20324  7152		       a5 ed		      LDA	w
  20325  7154
  20326  7154		       09 08		      ORA	#8
  20327  7156
  20328  7156		       09 10		      ORA	#16
  20329  7158
  20330  7158		       85 ed		      STA	w
  20331  715a
  20332  715a				   .L0699		;  on HouseHeight goto House0 House1 House2 House3 House4 House5 House6 House7 Gotos
  20333  715a
  20334  715a		       a6 f0		      LDX	HouseHeight
  20335  715c		       bd 65 d1 	      LDA	.L0699jumptablehi,x
  20336  715f		       48		      PHA
  20337  7160		       bd 6e d1 	      LDA	.L0699jumptablelo,x
  20338  7163		       48		      PHA
  20339  7164		       60		      RTS
  20340  7165				   .L0699jumptablehi
  20341  7165		       d1		      .byte.b	>(.House0-1)
  20342  7166		       d1		      .byte.b	>(.House1-1)
  20343  7167		       d1		      .byte.b	>(.House2-1)
  20344  7168		       d1		      .byte.b	>(.House3-1)
  20345  7169		       d1		      .byte.b	>(.House4-1)
  20346  716a		       d1		      .byte.b	>(.House5-1)
  20347  716b		       d1		      .byte.b	>(.House6-1)
  20348  716c		       d1		      .byte.b	>(.House7-1)
  20349  716d		       d2		      .byte.b	>(.Gotos-1)
  20350  716e				   .L0699jumptablelo
  20351  716e		       76		      .byte.b	<(.House0-1)
  20352  716f		       89		      .byte.b	<(.House1-1)
  20353  7170		       9c		      .byte.b	<(.House2-1)
  20354  7171		       af		      .byte.b	<(.House3-1)
  20355  7172		       c2		      .byte.b	<(.House4-1)
  20356  7173		       d5		      .byte.b	<(.House5-1)
  20357  7174		       e8		      .byte.b	<(.House6-1)
  20358  7175		       fb		      .byte.b	<(.House7-1)
  20359  7176		       0b		      .byte.b	<(.Gotos-1)
  20360  7177				   .House0
  20361  7177							; House0
  20362  7177
  20363  7177				   .L0700		;  playfield:
  20364  7177
  20365  7177		       a9 9a		      LDA	#<PF1_data4
  20366  7179		       85 bb		      STA	PF1pointer
  20367  717b		       a9 fd		      LDA	#>PF1_data4
  20368  717d		       85 bc		      STA	PF1pointer+1
  20369  717f		       a9 b0		      LDA	#<PF2_data4
  20370  7181		       85 bd		      STA	PF2pointer
  20371  7183		       a9 fd		      LDA	#>PF2_data4
  20372  7185		       85 be		      STA	PF2pointer+1
  20373  7187				   .L0701		;  goto Gotos
  20374  7187
  20375  7187		       4c 0c d2 	      jmp	.Gotos
  20376  718a
  20377  718a				   .
  20378  718a							; 
  20379  718a
  20380  718a				   .House1
  20381  718a							; House1
  20382  718a
  20383  718a				   .L0702		;  playfield:
  20384  718a
  20385  718a		       a9 c6		      LDA	#<PF1_data5
  20386  718c		       85 bb		      STA	PF1pointer
  20387  718e		       a9 fd		      LDA	#>PF1_data5
  20388  7190		       85 bc		      STA	PF1pointer+1
  20389  7192		       a9 dc		      LDA	#<PF2_data5
  20390  7194		       85 bd		      STA	PF2pointer
  20391  7196		       a9 fd		      LDA	#>PF2_data5
  20392  7198		       85 be		      STA	PF2pointer+1
  20393  719a				   .L0703		;  goto Gotos
  20394  719a
  20395  719a		       4c 0c d2 	      jmp	.Gotos
  20396  719d
  20397  719d				   .House2
  20398  719d							; House2
  20399  719d
  20400  719d				   .L0704		;  playfield:
  20401  719d
  20402  719d		       a9 00		      LDA	#<PF1_data6
  20403  719f		       85 bb		      STA	PF1pointer
  20404  71a1		       a9 fe		      LDA	#>PF1_data6
  20405  71a3		       85 bc		      STA	PF1pointer+1
  20406  71a5		       a9 16		      LDA	#<PF2_data6
  20407  71a7		       85 bd		      STA	PF2pointer
  20408  71a9		       a9 fe		      LDA	#>PF2_data6
  20409  71ab		       85 be		      STA	PF2pointer+1
  20410  71ad				   .L0705		;  goto Gotos
  20411  71ad
  20412  71ad		       4c 0c d2 	      jmp	.Gotos
  20413  71b0
  20414  71b0				   .House3
  20415  71b0							; House3
  20416  71b0
  20417  71b0				   .L0706		;  playfield:
  20418  71b0
  20419  71b0		       a9 2c		      LDA	#<PF1_data7
  20420  71b2		       85 bb		      STA	PF1pointer
  20421  71b4		       a9 fe		      LDA	#>PF1_data7
  20422  71b6		       85 bc		      STA	PF1pointer+1
  20423  71b8		       a9 42		      LDA	#<PF2_data7
  20424  71ba		       85 bd		      STA	PF2pointer
  20425  71bc		       a9 fe		      LDA	#>PF2_data7
  20426  71be		       85 be		      STA	PF2pointer+1
  20427  71c0				   .L0707		;  goto Gotos
  20428  71c0
  20429  71c0		       4c 0c d2 	      jmp	.Gotos
  20430  71c3
  20431  71c3				   .
  20432  71c3							; 
  20433  71c3
  20434  71c3				   .House4
  20435  71c3							; House4
  20436  71c3
  20437  71c3				   .L0708		;  playfield:
  20438  71c3
  20439  71c3		       a9 58		      LDA	#<PF1_data8
  20440  71c5		       85 bb		      STA	PF1pointer
  20441  71c7		       a9 fe		      LDA	#>PF1_data8
  20442  71c9		       85 bc		      STA	PF1pointer+1
  20443  71cb		       a9 6e		      LDA	#<PF2_data8
  20444  71cd		       85 bd		      STA	PF2pointer
  20445  71cf		       a9 fe		      LDA	#>PF2_data8
  20446  71d1		       85 be		      STA	PF2pointer+1
  20447  71d3				   .L0709		;  goto Gotos
  20448  71d3
  20449  71d3		       4c 0c d2 	      jmp	.Gotos
  20450  71d6
  20451  71d6				   .
  20452  71d6							; 
  20453  71d6
  20454  71d6				   .House5
  20455  71d6							; House5
  20456  71d6
  20457  71d6				   .L0710		;  playfield:
  20458  71d6
  20459  71d6		       a9 84		      LDA	#<PF1_data9
  20460  71d8		       85 bb		      STA	PF1pointer
  20461  71da		       a9 fe		      LDA	#>PF1_data9
  20462  71dc		       85 bc		      STA	PF1pointer+1
  20463  71de		       a9 9a		      LDA	#<PF2_data9
  20464  71e0		       85 bd		      STA	PF2pointer
  20465  71e2		       a9 fe		      LDA	#>PF2_data9
  20466  71e4		       85 be		      STA	PF2pointer+1
  20467  71e6				   .L0711		;  goto Gotos
  20468  71e6
  20469  71e6		       4c 0c d2 	      jmp	.Gotos
  20470  71e9
  20471  71e9				   .
  20472  71e9							; 
  20473  71e9
  20474  71e9				   .
  20475  71e9							; 
  20476  71e9
  20477  71e9				   .House6
  20478  71e9							; House6
  20479  71e9
  20480  71e9				   .L0712		;  playfield:
  20481  71e9
  20482  71e9		       a9 b0		      LDA	#<PF1_data10
  20483  71eb		       85 bb		      STA	PF1pointer
  20484  71ed		       a9 fe		      LDA	#>PF1_data10
  20485  71ef		       85 bc		      STA	PF1pointer+1
  20486  71f1		       a9 c6		      LDA	#<PF2_data10
  20487  71f3		       85 bd		      STA	PF2pointer
  20488  71f5		       a9 fe		      LDA	#>PF2_data10
  20489  71f7		       85 be		      STA	PF2pointer+1
  20490  71f9				   .L0713		;  goto Gotos
  20491  71f9
  20492  71f9		       4c 0c d2 	      jmp	.Gotos
  20493  71fc
  20494  71fc				   .
  20495  71fc							; 
  20496  71fc
  20497  71fc				   .House7
  20498  71fc							; House7
  20499  71fc
  20500  71fc				   .L0714		;  playfield:
  20501  71fc
  20502  71fc		       a9 dc		      LDA	#<PF1_data11
  20503  71fe		       85 bb		      STA	PF1pointer
  20504  7200		       a9 fe		      LDA	#>PF1_data11
  20505  7202		       85 bc		      STA	PF1pointer+1
  20506  7204		       a9 00		      LDA	#<PF2_data11
  20507  7206		       85 bd		      STA	PF2pointer
  20508  7208		       a9 ff		      LDA	#>PF2_data11
  20509  720a		       85 be		      STA	PF2pointer+1
  20510  720c				   .Gotos
  20511  720c							; Gotos
  20512  720c
  20513  720c				   .L0715		;  if PowerUp_Counter > 0  &&	PowerUp_Type = 7 then goto No_Pretty_Fly bank5
  20514  720c
  20515  720c		       a9 00		      LDA	#0
  20516  720e		       c5 ef		      CMP	PowerUp_Counter
  20517  7210		       b0 18		      BCS	.skipL0715
  20518  7212				   .condpart281
  20519  7212		       a5 81		      LDA	PowerUp_Type
  20520  7214		       c9 07		      CMP	#7
  20521  7216		       d0 12		      BNE	.skip281then
  20522  7218				   .condpart282
  20523  7218		       85 d1		      sta	temp7
  20524  721a		       a9 95		      lda	#>(.No_Pretty_Fly-1)
  20525  721c		       48		      pha
  20526  721d		       a9 8f		      lda	#<(.No_Pretty_Fly-1)
  20527  721f		       48		      pha
  20528  7220		       a5 d1		      lda	temp7
  20529  7222		       48		      pha
  20530  7223		       8a		      txa
  20531  7224		       48		      pha
  20532  7225		       a2 05		      ldx	#5
  20533  7227		       4c eb ff 	      jmp	BS_jsr
  20534  722a				   .skip281then
  20535  722a				   .skipL0715
  20536  722a				   .
  20537  722a							; 
  20538  722a
  20539  722a				   .L0716		;  if s{5} then s{5}  = 0 :  goto ComeBack_1 bank3
  20540  722a
  20541  722a		       a5 e9		      LDA	s
  20542  722c		       29 20		      AND	#32
  20543  722e		       f0 18		      BEQ	.skipL0716
  20544  7230				   .condpart283
  20545  7230		       a5 e9		      LDA	s
  20546  7232		       29 df		      AND	#223
  20547  7234		       85 e9		      STA	s
  20548  7236		       85 d1		      sta	temp7
  20549  7238		       a9 51		      lda	#>(.ComeBack_1-1)
  20550  723a		       48		      pha
  20551  723b		       a9 40		      lda	#<(.ComeBack_1-1)
  20552  723d		       48		      pha
  20553  723e		       a5 d1		      lda	temp7
  20554  7240		       48		      pha
  20555  7241		       8a		      txa
  20556  7242		       48		      pha
  20557  7243		       a2 03		      ldx	#3
  20558  7245		       4c eb ff 	      jmp	BS_jsr
  20559  7248				   .skipL0716
  20560  7248				   .L0717		;  if s{6}  &&  !o{0} then s{6}  = 0 :  goto ComeBack_2 bank3
  20561  7248
  20562  7248		       24 e9		      BIT	s
  20563  724a		       50 1d		      BVC	.skipL0717
  20564  724c				   .condpart284
  20565  724c		       a5 e5		      LDA	o
  20566  724e		       4a		      LSR
  20567  724f		       b0 18		      BCS	.skip284then
  20568  7251				   .condpart285
  20569  7251		       a5 e9		      LDA	s
  20570  7253		       29 bf		      AND	#191
  20571  7255		       85 e9		      STA	s
  20572  7257		       85 d1		      sta	temp7
  20573  7259		       a9 58		      lda	#>(.ComeBack_2-1)
  20574  725b		       48		      pha
  20575  725c		       a9 4a		      lda	#<(.ComeBack_2-1)
  20576  725e		       48		      pha
  20577  725f		       a5 d1		      lda	temp7
  20578  7261		       48		      pha
  20579  7262		       8a		      txa
  20580  7263		       48		      pha
  20581  7264		       a2 03		      ldx	#3
  20582  7266		       4c eb ff 	      jmp	BS_jsr
  20583  7269				   .skip284then
  20584  7269				   .skipL0717
  20585  7269				   .L0718		;  goto ComeBack_CPU
  20586  7269
  20587  7269		       4c d5 d3 	      jmp	.ComeBack_CPU
  20588  726c
  20589  726c				   .
  20590  726c							; 
  20591  726c
  20592  726c				   .
  20593  726c							; 
  20594  726c
  20595  726c				   .Sonic_Attack1
  20596  726c							; Sonic_Attack1
  20597  726c
  20598  726c				   .L0719		;  player0:
  20599  726c
  20600  726c		       a2 5a		      LDX	#<playerL0719_0
  20601  726e		       86 a2		      STX	player0pointerlo
  20602  7270		       a9 fb		      LDA	#>playerL0719_0
  20603  7272		       85 a3		      STA	player0pointerhi
  20604  7274		       a9 1a		      LDA	#26
  20605  7276		       85 b0		      STA	player0height
  20606  7278				   .L0720		;  goto PlayerDone
  20607  7278
  20608  7278		       4c b2 d9 	      jmp	.PlayerDone
  20609  727b
  20610  727b				   .
  20611  727b							; 
  20612  727b
  20613  727b				   .Sonic_Attack2
  20614  727b							; Sonic_Attack2
  20615  727b
  20616  727b				   .L0721		;  player0:
  20617  727b
  20618  727b		       a2 74		      LDX	#<playerL0721_0
  20619  727d		       86 a2		      STX	player0pointerlo
  20620  727f		       a9 fb		      LDA	#>playerL0721_0
  20621  7281		       85 a3		      STA	player0pointerhi
  20622  7283		       a9 13		      LDA	#19
  20623  7285		       85 b0		      STA	player0height
  20624  7287				   .L0722		;  goto PlayerDone
  20625  7287
  20626  7287		       4c b2 d9 	      jmp	.PlayerDone
  20627  728a
  20628  728a				   .
  20629  728a							; 
  20630  728a
  20631  728a				   .Sonic_Attack3
  20632  728a							; Sonic_Attack3
  20633  728a
  20634  728a				   .L0723		;  player0:
  20635  728a
  20636  728a		       a2 87		      LDX	#<playerL0723_0
  20637  728c		       86 a2		      STX	player0pointerlo
  20638  728e		       a9 fb		      LDA	#>playerL0723_0
  20639  7290		       85 a3		      STA	player0pointerhi
  20640  7292		       a9 1a		      LDA	#26
  20641  7294		       85 b0		      STA	player0height
  20642  7296				   .L0724		;  goto PlayerDone
  20643  7296
  20644  7296		       4c b2 d9 	      jmp	.PlayerDone
  20645  7299
  20646  7299				   .
  20647  7299							; 
  20648  7299
  20649  7299				   .Sonic_Attack4
  20650  7299							; Sonic_Attack4
  20651  7299
  20652  7299				   .
  20653  7299							; 
  20654  7299
  20655  7299				   .L0725		;  player0:
  20656  7299
  20657  7299		       a2 a1		      LDX	#<playerL0725_0
  20658  729b		       86 a2		      STX	player0pointerlo
  20659  729d		       a9 fb		      LDA	#>playerL0725_0
  20660  729f		       85 a3		      STA	player0pointerhi
  20661  72a1		       a9 13		      LDA	#19
  20662  72a3		       85 b0		      STA	player0height
  20663  72a5				   .L0726		;  goto PlayerDone
  20664  72a5
  20665  72a5		       4c b2 d9 	      jmp	.PlayerDone
  20666  72a8
  20667  72a8				   .
  20668  72a8							; 
  20669  72a8
  20670  72a8				   .ReaperFall
  20671  72a8							; ReaperFall
  20672  72a8
  20673  72a8				   .
  20674  72a8							; 
  20675  72a8
  20676  72a8				   .L0727		;  player0:
  20677  72a8
  20678  72a8		       a2 b4		      LDX	#<playerL0727_0
  20679  72aa		       86 a2		      STX	player0pointerlo
  20680  72ac		       a9 fb		      LDA	#>playerL0727_0
  20681  72ae		       85 a3		      STA	player0pointerhi
  20682  72b0		       a9 13		      LDA	#19
  20683  72b2		       85 b0		      STA	player0height
  20684  72b4				   .L0728		;  goto PlayerDone
  20685  72b4
  20686  72b4		       4c b2 d9 	      jmp	.PlayerDone
  20687  72b7
  20688  72b7				   .
  20689  72b7							; 
  20690  72b7
  20691  72b7				   .ReaperFallen
  20692  72b7							; ReaperFallen
  20693  72b7
  20694  72b7				   .L0729		;  player0:
  20695  72b7
  20696  72b7		       a2 c7		      LDX	#<playerL0729_0
  20697  72b9		       86 a2		      STX	player0pointerlo
  20698  72bb		       a9 fb		      LDA	#>playerL0729_0
  20699  72bd		       85 a3		      STA	player0pointerhi
  20700  72bf		       a9 13		      LDA	#19
  20701  72c1		       85 b0		      STA	player0height
  20702  72c3				   .L0730		;  goto PlayerDone
  20703  72c3
  20704  72c3		       4c b2 d9 	      jmp	.PlayerDone
  20705  72c6
  20706  72c6				   .
  20707  72c6							; 
  20708  72c6
  20709  72c6				   .CPU_AI
  20710  72c6							; CPU_AI
  20711  72c6
  20712  72c6				   .L0731		;  asm 
  20713  72c6
  20714  72c6		       a9 85		      LDA	#133
  20715  72c8
  20716  72c8		       c5 dd		      CMP	Reaper2_X
  20717  72ca
  20718  72ca		       90 06		      BCC	.ZZZ_1
  20719  72cc
  20720  72cc		       a9 18		      LDA	#24
  20721  72ce
  20722  72ce		       c5 dd		      CMP	Reaper2_X
  20723  72d0
  20724  72d0		       90 02		      BCC	.skipL0700_1
  20725  72d2
  20726  72d2				   .ZZZ_1
  20727  72d2
  20728  72d2		       85 dd		      STA	Reaper2_X
  20729  72d4
  20730  72d4				   .skipL0700_1
  20731  72d4
  20732  72d4				   .L0732		;  player0x = Reaper2_X :  player0y = Reaper2_Y
  20733  72d4
  20734  72d4		       a5 dd		      LDA	Reaper2_X
  20735  72d6		       85 84		      STA	player0x
  20736  72d8		       a5 de		      LDA	Reaper2_Y
  20737  72da		       85 8d		      STA	player0y
  20738  72dc				   .L0733		;  COLUP0 = $86
  20739  72dc
  20740  72dc		       a9 86		      LDA	#$86
  20741  72de		       85 06		      STA	COLUP0
  20742  72e0				   .L0734		;  if Player2Counter_1 > 0 then Player2Counter_1 =  Player2Counter_1 - 1
  20743  72e0
  20744  72e0		       a9 00		      LDA	#0
  20745  72e2		       c5 e6		      CMP	Player2Counter_1
  20746  72e4		       b0 02		      BCS	.skipL0734
  20747  72e6				   .condpart286
  20748  72e6		       c6 e6		      DEC	Player2Counter_1
  20749  72e8				   .skipL0734
  20750  72e8				   .L0735		;  if Player2Counter_Jump > 0 then Player2Counter_Jump =  Player2Counter_Jump - 1
  20751  72e8
  20752  72e8		       a9 00		      LDA	#0
  20753  72ea		       c5 e8		      CMP	Player2Counter_Jump
  20754  72ec		       b0 02		      BCS	.skipL0735
  20755  72ee				   .condpart287
  20756  72ee		       c6 e8		      DEC	Player2Counter_Jump
  20757  72f0				   .skipL0735
  20758  72f0				   .L0736		;  if e{3} then REFP0 = 8
  20759  72f0
  20760  72f0		       a5 db		      LDA	e
  20761  72f2		       29 08		      AND	#8
  20762  72f4		       f0 04		      BEQ	.skipL0736
  20763  72f6				   .condpart288
  20764  72f6		       a9 08		      LDA	#8
  20765  72f8		       85 0b		      STA	REFP0
  20766  72fa				   .skipL0736
  20767  72fa				   .
  20768  72fa							; 
  20769  72fa
  20770  72fa				   .L0737		;  asm
  20771  72fa
  20772  72fa		       24 e9		      BIT	s
  20773  72fc
  20774  72fc		       10 37		      BPL	.No_fall_CPU
  20775  72fe
  20776  72fe				   .Fallen_CPU
  20777  72fe							; Fallen_CPU
  20778  72fe
  20779  72fe				   .L0738		;  asm
  20780  72fe
  20781  72fe		       a5 db		      LDA	e
  20782  7300
  20783  7300		       29 20		      AND	#32
  20784  7302
  20785  7302		       f0 18		      BEQ	.skipL0344_1CPU
  20786  7304
  20787  7304		       a6 de		      LDX	Reaper2_Y
  20788  7306
  20789  7306		       e0 18		      CPX	#24
  20790  7308
  20791  7308		       b0 06		      BCS	.NoMoreJump2CPU
  20792  730a
  20793  730a		       a5 db		      LDA	e
  20794  730c
  20795  730c		       29 df		      AND	#223
  20796  730e
  20797  730e		       85 db		      STA	e
  20798  7310
  20799  7310				   .NoMoreJump2CPU
  20800  7310
  20801  7310		       8a		      TXA
  20802  7311
  20803  7311		       38		      SEC
  20804  7312
  20805  7312		       e9 02		      SBC	#2
  20806  7314
  20807  7314		       85 de		      STA	Reaper2_Y
  20808  7316
  20809  7316		       18		      CLC
  20810  7317
  20811  7317		       69 07		      ADC	#7
  20812  7319
  20813  7319		       4c a8 d2 	      jmp	.ReaperFall
  20814  731c
  20815  731c				   .skipL0344_1CPU
  20816  731c
  20817  731c
  20818  731c
  20819  731c		       a5 e6		      LDA	Player2Counter_1
  20820  731e
  20821  731e		       c9 00		      CMP	#0
  20822  7320
  20823  7320		       f0 03		      BEQ	.condpart292_99
  20824  7322
  20825  7322		       4c b7 d2 	      jmp	.ReaperFallen
  20826  7325
  20827  7325				   .condpart292_99
  20828  7325
  20829  7325		       a5 e9		      LDA	s
  20830  7327
  20831  7327		       29 7f		      AND	#127
  20832  7329
  20833  7329		       85 e9		      STA	s
  20834  732b
  20835  732b		       a5 df		      LDA	MaxLife
  20836  732d
  20837  732d		       85 c2		      STA	player1score
  20838  732f
  20839  732f		       a5 e5		      LDA	o
  20840  7331
  20841  7331		       09 10		      ORA	#16
  20842  7333
  20843  7333		       85 e5		      STA	o
  20844  7335
  20845  7335				   .
  20846  7335							; 
  20847  7335
  20848  7335				   .
  20849  7335							; 
  20850  7335
  20851  7335				   .
  20852  7335							; 
  20853  7335
  20854  7335				   .No_fall_CPU
  20855  7335							; No_fall_CPU
  20856  7335
  20857  7335				   .
  20858  7335							; 
  20859  7335
  20860  7335				   .L0739		;  asm
  20861  7335
  20862  7335		       a9 01		      LDA	#1
  20863  7337
  20864  7337		       c5 d5		      CMP	Dash_Delay
  20865  7339
  20866  7339		       b0 05		      BCS	.skipL0741_41
  20867  733b
  20868  733b		       c6 d5		      DEC	Dash_Delay
  20869  733d
  20870  733d		       4c 46 d6 	      jmp	.Attack_CPU_Dash
  20871  7340
  20872  7340				   .skipL0741_41
  20873  7340
  20874  7340		       a9 00		      LDA	#0
  20875  7342
  20876  7342		       85 d5		      STA	Dash_Delay
  20877  7344
  20878  7344		       c5 e6		      CMP	Player2Counter_1
  20879  7346
  20880  7346		       90 04		      BCC	.condpart290_1
  20881  7348
  20882  7348		       c5 e8		      CMP	Player2Counter_Jump
  20883  734a
  20884  734a		       b0 03		      BCS	.skip74OR_1
  20885  734c
  20886  734c				   .condpart290_1
  20887  734c
  20888  734c		       4c 60 d3 	      jmp	.NoTurnCPU
  20889  734f
  20890  734f				   .skip74OR_1
  20891  734f
  20892  734f		       a5 db		      LDA	e
  20893  7351
  20894  7351		       a6 da		      LDX	Reaper1_X
  20895  7353
  20896  7353		       e4 dd		      CPX	Reaper2_X
  20897  7355
  20898  7355		       b0 05		      BCS	.skipL0710_1
  20899  7357
  20900  7357		       09 08		      ORA	#8
  20901  7359
  20902  7359		       4c 5e d3 	      jmp	.skipelse23_177
  20903  735c
  20904  735c				   .skipL0710_1
  20905  735c
  20906  735c		       29 f7		      AND	#247
  20907  735e
  20908  735e				   .skipelse23_177
  20909  735e
  20910  735e		       85 db		      STA	e
  20911  7360
  20912  7360
  20913  7360
  20914  7360				   .NoTurnCPU
  20915  7360
  20916  7360
  20917  7360
  20918  7360		       a9 00		      LDA	#0
  20919  7362
  20920  7362		       c5 c2		      CMP	player1score
  20921  7364
  20922  7364		       f0 06		      BEQ	.condpart118_2CPU
  20923  7366
  20924  7366
  20925  7366
  20926  7366		       a5 df		      LDA	MaxLife
  20927  7368
  20928  7368		       c5 c2		      CMP	player1score
  20929  736a
  20930  736a		       b0 1e		      BCS	.skip42OR_2CPU
  20931  736c
  20932  736c				   .condpart118_2CPU
  20933  736c
  20934  736c		       85 c2		      STA	player1score
  20935  736e
  20936  736e		       a5 e9		      LDA	s
  20937  7370
  20938  7370		       09 80		      ORA	#128
  20939  7372
  20940  7372		       85 e9		      STA	s
  20941  7374
  20942  7374		       a9 78		      LDA	#120
  20943  7376
  20944  7376		       85 e6		      STA	Player2Counter_1
  20945  7378
  20946  7378		       a5 ed		      LDA	w
  20947  737a
  20948  737a		       29 20		      AND	#32
  20949  737c
  20950  737c		       f0 0c		      BEQ	.skip42OR_2CPU
  20951  737e
  20952  737e		       a9 00		      LDA	#0
  20953  7380
  20954  7380		       c5 ef		      CMP	PowerUp_Counter
  20955  7382
  20956  7382		       b0 06		      BCS	.skip42OR_2CPU
  20957  7384
  20958  7384		       85 ef		      STA	PowerUp_Counter
  20959  7386
  20960  7386		       a9 78		      LDA	#120
  20961  7388
  20962  7388		       85 92		      STA	player5y
  20963  738a
  20964  738a				   .skip42OR_2CPU
  20965  738a
  20966  738a				   .L0740		;  asm
  20967  738a
  20968  738a		       a9 17		      lda	#23
  20969  738c
  20970  738c		       c5 de		      CMP	Reaper2_Y
  20971  738e
  20972  738e		       90 02		      BCC	.skipL0215_2CPU
  20973  7390
  20974  7390		       85 de		      sta	Reaper2_Y
  20975  7392
  20976  7392				   .skipL0215_2CPU
  20977  7392
  20978  7392				   .
  20979  7392							; 
  20980  7392
  20981  7392				   .L0741		;  asm
  20982  7392
  20983  7392		       a5 db		      LDA	e
  20984  7394
  20985  7394		       29 20		      AND	#32
  20986  7396
  20987  7396		       f0 4b		      BEQ	.DODODO_CPU
  20988  7398
  20989  7398		       a9 00		      LDA	#0
  20990  739a
  20991  739a		       c5 e8		      CMP	Player2Counter_Jump
  20992  739c
  20993  739c		       90 45		      BCC	.DODODO_CPU
  20994  739e
  20995  739e		       a9 17		      LDA	#23
  20996  73a0
  20997  73a0		       c5 de		      CMP	Reaper2_Y
  20998  73a2
  20999  73a2		       90 3f		      BCC	.DODODO_CPU
  21000  73a4
  21001  73a4				   .
  21002  73a4							; 
  21003  73a4
  21004  73a4				   .L0742		;  asm
  21005  73a4
  21006  73a4
  21007  73a4
  21008  73a4		       24 e9		      BIT	s
  21009  73a6
  21010  73a6		       50 2d		      BVC	.ComeBack_CPU
  21011  73a8
  21012  73a8		       a5 e6		      LDA	Player2Counter_1
  21013  73aa
  21014  73aa		       c9 0c		      CMP	#12
  21015  73ac
  21016  73ac		       90 27		      BCC	.ComeBack_CPU
  21017  73ae
  21018  73ae				   .L0743		;  if player3y < 120 then dec player3score = player3score + $01
  21019  73ae
  21020  73ae		       a5 90		      LDA	player3y
  21021  73b0		       c9 78		      CMP	#120
  21022  73b2		       b0 09		      BCS	.skipL0743
  21023  73b4				   .condpart289
  21024  73b4		       f8		      SED
  21025  73b5		       a5 d3		      LDA	player3score
  21026  73b7		       18		      CLC
  21027  73b8		       69 01		      ADC	#$01
  21028  73ba		       85 d3		      STA	player3score
  21029  73bc		       d8		      CLD
  21030  73bd				   .skipL0743
  21031  73bd				   .L0744		;  if player4y < 120 then dec player3score = player3score + $01
  21032  73bd
  21033  73bd		       a5 91		      LDA	player4y
  21034  73bf		       c9 78		      CMP	#120
  21035  73c1		       b0 09		      BCS	.skipL0744
  21036  73c3				   .condpart290
  21037  73c3		       f8		      SED
  21038  73c4		       a5 d3		      LDA	player3score
  21039  73c6		       18		      CLC
  21040  73c7		       69 01		      ADC	#$01
  21041  73c9		       85 d3		      STA	player3score
  21042  73cb		       d8		      CLD
  21043  73cc				   .skipL0744
  21044  73cc				   .
  21045  73cc							; 
  21046  73cc
  21047  73cc				   .L0745		;  COLUBK = $1e :  HouseHeight = HouseHeight + 1 :  goto ChangePF
  21048  73cc
  21049  73cc		       a9 1e		      LDA	#$1e
  21050  73ce		       85 09		      STA	COLUBK
  21051  73d0		       e6 f0		      INC	HouseHeight
  21052  73d2		       4c 4a d1 	      jmp	.ChangePF
  21053  73d5
  21054  73d5				   .ComeBack_CPU
  21055  73d5							; ComeBack_CPU
  21056  73d5
  21057  73d5				   .L0746		;  Player2Counter_1 = 0
  21058  73d5
  21059  73d5		       a9 00		      LDA	#0
  21060  73d7		       85 e6		      STA	Player2Counter_1
  21061  73d9				   .L0747		;  e{5} = 0 :	Reaper2_Y = 23
  21062  73d9
  21063  73d9		       a5 db		      LDA	e
  21064  73db		       29 df		      AND	#223
  21065  73dd		       85 db		      STA	e
  21066  73df		       a9 17		      LDA	#23
  21067  73e1		       85 de		      STA	Reaper2_Y
  21068  73e3				   .DODODO_CPU
  21069  73e3							; DODODO_CPU
  21070  73e3
  21071  73e3				   .L0748		;  asm
  21072  73e3
  21073  73e3		       a5 e9		      LDA	s
  21074  73e5
  21075  73e5		       4a		      LSR
  21076  73e6
  21077  73e6		       90 49		      BCC	.No_S0CPU
  21078  73e8
  21079  73e8
  21080  73e8
  21081  73e8		       a9 86		      LDA	#134
  21082  73ea
  21083  73ea		       c5 e3		      CMP	Shoot2_X
  21084  73ec
  21085  73ec		       90 06		      BCC	.condpart214_1CPU
  21086  73ee
  21087  73ee		       a5 e3		      LDA	Shoot2_X
  21088  73f0
  21089  73f0		       c9 17		      CMP	#23
  21090  73f2
  21091  73f2		       b0 0f		      BCS	.skip70OR_1CPU
  21092  73f4
  21093  73f4				   .condpart214_1CPU
  21094  73f4
  21095  73f4		       a5 e9		      LDA	s
  21096  73f6
  21097  73f6		       29 fe		      AND	#254
  21098  73f8
  21099  73f8		       85 e9		      STA	s
  21100  73fa
  21101  73fa		       a5 e5		      LDA	o
  21102  73fc
  21103  73fc		       29 bf		      AND	#191
  21104  73fe
  21105  73fe		       85 e5		      STA	o
  21106  7400
  21107  7400		       4c 31 d4 	      jmp	.No_S0CPU
  21108  7403
  21109  7403				   .skip70OR_1CPU
  21110  7403
  21111  7403				   .
  21112  7403							; 
  21113  7403
  21114  7403				   .L0749		;  asm
  21115  7403
  21116  7403		       a5 e9		      LDA	s
  21117  7405
  21118  7405		       29 08		      AND	#8
  21119  7407
  21120  7407		       f0 08		      BEQ	.skipL0228_2CPU
  21121  7409
  21122  7409		       a5 e3		      LDA	Shoot2_X
  21123  740b
  21124  740b		       38		      SEC
  21125  740c
  21126  740c		       e9 05		      SBC	#5
  21127  740e
  21128  740e		       4c 18 d4 	      jmp	.skipelse9_22CPU
  21129  7411
  21130  7411				   .skipL0228_2CPU
  21131  7411
  21132  7411		       a5 e3		      LDA	Shoot2_X
  21133  7413
  21134  7413		       18		      CLC
  21135  7414
  21136  7414		       69 05		      ADC	#5
  21137  7416
  21138  7416		       85 e3		      STA	Shoot2_X
  21139  7418
  21140  7418				   .skipelse9_22CPU
  21141  7418
  21142  7418		       85 e3		      STA	Shoot2_X
  21143  741a
  21144  741a		       85 80		      STA	missile0x
  21145  741c
  21146  741c
  21147  741c
  21148  741c		       a5 e9		      LDA	s
  21149  741e
  21150  741e		       29 10		      AND	#16
  21151  7420
  21152  7420		       f0 07		      BEQ	.skipL0229_2CPU
  21153  7422
  21154  7422		       a5 e4		      LDA	Shoot2_Y
  21155  7424
  21156  7424		       18		      CLC
  21157  7425
  21158  7425		       69 04		      ADC	#4
  21159  7427
  21160  7427		       85 e4		      STA	Shoot2_Y
  21161  7429
  21162  7429				   .skipL0229_2CPU
  21163  7429
  21164  7429		       a5 e4		      LDA	Shoot2_Y
  21165  742b
  21166  742b		       85 8a		      STA	missile0y
  21167  742d
  21168  742d				   .
  21169  742d							; 
  21170  742d
  21171  742d				   .L0750		;  NUSIZ0 = $20
  21172  742d
  21173  742d		       a9 20		      LDA	#$20
  21174  742f		       85 04		      STA	NUSIZ0
  21175  7431				   .No_S0CPU
  21176  7431							; No_S0CPU
  21177  7431
  21178  7431				   .L0751		;  asm
  21179  7431
  21180  7431		       a5 db		      LDA	e
  21181  7433
  21182  7433		       29 20		      AND	#32
  21183  7435
  21184  7435		       f0 03		      beq	.skippp2CPU
  21185  7437
  21186  7437		       4c e6 d7 	      jmp	.JumpThings_CPU
  21187  743a
  21188  743a				   .skippp2CPU
  21189  743a							; skippp2CPU
  21190  743a
  21191  743a				   .L0752		;  if Player2Counter_1 > 0 then goto Continue_CPU
  21192  743a
  21193  743a		       a9 00		      LDA	#0
  21194  743c		       c5 e6		      CMP	Player2Counter_1
  21195  743e		       b0 03		      BCS	.skipL0752
  21196  7440				   .condpart291
  21197  7440		       4c 56 d7 	      jmp	.Continue_CPU
  21198  7443
  21199  7443				   .skipL0752
  21200  7443				   .L0753		;  asm
  21201  7443
  21202  7443		       a5 dd		      LDA	Reaper2_X
  21203  7445
  21204  7445		       c5 da		      CMP	Reaper1_X
  21205  7447
  21206  7447		       b0 08		      BCS	.skipL0725_166
  21207  7449
  21208  7449		       a5 da		      LDA	Reaper1_X
  21209  744b
  21210  744b		       38		      SEC
  21211  744c
  21212  744c		       e5 dd		      SBC	Reaper2_X
  21213  744e
  21214  744e		       4c 54 d4 	      jmp	.skipelse24_166
  21215  7451
  21216  7451				   .skipL0725_166
  21217  7451
  21218  7451		       38		      SEC
  21219  7452
  21220  7452		       e5 da		      SBC	Reaper1_X
  21221  7454
  21222  7454				   .skipelse24_166
  21223  7454
  21224  7454		       85 cf		      STA	temp5
  21225  7456
  21226  7456
  21227  7456
  21228  7456
  21229  7456
  21230  7456		       a5 ed		      LDA	w
  21231  7458
  21232  7458		       29 20		      AND	#32
  21233  745a
  21234  745a		       d0 10		      BNE	.QQQQ
  21235  745c
  21236  745c		       a5 ef		      LDA	PowerUp_Counter
  21237  745e
  21238  745e		       c9 00		      CMP	#0
  21239  7460
  21240  7460		       f0 0a		      BEQ	.QQQQ
  21241  7462
  21242  7462
  21243  7462
  21244  7462		       a5 81		      LDA	PowerUp_Type
  21245  7464
  21246  7464		       c9 06		      CMP	#6
  21247  7466
  21248  7466		       f0 51		      BEQ	.Flee_Skull
  21249  7468
  21250  7468		       c9 00		      CMP	#0
  21251  746a
  21252  746a		       f0 4d		      BEQ	.Flee_Skull
  21253  746c
  21254  746c				   .QQQQ
  21255  746c							; QQQQ
  21256  746c
  21257  746c				   .L0754		;  asm
  21258  746c
  21259  746c		       a9 0a		      LDA	#10
  21260  746e
  21261  746e		       c5 c2		      CMP	Life2
  21262  7470
  21263  7470		       90 78		      BCC	.Health_OK
  21264  7472
  21265  7472		       a5 cf		      LDA	temp5
  21266  7474
  21267  7474		       c9 19		      CMP	#25
  21268  7476
  21269  7476		       b0 27		      BCS	.No_Flee
  21270  7478
  21271  7478
  21272  7478
  21273  7478				   .
  21274  7478							; 
  21275  7478
  21276  7478				   .Flee
  21277  7478							; Flee
  21278  7478
  21279  7478				   .L0755		;  asm
  21280  7478
  21281  7478		       a5 db		      LDA	e
  21282  747a
  21283  747a		       a6 da		      LDX	Reaper1_X
  21284  747c
  21285  747c		       e4 dd		      CPX	Reaper2_X
  21286  747e
  21287  747e		       b0 05		      BCS	.skipL0730_1
  21288  7480
  21289  7480		       29 f7		      AND	#247
  21290  7482
  21291  7482		       4c 87 d4 	      jmp	.skipelse25_188
  21292  7485
  21293  7485				   .skipL0730_1
  21294  7485
  21295  7485		       09 08		      ORA	#8
  21296  7487
  21297  7487				   .skipelse25_188
  21298  7487
  21299  7487		       85 db		      STA	e
  21300  7489
  21301  7489				   .Flee_Continue
  21302  7489							; Flee_Continue
  21303  7489
  21304  7489				   .L0756		;  asm
  21305  7489
  21306  7489
  21307  7489
  21308  7489		       a6 dd		      LDX	Reaper2_X
  21309  748b
  21310  748b		       e0 28		      CPX	#40
  21311  748d
  21312  748d		       b0 05		      BCS	.skipL0731_1
  21313  748f
  21314  748f		       29 f7		      AND	#247
  21315  7491
  21316  7491		       4c 9a d4 	      jmp	.skipL0732_1
  21317  7494
  21318  7494				   .skipL0731_1
  21319  7494
  21320  7494		       e0 78		      CPX	#120
  21321  7496
  21322  7496		       90 04		      BCC	.skipL0733_1
  21323  7498
  21324  7498		       09 08		      ORA	#8
  21325  749a
  21326  749a				   .skipL0732_1
  21327  749a
  21328  749a		       85 db		      STA	e
  21329  749c
  21330  749c				   .skipL0733_1
  21331  749c
  21332  749c				   .L0757		;  goto Attack_CPU_Dash
  21333  749c
  21334  749c		       4c 46 d6 	      jmp	.Attack_CPU_Dash
  21335  749f
  21336  749f				   .No_Flee
  21337  749f							; No_Flee
  21338  749f
  21339  749f				   .L0758		;  asm
  21340  749f
  21341  749f		       a5 db		      LDA	e
  21342  74a1
  21343  74a1		       29 02		      AND	#2
  21344  74a3
  21345  74a3		       f0 11		      BEQ	.skip160then_2CPU
  21346  74a5
  21347  74a5		       a5 c2		      LDA	Life2
  21348  74a7
  21349  74a7		       c5 df		      CMP	MaxLife
  21350  74a9
  21351  74a9		       b0 0b		      BCS	.skip160then_2CPU
  21352  74ab
  21353  74ab		       f8		      SED
  21354  74ac
  21355  74ac		       18		      CLC
  21356  74ad
  21357  74ad		       69 01		      ADC	#1
  21358  74af
  21359  74af		       85 c2		      STA	Life2
  21360  74b1
  21361  74b1		       d8		      CLD
  21362  74b2
  21363  74b2		       a9 1e		      LDA	#$1e
  21364  74b4
  21365  74b4		       85 bf		      STA	player1scorecolor
  21366  74b6
  21367  74b6				   .skip160then_2CPU
  21368  74b6
  21369  74b6				   .
  21370  74b6							; 
  21371  74b6
  21372  74b6				   .L0759		;  goto Player_Duck
  21373  74b6
  21374  74b6		       4c b7 d0 	      jmp	.Player_Duck
  21375  74b9
  21376  74b9				   .
  21377  74b9							; 
  21378  74b9
  21379  74b9				   .Flee_Skull
  21380  74b9							; Flee_Skull
  21381  74b9
  21382  74b9				   .L0760		;  asm
  21383  74b9
  21384  74b9		       a5 dd		      LDA	Reaper2_X
  21385  74bb
  21386  74bb		       c5 89		      CMP	player5x
  21387  74bd
  21388  74bd		       b0 08		      BCS	.skipL0722_1
  21389  74bf
  21390  74bf		       a5 89		      LDA	player5x
  21391  74c1
  21392  74c1		       38		      SEC
  21393  74c2
  21394  74c2		       e5 dd		      SBC	Reaper2_X
  21395  74c4
  21396  74c4		       4c ca d4 	      jmp	.skipelse20_14
  21397  74c7
  21398  74c7				   .skipL0722_1
  21399  74c7
  21400  74c7		       38		      SEC
  21401  74c8
  21402  74c8		       e5 89		      SBC	player5x
  21403  74ca
  21404  74ca				   .skipelse20_14
  21405  74ca
  21406  74ca		       85 cf		      STA	temp5
  21407  74cc
  21408  74cc		       c9 19		      CMP	#25
  21409  74ce
  21410  74ce		       90 14		      BCC	.Health_OKK
  21411  74d0
  21412  74d0		       a5 db		      LDA	e
  21413  74d2
  21414  74d2		       a6 89		      LDX	player5x
  21415  74d4
  21416  74d4		       e4 dd		      CPX	Reaper2_X
  21417  74d6
  21418  74d6		       b0 09		      BCS	.skipL0724_1
  21419  74d8
  21420  74d8		       29 f7		      AND	#247
  21421  74da
  21422  74da		       4c df d4 	      jmp	.skipelse21_1
  21423  74dd
  21424  74dd		       09 08		      ORA	#8
  21425  74df
  21426  74df				   .skipelse21_1
  21427  74df
  21428  74df		       85 db		      STA	e
  21429  74e1
  21430  74e1				   .skipL0724_1
  21431  74e1
  21432  74e1				   .
  21433  74e1							; 
  21434  74e1
  21435  74e1				   .L0761		;  goto Flee_Continue
  21436  74e1
  21437  74e1		       4c 89 d4 	      jmp	.Flee_Continue
  21438  74e4
  21439  74e4				   .
  21440  74e4							; 
  21441  74e4
  21442  74e4				   .
  21443  74e4							; 
  21444  74e4
  21445  74e4				   .Health_OKK
  21446  74e4							; Health_OKK
  21447  74e4
  21448  74e4				   .
  21449  74e4							; 
  21450  74e4
  21451  74e4				   .L0762		;  asm
  21452  74e4
  21453  74e4		       a5 81		      LDA	PowerUp_Type
  21454  74e6
  21455  74e6		       c9 00		      CMP	#0
  21456  74e8
  21457  74e8		       f0 60		      BEQ	.szalonna
  21458  74ea
  21459  74ea				   .Health_OK
  21460  74ea							; Health_OK
  21461  74ea
  21462  74ea				   .L0763		;  asm
  21463  74ea
  21464  74ea		       a9 77		      LDA	#119
  21465  74ec
  21466  74ec		       c5 92		      CMP	player5y
  21467  74ee
  21468  74ee		       90 22		      BCC	.NoPowerUp
  21469  74f0
  21470  74f0		       a9 00		      LDA	#0
  21471  74f2
  21472  74f2		       c5 ef		      CMP	PowerUp_Counter
  21473  74f4
  21474  74f4		       90 1c		      BCC	.NoPowerUp
  21475  74f6
  21476  74f6
  21477  74f6
  21478  74f6		       a5 89		      LDA	player5x
  21479  74f8
  21480  74f8		       85 cc		      STA	temp2
  21481  74fa
  21482  74fa		       c5 dd		      CMP	Reaper2_X
  21483  74fc
  21484  74fc		       90 06		      BCC	.skipL0729_1
  21485  74fe
  21486  74fe		       38		      SEC
  21487  74ff
  21488  74ff		       e5 dd		      SBC	Reaper2_X
  21489  7501
  21490  7501		       4c 09 d5 	      jmp	.skipelse22_178
  21491  7504
  21492  7504				   .skipL0729_1
  21493  7504
  21494  7504		       a5 dd		      LDA	Reaper2_X
  21495  7506
  21496  7506		       38		      SEC
  21497  7507
  21498  7507		       e5 89		      SBC	player5x
  21499  7509
  21500  7509				   .skipelse22_178
  21501  7509
  21502  7509		       85 d0		      STA	temp6
  21503  750b
  21504  750b		       c9 16		      CMP	#22
  21505  750d
  21506  750d		       b0 03		      BCS	.NoPowerUp
  21507  750f
  21508  750f				   .
  21509  750f							; 
  21510  750f
  21511  750f				   .
  21512  750f							; 
  21513  750f
  21514  750f				   .L0764		;  goto Jump_CPU
  21515  750f
  21516  750f		       4c 13 d6 	      jmp	.Jump_CPU
  21517  7512
  21518  7512				   .NoPowerUp
  21519  7512							; NoPowerUp
  21520  7512
  21521  7512				   .L0765		;  asm
  21522  7512
  21523  7512		       a9 00		      LDA	#0
  21524  7514
  21525  7514		       c5 ef		      CMP	PowerUp_Counter
  21526  7516
  21527  7516		       b0 12		      BCS	.GEGE
  21528  7518
  21529  7518		       a5 81		      LDA	PowerUp_Type
  21530  751a
  21531  751a		       c9 04		      CMP	#4
  21532  751c
  21533  751c		       d0 0c		      BNE	.GEGE
  21534  751e
  21535  751e		       a5 ed		      LDA	w
  21536  7520
  21537  7520		       29 20		      AND	#32
  21538  7522
  21539  7522		       d0 06		      BNE	.GEGE
  21540  7524
  21541  7524		       a5 e5		      LDA	o
  21542  7526
  21543  7526		       29 20		      AND	#32
  21544  7528
  21545  7528		       f0 20		      BEQ	.szalonna
  21546  752a
  21547  752a				   .GEGE
  21548  752a
  21549  752a
  21550  752a
  21551  752a		       a5 da		      LDA	Reaper1_X
  21552  752c
  21553  752c		       85 cc		      STA	temp2
  21554  752e
  21555  752e		       a5 d6		      lda	rand
  21556  7530
  21557  7530		       4a		      lsr
  21558  7531
  21559  7531		       90 02		      bcc	*+4
  21560  7533
  21561  7533		       49 b4		      eor	#$B4
  21562  7535
  21563  7535		       85 d6		      sta	rand
  21564  7537
  21565  7537		       c9 eb		      CMP	#235
  21566  7539
  21567  7539		       b0 7a		      BCS	.Go_Random2
  21568  753b
  21569  753b				   .skippme
  21570  753b
  21571  753b				   .
  21572  753b							; 
  21573  753b
  21574  753b				   .
  21575  753b							; 
  21576  753b
  21577  753b				   .L0766		;  if Life1 > 0  &&  !o{3} then goto Not_Dead
  21578  753b
  21579  753b		       a9 00		      LDA	#0
  21580  753d		       c5 c1		      CMP	Life1
  21581  753f		       b0 09		      BCS	.skipL0766
  21582  7541				   .condpart292
  21583  7541		       a5 e5		      LDA	o
  21584  7543		       29 08		      AND	#8
  21585  7545		       d0 03		      BNE	.skip292then
  21586  7547				   .condpart293
  21587  7547		       4c f2 d5 	      jmp	.Not_Dead
  21588  754a
  21589  754a				   .skip292then
  21590  754a				   .skipL0766
  21591  754a				   .
  21592  754a							; 
  21593  754a
  21594  754a				   .szalonna
  21595  754a							; szalonna
  21596  754a
  21597  754a				   .L0767		;  asm
  21598  754a
  21599  754a		       a9 58		      LDA	#88
  21600  754c
  21601  754c		       c5 8e		      CMP	player1y
  21602  754e
  21603  754e		       90 24		      BCC	.TryPerson2
  21604  7550
  21605  7550		       a5 85		      LDA	player1x
  21606  7552
  21607  7552		       85 cc		      STA	temp2
  21608  7554
  21609  7554		       c5 dd		      CMP	Reaper2_X
  21610  7556
  21611  7556		       90 0c		      BCC	.skipL0734_199
  21612  7558
  21613  7558		       38		      SEC
  21614  7559
  21615  7559		       e5 dd		      SBC	Reaper2_X
  21616  755b
  21617  755b		       85 cf		      STA	temp5
  21618  755d
  21619  755d		       a5 db		      LDA	e
  21620  755f
  21621  755f		       29 f7		      AND	#247
  21622  7561
  21623  7561		       4c 6f d5 	      jmp	.skipelse20_189
  21624  7564
  21625  7564				   .skipL0734_199
  21626  7564
  21627  7564		       a5 dd		      LDA	Reaper2_X
  21628  7566
  21629  7566		       38		      SEC
  21630  7567
  21631  7567		       e5 85		      SBC	player1x
  21632  7569
  21633  7569		       85 cf		      STA	temp5
  21634  756b
  21635  756b		       a5 db		      LDA	e
  21636  756d
  21637  756d		       09 08		      ORA	#8
  21638  756f
  21639  756f				   .skipelse20_189
  21640  756f
  21641  756f		       85 db		      STA	e
  21642  7571
  21643  7571				   .
  21644  7571							; 
  21645  7571
  21646  7571				   .L0768		;  goto Not_Dead
  21647  7571
  21648  7571		       4c f2 d5 	      jmp	.Not_Dead
  21649  7574
  21650  7574				   .TryPerson2
  21651  7574							; TryPerson2
  21652  7574
  21653  7574				   .L0769		;  asm
  21654  7574
  21655  7574		       a9 58		      LDA	#88
  21656  7576
  21657  7576		       c5 8f		      CMP	player2y
  21658  7578
  21659  7578		       90 24		      BCC	.Go_Random
  21660  757a
  21661  757a
  21662  757a
  21663  757a		       a5 86		      LDA	player2x
  21664  757c
  21665  757c		       85 cc		      STA	temp2
  21666  757e
  21667  757e		       c5 dd		      CMP	Reaper2_X
  21668  7580
  21669  7580		       90 0c		      BCC	.skipL0738_1
  21670  7582
  21671  7582		       38		      SEC
  21672  7583
  21673  7583		       e5 dd		      SBC	Reaper2_X
  21674  7585
  21675  7585		       85 cf		      STA	temp5
  21676  7587
  21677  7587		       a5 db		      LDA	e
  21678  7589
  21679  7589		       29 f7		      AND	#247
  21680  758b
  21681  758b		       4c 99 d5 	      jmp	.skipelse21_21
  21682  758e
  21683  758e				   .skipL0738_1
  21684  758e
  21685  758e		       a5 dd		      LDA	Reaper2_X
  21686  7590
  21687  7590		       38		      SEC
  21688  7591
  21689  7591		       e5 86		      SBC	player2x
  21690  7593
  21691  7593		       85 cf		      STA	temp5
  21692  7595
  21693  7595		       a5 db		      LDA	e
  21694  7597
  21695  7597		       09 08		      ORA	#8
  21696  7599
  21697  7599				   .skipelse21_21
  21698  7599
  21699  7599		       85 db		      STA	e
  21700  759b
  21701  759b				   .
  21702  759b							; 
  21703  759b
  21704  759b				   .L0770		;  goto Not_Dead
  21705  759b
  21706  759b		       4c f2 d5 	      jmp	.Not_Dead
  21707  759e
  21708  759e				   .
  21709  759e							; 
  21710  759e
  21711  759e				   .Go_Random
  21712  759e							; Go_Random
  21713  759e
  21714  759e				   .L0771		;  asm
  21715  759e
  21716  759e		       a5 d6		      lda	rand
  21717  75a0
  21718  75a0		       4a		      lsr
  21719  75a1
  21720  75a1		       90 02		      bcc	*+4
  21721  75a3
  21722  75a3		       49 b4		      eor	#$B4
  21723  75a5
  21724  75a5		       85 d6		      sta	rand
  21725  75a7
  21726  75a7		       c9 96		      CMP	#150
  21727  75a9
  21728  75a9		       b0 0a		      BCS	.Go_Random2
  21729  75ab
  21730  75ab		       a9 58		      LDA	#88
  21731  75ad
  21732  75ad		       c5 90		      CMP	player3y
  21733  75af
  21734  75af		       b0 62		      BCS	.Jump_CPU
  21735  75b1
  21736  75b1		       c5 91		      CMP	player4y
  21737  75b3
  21738  75b3		       b0 5e		      BCS	.Jump_CPU
  21739  75b5
  21740  75b5
  21741  75b5
  21742  75b5
  21743  75b5
  21744  75b5				   .Go_Random2
  21745  75b5
  21746  75b5		       a9 18		      LDA	#24
  21747  75b7
  21748  75b7		       48		      PHA
  21749  75b8
  21750  75b8		       a5 d6		      lda	rand
  21751  75ba
  21752  75ba		       4a		      lsr
  21753  75bb
  21754  75bb		       90 02		      bcc	*+4
  21755  75bd
  21756  75bd		       49 b4		      eor	#$B4
  21757  75bf
  21758  75bf		       85 d6		      sta	rand
  21759  75c1
  21760  75c1		       29 7f		      AND	#127
  21761  75c3
  21762  75c3		       ba		      TSX
  21763  75c4
  21764  75c4		       e8		      INX
  21765  75c5
  21766  75c5		       9a		      TXS
  21767  75c6
  21768  75c6		       18		      CLC
  21769  75c7
  21770  75c7		       75 00		      ADC	$00,x
  21771  75c9
  21772  75c9		       c9 86		      CMP	#134
  21773  75cb
  21774  75cb		       90 02		      BCC	.skipL0741_1
  21775  75cd
  21776  75cd		       a9 86		      LDA	#134
  21777  75cf
  21778  75cf				   .skipL0741_1
  21779  75cf
  21780  75cf		       85 ce		      STA	temp4
  21781  75d1
  21782  75d1		       85 cc		      STA	temp2
  21783  75d3
  21784  75d3
  21785  75d3
  21786  75d3
  21787  75d3
  21788  75d3		       a5 dd		      LDA	Reaper2_X
  21789  75d5
  21790  75d5		       c5 ce		      CMP	temp4
  21791  75d7
  21792  75d7		       b0 0e		      BCS	.skipL0742_16
  21793  75d9
  21794  75d9		       a5 ce		      LDA	temp4
  21795  75db
  21796  75db		       38		      SEC
  21797  75dc
  21798  75dc		       e5 dd		      SBC	Reaper2_X
  21799  75de
  21800  75de		       85 cf		      STA	temp5
  21801  75e0
  21802  75e0		       a5 db		      LDA	e
  21803  75e2
  21804  75e2		       29 f7		      AND	#247
  21805  75e4
  21806  75e4		       4c f0 d5 	      jmp	.skipelse20_16
  21807  75e7
  21808  75e7				   .skipL0742_16
  21809  75e7
  21810  75e7		       38		      SEC
  21811  75e8
  21812  75e8		       e5 ce		      SBC	temp4
  21813  75ea
  21814  75ea		       85 cf		      STA	temp5
  21815  75ec
  21816  75ec		       a5 db		      LDA	e
  21817  75ee
  21818  75ee		       09 08		      ORA	#8
  21819  75f0
  21820  75f0				   .skipelse20_16
  21821  75f0
  21822  75f0		       85 db		      STA	e
  21823  75f2
  21824  75f2				   .
  21825  75f2							; 
  21826  75f2
  21827  75f2				   .
  21828  75f2							; 
  21829  75f2
  21830  75f2				   .Not_Dead
  21831  75f2							; Not_Dead
  21832  75f2
  21833  75f2				   .L0772		;  asm
  21834  75f2
  21835  75f2		       a9 32		      LDA	#50
  21836  75f4
  21837  75f4		       c5 cf		      CMP	temp5
  21838  75f6
  21839  75f6		       b0 0f		      BCS	.skip282then_22
  21840  75f8
  21841  75f8		       a9 58		      LDA	#88
  21842  75fa
  21843  75fa		       c5 e4		      CMP	Shoot2_Y
  21844  75fc
  21845  75fc		       b0 48		      BCS	.Attack_CPU_Dash
  21846  75fe
  21847  75fe		       a5 d2		      LDA	Kills1
  21848  7600
  21849  7600		       c5 d3		      CMP	Kills2
  21850  7602
  21851  7602		       b0 42		      BCS	.Attack_CPU_Dash
  21852  7604
  21853  7604		       4c ea d6 	      jmp	.Attack_CPU_Shoot
  21854  7607
  21855  7607				   .skip282then_22
  21856  7607
  21857  7607		       a5 db		      LDA	e
  21858  7609
  21859  7609		       29 10		      AND	#16
  21860  760b
  21861  760b		       f0 24		      BEQ	.skip284then_22
  21862  760d
  21863  760d		       a5 cf		      LDA	temp5
  21864  760f
  21865  760f		       c9 23		      CMP	#35
  21866  7611
  21867  7611		       b0 1e		      BCS	.skip284then_22
  21868  7613
  21869  7613				   .Jump_CPU
  21870  7613							; Jump_CPU
  21871  7613
  21872  7613				   .L0773		;  AUDV1 = 7 :  AUDC1 = 7 :  AUDF1 = 1
  21873  7613
  21874  7613		       a9 07		      LDA	#7
  21875  7615		       85 1a		      STA	AUDV1
  21876  7617		       85 16		      STA	AUDC1
  21877  7619		       a9 01		      LDA	#1
  21878  761b		       85 18		      STA	AUDF1
  21879  761d				   .L0774		;  Player2Counter_Jump = 10 :	e{5} = 1
  21880  761d
  21881  761d		       a9 0a		      LDA	#10
  21882  761f		       85 e8		      STA	Player2Counter_Jump
  21883  7621		       a5 db		      LDA	e
  21884  7623		       09 20		      ORA	#32
  21885  7625		       85 db		      STA	e
  21886  7627				   .L0775		;  player0y = Reaper2_Y + 7
  21887  7627
  21888  7627		       a5 de		      LDA	Reaper2_Y
  21889  7629		       18		      CLC
  21890  762a		       69 07		      ADC	#7
  21891  762c		       85 8d		      STA	player0y
  21892  762e				   .L0776		;  goto Common_Jump_Up
  21893  762e
  21894  762e		       4c 1d d1 	      jmp	.Common_Jump_Up
  21895  7631
  21896  7631				   .L0777		;  asm
  21897  7631
  21898  7631				   .skip284then_22
  21899  7631
  21900  7631		       a5 cf		      LDA	temp5
  21901  7633
  21902  7633		       c9 0f		      CMP	#15
  21903  7635
  21904  7635		       b0 0f		      BCS	.Attack_CPU_Dash
  21905  7637
  21906  7637		       a5 db		      LDA	e
  21907  7639
  21908  7639		       29 7f		      AND	#127
  21909  763b
  21910  763b		       85 db		      STA	e
  21911  763d
  21912  763d		       a9 00		      LDA	#0
  21913  763f
  21914  763f		       85 eb		      STA	Player2Counter_Sprite
  21915  7641
  21916  7641		       85 e6		      STA	Player2Counter_1
  21917  7643
  21918  7643				   .L0778		;  goto Attack_CPU
  21919  7643
  21920  7643		       4c 6d d7 	      jmp	.Attack_CPU
  21921  7646
  21922  7646				   .
  21923  7646							; 
  21924  7646
  21925  7646				   .
  21926  7646							; 
  21927  7646
  21928  7646				   .
  21929  7646							; 
  21930  7646
  21931  7646				   .Attack_CPU_Dash
  21932  7646							; Attack_CPU_Dash
  21933  7646
  21934  7646				   .
  21935  7646							; 
  21936  7646
  21937  7646				   .L0779		;  asm
  21938  7646
  21939  7646		       a5 db		      LDA	e
  21940  7648
  21941  7648		       09 80		      ORA	#128
  21942  764a
  21943  764a		       85 db		      STA	e
  21944  764c
  21945  764c		       a9 09		      LDA	#9
  21946  764e
  21947  764e		       85 1a		      STA	AUDV1
  21948  7650
  21949  7650		       a9 03		      LDA	#3
  21950  7652
  21951  7652		       85 16		      STA	AUDC1
  21952  7654
  21953  7654		       a2 04		      LDX	#4
  21954  7656
  21955  7656		       86 18		      STX	AUDF1
  21956  7658
  21957  7658		       a5 d5		      LDA	Dash_Delay
  21958  765a
  21959  765a		       c9 00		      CMP	#0
  21960  765c
  21961  765c		       d0 02		      BNE	.skipL0783_122
  21962  765e
  21963  765e		       86 d5		      STX	Dash_Delay
  21964  7660
  21965  7660				   .skipL0783_122
  21966  7660
  21967  7660
  21968  7660
  21969  7660		       a6 dd		      LDX	Reaper2_X
  21970  7662
  21971  7662		       a5 db		      LDA	e
  21972  7664
  21973  7664		       29 08		      AND	#8
  21974  7666
  21975  7666		       d0 15		      BNE	.skip281then_1
  21976  7668
  21977  7668		       e0 84		      CPX	#132
  21978  766a
  21979  766a		       90 11		      BCC	.skip281then_1
  21980  766c
  21981  766c		       a5 db		      LDA	e
  21982  766e
  21983  766e		       09 08		      ORA	#8
  21984  7670
  21985  7670				   .JumpHere
  21986  7670
  21987  7670		       29 7f		      AND	#127
  21988  7672
  21989  7672		       85 db		      STA	e
  21990  7674
  21991  7674		       a9 00		      LDA	#0
  21992  7676
  21993  7676		       85 eb		      STA	Player2Counter_Sprite
  21994  7678
  21995  7678		       85 d5		      STA	Dash_Delay
  21996  767a
  21997  767a		       4c 00 d0 	      jmp	.PlayerStand
  21998  767d
  21999  767d				   .skip281then_1
  22000  767d
  22001  767d		       a5 db		      LDA	e
  22002  767f
  22003  767f		       29 08		      AND	#8
  22004  7681
  22005  7681		       f0 0b		      BEQ	.skipL0742_1
  22006  7683
  22007  7683		       e0 15		      CPX	#21
  22008  7685
  22009  7685		       b0 07		      BCS	.skipL0742_1
  22010  7687
  22011  7687		       a5 db		      LDA	e
  22012  7689
  22013  7689		       29 f7		      AND	#247
  22014  768b
  22015  768b		       4c 70 d6 	      jmp	.JumpHere
  22016  768e
  22017  768e
  22018  768e
  22019  768e				   .skipL0742_1
  22020  768e
  22021  768e		       a5 db		      LDA	e
  22022  7690
  22023  7690		       29 08		      AND	#8
  22024  7692
  22025  7692		       d0 2b		      BNE	.Dash_LeftCPU
  22026  7694
  22027  7694
  22028  7694
  22029  7694		       a5 dd		      LDA	Reaper2_X
  22030  7696
  22031  7696		       c9 84		      CMP	#132
  22032  7698
  22033  7698		       b0 14		      BCS	.skipL0287_3CPU
  22034  769a
  22035  769a		       18		      CLC
  22036  769b
  22037  769b		       69 06		      ADC	#6
  22038  769d
  22039  769d		       85 dd		      STA	Reaper2_X
  22040  769f
  22041  769f		       a5 eb		      LDA	Player2Counter_Sprite
  22042  76a1
  22043  76a1		       18		      CLC
  22044  76a2
  22045  76a2		       69 02		      ADC	#2
  22046  76a4
  22047  76a4		       85 eb		      STA	Player2Counter_Sprite
  22048  76a6
  22049  76a6		       c9 17		      CMP	#23
  22050  76a8
  22051  76a8		       90 04		      BCC	.skipL0287_3CPU
  22052  76aa
  22053  76aa		       a9 00		      LDA	#0
  22054  76ac
  22055  76ac		       85 eb		      STA	Player2Counter_Sprite
  22056  76ae
  22057  76ae				   .skipL0287_3CPU
  22058  76ae
  22059  76ae		       a5 eb		      LDA	Player2Counter_Sprite
  22060  76b0
  22061  76b0		       4a		      lsr
  22062  76b1
  22063  76b1		       4a		      lsr
  22064  76b2
  22065  76b2		       4a		      lsr
  22066  76b3
  22067  76b3		       85 ce		      STA	temp4
  22068  76b5
  22069  76b5				   .L0780		;  player0y = Reaper2_Y + 7
  22070  76b5
  22071  76b5		       a5 de		      LDA	Reaper2_Y
  22072  76b7		       18		      CLC
  22073  76b8		       69 07		      ADC	#7
  22074  76ba		       85 8d		      STA	player0y
  22075  76bc				   .L0781		;  goto Attack_Player_Dash
  22076  76bc
  22077  76bc		       4c c6 d0 	      jmp	.Attack_Player_Dash
  22078  76bf
  22079  76bf				   .
  22080  76bf							; 
  22081  76bf
  22082  76bf				   .Dash_LeftCPU
  22083  76bf							; Dash_LeftCPU
  22084  76bf
  22085  76bf				   .L0782		;  asm
  22086  76bf
  22087  76bf		       a5 dd		      LDA	Reaper2_X
  22088  76c1
  22089  76c1		       c9 15		      CMP	#21
  22090  76c3
  22091  76c3		       90 14		      BCC	.skipL0287_4CPU
  22092  76c5
  22093  76c5		       38		      SEC
  22094  76c6
  22095  76c6		       e9 06		      SBC	#6
  22096  76c8
  22097  76c8		       85 dd		      STA	Reaper2_X
  22098  76ca
  22099  76ca		       a5 eb		      LDA	Player2Counter_Sprite
  22100  76cc
  22101  76cc		       18		      CLC
  22102  76cd
  22103  76cd		       69 02		      ADC	#2
  22104  76cf
  22105  76cf		       85 eb		      STA	Player2Counter_Sprite
  22106  76d1
  22107  76d1		       c9 17		      CMP	#23
  22108  76d3
  22109  76d3		       90 04		      BCC	.skipL0287_4CPU
  22110  76d5
  22111  76d5		       a9 00		      LDA	#0
  22112  76d7
  22113  76d7		       85 eb		      STA	Player2Counter_Sprite
  22114  76d9
  22115  76d9				   .skipL0287_4CPU
  22116  76d9
  22117  76d9		       a5 eb		      LDA	Player2Counter_Sprite
  22118  76db
  22119  76db		       4a		      lsr
  22120  76dc
  22121  76dc		       4a		      lsr
  22122  76dd
  22123  76dd		       4a		      lsr
  22124  76de
  22125  76de		       85 ce		      STA	temp4
  22126  76e0
  22127  76e0				   .L0783		;  player0y = Reaper2_Y + 7
  22128  76e0
  22129  76e0		       a5 de		      LDA	Reaper2_Y
  22130  76e2		       18		      CLC
  22131  76e3		       69 07		      ADC	#7
  22132  76e5		       85 8d		      STA	player0y
  22133  76e7				   .L0784		;  goto Attack_Player_Dash
  22134  76e7
  22135  76e7		       4c c6 d0 	      jmp	.Attack_Player_Dash
  22136  76ea
  22137  76ea				   .
  22138  76ea							; 
  22139  76ea
  22140  76ea				   .Attack_CPU_Shoot
  22141  76ea							; Attack_CPU_Shoot
  22142  76ea
  22143  76ea				   .L0785		;  asm
  22144  76ea
  22145  76ea		       a5 de		      LDA	Reaper2_Y
  22146  76ec
  22147  76ec		       18		      CLC
  22148  76ed
  22149  76ed		       69 07		      ADC	#7
  22150  76ef
  22151  76ef		       85 8d		      STA	player0y
  22152  76f1
  22153  76f1		       38		      SEC
  22154  76f2
  22155  76f2		       e9 11		      SBC	#17
  22156  76f4
  22157  76f4		       85 e4		      STA	Shoot2_Y
  22158  76f6
  22159  76f6
  22160  76f6
  22161  76f6				   .L0786		;  Player2Counter_1 = 25 :  AUDV1 = 9 :  AUDC1 = 15 :	AUDF1 = 2
  22162  76f6
  22163  76f6		       a9 19		      LDA	#25
  22164  76f8		       85 e6		      STA	Player2Counter_1
  22165  76fa		       a9 09		      LDA	#9
  22166  76fc		       85 1a		      STA	AUDV1
  22167  76fe		       a9 0f		      LDA	#15
  22168  7700		       85 16		      STA	AUDC1
  22169  7702		       a9 02		      LDA	#2
  22170  7704		       85 18		      STA	AUDF1
  22171  7706				   .L0787		;  NUSIZ0 = $20 :  o{6}  =  1 :  s{0}	= 1
  22172  7706
  22173  7706		       a9 20		      LDA	#$20
  22174  7708		       85 04		      STA	NUSIZ0
  22175  770a		       a5 e5		      LDA	o
  22176  770c		       09 40		      ORA	#64
  22177  770e		       85 e5		      STA	o
  22178  7710		       a5 e9		      LDA	s
  22179  7712		       09 01		      ORA	#1
  22180  7714		       85 e9		      STA	s
  22181  7716				   .
  22182  7716							; 
  22183  7716
  22184  7716				   .
  22185  7716							; 
  22186  7716
  22187  7716				   .L0788		;  asm
  22188  7716
  22189  7716		       a5 db		      LDA	e
  22190  7718
  22191  7718		       29 08		      AND	#8
  22192  771a
  22193  771a		       f0 0e		      BEQ	.skipL0529_1CPU
  22194  771c
  22195  771c		       a5 e9		      LDA	s
  22196  771e
  22197  771e		       09 08		      ORA	#8
  22198  7720
  22199  7720		       85 e9		      STA	s
  22200  7722
  22201  7722		       a5 dd		      LDA	Reaper2_X
  22202  7724
  22203  7724		       38		      SEC
  22204  7725
  22205  7725		       e9 01		      SBC	#1
  22206  7727
  22207  7727		       4c 35 d7 	      jmp	.skipelse45_1CPU
  22208  772a
  22209  772a				   .skipL0529_1CPU
  22210  772a
  22211  772a		       a5 e9		      LDA	s
  22212  772c
  22213  772c		       29 f7		      AND	#247
  22214  772e
  22215  772e		       85 e9		      STA	s
  22216  7730
  22217  7730		       a5 dd		      LDA	Reaper2_X
  22218  7732
  22219  7732		       18		      CLC
  22220  7733
  22221  7733		       69 07		      ADC	#7
  22222  7735
  22223  7735				   .skipelse45_1CPU
  22224  7735
  22225  7735		       85 e3		      STA	Shoot2_X
  22226  7737
  22227  7737
  22228  7737
  22229  7737		       a5 db		      LDA	e
  22230  7739
  22231  7739		       29 10		      AND	#16
  22232  773b
  22233  773b		       f0 10		      BEQ	.skipL0790_88
  22234  773d
  22235  773d		       a5 e9		      LDA	s
  22236  773f
  22237  773f		       09 10		      ORA	#16
  22238  7741
  22239  7741		       85 e9		      STA	s
  22240  7743
  22241  7743		       a5 e4		      LDA	Shoot2_Y
  22242  7745
  22243  7745		       18		      CLC
  22244  7746
  22245  7746		       69 03		      ADC	#3
  22246  7748
  22247  7748		       85 e4		      STA	Shoot2_Y
  22248  774a
  22249  774a		       4c 0e d1 	      jmp	.PlayerShoot2
  22250  774d
  22251  774d
  22252  774d
  22253  774d				   .skipL0790_88
  22254  774d
  22255  774d		       a5 e9		      LDA	s
  22256  774f
  22257  774f		       29 ef		      AND	#239
  22258  7751
  22259  7751		       85 e9		      STA	s
  22260  7753
  22261  7753		       4c ff d0 	      jmp	.PlayerShoot1
  22262  7756
  22263  7756				   .
  22264  7756							; 
  22265  7756
  22266  7756				   .
  22267  7756							; 
  22268  7756
  22269  7756				   .Continue_CPU
  22270  7756							; Continue_CPU
  22271  7756
  22272  7756				   .L0789		;  if s{7} then goto PlayerDone
  22273  7756
  22274  7756		       24 e9		      BIT	s
  22275  7758		       10 03		      BPL	.skipL0789
  22276  775a				   .condpart294
  22277  775a		       4c b2 d9 	      jmp	.PlayerDone
  22278  775d
  22279  775d				   .skipL0789
  22280  775d				   .L0790		;  if e{7} then goto Attack_CPU_Dash
  22281  775d
  22282  775d		       24 db		      BIT	e
  22283  775f		       10 03		      BPL	.skipL0790
  22284  7761				   .condpart295
  22285  7761		       4c 46 d6 	      jmp	.Attack_CPU_Dash
  22286  7764
  22287  7764				   .skipL0790
  22288  7764				   .
  22289  7764							; 
  22290  7764
  22291  7764				   .L0791		;  asm
  22292  7764
  22293  7764		       24 e5		      BIT	o
  22294  7766
  22295  7766		       50 6b		      BVC	.Attack_Shoot_Wait_CPU
  22296  7768
  22297  7768		       a5 e9		      LDA	s
  22298  776a
  22299  776a		       4a		      LSR
  22300  776b
  22301  776b		       b0 66		      BCS	.Attack_Shoot_Wait_CPU
  22302  776d
  22303  776d				   .
  22304  776d							; 
  22305  776d
  22306  776d				   .Attack_CPU
  22307  776d							; Attack_CPU
  22308  776d
  22309  776d				   .L0792		;  o{6}  = 1 :  AUDV1 = 9 :  AUDC1 = 6 :  AUDF1 = 6
  22310  776d
  22311  776d		       a5 e5		      LDA	o
  22312  776f		       09 40		      ORA	#64
  22313  7771		       85 e5		      STA	o
  22314  7773		       a9 09		      LDA	#9
  22315  7775		       85 1a		      STA	AUDV1
  22316  7777		       a9 06		      LDA	#6
  22317  7779		       85 16		      STA	AUDC1
  22318  777b		       85 18		      STA	AUDF1
  22319  777d				   .L0793		;  asm
  22320  777d
  22321  777d		       a5 e6		      LDA	Player2Counter_1
  22322  777f
  22323  777f		       c9 1a		      CMP	#26
  22324  7781
  22325  7781		       b0 06		      BCS	.skipL0281_2CPU
  22326  7783
  22327  7783		       18		      CLC
  22328  7784
  22329  7784		       69 03		      ADC	#3
  22330  7786
  22331  7786		       4c 91 d7 	      jmp	.skipelse14_2CPU
  22332  7789
  22333  7789				   .skipL0281_2CPU
  22334  7789
  22335  7789		       a5 e5		      LDA	o
  22336  778b
  22337  778b		       29 bf		      AND	#191
  22338  778d
  22339  778d		       85 e5		      STA	o
  22340  778f
  22341  778f		       a9 00		      LDA	#0
  22342  7791
  22343  7791				   .skipelse14_2CPU
  22344  7791
  22345  7791		       85 e6		      STA	Player2Counter_1
  22346  7793
  22347  7793		       4a		      lsr
  22348  7794
  22349  7794		       4a		      lsr
  22350  7795
  22351  7795		       4a		      lsr
  22352  7796
  22353  7796		       85 ce		      STA	temp4
  22354  7798
  22355  7798		       c9 00		      CMP	#0
  22356  779a
  22357  779a		       d0 0a		      BNE	.skipL0273_2CPU
  22358  779c
  22359  779c		       a5 de		      LDA	Reaper2_Y
  22360  779e
  22361  779e		       18		      CLC
  22362  779f
  22363  779f		       69 06		      ADC	#6
  22364  77a1
  22365  77a1		       85 8d		      STA	player0y
  22366  77a3
  22367  77a3		       4c 0f d0 	      jmp	.Attack_Player
  22368  77a6
  22369  77a6				   .skipL0273_2CPU
  22370  77a6
  22371  77a6		       c9 01		      CMP	#1
  22372  77a8
  22373  77a8		       d0 0a		      BNE	.skipL0274_2CPU
  22374  77aa
  22375  77aa		       a5 de		      LDA	Reaper2_Y
  22376  77ac
  22377  77ac		       18		      CLC
  22378  77ad
  22379  77ad		       69 02		      ADC	#2
  22380  77af
  22381  77af		       85 8d		      STA	player0y
  22382  77b1
  22383  77b1		       4c 0f d0 	      jmp	.Attack_Player
  22384  77b4
  22385  77b4				   .skipL0274_2CPU
  22386  77b4
  22387  77b4		       a5 db		      LDA	e
  22388  77b6
  22389  77b6		       29 08		      AND	#8
  22390  77b8
  22391  77b8		       d0 08		      BNE	.skipL0275_2CPU
  22392  77ba
  22393  77ba		       a5 84		      LDA	player0x
  22394  77bc
  22395  77bc		       18		      CLC
  22396  77bd
  22397  77bd		       69 08		      ADC	#8
  22398  77bf
  22399  77bf		       4c c7 d7 	      jmp	.skipelse22_22CPU
  22400  77c2
  22401  77c2				   .skipL0275_2CPU
  22402  77c2
  22403  77c2		       a5 84		      LDA	player0x
  22404  77c4
  22405  77c4		       38		      SEC
  22406  77c5
  22407  77c5		       e9 07		      SBC	#7
  22408  77c7
  22409  77c7				   .skipelse22_22CPU
  22410  77c7
  22411  77c7		       85 80		      STA	missile0x
  22412  77c9
  22413  77c9				   .L0794		;  missile0y = player0y - 10
  22414  77c9
  22415  77c9		       a5 8d		      LDA	player0y
  22416  77cb		       38		      SEC
  22417  77cc		       e9 0a		      SBC	#10
  22418  77ce		       85 8a		      STA	missile0y
  22419  77d0				   .L0795		;  goto Attack_Player
  22420  77d0
  22421  77d0		       4c 0f d0 	      jmp	.Attack_Player
  22422  77d3
  22423  77d3				   .
  22424  77d3							; 
  22425  77d3
  22426  77d3				   .Attack_Shoot_Wait_CPU
  22427  77d3							; Attack_Shoot_Wait_CPU
  22428  77d3
  22429  77d3				   .L0796		;  player0y = Reaper2_Y + 7
  22430  77d3
  22431  77d3		       a5 de		      LDA	Reaper2_Y
  22432  77d5		       18		      CLC
  22433  77d6		       69 07		      ADC	#7
  22434  77d8		       85 8d		      STA	player0y
  22435  77da				   .L0797		;  asm
  22436  77da
  22437  77da		       a5 db		      LDA	e
  22438  77dc
  22439  77dc		       29 10		      AND	#16
  22440  77de
  22441  77de		       f0 03		      BEQ	.skipL0798_77
  22442  77e0
  22443  77e0		       4c 0e d1 	      jmp	.PlayerShoot2
  22444  77e3
  22445  77e3				   .skipL0798_77
  22446  77e3
  22447  77e3		       4c ff d0 	      jmp	.PlayerShoot1
  22448  77e6
  22449  77e6				   .
  22450  77e6							; 
  22451  77e6
  22452  77e6				   .JumpThings_CPU
  22453  77e6							; JumpThings_CPU
  22454  77e6
  22455  77e6				   .
  22456  77e6							; 
  22457  77e6
  22458  77e6				   .L0798		;  asm
  22459  77e6
  22460  77e6
  22461  77e6
  22462  77e6		       a5 d6		      lda	rand
  22463  77e8
  22464  77e8		       4a		      lsr
  22465  77e9
  22466  77e9		       90 02		      bcc	*+4
  22467  77eb
  22468  77eb		       49 b4		      eor	#$B4
  22469  77ed
  22470  77ed		       85 d6		      sta	rand
  22471  77ef
  22472  77ef		       85 cb		      STA	temp1
  22473  77f1
  22474  77f1		       aa		      TAX
  22475  77f2
  22476  77f2
  22477  77f2
  22478  77f2		       a5 ed		      LDA	w
  22479  77f4
  22480  77f4		       29 20		      AND	#32
  22481  77f6
  22482  77f6		       d0 34		      BNE	.No_Inverse_CPU
  22483  77f8
  22484  77f8		       a5 ef		      LDA	PowerUp_Counter
  22485  77fa
  22486  77fa		       c9 00		      CMP	#0
  22487  77fc
  22488  77fc		       f0 2e		      BEQ	.No_Inverse_CPU
  22489  77fe
  22490  77fe		       a9 03		      LDA	#3
  22491  7800
  22492  7800		       c5 81		      CMP	PowerUp_Type
  22493  7802
  22494  7802		       d0 28		      BNE	.No_Inverse_CPU
  22495  7804
  22496  7804				   .L0799		;  COLUP0 = $0e
  22497  7804
  22498  7804		       a9 0e		      LDA	#$0e
  22499  7806		       85 06		      STA	COLUP0
  22500  7808				   .
  22501  7808							; 
  22502  7808
  22503  7808				   .L0800		;  asm
  22504  7808
  22505  7808		       e0 a0		      CPX	#160
  22506  780a
  22507  780a		       90 20		      BCC	.No_Inverse_CPU
  22508  780c
  22509  780c
  22510  780c
  22511  780c		       a5 dd		      LDA	Reaper2_X
  22512  780e
  22513  780e		       c5 cc		      CMP	temp2
  22514  7810
  22515  7810		       b0 0d		      BCS	.skipL0772_1
  22516  7812
  22517  7812		       18		      CLC
  22518  7813
  22519  7813		       69 02		      ADC	#2
  22520  7815
  22521  7815		       85 dd		      STA	Reaper2_X
  22522  7817
  22523  7817		       a5 cc		      LDA	temp2
  22524  7819
  22525  7819		       38		      SEC
  22526  781a
  22527  781a		       e5 dd		      SBC	Reaper2_X
  22528  781c
  22529  781c		       4c 27 d8 	      jmp	.skipelse22_12
  22530  781f
  22531  781f				   .skipL0772_1
  22532  781f
  22533  781f		       38		      SEC
  22534  7820
  22535  7820		       e9 02		      SBC	#2
  22536  7822
  22537  7822		       85 dd		      STA	Reaper2_X
  22538  7824
  22539  7824		       38		      SEC
  22540  7825
  22541  7825		       e5 cc		      SBC	temp2
  22542  7827
  22543  7827				   .skipelse22_12
  22544  7827
  22545  7827		       85 cf		      STA	temp5
  22546  7829
  22547  7829
  22548  7829
  22549  7829
  22550  7829
  22551  7829				   .
  22552  7829							; 
  22553  7829
  22554  7829				   .L0801		;  goto Inversed_CPU
  22555  7829
  22556  7829		       4c 49 d8 	      jmp	.Inversed_CPU
  22557  782c
  22558  782c				   .No_Inverse_CPU
  22559  782c							; No_Inverse_CPU
  22560  782c
  22561  782c				   .L0802		;  asm
  22562  782c
  22563  782c		       a5 dd		      LDA	Reaper2_X
  22564  782e
  22565  782e		       c5 cc		      CMP	temp2
  22566  7830
  22567  7830		       b0 0d		      BCS	.skipL0772_12
  22568  7832
  22569  7832		       38		      SEC
  22570  7833
  22571  7833		       e9 02		      SBC	#2
  22572  7835
  22573  7835		       85 dd		      STA	Reaper2_X
  22574  7837
  22575  7837		       a5 cc		      LDA	temp2
  22576  7839
  22577  7839		       38		      SEC
  22578  783a
  22579  783a		       e5 dd		      SBC	Reaper2_X
  22580  783c
  22581  783c		       4c 47 d8 	      jmp	.skipelse22_2
  22582  783f
  22583  783f				   .skipL0772_12
  22584  783f
  22585  783f		       18		      CLC
  22586  7840
  22587  7840		       69 02		      ADC	#2
  22588  7842
  22589  7842		       85 dd		      STA	Reaper2_X
  22590  7844
  22591  7844		       38		      SEC
  22592  7845
  22593  7845		       e5 cc		      SBC	temp2
  22594  7847
  22595  7847				   .skipelse22_2
  22596  7847
  22597  7847		       85 cf		      STA	temp5
  22598  7849
  22599  7849				   .Inversed_CPU
  22600  7849							; Inversed_CPU
  22601  7849
  22602  7849				   .
  22603  7849							; 
  22604  7849
  22605  7849				   .L0803		;  if s{6}  &&  Player2Counter_1 > 10 then COLUP0 = $1e :  AUDV1 = 11 :  AUDC1 = 14 :	AUDF1 = 3
  22606  7849
  22607  7849		       24 e9		      BIT	s
  22608  784b		       50 16		      BVC	.skipL0803
  22609  784d				   .condpart296
  22610  784d		       a9 0a		      LDA	#10
  22611  784f		       c5 e6		      CMP	Player2Counter_1
  22612  7851		       b0 10		      BCS	.skip296then
  22613  7853				   .condpart297
  22614  7853		       a9 1e		      LDA	#$1e
  22615  7855		       85 06		      STA	COLUP0
  22616  7857		       a9 0b		      LDA	#11
  22617  7859		       85 1a		      STA	AUDV1
  22618  785b		       a9 0e		      LDA	#14
  22619  785d		       85 16		      STA	AUDC1
  22620  785f		       a9 03		      LDA	#3
  22621  7861		       85 18		      STA	AUDF1
  22622  7863				   .skip296then
  22623  7863				   .skipL0803
  22624  7863				   .
  22625  7863							; 
  22626  7863
  22627  7863				   .L0804		;  asm
  22628  7863
  22629  7863		       a5 e5		      LDA	o
  22630  7865
  22631  7865		       a0 00		      LDY	#0
  22632  7867
  22633  7867		       c4 e8		      CPY	Player2Counter_Jump
  22634  7869
  22635  7869		       b0 07		      BCS	.skipL0815_78
  22636  786b
  22637  786b
  22638  786b
  22639  786b		       29 bf		      AND	#191
  22640  786d
  22641  786d		       85 e5		      STA	o
  22642  786f
  22643  786f		       4c ca d8 	      jmp	.JustFall_CPU
  22644  7872
  22645  7872				   .skipL0815_78
  22646  7872
  22647  7872		       09 40		      ORA	#64
  22648  7874
  22649  7874		       85 e5		      STA	o
  22650  7876
  22651  7876
  22652  7876
  22653  7876		       a5 c1		      LDA	Life1
  22654  7878
  22655  7878		       c9 00		      CMP	#0
  22656  787a
  22657  787a		       f0 19		      BEQ	.NoSpin_CPU
  22658  787c
  22659  787c		       a5 e5		      LDA	o
  22660  787e
  22661  787e		       29 08		      AND	#8
  22662  7880
  22663  7880		       d0 13		      BNE	.NoSpin_CPU
  22664  7882
  22665  7882
  22666  7882
  22667  7882		       a9 37		      LDA	#55
  22668  7884
  22669  7884		       c5 cf		      CMP	temp5
  22670  7886
  22671  7886		       b0 68		      BCS	.Spin_CPU
  22672  7888
  22673  7888		       e0 f0		      CPX	#240
  22674  788a
  22675  788a		       90 64		      BCC	.Spin_CPU
  22676  788c
  22677  788c		       a5 f0		      LDA	HouseHeight
  22678  788e
  22679  788e		       c9 07		      CMP	#7
  22680  7890
  22681  7890		       90 03		      BCC	.NoSpin_CPU
  22682  7892
  22683  7892				   .
  22684  7892							; 
  22685  7892
  22686  7892				   .L0805		;  goto Spin_CPU
  22687  7892
  22688  7892		       4c f0 d8 	      jmp	.Spin_CPU
  22689  7895
  22690  7895				   .NoSpin_CPU
  22691  7895							; NoSpin_CPU
  22692  7895
  22693  7895				   .
  22694  7895							; 
  22695  7895
  22696  7895				   .L0806		;  asm
  22697  7895
  22698  7895		       a9 58		      LDA	#88
  22699  7897
  22700  7897		       c5 90		      CMP	player3y
  22701  7899
  22702  7899		       b0 04		      BCS	.GGG
  22703  789b
  22704  789b		       c5 91		      CMP	player4y
  22705  789d
  22706  789d		       90 51		      BCC	.Spin_CPU
  22707  789f
  22708  789f				   .GGG
  22709  789f
  22710  789f		       a5 de		      lda	Reaper2_Y
  22711  78a1
  22712  78a1		       38		      SEC
  22713  78a2
  22714  78a2		       e9 07		      SBC	#7
  22715  78a4
  22716  78a4		       85 de		      STA	Reaper2_Y
  22717  78a6
  22718  78a6		       18		      CLC
  22719  78a7
  22720  78a7		       69 04		      ADC	#4
  22721  78a9
  22722  78a9		       85 8d		      STA	player0y
  22723  78ab
  22724  78ab		       38		      SEC
  22725  78ac
  22726  78ac		       e9 19		      SBC	#25
  22727  78ae
  22728  78ae		       85 8a		      STA	missile0y
  22729  78b0
  22730  78b0		       a9 00		      LDA	#0
  22731  78b2
  22732  78b2		       85 eb		      STA	Player2Counter_Sprite
  22733  78b4
  22734  78b4		       85 e8		      STA	Player2Counter_Jump
  22735  78b6
  22736  78b6				   .L0807		;  s{6} = 1 :	Player2Counter_1 = Player2Counter_1 + 4 :  missile0x = Reaper2_X  :  goto ReaperStomp
  22737  78b6
  22738  78b6		       a5 e9		      LDA	s
  22739  78b8		       09 40		      ORA	#64
  22740  78ba		       85 e9		      STA	s
  22741  78bc		       a5 e6		      LDA	Player2Counter_1
  22742  78be		       18		      CLC
  22743  78bf		       69 04		      ADC	#4
  22744  78c1		       85 e6		      STA	Player2Counter_1
  22745  78c3		       a5 dd		      LDA	Reaper2_X
  22746  78c5		       85 80		      STA	missile0x
  22747  78c7		       4c 3b d1 	      jmp	.ReaperStomp
  22748  78ca
  22749  78ca				   .JustFall_CPU
  22750  78ca							; JustFall_CPU
  22751  78ca
  22752  78ca				   .L0808		;  s{6} = 0  :  Player2Counter_Sprite = 0
  22753  78ca
  22754  78ca		       a5 e9		      LDA	s
  22755  78cc		       29 bf		      AND	#191
  22756  78ce		       85 e9		      STA	s
  22757  78d0		       a9 00		      LDA	#0
  22758  78d2		       85 eb		      STA	Player2Counter_Sprite
  22759  78d4				   .L0809		;  asm
  22760  78d4
  22761  78d4		       a5 de		      LDA	Reaper2_Y
  22762  78d6
  22763  78d6		       18		      CLC
  22764  78d7
  22765  78d7		       69 07		      ADC	#7
  22766  78d9
  22767  78d9		       85 8d		      STA	player0y
  22768  78db
  22769  78db		       38		      SEC
  22770  78dc
  22771  78dc		       a2 00		      LDX	#0
  22772  78de
  22773  78de		       e4 e8		      CPX	Player2Counter_Jump
  22774  78e0
  22775  78e0		       b0 07		      BCS	.skipL0270_2CPU
  22776  78e2
  22777  78e2		       e9 02		      SBC	#2
  22778  78e4
  22779  78e4		       85 de		      STA	Reaper2_Y
  22780  78e6
  22781  78e6
  22782  78e6
  22783  78e6		       4c 1d d1 	      jmp	.Common_Jump_Up
  22784  78e9
  22785  78e9				   .skipL0270_2CPU
  22786  78e9
  22787  78e9		       e9 0c		      SBC	#12
  22788  78eb
  22789  78eb		       85 de		      STA	Reaper2_Y
  22790  78ed
  22791  78ed
  22792  78ed
  22793  78ed		       4c 2c d1 	      jmp	.Common_Jump_Down
  22794  78f0
  22795  78f0				   .
  22796  78f0							; 
  22797  78f0
  22798  78f0				   .
  22799  78f0							; 
  22800  78f0
  22801  78f0				   .Spin_CPU
  22802  78f0							; Spin_CPU
  22803  78f0
  22804  78f0				   .
  22805  78f0							; 
  22806  78f0
  22807  78f0				   .L0810		;  s{6} = 0  :  AUDV1 = 9 :  AUDC1 = 6 :  AUDF1 = 6
  22808  78f0
  22809  78f0		       a5 e9		      LDA	s
  22810  78f2		       29 bf		      AND	#191
  22811  78f4		       85 e9		      STA	s
  22812  78f6		       a9 09		      LDA	#9
  22813  78f8		       85 1a		      STA	AUDV1
  22814  78fa		       a9 06		      LDA	#6
  22815  78fc		       85 16		      STA	AUDC1
  22816  78fe		       85 18		      STA	AUDF1
  22817  7900				   .L0811		;  asm
  22818  7900
  22819  7900		       a5 eb		      LDA	Player2Counter_Sprite
  22820  7902
  22821  7902		       c9 1f		      CMP	#31
  22822  7904
  22823  7904		       b0 08		      BCS	.skipL0372_2CPU
  22824  7906
  22825  7906		       18		      CLC
  22826  7907
  22827  7907		       69 04		      ADC	#4
  22828  7909
  22829  7909		       85 eb		      STA	Player2Counter_Sprite
  22830  790b
  22831  790b		       4c 12 d9 	      jmp	.skipelse20_2CPU
  22832  790e
  22833  790e				   .skipL0372_2CPU
  22834  790e
  22835  790e		       a9 00		      LDA	#0
  22836  7910
  22837  7910		       85 eb		      STA	Player2Counter_Sprite
  22838  7912
  22839  7912				   .skipelse20_2CPU
  22840  7912
  22841  7912		       4a		      lsr
  22842  7913
  22843  7913		       4a		      lsr
  22844  7914
  22845  7914		       4a		      lsr
  22846  7915
  22847  7915		       85 ce		      STA	temp4
  22848  7917
  22849  7917				   .
  22850  7917							; 
  22851  7917
  22852  7917				   .
  22853  7917							; 
  22854  7917
  22855  7917				   .L0812		;  Reaper2_Y = Reaper2_Y - 4
  22856  7917
  22857  7917		       a5 de		      LDA	Reaper2_Y
  22858  7919		       38		      SEC
  22859  791a		       e9 04		      SBC	#4
  22860  791c		       85 de		      STA	Reaper2_Y
  22861  791e				   .L0813		;  asm
  22862  791e
  22863  791e
  22864  791e
  22865  791e		       a5 db		      LDA	e
  22866  7920
  22867  7920		       29 08		      AND	#8
  22868  7922
  22869  7922		       d0 58		      BNE	.E3IS1CPU
  22870  7924
  22871  7924
  22872  7924
  22873  7924		       a6 ce		      LDX	temp4
  22874  7926
  22875  7926		       e0 03		      CPX	#3
  22876  7928
  22877  7928		       d0 16		      BNE	.temp4_2QCPU
  22878  792a
  22879  792a		       a5 dd		      LDA	Reaper2_X
  22880  792c
  22881  792c		       85 80		      STA	missile0x
  22882  792e
  22883  792e				   .Sonic_3QCPU
  22884  792e
  22885  792e		       a5 de		      LDA	Reaper2_Y
  22886  7930
  22887  7930		       18		      CLC
  22888  7931
  22889  7931		       69 06		      ADC	#6
  22890  7933
  22891  7933		       85 8a		      STA	missile0y
  22892  7935
  22893  7935		       69 01		      ADC	#1
  22894  7937
  22895  7937		       85 8d		      STA	player0y
  22896  7939
  22897  7939
  22898  7939
  22899  7939		       a9 20		      LDA	#$20
  22900  793b
  22901  793b		       85 04		      STA	NUSIZ0
  22902  793d
  22903  793d
  22904  793d
  22905  793d		       4c 6c d2 	      jmp	.Sonic_Attack1
  22906  7940
  22907  7940				   .temp4_2QCPU
  22908  7940
  22909  7940		       e0 02		      CPX	#2
  22910  7942
  22911  7942		       d0 11		      BNE	.temp4_1QCPU
  22912  7944
  22913  7944		       a5 84		      LDA	player0x
  22914  7946
  22915  7946		       18		      CLC
  22916  7947
  22917  7947		       69 08		      ADC	#8
  22918  7949
  22919  7949		       85 80		      STA	missile0x
  22920  794b
  22921  794b				   .Sonic_2QCPU
  22922  794b
  22923  794b
  22924  794b
  22925  794b		       a5 8d		      LDA	player0y
  22926  794d
  22927  794d		       38		      SEC
  22928  794e
  22929  794e		       e9 08		      SBC	#8
  22930  7950
  22931  7950		       85 8a		      STA	missile0y
  22932  7952
  22933  7952		       4c 7b d2 	      jmp	.Sonic_Attack2
  22934  7955
  22935  7955				   .temp4_1QCPU
  22936  7955
  22937  7955		       e0 01		      CPX	#1
  22938  7957
  22939  7957		       d0 12		      BNE	.temp4_0QCPU
  22940  7959
  22941  7959		       a5 dd		      LDA	Reaper2_X
  22942  795b
  22943  795b
  22944  795b
  22945  795b		       85 80		      STA	missile0x
  22946  795d
  22947  795d				   .Sonic_1QCPU
  22948  795d
  22949  795d		       a5 de		      LDA	Reaper2_Y
  22950  795f
  22951  795f		       38		      SEC
  22952  7960
  22953  7960		       e9 15		      SBC	#21
  22954  7962
  22955  7962		       85 8a		      STA	missile0y
  22956  7964
  22957  7964		       a9 20		      LDA	#$20
  22958  7966
  22959  7966		       85 04		      STA	NUSIZ0
  22960  7968
  22961  7968
  22962  7968
  22963  7968		       4c 8a d2 	      jmp	.Sonic_Attack3
  22964  796b
  22965  796b				   .temp4_0QCPU
  22966  796b
  22967  796b		       a5 84		      LDA	player0x
  22968  796d
  22969  796d		       38		      SEC
  22970  796e
  22971  796e		       e9 07		      SBC	#7
  22972  7970
  22973  7970		       85 80		      STA	missile0x
  22974  7972
  22975  7972				   .Sonic_0QCPU
  22976  7972
  22977  7972
  22978  7972
  22979  7972		       a5 8d		      LDA	player0y
  22980  7974
  22981  7974		       38		      SEC
  22982  7975
  22983  7975		       e9 08		      SBC	#8
  22984  7977
  22985  7977		       85 8a		      STA	missile0y
  22986  7979
  22987  7979
  22988  7979
  22989  7979		       4c 99 d2 	      jmp	.Sonic_Attack4
  22990  797c
  22991  797c				   .
  22992  797c							; 
  22993  797c
  22994  797c				   .
  22995  797c							; 
  22996  797c
  22997  797c				   .E3IS1CPU
  22998  797c							; E3IS1CPU
  22999  797c
  23000  797c				   .L0814		;  asm
  23001  797c
  23002  797c		       a6 ce		      LDX	temp4
  23003  797e
  23004  797e		       e0 03		      CPX	#3
  23005  7980
  23006  7980		       d0 0a		      BNE	.temp4_2_2QCPU
  23007  7982
  23008  7982		       a5 dd		      LDA	Reaper2_X
  23009  7984
  23010  7984		       18		      CLC
  23011  7985
  23012  7985		       69 03		      ADC	#3
  23013  7987
  23014  7987		       85 80		      STA	missile0x
  23015  7989
  23016  7989		       4c 2e d9 	      jmp	.Sonic_3QCPU
  23017  798c
  23018  798c
  23019  798c
  23020  798c				   .temp4_2_2QCPU
  23021  798c
  23022  798c		       e0 02		      CPX	#2
  23023  798e
  23024  798e		       d0 0a		      BNE	.temp4_1_2QCPU
  23025  7990
  23026  7990		       a5 84		      LDA	player0x
  23027  7992
  23028  7992		       38		      SEC
  23029  7993
  23030  7993		       e9 07		      SBC	#7
  23031  7995
  23032  7995		       85 80		      STA	missile0x
  23033  7997
  23034  7997		       4c 4b d9 	      jmp	.Sonic_2QCPU
  23035  799a
  23036  799a
  23037  799a
  23038  799a
  23039  799a
  23040  799a				   .temp4_1_2QCPU
  23041  799a
  23042  799a		       e0 01		      CPX	#1
  23043  799c
  23044  799c		       d0 0a		      BNE	.temp4_0_2QCPU
  23045  799e
  23046  799e		       a5 dd		      LDA	Reaper2_X
  23047  79a0
  23048  79a0		       18		      CLC
  23049  79a1
  23050  79a1		       69 03		      ADC	#3
  23051  79a3
  23052  79a3		       85 80		      STA	missile0x
  23053  79a5
  23054  79a5		       4c 5d d9 	      jmp	.Sonic_1QCPU
  23055  79a8
  23056  79a8
  23057  79a8
  23058  79a8				   .temp4_0_2QCPU
  23059  79a8
  23060  79a8		       a5 84		      LDA	player0x
  23061  79aa
  23062  79aa		       18		      CLC
  23063  79ab
  23064  79ab		       69 08		      ADC	#8
  23065  79ad
  23066  79ad		       85 80		      STA	missile0x
  23067  79af
  23068  79af		       4c 72 d9 	      jmp	.Sonic_0QCPU
  23069  79b2
  23070  79b2
  23071  79b2
  23072  79b2				   .
  23073  79b2							; 
  23074  79b2
  23075  79b2				   .
  23076  79b2							; 
  23077  79b2
  23078  79b2				   .PlayerDone
  23079  79b2							; PlayerDone
  23080  79b2
  23081  79b2				   .
  23082  79b2							; 
  23083  79b2
  23084  79b2				   .
  23085  79b2							; 
  23086  79b2
  23087  79b2				   .L0815		;  asm
  23088  79b2
  23089  79b2		       a5 e5		      LDA	o
  23090  79b4
  23091  79b4		       29 18		      AND	#24
  23092  79b6
  23093  79b6		       f0 52		      BEQ	.NPCs
  23094  79b8
  23095  79b8
  23096  79b8
  23097  79b8
  23098  79b8
  23099  79b8		       a5 d6		      lda	rand
  23100  79ba
  23101  79ba		       4a		      lsr
  23102  79bb
  23103  79bb		       90 02		      bcc	*+4
  23104  79bd
  23105  79bd		       49 b4		      eor	#$B4
  23106  79bf
  23107  79bf		       85 d6		      sta	rand
  23108  79c1
  23109  79c1		       aa		      TAX
  23110  79c2
  23111  79c2
  23112  79c2
  23113  79c2		       a5 db		      LDA	e
  23114  79c4
  23115  79c4		       4a		      LSR
  23116  79c5
  23117  79c5		       b0 09		      BCS	.skipL0403_1
  23118  79c7
  23119  79c7		       a5 e5		      LDA	o
  23120  79c9
  23121  79c9		       29 08		      AND	#8
  23122  79cb
  23123  79cb		       f0 03		      BEQ	.skipL0403_1
  23124  79cd
  23125  79cd
  23126  79cd
  23127  79cd		       4c db d9 	      jmp	.condpart211_1
  23128  79d0
  23129  79d0				   .skipL0403_1
  23130  79d0
  23131  79d0		       a5 db		      LDA	e
  23132  79d2
  23133  79d2		       4a		      LSR
  23134  79d3
  23135  79d3		       90 08		      BCC	.skipL0404_1
  23136  79d5
  23137  79d5		       a5 e5		      LDA	o
  23138  79d7
  23139  79d7		       29 10		      AND	#16
  23140  79d9
  23141  79d9		       f0 02		      BEQ	.skipL0404_1
  23142  79db
  23143  79db				   .condpart211_1
  23144  79db
  23145  79db		       86 06		      STX	COLUP0
  23146  79dd
  23147  79dd				   .skipL0404_1
  23148  79dd
  23149  79dd
  23150  79dd
  23151  79dd		       a5 e5		      LDA	o
  23152  79df
  23153  79df		       29 20		      AND	#32
  23154  79e1
  23155  79e1		       d0 04		      BNE	.condpart215_1
  23156  79e3
  23157  79e3		       e0 fe		      CPX	#254
  23158  79e5
  23159  79e5		       d0 09		      BNE	.skip57OR_1
  23160  79e7
  23161  79e7				   .condpart215_1
  23162  79e7
  23163  79e7		       a5 e5		      LDA	o
  23164  79e9
  23165  79e9		       29 f7		      AND	#247
  23166  79eb
  23167  79eb		       85 e5		      STA	o
  23168  79ed
  23169  79ed		       4c 00 da 	      jmp	.Sounds
  23170  79f0
  23171  79f0				   .skip57OR_1
  23172  79f0
  23173  79f0
  23174  79f0
  23175  79f0		       24 e5		      BIT	o
  23176  79f2
  23177  79f2		       70 04		      BVS	.condpart217_1
  23178  79f4
  23179  79f4		       e0 ff		      CPX	#255
  23180  79f6
  23181  79f6		       d0 12		      BNE	.skip58OR_1
  23182  79f8
  23183  79f8				   .condpart217_1
  23184  79f8
  23185  79f8		       a5 e5		      LDA	o
  23186  79fa
  23187  79fa		       29 ef		      AND	#239
  23188  79fc
  23189  79fc		       85 e5		      STA	o
  23190  79fe
  23191  79fe		       a9 0b		      LDA	#11
  23192  7a00
  23193  7a00				   .Sounds
  23194  7a00
  23195  7a00		       85 1a		      STA	AUDV1
  23196  7a02
  23197  7a02		       a9 0f		      LDA	#15
  23198  7a04
  23199  7a04		       85 16		      STA	AUDC1
  23200  7a06
  23201  7a06		       a9 0a		      LDA	#10
  23202  7a08
  23203  7a08		       85 18		      STA	AUDF1
  23204  7a0a
  23205  7a0a				   .skip58OR_1
  23206  7a0a
  23207  7a0a				   .
  23208  7a0a							; 
  23209  7a0a
  23210  7a0a				   .NPCs
  23211  7a0a							; NPCs
  23212  7a0a
  23213  7a0a				   .
  23214  7a0a							; 
  23215  7a0a
  23216  7a0a				   .L0816		;  asm
  23217  7a0a
  23218  7a0a		       a5 ee		      LDA	Enemy_Sprite_Counter
  23219  7a0c
  23220  7a0c		       c9 1f		      CMP	#31
  23221  7a0e
  23222  7a0e		       b0 06		      BCS	.skipL0409_1
  23223  7a10
  23224  7a10		       18		      CLC
  23225  7a11
  23226  7a11		       69 04		      ADC	#4
  23227  7a13
  23228  7a13		       4c 18 da 	      jmp	.skipelse22_1
  23229  7a16
  23230  7a16				   .skipL0409_1
  23231  7a16
  23232  7a16		       a9 00		      LDA	#0
  23233  7a18
  23234  7a18				   .skipelse22_1
  23235  7a18
  23236  7a18		       85 ee		      STA	Enemy_Sprite_Counter
  23237  7a1a
  23238  7a1a		       4a		      lsr
  23239  7a1b
  23240  7a1b		       4a		      lsr
  23241  7a1c
  23242  7a1c		       4a		      lsr
  23243  7a1d
  23244  7a1d		       85 ce		      STA	temp4
  23245  7a1f
  23246  7a1f
  23247  7a1f
  23248  7a1f		       a9 03		      LDA	#3
  23249  7a21
  23250  7a21		       c5 ce		      CMP	temp4
  23251  7a23
  23252  7a23		       b0 02		      BCS	.uij
  23253  7a25
  23254  7a25		       85 ce		      STA	temp4
  23255  7a27
  23256  7a27				   .uij
  23257  7a27
  23258  7a27		       a5 d6		      lda	rand
  23259  7a29
  23260  7a29		       4a		      lsr
  23261  7a2a
  23262  7a2a		       90 02		      bcc	*+4
  23263  7a2c
  23264  7a2c		       49 b4		      eor	#$B4
  23265  7a2e
  23266  7a2e		       85 d6		      sta	rand
  23267  7a30
  23268  7a30		       85 cb		      sta	temp1
  23269  7a32
  23270  7a32		       a8		      TAY
  23271  7a33
  23272  7a33				   .Person1
  23273  7a33							; Person1
  23274  7a33
  23275  7a33				   .L0817		;  if PowerUp_Counter = 0  &&	player5y < 88 then goto Person3
  23276  7a33
  23277  7a33		       a5 ef		      LDA	PowerUp_Counter
  23278  7a35		       c9 00		      CMP	#0
  23279  7a37		       d0 09		      BNE	.skipL0817
  23280  7a39				   .condpart298
  23281  7a39		       a5 92		      LDA	player5y
  23282  7a3b		       c9 58		      CMP	#88
  23283  7a3d		       b0 03		      BCS	.skip298then
  23284  7a3f				   .condpart299
  23285  7a3f		       4c 29 dc 	      jmp	.Person3
  23286  7a42
  23287  7a42				   .skip298then
  23288  7a42				   .skipL0817
  23289  7a42				   .L0818		;  if e{0} then goto Person2
  23290  7a42
  23291  7a42		       a5 db		      LDA	e
  23292  7a44		       4a		      LSR
  23293  7a45		       90 03		      BCC	.skipL0818
  23294  7a47				   .condpart300
  23295  7a47		       4c 3b db 	      jmp	.Person2
  23296  7a4a
  23297  7a4a				   .skipL0818
  23298  7a4a				   .
  23299  7a4a							; 
  23300  7a4a
  23301  7a4a				   .L0819		;  asm
  23302  7a4a
  23303  7a4a		       a5 8e		      LDA	player1y
  23304  7a4c
  23305  7a4c		       c9 78		      CMP	#120
  23306  7a4e
  23307  7a4e		       90 27		      BCC	.JustMovePerson1
  23308  7a50
  23309  7a50		       c0 fa		      CPY	#250
  23310  7a52
  23311  7a52		       b0 03		      BCS	.skipL0825_ZZ
  23312  7a54
  23313  7a54		       4c 3b db 	      jmp	.Person2
  23314  7a57
  23315  7a57				   .skipL0825_ZZ
  23316  7a57
  23317  7a57
  23318  7a57
  23319  7a57
  23320  7a57
  23321  7a57		       a5 db		      LDA	e
  23322  7a59
  23323  7a59		       4a		      LSR
  23324  7a5a
  23325  7a5a		       90 09		      BCC	.skipL0414_1
  23326  7a5c
  23327  7a5c		       a2 8c		      LDX	#140
  23328  7a5e
  23329  7a5e		       a5 ed		      LDA	w
  23330  7a60
  23331  7a60		       09 02		      ORA	#2
  23332  7a62
  23333  7a62		       4c 6b da 	      jmp	.skipelse23_1
  23334  7a65
  23335  7a65				   .skipL0414_1
  23336  7a65
  23337  7a65		       a2 1a		      LDX	#26
  23338  7a67
  23339  7a67		       a5 ed		      LDA	w
  23340  7a69
  23341  7a69		       29 fd		      AND	#253
  23342  7a6b
  23343  7a6b				   .skipelse23_1
  23344  7a6b
  23345  7a6b		       86 85		      STX	player1x
  23346  7a6d
  23347  7a6d		       85 ed		      STA	w
  23348  7a6f
  23349  7a6f				   .L0820		;  player1y = 15 :  _COLUP1 = $1e
  23350  7a6f
  23351  7a6f		       a9 0f		      LDA	#15
  23352  7a71		       85 8e		      STA	player1y
  23353  7a73		       a9 1e		      LDA	#$1e
  23354  7a75		       85 98		      STA	_COLUP1
  23355  7a77				   .
  23356  7a77							; 
  23357  7a77
  23358  7a77				   .JustMovePerson1
  23359  7a77							; JustMovePerson1
  23360  7a77
  23361  7a77				   .
  23362  7a77							; 
  23363  7a77
  23364  7a77				   .L0821		;  asm
  23365  7a77
  23366  7a77
  23367  7a77
  23368  7a77		       a5 ed		      LDA	w
  23369  7a79
  23370  7a79		       29 02		      AND	#2
  23371  7a7b
  23372  7a7b		       d0 0e		      BNE	.skipL0416_1
  23373  7a7d
  23374  7a7d		       a5 85		      LDA	player1x
  23375  7a7f
  23376  7a7f		       18		      CLC
  23377  7a80
  23378  7a80		       69 02		      ADC	#2
  23379  7a82
  23380  7a82		       85 85		      STA	player1x
  23381  7a84
  23382  7a84		       a5 93		      LDA	_NUSIZ1
  23383  7a86
  23384  7a86		       29 f7		      AND	#247
  23385  7a88
  23386  7a88		       4c 96 da 	      jmp	.skipelse24_1
  23387  7a8b
  23388  7a8b				   .skipL0416_1
  23389  7a8b
  23390  7a8b		       a5 85		      LDA	player1x
  23391  7a8d
  23392  7a8d		       38		      SEC
  23393  7a8e
  23394  7a8e		       e9 02		      SBC	#2
  23395  7a90
  23396  7a90		       85 85		      STA	player1x
  23397  7a92
  23398  7a92		       a5 93		      LDA	_NUSIZ1
  23399  7a94
  23400  7a94		       09 08		      ORA	#8
  23401  7a96
  23402  7a96				   .skipelse24_1
  23403  7a96
  23404  7a96		       85 93		      STA	_NUSIZ1
  23405  7a98
  23406  7a98				   .L0822		;  temp2 = player0x + 8
  23407  7a98
  23408  7a98		       a5 84		      LDA	player0x
  23409  7a9a		       18		      CLC
  23410  7a9b		       69 08		      ADC	#8
  23411  7a9d		       85 cc		      STA	temp2
  23412  7a9f				   .L0823		;  asm
  23413  7a9f
  23414  7a9f		       a5 85		      LDA	player1x
  23415  7aa1
  23416  7aa1		       c5 cc		      CMP	temp2
  23417  7aa3
  23418  7aa3		       b0 08		      BCS	.skipL0416_11
  23419  7aa5
  23420  7aa5		       a5 cc		      LDA	temp2
  23421  7aa7
  23422  7aa7		       38		      SEC
  23423  7aa8
  23424  7aa8		       e5 85		      SBC	player1x
  23425  7aaa
  23426  7aaa		       4c b0 da 	      jmp	.skipelse24_11
  23427  7aad
  23428  7aad				   .skipL0416_11
  23429  7aad
  23430  7aad		       38		      SEC
  23431  7aae
  23432  7aae		       e5 cc		      SBC	temp2
  23433  7ab0
  23434  7ab0				   .skipelse24_11
  23435  7ab0
  23436  7ab0		       85 cf		      STA	temp5
  23437  7ab2
  23438  7ab2
  23439  7ab2
  23440  7ab2
  23441  7ab2
  23442  7ab2				   .
  23443  7ab2							; 
  23444  7ab2
  23445  7ab2				   .L0824		;  if temp5  <  8  &&	e{1}  &&  player0y  <  40 then w{1}  =	!w{1}
  23446  7ab2
  23447  7ab2		       a5 cf		      LDA	temp5
  23448  7ab4		       c9 08		      CMP	#8
  23449  7ab6		       b0 1c		      BCS	.skipL0824
  23450  7ab8				   .condpart301
  23451  7ab8		       a5 db		      LDA	e
  23452  7aba		       29 02		      AND	#2
  23453  7abc		       f0 16		      BEQ	.skip301then
  23454  7abe				   .condpart302
  23455  7abe		       a5 8d		      LDA	player0y
  23456  7ac0		       c9 28		      CMP	#40
  23457  7ac2		       b0 10		      BCS	.skip302then
  23458  7ac4				   .condpart303
  23459  7ac4		       a5 ed		      LDA	w
  23460  7ac6		       29 02		      AND	#2
  23461  7ac8		       08		      PHP
  23462  7ac9		       a5 ed		      LDA	w
  23463  7acb		       29 fd		      AND	#253
  23464  7acd		       28		      PLP
  23465  7ace		       d0 02		      .byte.b	$D0, $02
  23466  7ad0		       09 02		      ORA	#2
  23467  7ad2		       85 ed		      STA	w
  23468  7ad4				   .skip302then
  23469  7ad4				   .skip301then
  23470  7ad4				   .skipL0824
  23471  7ad4				   .
  23472  7ad4							; 
  23473  7ad4
  23474  7ad4				   .
  23475  7ad4							; 
  23476  7ad4
  23477  7ad4				   .L0825		;  asm
  23478  7ad4
  23479  7ad4		       a5 ed		      LDA	w
  23480  7ad6
  23481  7ad6		       a6 85		      LDX	player1x
  23482  7ad8
  23483  7ad8		       29 02		      AND	#2
  23484  7ada
  23485  7ada		       d0 04		      BNE	.skipL0418_1
  23486  7adc
  23487  7adc		       e0 8c		      CPX	#140
  23488  7ade
  23489  7ade		       b0 04		      BCS	.condpart222_1
  23490  7ae0
  23491  7ae0				   .skipL0418_1
  23492  7ae0
  23493  7ae0
  23494  7ae0
  23495  7ae0		       e0 1c		      CPX	#28
  23496  7ae2
  23497  7ae2		       b0 08		      BCS	.skipL0419_1
  23498  7ae4
  23499  7ae4				   .condpart222_1
  23500  7ae4
  23501  7ae4		       a9 78		      LDA	#120
  23502  7ae6
  23503  7ae6		       85 8e		      STA	player1y
  23504  7ae8
  23505  7ae8		       a9 00		      LDA	#$00
  23506  7aea
  23507  7aea		       85 98		      STA	_COLUP1
  23508  7aec
  23509  7aec				   .skipL0419_1
  23510  7aec
  23511  7aec				   .L0826		;  on temp4 goto Person1_0 Person1_1 Person1_2 Person1_3
  23512  7aec
  23513  7aec		       a6 ce		      LDX	temp4
  23514  7aee		       bd f7 da 	      LDA	.L0826jumptablehi,x
  23515  7af1		       48		      PHA
  23516  7af2		       bd fb da 	      LDA	.L0826jumptablelo,x
  23517  7af5		       48		      PHA
  23518  7af6		       60		      RTS
  23519  7af7				   .L0826jumptablehi
  23520  7af7		       da		      .byte.b	>(.Person1_0-1)
  23521  7af8		       db		      .byte.b	>(.Person1_1-1)
  23522  7af9		       db		      .byte.b	>(.Person1_2-1)
  23523  7afa		       db		      .byte.b	>(.Person1_3-1)
  23524  7afb				   .L0826jumptablelo
  23525  7afb		       fe		      .byte.b	<(.Person1_0-1)
  23526  7afc		       0d		      .byte.b	<(.Person1_1-1)
  23527  7afd		       1c		      .byte.b	<(.Person1_2-1)
  23528  7afe		       2b		      .byte.b	<(.Person1_3-1)
  23529  7aff				   .Person1_0
  23530  7aff							; Person1_0
  23531  7aff
  23532  7aff				   .L0827		;  player1:
  23533  7aff
  23534  7aff		       a2 da		      LDX	#<playerL0827_1
  23535  7b01		       86 a6		      STX	player1pointerlo
  23536  7b03		       a9 fb		      LDA	#>playerL0827_1
  23537  7b05		       85 ab		      STA	player1pointerhi
  23538  7b07		       a9 0d		      LDA	#13
  23539  7b09		       85 b1		      STA	player1height
  23540  7b0b				   .L0828		;  goto Person3
  23541  7b0b
  23542  7b0b		       4c 29 dc 	      jmp	.Person3
  23543  7b0e
  23544  7b0e				   .
  23545  7b0e							; 
  23546  7b0e
  23547  7b0e				   .Person1_1
  23548  7b0e							; Person1_1
  23549  7b0e
  23550  7b0e				   .L0829		;  player1:
  23551  7b0e
  23552  7b0e		       a2 e6		      LDX	#<playerL0829_1
  23553  7b10		       86 a6		      STX	player1pointerlo
  23554  7b12		       a9 fb		      LDA	#>playerL0829_1
  23555  7b14		       85 ab		      STA	player1pointerhi
  23556  7b16		       a9 0d		      LDA	#13
  23557  7b18		       85 b1		      STA	player1height
  23558  7b1a				   .L0830		;  goto Person3
  23559  7b1a
  23560  7b1a		       4c 29 dc 	      jmp	.Person3
  23561  7b1d
  23562  7b1d				   .
  23563  7b1d							; 
  23564  7b1d
  23565  7b1d				   .Person1_2
  23566  7b1d							; Person1_2
  23567  7b1d
  23568  7b1d				   .L0831		;  player1:
  23569  7b1d
  23570  7b1d		       a2 f2		      LDX	#<playerL0831_1
  23571  7b1f		       86 a6		      STX	player1pointerlo
  23572  7b21		       a9 fb		      LDA	#>playerL0831_1
  23573  7b23		       85 ab		      STA	player1pointerhi
  23574  7b25		       a9 0d		      LDA	#13
  23575  7b27		       85 b1		      STA	player1height
  23576  7b29				   .L0832		;  goto Person3
  23577  7b29
  23578  7b29		       4c 29 dc 	      jmp	.Person3
  23579  7b2c
  23580  7b2c				   .Person1_3
  23581  7b2c							; Person1_3
  23582  7b2c
  23583  7b2c				   .L0833		;  player1:
  23584  7b2c
  23585  7b2c		       a2 5a		      LDX	#<playerL0833_1
  23586  7b2e		       86 a6		      STX	player1pointerlo
  23587  7b30		       a9 fc		      LDA	#>playerL0833_1
  23588  7b32		       85 ab		      STA	player1pointerhi
  23589  7b34		       a9 0d		      LDA	#13
  23590  7b36		       85 b1		      STA	player1height
  23591  7b38				   .L0834		;  goto Person3
  23592  7b38
  23593  7b38		       4c 29 dc 	      jmp	.Person3
  23594  7b3b
  23595  7b3b				   .
  23596  7b3b							; 
  23597  7b3b
  23598  7b3b				   .Person2
  23599  7b3b							; Person2
  23600  7b3b
  23601  7b3b				   .
  23602  7b3b							; 
  23603  7b3b
  23604  7b3b				   .L0835		;  asm
  23605  7b3b
  23606  7b3b		       a5 8f		      LDA	player2y
  23607  7b3d
  23608  7b3d		       c9 78		      CMP	#120
  23609  7b3f
  23610  7b3f		       90 27		      BCC	.JustMovePerson2
  23611  7b41
  23612  7b41
  23613  7b41
  23614  7b41		       c0 04		      CPY	#4
  23615  7b43
  23616  7b43		       90 03		      BCC	.skipL0843_ZZ
  23617  7b45
  23618  7b45		       4c 29 dc 	      jmp	.Person3
  23619  7b48
  23620  7b48				   .skipL0843_ZZ
  23621  7b48
  23622  7b48
  23623  7b48
  23624  7b48		       a5 db		      LDA	e
  23625  7b4a
  23626  7b4a		       4a		      LSR
  23627  7b4b
  23628  7b4b		       90 09		      BCC	.skipL0414_2
  23629  7b4d
  23630  7b4d		       a2 8c		      LDX	#140
  23631  7b4f
  23632  7b4f		       a5 ed		      LDA	w
  23633  7b51
  23634  7b51		       09 04		      ORA	#4
  23635  7b53
  23636  7b53		       4c 5c db 	      jmp	.skipelse23_2
  23637  7b56
  23638  7b56				   .skipL0414_2
  23639  7b56
  23640  7b56		       a2 1a		      LDX	#26
  23641  7b58
  23642  7b58		       a5 ed		      LDA	w
  23643  7b5a
  23644  7b5a		       29 fb		      AND	#251
  23645  7b5c
  23646  7b5c				   .skipelse23_2
  23647  7b5c
  23648  7b5c		       86 86		      STX	player2x
  23649  7b5e
  23650  7b5e		       85 ed		      STA	w
  23651  7b60
  23652  7b60				   .L0836		;  player2y = 15 :  COLUP2 = $1e
  23653  7b60
  23654  7b60		       a9 0f		      LDA	#15
  23655  7b62		       85 8f		      STA	player2y
  23656  7b64		       a9 1e		      LDA	#$1e
  23657  7b66		       85 99		      STA	COLUP2
  23658  7b68				   .
  23659  7b68							; 
  23660  7b68
  23661  7b68				   .JustMovePerson2
  23662  7b68							; JustMovePerson2
  23663  7b68
  23664  7b68				   .L0837		;  asm
  23665  7b68
  23666  7b68		       a5 ed		      LDA	w
  23667  7b6a
  23668  7b6a		       29 04		      AND	#4
  23669  7b6c
  23670  7b6c		       d0 0e		      BNE	.skipL0430_1
  23671  7b6e
  23672  7b6e		       a5 86		      LDA	player2x
  23673  7b70
  23674  7b70		       18		      CLC
  23675  7b71
  23676  7b71		       69 03		      ADC	#3
  23677  7b73
  23678  7b73		       85 86		      STA	player2x
  23679  7b75
  23680  7b75		       a5 94		      LDA	NUSIZ2
  23681  7b77
  23682  7b77		       29 f7		      AND	#247
  23683  7b79
  23684  7b79		       4c 87 db 	      jmp	.skipelse27_1
  23685  7b7c
  23686  7b7c				   .skipL0430_1
  23687  7b7c
  23688  7b7c		       a5 86		      LDA	player2x
  23689  7b7e
  23690  7b7e		       38		      SEC
  23691  7b7f
  23692  7b7f		       e9 03		      SBC	#3
  23693  7b81
  23694  7b81		       85 86		      STA	player2x
  23695  7b83
  23696  7b83		       a5 94		      LDA	NUSIZ2
  23697  7b85
  23698  7b85		       09 08		      ORA	#8
  23699  7b87
  23700  7b87				   .skipelse27_1
  23701  7b87
  23702  7b87		       85 94		      STA	NUSIZ2
  23703  7b89
  23704  7b89				   .L0838		;  temp2 = player0x + 8
  23705  7b89
  23706  7b89		       a5 84		      LDA	player0x
  23707  7b8b		       18		      CLC
  23708  7b8c		       69 08		      ADC	#8
  23709  7b8e		       85 cc		      STA	temp2
  23710  7b90				   .L0839		;  asm
  23711  7b90
  23712  7b90		       a5 86		      LDA	player2x
  23713  7b92
  23714  7b92		       c5 cc		      CMP	temp2
  23715  7b94
  23716  7b94		       b0 08		      BCS	.skipL0416_2
  23717  7b96
  23718  7b96		       a5 cc		      LDA	temp2
  23719  7b98
  23720  7b98		       38		      SEC
  23721  7b99
  23722  7b99		       e5 86		      SBC	player2x
  23723  7b9b
  23724  7b9b		       4c a1 db 	      jmp	.skipelse24_2
  23725  7b9e
  23726  7b9e				   .skipL0416_2
  23727  7b9e
  23728  7b9e		       38		      SEC
  23729  7b9f
  23730  7b9f		       e5 cc		      SBC	temp2
  23731  7ba1
  23732  7ba1				   .skipelse24_2
  23733  7ba1
  23734  7ba1		       85 cf		      STA	temp5
  23735  7ba3
  23736  7ba3				   .L0840		;  if temp5  <  8  &&	e{1}  &&  player0y <  40 then w{2} = !w{2}
  23737  7ba3
  23738  7ba3		       a5 cf		      LDA	temp5
  23739  7ba5		       c9 08		      CMP	#8
  23740  7ba7		       b0 1c		      BCS	.skipL0840
  23741  7ba9				   .condpart304
  23742  7ba9		       a5 db		      LDA	e
  23743  7bab		       29 02		      AND	#2
  23744  7bad		       f0 16		      BEQ	.skip304then
  23745  7baf				   .condpart305
  23746  7baf		       a5 8d		      LDA	player0y
  23747  7bb1		       c9 28		      CMP	#40
  23748  7bb3		       b0 10		      BCS	.skip305then
  23749  7bb5				   .condpart306
  23750  7bb5		       a5 ed		      LDA	w
  23751  7bb7		       29 04		      AND	#4
  23752  7bb9		       08		      PHP
  23753  7bba		       a5 ed		      LDA	w
  23754  7bbc		       29 fb		      AND	#251
  23755  7bbe		       28		      PLP
  23756  7bbf		       d0 02		      .byte.b	$D0, $02
  23757  7bc1		       09 04		      ORA	#4
  23758  7bc3		       85 ed		      STA	w
  23759  7bc5				   .skip305then
  23760  7bc5				   .skip304then
  23761  7bc5				   .skipL0840
  23762  7bc5				   .
  23763  7bc5							; 
  23764  7bc5
  23765  7bc5				   .L0841		;  asm
  23766  7bc5
  23767  7bc5		       a5 ed		      LDA	w
  23768  7bc7
  23769  7bc7		       a6 86		      LDX	player2x
  23770  7bc9
  23771  7bc9		       29 04		      AND	#4
  23772  7bcb
  23773  7bcb		       d0 04		      BNE	.skipL0418_2
  23774  7bcd
  23775  7bcd
  23776  7bcd
  23777  7bcd		       e0 8c		      CPX	#140
  23778  7bcf
  23779  7bcf		       b0 04		      BCS	.condpart222_2
  23780  7bd1
  23781  7bd1				   .skipL0418_2
  23782  7bd1
  23783  7bd1
  23784  7bd1
  23785  7bd1		       e0 1c		      CPX	#28
  23786  7bd3
  23787  7bd3		       b0 08		      BCS	.skipL0419_2
  23788  7bd5
  23789  7bd5				   .condpart222_2
  23790  7bd5
  23791  7bd5		       a9 78		      LDA	#120
  23792  7bd7
  23793  7bd7		       85 8f		      STA	player2y
  23794  7bd9
  23795  7bd9		       a9 00		      LDA	#$00
  23796  7bdb
  23797  7bdb		       85 99		      STA	COLUP2
  23798  7bdd
  23799  7bdd				   .skipL0419_2
  23800  7bdd
  23801  7bdd				   .L0842		;  on temp4 goto Person2_0 Person2_1 Person2_2 Person2_3
  23802  7bdd
  23803  7bdd		       a6 ce		      LDX	temp4
  23804  7bdf		       bd e8 db 	      LDA	.L0842jumptablehi,x
  23805  7be2		       48		      PHA
  23806  7be3		       bd ec db 	      LDA	.L0842jumptablelo,x
  23807  7be6		       48		      PHA
  23808  7be7		       60		      RTS
  23809  7be8				   .L0842jumptablehi
  23810  7be8		       db		      .byte.b	>(.Person2_0-1)
  23811  7be9		       db		      .byte.b	>(.Person2_1-1)
  23812  7bea		       dc		      .byte.b	>(.Person2_2-1)
  23813  7beb		       dc		      .byte.b	>(.Person2_3-1)
  23814  7bec				   .L0842jumptablelo
  23815  7bec		       ef		      .byte.b	<(.Person2_0-1)
  23816  7bed		       fe		      .byte.b	<(.Person2_1-1)
  23817  7bee		       0d		      .byte.b	<(.Person2_2-1)
  23818  7bef		       1c		      .byte.b	<(.Person2_3-1)
  23819  7bf0				   .Person2_0
  23820  7bf0							; Person2_0
  23821  7bf0
  23822  7bf0				   .L0843		;  player2:
  23823  7bf0
  23824  7bf0		       a2 66		      LDX	#<playerL0843_2
  23825  7bf2		       86 a7		      STX	player2pointerlo
  23826  7bf4		       a9 fc		      LDA	#>playerL0843_2
  23827  7bf6		       85 ac		      STA	player2pointerhi
  23828  7bf8		       a9 0d		      LDA	#13
  23829  7bfa		       85 b2		      STA	player2height
  23830  7bfc				   .L0844		;  goto Person3
  23831  7bfc
  23832  7bfc		       4c 29 dc 	      jmp	.Person3
  23833  7bff
  23834  7bff				   .Person2_1
  23835  7bff							; Person2_1
  23836  7bff
  23837  7bff				   .L0845		;  player2:
  23838  7bff
  23839  7bff		       a2 72		      LDX	#<playerL0845_2
  23840  7c01		       86 a7		      STX	player2pointerlo
  23841  7c03		       a9 fc		      LDA	#>playerL0845_2
  23842  7c05		       85 ac		      STA	player2pointerhi
  23843  7c07		       a9 0d		      LDA	#13
  23844  7c09		       85 b2		      STA	player2height
  23845  7c0b				   .L0846		;  goto Person3
  23846  7c0b
  23847  7c0b		       4c 29 dc 	      jmp	.Person3
  23848  7c0e
  23849  7c0e				   .Person2_2
  23850  7c0e							; Person2_2
  23851  7c0e
  23852  7c0e				   .L0847		;  player2:
  23853  7c0e
  23854  7c0e		       a2 7e		      LDX	#<playerL0847_2
  23855  7c10		       86 a7		      STX	player2pointerlo
  23856  7c12		       a9 fc		      LDA	#>playerL0847_2
  23857  7c14		       85 ac		      STA	player2pointerhi
  23858  7c16		       a9 0d		      LDA	#13
  23859  7c18		       85 b2		      STA	player2height
  23860  7c1a				   .L0848		;  goto Person3
  23861  7c1a
  23862  7c1a		       4c 29 dc 	      jmp	.Person3
  23863  7c1d
  23864  7c1d				   .Person2_3
  23865  7c1d							; Person2_3
  23866  7c1d
  23867  7c1d				   .L0849		;  player2:
  23868  7c1d
  23869  7c1d		       a2 8a		      LDX	#<playerL0849_2
  23870  7c1f		       86 a7		      STX	player2pointerlo
  23871  7c21		       a9 fc		      LDA	#>playerL0849_2
  23872  7c23		       85 ac		      STA	player2pointerhi
  23873  7c25		       a9 0d		      LDA	#13
  23874  7c27		       85 b2		      STA	player2height
  23875  7c29				   .
  23876  7c29							; 
  23877  7c29
  23878  7c29				   .Person3
  23879  7c29							; Person3
  23880  7c29
  23881  7c29				   .L0850		;  asm
  23882  7c29
  23883  7c29		       a5 8d		      LDA	player0y
  23884  7c2b
  23885  7c2b		       38		      SEC
  23886  7c2c
  23887  7c2c		       e5 b0		      SBC	player0height
  23888  7c2e
  23889  7c2e		       c9 04		      CMP	#4
  23890  7c30
  23891  7c30		       90 0d		      BCC	.skipL0444_1
  23892  7c32
  23893  7c32		       a5 8d		      LDA	player0y
  23894  7c34
  23895  7c34		       c9 1e		      CMP	#30
  23896  7c36
  23897  7c36		       b0 07		      BCS	.skipL0444_1
  23898  7c38
  23899  7c38
  23900  7c38
  23901  7c38		       a5 b0		      LDA	player0height
  23902  7c3a
  23903  7c3a		       18		      CLC
  23904  7c3b
  23905  7c3b		       69 04		      ADC	#4
  23906  7c3d
  23907  7c3d		       85 8d		      STA	player0y
  23908  7c3f
  23909  7c3f				   .skipL0444_1
  23910  7c3f
  23911  7c3f		       a9 02		      lda	#2
  23912  7c41
  23913  7c41		       2c 82 02 	      bit	SWCHB
  23914  7c44
  23915  7c44		       d0 2d		      BNE	.skipL0445_1
  23916  7c46
  23917  7c46		       a5 db		      LDA	e
  23918  7c48
  23919  7c48		       09 40		      ORA	#64
  23920  7c4a
  23921  7c4a		       09 10		      ORA	#16
  23922  7c4c
  23923  7c4c		       85 db		      STA	e
  23924  7c4e
  23925  7c4e		       a9 01		      LDA	#1
  23926  7c50
  23927  7c50		       85 d9		      STA	duration
  23928  7c52
  23929  7c52		       a9 00		      LDA	#0
  23930  7c54
  23931  7c54		       85 0b		      STA	REFP0
  23932  7c56
  23933  7c56		       85 93		      STA	_NUSIZ1
  23934  7c58
  23935  7c58		       85 94		      STA	NUSIZ2
  23936  7c5a
  23937  7c5a		       85 95		      STA	NUSIZ3
  23938  7c5c
  23939  7c5c		       85 96		      STA	NUSIZ4
  23940  7c5e
  23941  7c5e		       85 97		      STA	NUSIZ5
  23942  7c60
  23943  7c60		       85 e1		      STA	Selection
  23944  7c62
  23945  7c62		       85 d1		      sta	temp7
  23946  7c64
  23947  7c64		       a9 12		      lda	#>(.MusicSetup1-1)
  23948  7c66
  23949  7c66		       48		      pha
  23950  7c67
  23951  7c67		       a9 2a		      lda	#<(.MusicSetup1-1)
  23952  7c69
  23953  7c69		       48		      pha
  23954  7c6a
  23955  7c6a		       a5 d1		      lda	temp7
  23956  7c6c
  23957  7c6c		       48		      pha
  23958  7c6d
  23959  7c6d
  23960  7c6d
  23961  7c6d		       48		      pha
  23962  7c6e
  23963  7c6e		       a2 01		      ldx	#1
  23964  7c70
  23965  7c70		       4c eb ff 	      jmp	BS_jsr
  23966  7c73
  23967  7c73				   .skipL0445_1
  23968  7c73
  23969  7c73				   .L0851		;  if PowerUp_Counter > 0 then goto SomeCrazyStuff bank5
  23970  7c73
  23971  7c73		       a9 00		      LDA	#0
  23972  7c75		       c5 ef		      CMP	PowerUp_Counter
  23973  7c77		       b0 12		      BCS	.skipL0851
  23974  7c79				   .condpart307
  23975  7c79		       85 d1		      sta	temp7
  23976  7c7b		       a9 90		      lda	#>(.SomeCrazyStuff-1)
  23977  7c7d		       48		      pha
  23978  7c7e		       a9 03		      lda	#<(.SomeCrazyStuff-1)
  23979  7c80		       48		      pha
  23980  7c81		       a5 d1		      lda	temp7
  23981  7c83		       48		      pha
  23982  7c84		       8a		      txa
  23983  7c85		       48		      pha
  23984  7c86		       a2 05		      ldx	#5
  23985  7c88		       4c eb ff 	      jmp	BS_jsr
  23986  7c8b				   .skipL0851
  23987  7c8b				   .
  23988  7c8b							; 
  23989  7c8b
  23990  7c8b				   .L0852		;  asm
  23991  7c8b
  23992  7c8b		       a9 5a		      LDA	#90
  23993  7c8d
  23994  7c8d		       c5 92		      CMP	player5y
  23995  7c8f
  23996  7c8f		       b0 12		      BCS	.condpart229_17
  23997  7c91
  23998  7c91		       c5 8e		      CMP	player1y
  23999  7c93
  24000  7c93		       b0 0e		      BCS	.condpart229_17
  24001  7c95
  24002  7c95		       c5 8f		      CMP	player2y
  24003  7c97
  24004  7c97		       b0 0a		      BCS	.condpart229_17
  24005  7c99
  24006  7c99
  24007  7c99
  24008  7c99		       c0 f8		      CPY	#248
  24009  7c9b
  24010  7c9b		       90 06		      BCC	.condpart229_17
  24011  7c9d
  24012  7c9d		       a5 db		      LDA	e
  24013  7c9f
  24014  7c9f		       29 02		      AND	#2
  24015  7ca1
  24016  7ca1		       d0 03		      BNE	.skip70OR_17
  24017  7ca3
  24018  7ca3				   .condpart229_17
  24019  7ca3
  24020  7ca3
  24021  7ca3
  24022  7ca3		       4c a1 dd 	      jmp	.Nothing
  24023  7ca6
  24024  7ca6				   .skip70OR_17
  24025  7ca6
  24026  7ca6		       a5 85		      LDA	player1x
  24027  7ca8
  24028  7ca8		       c5 84		      CMP	player0x
  24029  7caa
  24030  7caa		       b0 09		      BCS	.skipL0520_17
  24031  7cac
  24032  7cac		       a5 ed		      LDA	w
  24033  7cae
  24034  7cae		       29 bf		      AND	#191
  24035  7cb0
  24036  7cb0		       a2 1a		      LDX	#26
  24037  7cb2
  24038  7cb2		       4c bb dc 	      jmp	.skipelse20_17
  24039  7cb5
  24040  7cb5				   .skipL0520_17
  24041  7cb5
  24042  7cb5		       a5 ed		      LDA	w
  24043  7cb7
  24044  7cb7		       09 40		      ORA	#64
  24045  7cb9
  24046  7cb9		       a2 8a		      LDX	#138
  24047  7cbb
  24048  7cbb				   .skipelse20_17
  24049  7cbb
  24050  7cbb		       85 ed		      STA	w
  24051  7cbd
  24052  7cbd		       86 89		      STX	player5x
  24053  7cbf
  24054  7cbf
  24055  7cbf
  24056  7cbf		       a9 56		      LDA	#86
  24057  7cc1
  24058  7cc1		       48		      PHA
  24059  7cc2
  24060  7cc2		       a5 d6		      lda	rand
  24061  7cc4
  24062  7cc4		       4a		      lsr
  24063  7cc5
  24064  7cc5		       90 02		      bcc	*+4
  24065  7cc7
  24066  7cc7		       49 b4		      eor	#$B4
  24067  7cc9
  24068  7cc9		       85 d6		      sta	rand
  24069  7ccb
  24070  7ccb		       29 1f		      AND	#31
  24071  7ccd
  24072  7ccd		       a8		      TAY
  24073  7cce
  24074  7cce		       68		      PLA
  24075  7ccf
  24076  7ccf		       ba		      TSX
  24077  7cd0
  24078  7cd0		       94 00		      STY	$00,x
  24079  7cd2
  24080  7cd2		       38		      SEC
  24081  7cd3
  24082  7cd3		       f5 00		      SBC	$00,x
  24083  7cd5
  24084  7cd5		       85 92		      STA	player5y
  24085  7cd7
  24086  7cd7		       c9 46		      CMP	#70
  24087  7cd9
  24088  7cd9		       90 07		      BCC	.skipL0522_17
  24089  7cdb
  24090  7cdb		       a5 ed		      LDA	w
  24091  7cdd
  24092  7cdd		       29 7f		      AND	#127
  24093  7cdf
  24094  7cdf		       4c e6 dc 	      jmp	.skipelse21_17
  24095  7ce2
  24096  7ce2				   .skipL0522_17
  24097  7ce2
  24098  7ce2		       a5 ed		      LDA	w
  24099  7ce4
  24100  7ce4		       09 80		      ORA	#128
  24101  7ce6
  24102  7ce6				   .skipelse21_17
  24103  7ce6
  24104  7ce6		       85 ed		      STA	w
  24105  7ce8
  24106  7ce8				   .
  24107  7ce8							; 
  24108  7ce8
  24109  7ce8				   .L0853		;  PowerUp_Type = COLUP5 / 32
  24110  7ce8
  24111  7ce8		       a5 9c		      LDA	COLUP5
  24112  7cea		       4a		      lsr
  24113  7ceb		       4a		      lsr
  24114  7cec		       4a		      lsr
  24115  7ced		       4a		      lsr
  24116  7cee		       4a		      lsr
  24117  7cef		       85 81		      STA	PowerUp_Type
  24118  7cf1				   .L0854		;  asm
  24119  7cf1
  24120  7cf1		       a9 07		      LDA	#7
  24121  7cf3
  24122  7cf3		       c5 81		      CMP	PowerUp_Type
  24123  7cf5
  24124  7cf5		       b0 02		      BCS	.rfv
  24125  7cf7
  24126  7cf7		       85 81		      STA	PowerUp_Type
  24127  7cf9
  24128  7cf9				   .rfv
  24129  7cf9
  24130  7cf9				   .L0855		;  if !o{1} then goto Othersprites
  24131  7cf9
  24132  7cf9		       a5 e5		      LDA	o
  24133  7cfb		       29 02		      AND	#2
  24134  7cfd		       d0 03		      BNE	.skipL0855
  24135  7cff				   .condpart308
  24136  7cff		       4c 11 dd 	      jmp	.Othersprites
  24137  7d02
  24138  7d02				   .skipL0855
  24139  7d02				   .
  24140  7d02							; 
  24141  7d02
  24142  7d02				   .L0856		;  player5:
  24143  7d02
  24144  7d02		       a2 96		      LDX	#<playerL0856_5
  24145  7d04		       86 aa		      STX	player5pointerlo
  24146  7d06		       a9 fc		      LDA	#>playerL0856_5
  24147  7d08		       85 af		      STA	player5pointerhi
  24148  7d0a		       a9 09		      LDA	#9
  24149  7d0c		       85 b5		      STA	player5height
  24150  7d0e				   .L0857		;  goto Nothing
  24151  7d0e
  24152  7d0e		       4c a1 dd 	      jmp	.Nothing
  24153  7d11
  24154  7d11				   .Othersprites
  24155  7d11							; Othersprites
  24156  7d11
  24157  7d11				   .L0858		;  on PowerUp_Type goto P0 P1 P2 P3 P4 P5 P6 P7
  24158  7d11
  24159  7d11		       a6 81		      LDX	PowerUp_Type
  24160  7d13		       bd 1c dd 	      LDA	.L0858jumptablehi,x
  24161  7d16		       48		      PHA
  24162  7d17		       bd 24 dd 	      LDA	.L0858jumptablelo,x
  24163  7d1a		       48		      PHA
  24164  7d1b		       60		      RTS
  24165  7d1c				   .L0858jumptablehi
  24166  7d1c		       dd		      .byte.b	>(.P0-1)
  24167  7d1d		       dd		      .byte.b	>(.P1-1)
  24168  7d1e		       dd		      .byte.b	>(.P2-1)
  24169  7d1f		       dd		      .byte.b	>(.P3-1)
  24170  7d20		       dd		      .byte.b	>(.P4-1)
  24171  7d21		       dd		      .byte.b	>(.P5-1)
  24172  7d22		       dd		      .byte.b	>(.P6-1)
  24173  7d23		       dd		      .byte.b	>(.P7-1)
  24174  7d24				   .L0858jumptablelo
  24175  7d24		       2b		      .byte.b	<(.P0-1)
  24176  7d25		       3a		      .byte.b	<(.P1-1)
  24177  7d26		       49		      .byte.b	<(.P2-1)
  24178  7d27		       58		      .byte.b	<(.P3-1)
  24179  7d28		       67		      .byte.b	<(.P4-1)
  24180  7d29		       76		      .byte.b	<(.P5-1)
  24181  7d2a		       85		      .byte.b	<(.P6-1)
  24182  7d2b		       94		      .byte.b	<(.P7-1)
  24183  7d2c				   .P0
  24184  7d2c							; P0
  24185  7d2c
  24186  7d2c				   .L0859		;  player5:
  24187  7d2c
  24188  7d2c		       a2 9e		      LDX	#<playerL0859_5
  24189  7d2e		       86 aa		      STX	player5pointerlo
  24190  7d30		       a9 fc		      LDA	#>playerL0859_5
  24191  7d32		       85 af		      STA	player5pointerhi
  24192  7d34		       a9 09		      LDA	#9
  24193  7d36		       85 b5		      STA	player5height
  24194  7d38				   .L0860		;  goto Nothing
  24195  7d38
  24196  7d38		       4c a1 dd 	      jmp	.Nothing
  24197  7d3b
  24198  7d3b				   .P1
  24199  7d3b							; P1
  24200  7d3b
  24201  7d3b				   .L0861		;  player5:
  24202  7d3b
  24203  7d3b		       a2 a6		      LDX	#<playerL0861_5
  24204  7d3d		       86 aa		      STX	player5pointerlo
  24205  7d3f		       a9 fc		      LDA	#>playerL0861_5
  24206  7d41		       85 af		      STA	player5pointerhi
  24207  7d43		       a9 09		      LDA	#9
  24208  7d45		       85 b5		      STA	player5height
  24209  7d47				   .L0862		;  goto Nothing
  24210  7d47
  24211  7d47		       4c a1 dd 	      jmp	.Nothing
  24212  7d4a
  24213  7d4a				   .P2
  24214  7d4a							; P2
  24215  7d4a
  24216  7d4a				   .L0863		;  player5:
  24217  7d4a
  24218  7d4a		       a2 ae		      LDX	#<playerL0863_5
  24219  7d4c		       86 aa		      STX	player5pointerlo
  24220  7d4e		       a9 fc		      LDA	#>playerL0863_5
  24221  7d50		       85 af		      STA	player5pointerhi
  24222  7d52		       a9 09		      LDA	#9
  24223  7d54		       85 b5		      STA	player5height
  24224  7d56				   .L0864		;  goto Nothing
  24225  7d56
  24226  7d56		       4c a1 dd 	      jmp	.Nothing
  24227  7d59
  24228  7d59				   .P3
  24229  7d59							; P3
  24230  7d59
  24231  7d59				   .L0865		;  player5:
  24232  7d59
  24233  7d59		       a2 b6		      LDX	#<playerL0865_5
  24234  7d5b		       86 aa		      STX	player5pointerlo
  24235  7d5d		       a9 fc		      LDA	#>playerL0865_5
  24236  7d5f		       85 af		      STA	player5pointerhi
  24237  7d61		       a9 09		      LDA	#9
  24238  7d63		       85 b5		      STA	player5height
  24239  7d65				   .L0866		;  goto Nothing
  24240  7d65
  24241  7d65		       4c a1 dd 	      jmp	.Nothing
  24242  7d68
  24243  7d68				   .P4
  24244  7d68							; P4
  24245  7d68
  24246  7d68				   .L0867		;  player5:
  24247  7d68
  24248  7d68		       a2 be		      LDX	#<playerL0867_5
  24249  7d6a		       86 aa		      STX	player5pointerlo
  24250  7d6c		       a9 fc		      LDA	#>playerL0867_5
  24251  7d6e		       85 af		      STA	player5pointerhi
  24252  7d70		       a9 09		      LDA	#9
  24253  7d72		       85 b5		      STA	player5height
  24254  7d74				   .L0868		;  goto Nothing
  24255  7d74
  24256  7d74		       4c a1 dd 	      jmp	.Nothing
  24257  7d77
  24258  7d77				   .P5
  24259  7d77							; P5
  24260  7d77
  24261  7d77				   .L0869		;  player5:
  24262  7d77
  24263  7d77		       a2 c6		      LDX	#<playerL0869_5
  24264  7d79		       86 aa		      STX	player5pointerlo
  24265  7d7b		       a9 fc		      LDA	#>playerL0869_5
  24266  7d7d		       85 af		      STA	player5pointerhi
  24267  7d7f		       a9 09		      LDA	#9
  24268  7d81		       85 b5		      STA	player5height
  24269  7d83				   .L0870		;  goto Nothing
  24270  7d83
  24271  7d83		       4c a1 dd 	      jmp	.Nothing
  24272  7d86
  24273  7d86				   .P6
  24274  7d86							; P6
  24275  7d86
  24276  7d86				   .L0871		;  player5:
  24277  7d86
  24278  7d86		       a2 ce		      LDX	#<playerL0871_5
  24279  7d88		       86 aa		      STX	player5pointerlo
  24280  7d8a		       a9 fc		      LDA	#>playerL0871_5
  24281  7d8c		       85 af		      STA	player5pointerhi
  24282  7d8e		       a9 09		      LDA	#9
  24283  7d90		       85 b5		      STA	player5height
  24284  7d92				   .L0872		;  goto Nothing
  24285  7d92
  24286  7d92		       4c a1 dd 	      jmp	.Nothing
  24287  7d95
  24288  7d95				   .P7
  24289  7d95							; P7
  24290  7d95
  24291  7d95				   .L0873		;  player5:
  24292  7d95
  24293  7d95		       a2 d6		      LDX	#<playerL0873_5
  24294  7d97		       86 aa		      STX	player5pointerlo
  24295  7d99		       a9 fc		      LDA	#>playerL0873_5
  24296  7d9b		       85 af		      STA	player5pointerhi
  24297  7d9d		       a9 09		      LDA	#9
  24298  7d9f		       85 b5		      STA	player5height
  24299  7da1				   .Nothing
  24300  7da1							; Nothing
  24301  7da1
  24302  7da1				   .L0874		;  COLUP5 = COLUP5 + 1
  24303  7da1
  24304  7da1		       e6 9c		      INC	COLUP5
  24305  7da3				   .
  24306  7da3							; 
  24307  7da3
  24308  7da3				   .L0875		;  temp4 = player0height / 2
  24309  7da3
  24310  7da3		       a5 b0		      LDA	player0height
  24311  7da5		       4a		      lsr
  24312  7da6		       85 ce		      STA	temp4
  24313  7da8				   .L0876		;  temp2 = player0y - temp4
  24314  7da8
  24315  7da8		       a5 8d		      LDA	player0y
  24316  7daa		       38		      SEC
  24317  7dab		       e5 ce		      SBC	temp4
  24318  7dad		       85 cc		      STA	temp2
  24319  7daf				   .
  24320  7daf							; 
  24321  7daf
  24322  7daf				   .L0877		;  asm
  24323  7daf
  24324  7daf		       a5 92		      LDA	player5y
  24325  7db1
  24326  7db1		       38		      SEC
  24327  7db2
  24328  7db2		       e9 04		      SBC	#4
  24329  7db4
  24330  7db4		       85 cd		      STA	temp3
  24331  7db6
  24332  7db6
  24333  7db6
  24334  7db6		       c5 cc		      CMP	temp2
  24335  7db8
  24336  7db8		       b0 08		      BCS	.skipL0306_1
  24337  7dba
  24338  7dba		       a5 cc		      LDA	temp2
  24339  7dbc
  24340  7dbc		       38		      SEC
  24341  7dbd
  24342  7dbd		       e5 cd		      SBC	temp3
  24343  7dbf
  24344  7dbf		       4c c5 dd 	      jmp	.skipelse14_11
  24345  7dc2
  24346  7dc2				   .skipL0306_1
  24347  7dc2
  24348  7dc2		       38		      SEC
  24349  7dc3
  24350  7dc3		       e5 cc		      SBC	temp2
  24351  7dc5
  24352  7dc5				   .skipelse14_11
  24353  7dc5
  24354  7dc5		       85 cf		      STA	temp5
  24355  7dc7
  24356  7dc7
  24357  7dc7
  24358  7dc7		       a5 84		      LDA	player0x
  24359  7dc9
  24360  7dc9		       c5 89		      CMP	player5x
  24361  7dcb
  24362  7dcb		       b0 08		      BCS	.skipL0307_1
  24363  7dcd
  24364  7dcd		       a5 89		      LDA	player5x
  24365  7dcf
  24366  7dcf		       38		      SEC
  24367  7dd0
  24368  7dd0		       e5 84		      SBC	player0x
  24369  7dd2
  24370  7dd2		       4c d8 dd 	      jmp	.skipelse15_1
  24371  7dd5
  24372  7dd5				   .skipL0307_1
  24373  7dd5
  24374  7dd5		       38		      SEC
  24375  7dd6
  24376  7dd6		       e5 89		      SBC	player5x
  24377  7dd8
  24378  7dd8				   .skipelse15_1
  24379  7dd8
  24380  7dd8		       85 ce		      STA	temp4
  24381  7dda
  24382  7dda
  24383  7dda
  24384  7dda
  24385  7dda
  24386  7dda		       c9 0a		      CMP	#10
  24387  7ddc
  24388  7ddc		       b0 06		      BCS	.condpart156_1
  24389  7dde
  24390  7dde
  24391  7dde
  24392  7dde		       a9 08		      LDA	#8
  24393  7de0
  24394  7de0		       c5 cf		      CMP	temp5
  24395  7de2
  24396  7de2		       b0 0a		      BCS	.skip51OR_1
  24397  7de4
  24398  7de4				   .condpart156_1
  24399  7de4
  24400  7de4		       85 d1		      sta	temp7
  24401  7de6
  24402  7de6		       a9 95		      lda	#>(.No_Catch-1)
  24403  7de8
  24404  7de8		       48		      pha
  24405  7de9
  24406  7de9		       a9 97		      lda	#<(.No_Catch-1)
  24407  7deb
  24408  7deb		       4c 2b de 	      jmp	.Spellbreaker
  24409  7dee
  24410  7dee
  24411  7dee
  24412  7dee				   .skip51OR_1
  24413  7dee
  24414  7dee
  24415  7dee
  24416  7dee		       a5 db		      LDA	e
  24417  7df0
  24418  7df0		       4a		      LSR
  24419  7df1
  24420  7df1		       90 07		      BCC	.skipL030_7
  24421  7df3
  24422  7df3		       a5 ed		      LDA	w
  24423  7df5
  24424  7df5		       09 20		      ORA	#32
  24425  7df7
  24426  7df7		       4c fe dd 	      jmp	.skipelse_11
  24427  7dfa
  24428  7dfa				   .skipL030_7
  24429  7dfa
  24430  7dfa		       a5 ed		      LDA	w
  24431  7dfc
  24432  7dfc		       29 df		      AND	#223
  24433  7dfe
  24434  7dfe				   .skipelse_11
  24435  7dfe
  24436  7dfe		       85 ed		      STA	w
  24437  7e00
  24438  7e00				   .L0878		;  AUDV0 = 10 :  AUDC0 = 15 :	AUDF0 = 3
  24439  7e00
  24440  7e00		       a9 0a		      LDA	#10
  24441  7e02		       85 19		      STA	AUDV0
  24442  7e04		       a9 0f		      LDA	#15
  24443  7e06		       85 15		      STA	AUDC0
  24444  7e08		       a9 03		      LDA	#3
  24445  7e0a		       85 17		      STA	AUDF0
  24446  7e0c				   .L0879		;  asm
  24447  7e0c
  24448  7e0c		       a5 81		      LDA	PowerUp_Type
  24449  7e0e
  24450  7e0e		       c9 05		      CMP	#5
  24451  7e10
  24452  7e10		       f0 04		      BEQ	.condpart159_1
  24453  7e12
  24454  7e12		       c9 07		      CMP	#7
  24455  7e14
  24456  7e14		       d0 0e		      BNE	.skip52OR_1
  24457  7e16
  24458  7e16				   .condpart159_1
  24459  7e16
  24460  7e16		       a9 05		      LDA	#5
  24461  7e18
  24462  7e18		       85 ef		      STA	PowerUp_Counter
  24463  7e1a
  24464  7e1a		       85 d1		      sta	temp7
  24465  7e1c
  24466  7e1c		       a9 90		      lda	#>(.Its5-1)
  24467  7e1e
  24468  7e1e		       48		      pha
  24469  7e1f
  24470  7e1f		       a9 0b		      lda	#<(.Its5-1)
  24471  7e21
  24472  7e21		       4c 2b de 	      jmp	.Spellbreaker
  24473  7e24
  24474  7e24				   .skip52OR_1
  24475  7e24
  24476  7e24		       85 d1		      sta	temp7
  24477  7e26
  24478  7e26		       a9 8f		      lda	#>(.Nothing2-1)
  24479  7e28
  24480  7e28		       48		      pha
  24481  7e29
  24482  7e29		       a9 ff		      lda	#<(.Nothing2-1)
  24483  7e2b
  24484  7e2b				   .Spellbreaker
  24485  7e2b
  24486  7e2b		       48		      pha
  24487  7e2c
  24488  7e2c		       a5 d1		      lda	temp7
  24489  7e2e
  24490  7e2e		       48		      pha
  24491  7e2f
  24492  7e2f
  24493  7e2f
  24494  7e2f		       48		      pha
  24495  7e30
  24496  7e30		       a2 05		      ldx	#5
  24497  7e32
  24498  7e32		       4c eb ff 	      jmp	BS_jsr
  24499  7e35
  24500  7e35
  24501  7e35
  24502  7e35				   .L0880		;  bank 8
  24503  7e35
  24504  7e35					      if	ECHO7
      415 bytes of ROM space left in bank 7
  24505  7e35					      echo	"    ",[(start_bank7 - *)]d , "bytes of ROM space left in bank 7")
  24506  7e35					      endif
  24507  7e35		       00 01	   ECHO7      =	1
  24508  7fd4					      ORG	$7FF4-bscode_length
  24509  7fd4					      RORG	$DFF4-bscode_length
  24510  7fd4		       a2 ff	   start_bank7 ldx	#$ff
  24511  7fd6				  -	      ifconst	FASTFETCH	; using DPC+
  24512  7fd6				  -	      stx	FASTFETCH
  24513  7fd6					      endif
  24514  7fd6		       9a		      txs
  24515  7fd7				  -	      if	bankswitch == 64
  24516  7fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  24517  7fd7					      else
  24518  7fd7		       a9 f3		      lda	#>(start-1)
  24519  7fd9					      endif
  24520  7fd9		       48		      pha
  24521  7fda		       a9 6d		      lda	#<(start-1)
  24522  7fdc		       48		      pha
  24523  7fdd		       48		      pha
  24524  7fde		       8a		      txa
  24525  7fdf		       48		      pha
  24526  7fe0		       ba		      tsx
  24527  7fe1					      if	bankswitch != 64
  24528  7fe1		       b5 04		      lda	4,x	; get high byte of return address
  24529  7fe3		       2a		      rol
  24530  7fe4		       2a		      rol
  24531  7fe5		       2a		      rol
  24532  7fe6		       2a		      rol
  24533  7fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  24534  7fe9		       aa		      tax
  24535  7fea		       e8		      inx
  24536  7feb				  -	      else
  24537  7feb				  -	      lda	4,x	; get high byte of return address
  24538  7feb				  -	      tay
  24539  7feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  24540  7feb				  -	      sta	4,x
  24541  7feb				  -	      tya
  24542  7feb				  -	      lsr
  24543  7feb				  -	      lsr
  24544  7feb				  -	      lsr
  24545  7feb				  -	      lsr
  24546  7feb				  -	      tax
  24547  7feb				  -	      inx
  24548  7feb					      endif
  24549  7feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  24550  7fee		       68		      pla
  24551  7fef		       aa		      tax
  24552  7ff0		       68		      pla
  24553  7ff1		       60		      rts
  24554  7ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  24555  7ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  24556  7ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  24557  7ff2					      endif
  24558  7ffc					      ORG	$7FFC
  24559  7ffc					      RORG	$DFFC
  24560  7ffc		       d4 df		      .word.w	start_bank7
  24561  7ffe		       d4 df		      .word.w	start_bank7
  24562  8000					      ORG	$8000
  24563  8000					      RORG	$F000
  24564  8000				   FineAdjustTableBegin
  24565  8000		       60		      .byte.b	%01100000	;left 6
  24566  8001		       50		      .byte.b	%01010000
  24567  8002		       40		      .byte.b	%01000000
  24568  8003		       30		      .byte.b	%00110000
  24569  8004		       20		      .byte.b	%00100000
  24570  8005		       10		      .byte.b	%00010000
  24571  8006		       00		      .byte.b	%00000000	;left 0
  24572  8007		       f0		      .byte.b	%11110000
  24573  8008		       e0		      .byte.b	%11100000
  24574  8009		       d0		      .byte.b	%11010000
  24575  800a		       c0		      .byte.b	%11000000
  24576  800b		       b0		      .byte.b	%10110000
  24577  800c		       a0		      .byte.b	%10100000
  24578  800d		       90		      .byte.b	%10010000
  24579  800e		       80		      .byte.b	%10000000	;right 8
  24580  800e		       ef 0f	   FineAdjustTableEnd =	FineAdjustTableBegin - 241
  24581  800f
  24582  800f				   PFStart
  24583  800f		       57 2b 00 15*	      .byte.b	87,43,0,21,0,0,0,10
  24584  8017				   blank_pf
  24585  8017		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,5
  24586  801f							; .byte 43,21,0,10,0,0,0,5
  24587  801f				  -	      ifconst	screenheight
  24588  801f				  -pfsub
  24589  801f				  -	      .byte	8,4,2,2,1,0,0,1,0
  24590  801f					      endif
  24591  801f							;--set initial P1 positions
  24592  801f				   multisprite_setup
  24593  801f		       a9 0f		      lda	#15
  24594  8021		       85 c4		      sta	pfheight
  24595  8023
  24596  8023		       a2 04		      ldx	#4
  24597  8025							; stx temp3
  24598  8025				   SetCopyHeight
  24599  8025							;	lda #76
  24600  8025							;	sta NewSpriteX,X
  24601  8025							;	lda CopyColorData,X
  24602  8025							;	sta NewCOLUP1,X
  24603  8025							;lda SpriteHeightTable,X
  24604  8025							; sta spriteheight,x
  24605  8025		       8a		      txa
  24606  8026		       95 9d		      sta	SpriteGfxIndex,X
  24607  8028		       95 f1		      sta	spritesort,X
  24608  802a		       ca		      dex
  24609  802b		       10 f8		      bpl	SetCopyHeight
  24610  802d
  24611  802d
  24612  802d
  24613  802d							; since we can't turn off pf, point PF to zeros here
  24614  802d		       a9 f0		      lda	#>blank_pf
  24615  802f		       85 be		      sta	PF2pointer+1
  24616  8031		       85 bc		      sta	PF1pointer+1
  24617  8033		       a9 17		      lda	#<blank_pf
  24618  8035		       85 bd		      sta	PF2pointer
  24619  8037		       85 bb		      sta	PF1pointer
  24620  8039		       60		      rts
  24621  803a
  24622  803a				   drawscreen
  24623  803a				  -	      ifconst	debugscore
  24624  803a				  -	      jsr	debugcycles
  24625  803a					      endif
  24626  803a
  24627  803a				   WaitForOverscanEnd
  24628  803a		       ad 84 02 	      lda	INTIM
  24629  803d		       30 fb		      bmi	WaitForOverscanEnd
  24630  803f
  24631  803f		       a9 02		      lda	#2
  24632  8041		       85 02		      sta	WSYNC
  24633  8043		       85 00		      sta	VSYNC
  24634  8045		       85 02		      sta	WSYNC
  24635  8047		       85 02		      sta	WSYNC
  24636  8049		       4a		      lsr
  24637  804a		       85 27		      sta	VDELBL
  24638  804c		       85 25		      sta	VDELP0
  24639  804e		       85 02		      sta	WSYNC
  24640  8050		       85 00		      sta	VSYNC	;turn off VSYNC
  24641  8052					      ifconst	overscan_time
  24642  8052		       a9 aa		      lda	#overscan_time+5+128
  24643  8054				  -	      else
  24644  8054				  -	      lda	#42+128
  24645  8054					      endif
  24646  8054		       8d 96 02 	      sta	TIM64T
  24647  8057
  24648  8057							; run possible vblank bB code
  24649  8057					      ifconst	vblank_bB_code
  24650  8057		       20 b1 f4 	      jsr	vblank_bB_code
  24651  805a					      endif
      0  805a					      sleep	20	; LOTS OF SLEEP!!
      1  805a				   .CYCLES    SET	20
      2  805a
      3  805a				  -	      IF	.CYCLES < 2
      4  805a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  805a				  -	      ERR
      6  805a					      ENDIF
      7  805a
      8  805a				  -	      IF	.CYCLES & 1
      9  805a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  805a				  -	      nop	0
     11  805a				  -	      ELSE
     12  805a				  -	      bit	VSYNC
     13  805a				  -	      ENDIF
     14  805a				  -.CYCLES    SET	.CYCLES - 3
     15  805a					      ENDIF
     16  805a
     17  805a					      REPEAT	.CYCLES / 2
     18  805a		       ea		      nop
     17  805a					      REPEND
     18  805b		       ea		      nop
     17  805b					      REPEND
     18  805c		       ea		      nop
     17  805c					      REPEND
     18  805d		       ea		      nop
     17  805d					      REPEND
     18  805e		       ea		      nop
     17  805e					      REPEND
     18  805f		       ea		      nop
     17  805f					      REPEND
     18  8060		       ea		      nop
     17  8060					      REPEND
     18  8061		       ea		      nop
     17  8061					      REPEND
     18  8062		       ea		      nop
     17  8062					      REPEND
     18  8063		       ea		      nop
     19  8064					      REPEND
  24653  8064
  24654  8064
  24655  8064				   .skipping
      0  8064					      sleep	6
      1  8064				   .CYCLES    SET	6
      2  8064
      3  8064				  -	      IF	.CYCLES < 2
      4  8064				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8064				  -	      ERR
      6  8064					      ENDIF
      7  8064
      8  8064				  -	      IF	.CYCLES & 1
      9  8064				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  8064				  -	      nop	0
     11  8064				  -	      ELSE
     12  8064				  -	      bit	VSYNC
     13  8064				  -	      ENDIF
     14  8064				  -.CYCLES    SET	.CYCLES - 3
     15  8064					      ENDIF
     16  8064
     17  8064					      REPEAT	.CYCLES / 2
     18  8064		       ea		      nop
     17  8064					      REPEND
     18  8065		       ea		      nop
     17  8065					      REPEND
     18  8066		       ea		      nop
     19  8067					      REPEND
  24657  8067
  24658  8067
  24659  8067		       20 f4 f2 	      jsr	SetupP1Subroutine
  24660  806a
  24661  806a							;-------------
  24662  806a
  24663  806a
  24664  806a
  24665  806a
  24666  806a
  24667  806a							;--position P0, M0, M1, BL
  24668  806a
  24669  806a		       20 cb f0 	      jsr	PrePositionAllObjects
  24670  806d
  24671  806d							;--set up player 0 pointer
  24672  806d
  24673  806d		       c6 8d		      dec	player0y
  24674  806f		       a5 a2		      lda	player0pointer	; player0: must be run every frame!
  24675  8071		       38		      sec
  24676  8072		       e5 8d		      sbc	player0y
  24677  8074		       18		      clc
  24678  8075		       65 b0		      adc	player0height
  24679  8077		       85 a2		      sta	player0pointer
  24680  8079
  24681  8079		       a5 8d		      lda	player0y
  24682  807b		       85 cf		      sta	P0Top
  24683  807d		       38		      sec
  24684  807e		       e5 b0		      sbc	player0height
  24685  8080		       18		      clc
  24686  8081		       69 80		      adc	#$80
  24687  8083		       85 a4		      sta	P0Bottom
  24688  8085
  24689  8085
  24690  8085							;--some final setup
  24691  8085
  24692  8085		       a2 04		      ldx	#4
  24693  8087		       a9 80		      lda	#$80
  24694  8089				   cycle74_HMCLR
  24695  8089		       95 20		      sta	HMP0,X
  24696  808b		       ca		      dex
  24697  808c		       10 fb		      bpl	cycle74_HMCLR
  24698  808e							;	sta HMCLR
  24699  808e
  24700  808e
  24701  808e		       a9 00		      lda	#0
  24702  8090		       85 0e		      sta	PF1
  24703  8092		       85 0f		      sta	PF2
  24704  8094		       85 1b		      sta	GRP0
  24705  8096		       85 1c		      sta	GRP1
  24706  8098
  24707  8098
  24708  8098		       20 e6 f0 	      jsr	KernelSetupSubroutine
  24709  809b
  24710  809b
  24711  809b
  24712  809b				   WaitForVblankEnd
  24713  809b		       ad 84 02 	      lda	INTIM
  24714  809e		       30 fb		      bmi	WaitForVblankEnd
  24715  80a0		       a9 00		      lda	#0
  24716  80a2		       85 02		      sta	WSYNC
  24717  80a4		       85 01		      sta	VBLANK	;turn off VBLANK - it was turned on by overscan
  24718  80a6		       85 2c		      sta	CXCLR
  24719  80a8
  24720  80a8
  24721  80a8		       4c 66 f1 	      jmp	KernelRoutine
  24722  80ab
      0  80ab					      sleep	18	; LOTS OF SLEEP!!
      1  80ab				   .CYCLES    SET	18
      2  80ab
      3  80ab				  -	      IF	.CYCLES < 2
      4  80ab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  80ab				  -	      ERR
      6  80ab					      ENDIF
      7  80ab
      8  80ab				  -	      IF	.CYCLES & 1
      9  80ab				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  80ab				  -	      nop	0
     11  80ab				  -	      ELSE
     12  80ab				  -	      bit	VSYNC
     13  80ab				  -	      ENDIF
     14  80ab				  -.CYCLES    SET	.CYCLES - 3
     15  80ab					      ENDIF
     16  80ab
     17  80ab					      REPEAT	.CYCLES / 2
     18  80ab		       ea		      nop
     17  80ab					      REPEND
     18  80ac		       ea		      nop
     17  80ac					      REPEND
     18  80ad		       ea		      nop
     17  80ad					      REPEND
     18  80ae		       ea		      nop
     17  80ae					      REPEND
     18  80af		       ea		      nop
     17  80af					      REPEND
     18  80b0		       ea		      nop
     17  80b0					      REPEND
     18  80b1		       ea		      nop
     17  80b1					      REPEND
     18  80b2		       ea		      nop
     17  80b2					      REPEND
     18  80b3		       ea		      nop
     19  80b4					      REPEND
  24724  80b4
  24725  80b4
  24726  80b4				   PositionASpriteSubroutine		;call this function with A == horizontal position (0-159)
  24727  80b4							;and X == the object to be positioned (0=P0, 1=P1, 2=M0, etc.)
  24728  80b4							;if you do not wish to write to P1 during this function, make
  24729  80b4							;sure Y==0 before you call it.  This function will change Y, and A
  24730  80b4							;will be the value put into HMxx when returned.
  24731  80b4							;Call this function with at least 11 cycles left in the scanline 
  24732  80b4							;(jsr + sec + sta WSYNC = 11); it will return 9 cycles
  24733  80b4							;into the second scanline
  24734  80b4		       38		      sec
  24735  80b5		       85 02		      sta	WSYNC	;begin line 1
  24736  80b7		       8d 2b 00 	      sta.w	HMCLR	;+4	 4
  24737  80ba				   DivideBy15Loop
  24738  80ba		       e9 0f		      sbc	#15
  24739  80bc		       b0 fc		      bcs	DivideBy15Loop	;+4/5	8/13.../58
  24740  80be
  24741  80be		       a8		      tay		;+2	10/15/...60
  24742  80bf		       b9 0f ef 	      lda	FineAdjustTableEnd,Y	;+5	15/20/...65
  24743  80c2
  24744  80c2							;	15
  24745  80c2		       95 20		      sta	HMP0,X	;+4	19/24/...69
  24746  80c4		       95 10		      sta	RESP0,X	;+4	23/28/33/38/43/48/53/58/63/68/73
  24747  80c6		       85 02		      sta	WSYNC	;+3	 0	begin line 2
  24748  80c8		       85 2a		      sta	HMOVE	;+3
  24749  80ca		       60		      rts		;+6	 9
  24750  80cb
  24751  80cb							;-------------------------------------------------------------------------
  24752  80cb
  24753  80cb				   PrePositionAllObjects
  24754  80cb
  24755  80cb		       a2 04		      ldx	#4
  24756  80cd		       a5 82		      lda	ballx
  24757  80cf		       20 b4 f0 	      jsr	PositionASpriteSubroutine
  24758  80d2
  24759  80d2		       ca		      dex
  24760  80d3		       a5 81		      lda	missile1x
  24761  80d5		       20 b4 f0 	      jsr	PositionASpriteSubroutine
  24762  80d8
  24763  80d8		       ca		      dex
  24764  80d9		       a5 80		      lda	missile0x
  24765  80db		       20 b4 f0 	      jsr	PositionASpriteSubroutine
  24766  80de
  24767  80de		       ca		      dex
  24768  80df		       ca		      dex
  24769  80e0		       a5 84		      lda	player0x
  24770  80e2		       20 b4 f0 	      jsr	PositionASpriteSubroutine
  24771  80e5
  24772  80e5		       60		      rts
  24773  80e6
  24774  80e6
  24775  80e6							;-------------------------------------------------------------------------
  24776  80e6
  24777  80e6
  24778  80e6
  24779  80e6
  24780  80e6
  24781  80e6
  24782  80e6
  24783  80e6
  24784  80e6							;-------------------------------------------------------------------------
  24785  80e6
  24786  80e6
  24787  80e6				   KernelSetupSubroutine
  24788  80e6
  24789  80e6		       a2 04		      ldx	#4
  24790  80e8				   AdjustYValuesUpLoop
  24791  80e8		       b5 8e		      lda	NewSpriteY,X
  24792  80ea		       18		      clc
  24793  80eb		       69 02		      adc	#2
  24794  80ed		       95 8e		      sta	NewSpriteY,X
  24795  80ef		       ca		      dex
  24796  80f0		       10 f6		      bpl	AdjustYValuesUpLoop
  24797  80f2
  24798  80f2
  24799  80f2		       a6 cd		      ldx	temp3	; first sprite displayed
  24800  80f4
  24801  80f4		       b5 9d		      lda	SpriteGfxIndex,x
  24802  80f6		       a8		      tay
  24803  80f7		       b9 8e 00 	      lda	NewSpriteY,y
  24804  80fa		       85 ce		      sta	RepoLine
  24805  80fc
  24806  80fc		       b5 9c		      lda	SpriteGfxIndex-1,x
  24807  80fe		       a8		      tay
  24808  80ff		       b9 8e 00 	      lda	NewSpriteY,y
  24809  8102		       85 d0		      sta	temp6
  24810  8104
  24811  8104		       86 83		      stx	SpriteIndex
  24812  8106
  24813  8106
  24814  8106
  24815  8106		       a9 ff		      lda	#255
  24816  8108		       85 a5		      sta	P1Bottom
  24817  810a
  24818  810a		       a5 8d		      lda	player0y
  24819  810c				  -	      ifconst	screenheight
  24820  810c				  -	      cmp	#screenheight+1
  24821  810c					      else
  24822  810c		       c9 59		      cmp	#$59
  24823  810e					      endif
  24824  810e		       90 04		      bcc	nottoohigh
  24825  8110		       a5 a4		      lda	P0Bottom
  24826  8112		       85 cf		      sta	P0Top
  24827  8114
  24828  8114
  24829  8114
  24830  8114				   nottoohigh
  24831  8114		       60		      rts
  24832  8115
  24833  8115							;-------------------------------------------------------------------------
  24834  8115
  24835  8115
  24836  8115
  24837  8115
  24838  8115
  24839  8115							;*************************************************************************
  24840  8115
  24841  8115							;-------------------------------------------------------------------------
  24842  8115							;-------------------------Data Below--------------------------------------
  24843  8115							;-------------------------------------------------------------------------
  24844  8115
  24845  8115				   MaskTable
  24846  8115		       01 03 07 0f*	      .byte.b	1,3,7,15,31
  24847  811a
  24848  811a							; shove 6-digit score routine here
  24849  811a
  24850  811a				   sixdigscore
  24851  811a		       a9 00		      lda	#0
  24852  811c							;	sta COLUBK
  24853  811c		       85 0d		      sta	PF0
  24854  811e		       85 0e		      sta	PF1
  24855  8120		       85 0f		      sta	PF2
  24856  8122		       85 1f		      sta	ENABL
  24857  8124		       85 1d		      sta	ENAM0
  24858  8126		       85 1e		      sta	ENAM1
  24859  8128							;end of kernel here
  24860  8128
  24861  8128
  24862  8128							; 6 digit score routine
  24863  8128							; lda #0
  24864  8128							; sta PF1
  24865  8128							; sta PF2
  24866  8128							; tax
  24867  8128
  24868  8128		       85 02		      sta	WSYNC	;,x
  24869  812a
  24870  812a							;		  STA WSYNC ;first one, need one more
  24871  812a		       85 0b		      sta	REFP0
  24872  812c		       85 0c		      sta	REFP1
  24873  812e		       85 1b		      STA	GRP0
  24874  8130		       85 1c		      STA	GRP1
  24875  8132		       85 2b		      sta	HMCLR
  24876  8134
  24877  8134							; restore P0pointer
  24878  8134
  24879  8134		       a5 a2		      lda	player0pointer
  24880  8136		       18		      clc
  24881  8137		       65 8d		      adc	player0y
  24882  8139		       38		      sec
  24883  813a		       e5 b0		      sbc	player0height
  24884  813c		       85 a2		      sta	player0pointer
  24885  813e		       e6 8d		      inc	player0y
  24886  8140
  24887  8140					      ifconst	vblank_time
  24888  8140				  -	      ifconst	screenheight
  24889  8140				  -	      if	screenheight == 84
  24890  8140				  -	      lda	#vblank_time+9+128+10
  24891  8140				  -	      else
  24892  8140				  -	      lda	#vblank_time+9+128+19
  24893  8140				  -	      endif
  24894  8140					      else
  24895  8140		       a9 b4		      lda	#vblank_time+9+128
  24896  8142					      endif
  24897  8142				  -	      else
  24898  8142				  -	      ifconst	screenheight
  24899  8142				  -	      if	screenheight == 84
  24900  8142				  -	      lda	#52+128+10
  24901  8142				  -	      else
  24902  8142				  -	      lda	#52+128+19
  24903  8142				  -	      endif
  24904  8142				  -	      else
  24905  8142				  -	      lda	#52+128
  24906  8142				  -	      endif
  24907  8142					      endif
  24908  8142
  24909  8142		       8d 96 02 	      sta	TIM64T
  24910  8145					      ifconst	minikernel
  24911  8145		       20 b7 f3 	      jsr	minikernel
  24912  8148					      endif
  24913  8148					      ifconst	noscore
      0  8148					      sleep	18	; LOTS OF SLEEP!!
      1  8148				   .CYCLES    SET	18
      2  8148
      3  8148				  -	      IF	.CYCLES < 2
      4  8148				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8148				  -	      ERR
      6  8148					      ENDIF
      7  8148
      8  8148				  -	      IF	.CYCLES & 1
      9  8148				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  8148				  -	      nop	0
     11  8148				  -	      ELSE
     12  8148				  -	      bit	VSYNC
     13  8148				  -	      ENDIF
     14  8148				  -.CYCLES    SET	.CYCLES - 3
     15  8148					      ENDIF
     16  8148
     17  8148					      REPEAT	.CYCLES / 2
     18  8148		       ea		      nop
     17  8148					      REPEND
     18  8149		       ea		      nop
     17  8149					      REPEND
     18  814a		       ea		      nop
     17  814a					      REPEND
     18  814b		       ea		      nop
     17  814b					      REPEND
     18  814c		       ea		      nop
     17  814c					      REPEND
     18  814d		       ea		      nop
     17  814d					      REPEND
     18  814e		       ea		      nop
     17  814e					      REPEND
     18  814f		       ea		      nop
     17  814f					      REPEND
     18  8150		       ea		      nop
     19  8151					      REPEND
  24915  8151
  24916  8151		       60		      rts
  24917  8152					      endif
  24918  8152
  24919  8152		       60		      rts
  24920  8153
  24921  8153
  24922  8153
  24923  8153							;-------------------------------------------------------------------------
  24924  8153							;----------------------Kernel Routine-------------------------------------
  24925  8153							;-------------------------------------------------------------------------
  24926  8153
  24927  8153
  24928  8153							;-------------------------------------------------------------------------
  24929  8153							; repeat $f147-*
  24930  8153							; brk
  24931  8153							; repend
  24932  8153							;	org $F240
  24933  8153
  24934  8153				   SwitchDrawP0K1		;	72
  24935  8153		       a5 a4		      lda	P0Bottom
  24936  8155		       85 cf		      sta	P0Top	;+6	 2
  24937  8157		       4c 93 f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
  24938  815a
  24939  815a				   WaitDrawP0K1 		;	74
      0  815a					      SLEEP	4	;+4	 2
      1  815a				   .CYCLES    SET	4
      2  815a
      3  815a				  -	      IF	.CYCLES < 2
      4  815a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  815a				  -	      ERR
      6  815a					      ENDIF
      7  815a
      8  815a				  -	      IF	.CYCLES & 1
      9  815a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  815a				  -	      nop	0
     11  815a				  -	      ELSE
     12  815a				  -	      bit	VSYNC
     13  815a				  -	      ENDIF
     14  815a				  -.CYCLES    SET	.CYCLES - 3
     15  815a					      ENDIF
     16  815a
     17  815a					      REPEAT	.CYCLES / 2
     18  815a		       ea		      nop
     17  815a					      REPEND
     18  815b		       ea		      nop
     19  815c					      REPEND
  24941  815c		       4c 93 f1 	      jmp	BackFromSwitchDrawP0K1	;+3	 5
  24942  815f
  24943  815f				   SkipDrawP1K1 		;	11
  24944  815f		       a9 00		      lda	#0
  24945  8161		       85 1c		      sta	GRP1	;+5	16	so Ball gets drawn
  24946  8163		       4c 9c f1 	      jmp	BackFromSkipDrawP1	;+3	19
  24947  8166
  24948  8166							;-------------------------------------------------------------------------
  24949  8166
  24950  8166				   KernelRoutine
  24951  8166		       a9 d4		      lda	#$d4
  24952  8168		       85 08		      sta	COLUPF
      0  816a					      sleep	7
      1  816a				   .CYCLES    SET	7
      2  816a
      3  816a				  -	      IF	.CYCLES < 2
      4  816a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  816a				  -	      ERR
      6  816a					      ENDIF
      7  816a
      8  816a					      IF	.CYCLES & 1
      9  816a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  816a		       04 00		      nop	0
     11  816c				  -	      ELSE
     12  816c				  -	      bit	VSYNC
     13  816c					      ENDIF
     14  816c				   .CYCLES    SET	.CYCLES - 3
     15  816c					      ENDIF
     16  816c
     17  816c					      REPEAT	.CYCLES / 2
     18  816c		       ea		      nop
     17  816c					      REPEND
     18  816d		       ea		      nop
     19  816e					      REPEND
  24954  816e		       ba		      tsx
  24955  816f		       86 f6		      stx	stack1
  24956  8171		       a2 1f		      ldx	#ENABL
  24957  8173		       9a		      txs		;+9	 9
  24958  8174
  24959  8174		       a2 00		      ldx	#0
  24960  8176		       a5 c4		      lda	pfheight
  24961  8178		       10 01		      bpl	asdhj
  24962  817a		       24		      .byte.b	$24
  24963  817b				   asdhj
  24964  817b		       aa		      tax
  24965  817c
  24966  817c							; ldx pfheight
  24967  817c		       bd 0f f0 	      lda	PFStart,x	; get pf pixel resolution for heights 15,7,3,1,0
  24968  817f
  24969  817f				  -	      ifconst	screenheight
  24970  817f				  -	      sec
  24971  817f				  -	      if	screenheight == 84
  24972  817f				  -	      sbc	pfsub+1,x
  24973  817f				  -	      else
  24974  817f				  -	      sbc	pfsub,x
  24975  817f				  -	      endif
  24976  817f					      endif
  24977  817f
  24978  817f		       85 ba		      sta	pfpixelheight
  24979  8181
  24980  8181				  -	      ifconst	screenheight
  24981  8181				  -	      ldy	#screenheight
  24982  8181					      else
  24983  8181		       a0 58		      ldy	#88
  24984  8183					      endif
  24985  8183
  24986  8183							;	lda #$02
  24987  8183							;	sta COLUBK		;+5	18
  24988  8183
  24989  8183							; sleep 25
      0  8183					      sleep	2
      1  8183				   .CYCLES    SET	2
      2  8183
      3  8183				  -	      IF	.CYCLES < 2
      4  8183				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8183				  -	      ERR
      6  8183					      ENDIF
      7  8183
      8  8183				  -	      IF	.CYCLES & 1
      9  8183				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  8183				  -	      nop	0
     11  8183				  -	      ELSE
     12  8183				  -	      bit	VSYNC
     13  8183				  -	      ENDIF
     14  8183				  -.CYCLES    SET	.CYCLES - 3
     15  8183					      ENDIF
     16  8183
     17  8183					      REPEAT	.CYCLES / 2
     18  8183		       ea		      nop
     19  8184					      REPEND
  24991  8184				   KernelLoopa		;	50
      0  8184					      sleep	7
      1  8184				   .CYCLES    SET	7
      2  8184
      3  8184				  -	      IF	.CYCLES < 2
      4  8184				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8184				  -	      ERR
      6  8184					      ENDIF
      7  8184
      8  8184					      IF	.CYCLES & 1
      9  8184					      IFNCONST	NO_ILLEGAL_OPCODES
     10  8184		       04 00		      nop	0
     11  8186				  -	      ELSE
     12  8186				  -	      bit	VSYNC
     13  8186					      ENDIF
     14  8186				   .CYCLES    SET	.CYCLES - 3
     15  8186					      ENDIF
     16  8186
     17  8186					      REPEAT	.CYCLES / 2
     18  8186		       ea		      nop
     17  8186					      REPEND
     18  8187		       ea		      nop
     19  8188					      REPEND
  24993  8188							;+4	54
  24994  8188				   KernelLoopb		;	54
      0  8188					      SLEEP	2	;+12	66
      1  8188				   .CYCLES    SET	2
      2  8188
      3  8188				  -	      IF	.CYCLES < 2
      4  8188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8188				  -	      ERR
      6  8188					      ENDIF
      7  8188
      8  8188				  -	      IF	.CYCLES & 1
      9  8188				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  8188				  -	      nop	0
     11  8188				  -	      ELSE
     12  8188				  -	      bit	VSYNC
     13  8188				  -	      ENDIF
     14  8188				  -.CYCLES    SET	.CYCLES - 3
     15  8188					      ENDIF
     16  8188
     17  8188					      REPEAT	.CYCLES / 2
     18  8188		       ea		      nop
     19  8189					      REPEND
  24996  8189		       c4 cf		      cpy	P0Top	;+3	69
  24997  818b		       f0 c6		      beq	SwitchDrawP0K1	;+2	71
  24998  818d		       10 cb		      bpl	WaitDrawP0K1	;+2	73
  24999  818f		       b1 a2		      lda	(player0pointer),Y	;+5	 2
  25000  8191		       85 1b		      sta	GRP0	;+3	 5	VDEL because of repokernel
  25001  8193				   BackFromSwitchDrawP0K1
  25002  8193
  25003  8193		       c4 a5		      cpy	P1Bottom	;+3	 8	unless we mean to draw immediately, this should be set
  25004  8195							;		to a value greater than maximum Y value initially
  25005  8195		       90 c8		      bcc	SkipDrawP1K1	;+2	10
  25006  8197		       b1 cc		      lda	(P1display),Y	;+5	15
  25007  8199		       8d 1c 00 	      sta.w	GRP1	;+4	19
  25008  819c				   BackFromSkipDrawP1
  25009  819c
  25010  819c							;fuck	
  25011  819c		       84 cb		      sty	temp1
  25012  819e		       a4 ba		      ldy	pfpixelheight
  25013  81a0		       b3 bb		      lax	(PF1pointer),y
  25014  81a2		       86 0e		      stx	PF1	;+7	26
  25015  81a4		       b1 bd		      lda	(PF2pointer),y
  25016  81a6		       85 0f		      sta	PF2	;+7	33
  25017  81a8							;sleep 6
  25018  81a8		       86 b7		      stx	PF1temp2
  25019  81aa		       85 b9		      sta	PF2temp2
  25020  81ac		       88		      dey
  25021  81ad		       30 37		      bmi	pagewraphandler
  25022  81af		       b1 bb		      lda	(PF1pointer),y
  25023  81b1				   cyclebalance
  25024  81b1		       85 b6		      sta	PF1temp1
  25025  81b3		       b1 bd		      lda	(PF2pointer),y
  25026  81b5		       85 b8		      sta	PF2temp1
  25027  81b7		       a4 cb		      ldy	temp1
  25028  81b9
  25029  81b9		       a2 1f		      ldx	#ENABL
  25030  81bb		       9a		      txs
  25031  81bc		       c4 8c		      cpy	bally
  25032  81be		       08		      php		;+6	39	VDEL ball
  25033  81bf
  25034  81bf
  25035  81bf		       c4 8b		      cpy	missile1y
  25036  81c1		       08		      php		;+6	71
  25037  81c2
  25038  81c2		       c4 8a		      cpy	missile0y
  25039  81c4		       08		      php		;+6	 1
  25040  81c5
  25041  81c5
  25042  81c5		       88		      dey		;+2	15
  25043  81c6
  25044  81c6		       c4 ce		      cpy	RepoLine	;+3	18
  25045  81c8		       f0 48		      beq	RepoKernel	;+2	20
  25046  81ca							;	SLEEP 20		;+23	43
  25047  81ca		       a6 ba		      ldx	pfpixelheight
  25048  81cc		       bd 9a f4 	      lda	Playfield,x
  25049  81cf		       85 08		      sta	COLUPF
  25050  81d1				   newrepo		; since we have time here, store next repoline
  25051  81d1		       a6 83		      ldx	SpriteIndex
  25052  81d3		       b5 9c		      lda	SpriteGfxIndex-1,x
  25053  81d5		       aa		      tax
  25054  81d6		       b5 8e		      lda	NewSpriteY,x
  25055  81d8		       85 d0		      sta	temp6
  25056  81da
  25057  81da				   BackFromRepoKernel
  25058  81da		       98		      tya		;+2	45
  25059  81db		       25 c4		      and	pfheight	;+2	47
  25060  81dd		       d0 a5		      bne	KernelLoopa	;+2	49
  25061  81df		       c6 ba		      dec	pfpixelheight
  25062  81e1		       10 a5		      bpl	KernelLoopb	;+3	54
  25063  81e3							;	bmi donewkernel		;+3	54
  25064  81e3							;	bne KernelLoopb+1		;+3	54
  25065  81e3
  25066  81e3				   donewkernel
  25067  81e3		       4c d1 f2 	      jmp	DoneWithKernel	;+3	56
  25068  81e6
  25069  81e6				   pagewraphandler
  25070  81e6		       4c b1 f1 	      jmp	cyclebalance
  25071  81e9
  25072  81e9							;-------------------------------------------------------------------------
  25073  81e9
  25074  81e9							; room here for score?
  25075  81e9
  25076  81e9
  25077  81e9				   scorepointerset
  25078  81e9		       29 0f		      and	#$0F
  25079  81eb		       0a		      asl
  25080  81ec		       0a		      asl
  25081  81ed		       0a		      asl
  25082  81ee		       69 74		      adc	#<scoretable
  25083  81f0		       a8		      tay
  25084  81f1		       8a		      txa
  25085  81f2		       29 f0		      and	#$F0
  25086  81f4		       4a		      lsr
  25087  81f5		       69 74		      adc	#<scoretable
  25088  81f7		       aa		      tax
  25089  81f8		       60		      rts
  25090  81f9							;	align 256
  25091  81f9
  25092  81f9				   SwitchDrawP0KR		;	45
  25093  81f9		       a5 a4		      lda	P0Bottom
  25094  81fb		       85 cf		      sta	P0Top	;+6	51
  25095  81fd		       4c 24 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
  25096  8200
  25097  8200				   WaitDrawP0KR 		;	47
      0  8200					      SLEEP	4	;+4	51
      1  8200				   .CYCLES    SET	4
      2  8200
      3  8200				  -	      IF	.CYCLES < 2
      4  8200				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8200				  -	      ERR
      6  8200					      ENDIF
      7  8200
      8  8200				  -	      IF	.CYCLES & 1
      9  8200				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  8200				  -	      nop	0
     11  8200				  -	      ELSE
     12  8200				  -	      bit	VSYNC
     13  8200				  -	      ENDIF
     14  8200				  -.CYCLES    SET	.CYCLES - 3
     15  8200					      ENDIF
     16  8200
     17  8200					      REPEAT	.CYCLES / 2
     18  8200		       ea		      nop
     17  8200					      REPEND
     18  8201		       ea		      nop
     19  8202					      REPEND
  25099  8202		       4c 24 f2 	      jmp	BackFromSwitchDrawP0KR	;+3	54
  25100  8205
  25101  8205							;-----------------------------------------------------------
  25102  8205
  25103  8205				   noUpdateXKR
  25104  8205		       a2 01		      ldx	#1
  25105  8207		       cc cf 00 	      cpy.w	P0Top
  25106  820a		       4c 1c f2 	      JMP	retXKR
  25107  820d
  25108  820d				   skipthis
  25109  820d		       a2 01		      ldx	#1
  25110  820f		       4c 5e f2 	      jmp	goback
  25111  8212
  25112  8212				   RepoKernel		;	22	crosses page boundary
  25113  8212		       98		      tya
  25114  8213		       25 c4		      and	pfheight	;+2	26
  25115  8215		       d0 ee		      bne	noUpdateXKR	;+2	28
  25116  8217		       aa		      tax
  25117  8218							;	dex			;+2	30
  25118  8218		       c6 ba		      dec	pfpixelheight
  25119  821a							;	stx Temp		;+3	35
  25120  821a							;	SLEEP 3
  25121  821a
  25122  821a		       c4 cf		      cpy	P0Top	;+3	42
  25123  821c				   retXKR
  25124  821c		       f0 db		      beq	SwitchDrawP0KR	;+2	44
  25125  821e		       10 e0		      bpl	WaitDrawP0KR	;+2	46
  25126  8220		       b1 a2		      lda	(player0pointer),Y	;+5	51
  25127  8222		       85 1b		      sta	GRP0	;+3	54	VDEL
  25128  8224				   BackFromSwitchDrawP0KR
  25129  8224		       38		      sec		;+2	56
  25130  8225
  25131  8225
  25132  8225
  25133  8225		       b5 b8		      lda	PF2temp1,X
  25134  8227		       b4 b6		      ldy	PF1temp1,X
  25135  8229
  25136  8229		       a6 83		      ldx	SpriteIndex	;+3	 2
  25137  822b
  25138  822b		       85 0f		      sta	PF2	;+7	63
  25139  822d
  25140  822d		       b5 9d		      lda	SpriteGfxIndex,x
  25141  822f		       84 0e		      sty	PF1	;+7	70	too early?
  25142  8231		       aa		      tax
  25143  8232		       a9 00		      lda	#0
  25144  8234		       85 1c		      sta	GRP1	;+5	75	to display player 0
  25145  8236		       b5 85		      lda	NewSpriteX,X	;+4	 6
  25146  8238
  25147  8238				   DivideBy15LoopK		;	 6	(carry set above)
  25148  8238		       e9 0f		      sbc	#15
  25149  823a		       b0 fc		      bcs	DivideBy15LoopK	;+4/5	10/15.../60
  25150  823c
  25151  823c		       aa		      tax		;+2	12/17/...62
  25152  823d		       bd 0f ef 	      lda	FineAdjustTableEnd,X	;+5	17/22/...67
  25153  8240
  25154  8240		       85 21		      sta	HMP1	;+3	20/25/...70
  25155  8242		       85 11		      sta	RESP1	;+3	23/28/33/38/43/48/53/58/63/68/73
  25156  8244		       85 02		      sta	WSYNC	;+3	 0	begin line 2
  25157  8246							;sta HMOVE			;+3	 3
  25158  8246
  25159  8246		       a2 1f		      ldx	#ENABL
  25160  8248		       9a		      txs		;+4	25
  25161  8249		       a4 ce		      ldy	RepoLine	; restore y
  25162  824b		       c4 8c		      cpy	bally
  25163  824d		       08		      php		;+6	 9	VDEL ball
  25164  824e
  25165  824e		       c4 8b		      cpy	missile1y
  25166  8250		       08		      php		;+6	15
  25167  8251
  25168  8251		       c4 8a		      cpy	missile0y
  25169  8253		       08		      php		;+6	21
  25170  8254
  25171  8254
  25172  8254
  25173  8254
  25174  8254
  25175  8254							;15 cycles
  25176  8254		       98		      tya
  25177  8255		       25 c4		      and	pfheight
  25178  8257							;eor #1
  25179  8257		       29 fe		      and	#$FE
  25180  8259		       d0 b2		      bne	skipthis
  25181  825b		       aa		      tax
      0  825c					      sleep	4
      1  825c				   .CYCLES    SET	4
      2  825c
      3  825c				  -	      IF	.CYCLES < 2
      4  825c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  825c				  -	      ERR
      6  825c					      ENDIF
      7  825c
      8  825c				  -	      IF	.CYCLES & 1
      9  825c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  825c				  -	      nop	0
     11  825c				  -	      ELSE
     12  825c				  -	      bit	VSYNC
     13  825c				  -	      ENDIF
     14  825c				  -.CYCLES    SET	.CYCLES - 3
     15  825c					      ENDIF
     16  825c
     17  825c					      REPEAT	.CYCLES / 2
     18  825c		       ea		      nop
     17  825c					      REPEND
     18  825d		       ea		      nop
     19  825e					      REPEND
  25183  825e							;	sleep 2
  25184  825e				   goback
  25185  825e
  25186  825e		       88		      dey
  25187  825f		       c4 cf		      cpy	P0Top	;+3	52
  25188  8261		       f0 62		      beq	SwitchDrawP0KV	;+2	54
  25189  8263		       10 67		      bpl	WaitDrawP0KV	;+2	56
  25190  8265		       b1 a2		      lda	(player0pointer),Y	;+5	61
  25191  8267		       85 1b		      sta	GRP0	;+3	64	VDEL
  25192  8269				   BackFromSwitchDrawP0KV
  25193  8269
  25194  8269							; sleep 3
  25195  8269
  25196  8269		       b5 b8		      lda	PF2temp1,X
  25197  826b		       85 0f		      sta	PF2	;+7	 5
  25198  826d		       b5 b6		      lda	PF1temp1,X
  25199  826f		       85 0e		      sta	PF1	;+7	74 
  25200  8271		       85 2a		      sta	HMOVE
  25201  8273
  25202  8273		       a9 00		      lda	#0
  25203  8275		       85 1c		      sta	GRP1	;+5	10	to display GRP0
  25204  8277
  25205  8277		       a2 1f		      ldx	#ENABL
  25206  8279		       9a		      txs		;+4	 8
  25207  827a
  25208  827a		       a6 83		      ldx	SpriteIndex	;+3	13	restore index into new sprite vars
  25209  827c							;--now, set all new variables and return to main kernel loop
  25210  827c
  25211  827c
  25212  827c							;
  25213  827c		       b5 9d		      lda	SpriteGfxIndex,X	;+4	31
  25214  827e		       aa		      tax		;+2	33
  25215  827f							;
  25216  827f
  25217  827f
  25218  827f
  25219  827f		       b5 93		      lda	NewNUSIZ,X
  25220  8281		       85 05		      sta	NUSIZ1	;+7	20
  25221  8283		       85 0c		      sta	REFP1
  25222  8285		       b5 98		      lda	NewCOLUP1,X
  25223  8287		       85 07		      sta	COLUP1	;+7	27
  25224  8289
  25225  8289							;	lda SpriteGfxIndex,X	;+4	31
  25226  8289							;	tax				;+2	33
  25227  8289							;fuck2
  25228  8289		       b5 8e		      lda	NewSpriteY,X	;+4	46
  25229  828b		       38		      sec		;+2	38
  25230  828c		       f5 b1		      sbc	spriteheight,X	;+4	42
  25231  828e		       85 a5		      sta	P1Bottom	;+3	45
  25232  8290
      0  8290					      sleep	6
      1  8290				   .CYCLES    SET	6
      2  8290
      3  8290				  -	      IF	.CYCLES < 2
      4  8290				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8290				  -	      ERR
      6  8290					      ENDIF
      7  8290
      8  8290				  -	      IF	.CYCLES & 1
      9  8290				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  8290				  -	      nop	0
     11  8290				  -	      ELSE
     12  8290				  -	      bit	VSYNC
     13  8290				  -	      ENDIF
     14  8290				  -.CYCLES    SET	.CYCLES - 3
     15  8290					      ENDIF
     16  8290
     17  8290					      REPEAT	.CYCLES / 2
     18  8290		       ea		      nop
     17  8290					      REPEND
     18  8291		       ea		      nop
     17  8291					      REPEND
     18  8292		       ea		      nop
     19  8293					      REPEND
  25234  8293		       b5 a6		      lda	player1pointerlo,X	;+4	49
  25235  8295		       e5 a5		      sbc	P1Bottom	;+3	52	carry should still be set
  25236  8297		       85 cc		      sta	P1display	;+3	55
  25237  8299		       b5 ab		      lda	player1pointerhi,X
  25238  829b		       85 cd		      sta	P1display+1	;+7	62
  25239  829d
  25240  829d
  25241  829d		       c4 8c		      cpy	bally
  25242  829f		       08		      php		;+6	68	VDELed
  25243  82a0
  25244  82a0		       c4 8b		      cpy	missile1y
  25245  82a2		       08		      php		;+6	74
  25246  82a3
  25247  82a3		       c4 8a		      cpy	missile0y
  25248  82a5		       08		      php		;+6	 4
  25249  82a6
  25250  82a6
  25251  82a6
  25252  82a6							; lda SpriteGfxIndex-1,x
  25253  82a6							; sleep 3
  25254  82a6		       c6 83		      dec	SpriteIndex	;+5	13
  25255  82a8							; tax
  25256  82a8							; lda NewSpriteY,x
  25257  82a8							; sta RepoLine
  25258  82a8
  25259  82a8							; 10 cycles below...
  25260  82a8		       10 05		      bpl	SetNextLine
  25261  82aa		       a9 ff		      lda	#255
  25262  82ac		       4c b2 f2 	      jmp	SetLastLine
  25263  82af				   SetNextLine
  25264  82af							;	lda NewSpriteY-1,x
  25265  82af		       ad d0 00 	      lda.w	temp6
  25266  82b2				   SetLastLine
  25267  82b2		       85 ce		      sta	RepoLine
  25268  82b4
  25269  82b4		       98		      tya
  25270  82b5		       25 c4		      and	pfheight
  25271  82b7		       d0 06		      bne	nodec
  25272  82b9		       c6 ba		      dec	pfpixelheight
  25273  82bb		       88		      dey		;+2	30
  25274  82bc
  25275  82bc							; 10 cycles 
  25276  82bc
  25277  82bc
  25278  82bc		       4c da f1 	      jmp	BackFromRepoKernel	;+3	43
  25279  82bf
  25280  82bf				   nodec
      0  82bf					      sleep	4
      1  82bf				   .CYCLES    SET	4
      2  82bf
      3  82bf				  -	      IF	.CYCLES < 2
      4  82bf				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  82bf				  -	      ERR
      6  82bf					      ENDIF
      7  82bf
      8  82bf				  -	      IF	.CYCLES & 1
      9  82bf				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  82bf				  -	      nop	0
     11  82bf				  -	      ELSE
     12  82bf				  -	      bit	VSYNC
     13  82bf				  -	      ENDIF
     14  82bf				  -.CYCLES    SET	.CYCLES - 3
     15  82bf					      ENDIF
     16  82bf
     17  82bf					      REPEAT	.CYCLES / 2
     18  82bf		       ea		      nop
     17  82bf					      REPEND
     18  82c0		       ea		      nop
     19  82c1					      REPEND
  25282  82c1		       88		      dey
  25283  82c2		       4c da f1 	      jmp	BackFromRepoKernel
  25284  82c5
  25285  82c5							;-------------------------------------------------------------------------
  25286  82c5
  25287  82c5
  25288  82c5				   SwitchDrawP0KV		;	69
  25289  82c5		       a5 a4		      lda	P0Bottom
  25290  82c7		       85 cf		      sta	P0Top	;+6	75
  25291  82c9		       4c 69 f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
  25292  82cc
  25293  82cc				   WaitDrawP0KV 		;	71
      0  82cc					      SLEEP	4	;+4	75
      1  82cc				   .CYCLES    SET	4
      2  82cc
      3  82cc				  -	      IF	.CYCLES < 2
      4  82cc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  82cc				  -	      ERR
      6  82cc					      ENDIF
      7  82cc
      8  82cc				  -	      IF	.CYCLES & 1
      9  82cc				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  82cc				  -	      nop	0
     11  82cc				  -	      ELSE
     12  82cc				  -	      bit	VSYNC
     13  82cc				  -	      ENDIF
     14  82cc				  -.CYCLES    SET	.CYCLES - 3
     15  82cc					      ENDIF
     16  82cc
     17  82cc					      REPEAT	.CYCLES / 2
     18  82cc		       ea		      nop
     17  82cc					      REPEND
     18  82cd		       ea		      nop
     19  82ce					      REPEND
  25295  82ce		       4c 69 f2 	      jmp	BackFromSwitchDrawP0KV	;+3	 2
  25296  82d1
  25297  82d1							;-------------------------------------------------------------------------
  25298  82d1
  25299  82d1				   DoneWithKernel
  25300  82d1
  25301  82d1				   BottomOfKernelLoop
  25302  82d1
  25303  82d1		       85 02		      sta	WSYNC
  25304  82d3		       a9 00		      lda	#$00
  25305  82d5		       85 09		      sta	COLUBK
  25306  82d7		       a6 f6		      ldx	stack1
  25307  82d9		       9a		      txs
  25308  82da		       20 1a f1 	      jsr	sixdigscore	; set up score
  25309  82dd
  25310  82dd
  25311  82dd		       85 02		      sta	WSYNC
  25312  82df
  25313  82df
  25314  82df							;-------------------------------------------------------------------------
  25315  82df							;------------------------Overscan Routine---------------------------------
  25316  82df							;-------------------------------------------------------------------------
  25317  82df
  25318  82df				   OverscanRoutine
  25319  82df
  25320  82df
  25321  82df
  25322  82df				   skipscore
  25323  82df		       a9 02		      lda	#2
  25324  82e1		       85 02		      sta	WSYNC
  25325  82e3		       85 01		      sta	VBLANK	;turn on VBLANK
  25326  82e5
  25327  82e5
  25328  82e5
  25329  82e5
  25330  82e5
  25331  82e5							;-------------------------------------------------------------------------
  25332  82e5							;----------------------------End Main Routines----------------------------
  25333  82e5							;-------------------------------------------------------------------------
  25334  82e5
  25335  82e5
  25336  82e5							;*************************************************************************
  25337  82e5
  25338  82e5							;-------------------------------------------------------------------------
  25339  82e5							;----------------------Begin Subroutines----------------------------------
  25340  82e5							;-------------------------------------------------------------------------
  25341  82e5
  25342  82e5
  25343  82e5
  25344  82e5
  25345  82e5				   KernelCleanupSubroutine
  25346  82e5
  25347  82e5		       a2 04		      ldx	#4
  25348  82e7				   AdjustYValuesDownLoop
  25349  82e7		       b5 8e		      lda	NewSpriteY,X
  25350  82e9		       38		      sec
  25351  82ea		       e9 02		      sbc	#2
  25352  82ec		       95 8e		      sta	NewSpriteY,X
  25353  82ee		       ca		      dex
  25354  82ef		       10 f6		      bpl	AdjustYValuesDownLoop
  25355  82f1
  25356  82f1
      0  82f1					      RETURN
      1  82f1				  -	      ifnconst	bankswitch
      2  82f1				  -	      rts
      3  82f1					      else
      4  82f1		       4c dd ff 	      jmp	BS_return
      5  82f4					      endif
  25358  82f4							;rts
  25359  82f4
  25360  82f4				   SetupP1Subroutine
  25361  82f4							; flickersort algorithm
  25362  82f4							; count 4-0
  25363  82f4							; table2=table1 (?)
  25364  82f4							; detect overlap of sprites in table 2
  25365  82f4							; if overlap, do regular sort in table2, then place one sprite at top of table 1, decrement # displayed
  25366  82f4							; if no overlap, do regular sort in table 2 and table 1
  25367  82f4				   fsstart
  25368  82f4		       a2 ff		      ldx	#255
  25369  82f6				   copytable
  25370  82f6		       e8		      inx
  25371  82f7		       b5 f1		      lda	spritesort,x
  25372  82f9		       95 9d		      sta	SpriteGfxIndex,x
  25373  82fb		       e0 04		      cpx	#4
  25374  82fd		       d0 f7		      bne	copytable
  25375  82ff
  25376  82ff		       86 cd		      stx	temp3	; highest displayed sprite
  25377  8301		       ca		      dex
  25378  8302		       86 cc		      stx	temp2
  25379  8304				   sortloop
  25380  8304		       a6 cc		      ldx	temp2
  25381  8306		       b5 f1		      lda	spritesort,x
  25382  8308		       aa		      tax
  25383  8309		       b5 8e		      lda	NewSpriteY,x
  25384  830b		       85 cb		      sta	temp1
  25385  830d
  25386  830d		       a6 cc		      ldx	temp2
  25387  830f		       b5 f2		      lda	spritesort+1,x
  25388  8311		       aa		      tax
  25389  8312		       b5 8e		      lda	NewSpriteY,x
  25390  8314		       38		      sec
  25391  8315		       18		      clc
  25392  8316		       e5 cb		      sbc	temp1
  25393  8318		       90 0e		      bcc	largerXislower
  25394  831a
  25395  831a							; larger x is higher (A>=temp1)
  25396  831a		       d5 b1		      cmp	spriteheight,x
  25397  831c		       b0 2f		      bcs	countdown
  25398  831e							; overlap with x+1>x
  25399  831e							; 
  25400  831e							; stick x at end of gfxtable, dec counter
  25401  831e				   overlapping
  25402  831e		       c6 cd		      dec	temp3
  25403  8320		       a6 cc		      ldx	temp2
  25404  8322							; inx
  25405  8322		       20 61 f3 	      jsr	shiftnumbers
  25406  8325		       4c 43 f3 	      jmp	skipswapGfxtable
  25407  8328
  25408  8328				   largerXislower		; (temp1>A)
  25409  8328		       a8		      tay
  25410  8329		       a6 cc		      ldx	temp2
  25411  832b		       b5 f1		      lda	spritesort,x
  25412  832d		       aa		      tax
  25413  832e		       98		      tya
  25414  832f		       49 ff		      eor	#$FF
  25415  8331		       e9 01		      sbc	#1
  25416  8333		       90 e9		      bcc	overlapping
  25417  8335		       d5 b1		      cmp	spriteheight,x
  25418  8337		       b0 0a		      bcs	notoverlapping
  25419  8339
  25420  8339		       c6 cd		      dec	temp3
  25421  833b		       a6 cc		      ldx	temp2
  25422  833d							; inx
  25423  833d		       20 61 f3 	      jsr	shiftnumbers
  25424  8340		       4c 43 f3 	      jmp	skipswapGfxtable
  25425  8343				   notoverlapping
  25426  8343							; ldx temp2 ; swap display table
  25427  8343							; ldy SpriteGfxIndex+1,x
  25428  8343							; lda SpriteGfxIndex,x
  25429  8343							; sty SpriteGfxIndex,x
  25430  8343							; sta SpriteGfxIndex+1,x 
  25431  8343
  25432  8343				   skipswapGfxtable
  25433  8343		       a6 cc		      ldx	temp2	; swap sort table
  25434  8345		       b4 f2		      ldy	spritesort+1,x
  25435  8347		       b5 f1		      lda	spritesort,x
  25436  8349		       94 f1		      sty	spritesort,x
  25437  834b		       95 f2		      sta	spritesort+1,x
  25438  834d
  25439  834d				   countdown
  25440  834d		       c6 cc		      dec	temp2
  25441  834f		       10 b3		      bpl	sortloop
  25442  8351
  25443  8351				   checktoohigh
  25444  8351		       a6 cd		      ldx	temp3
  25445  8353		       b5 9d		      lda	SpriteGfxIndex,x
  25446  8355		       aa		      tax
  25447  8356		       b5 8e		      lda	NewSpriteY,x
  25448  8358				  -	      ifconst	screenheight
  25449  8358				  -	      cmp	#screenheight-3
  25450  8358					      else
  25451  8358		       c9 55		      cmp	#$55
  25452  835a					      endif
  25453  835a		       90 04		      bcc	nonetoohigh
  25454  835c		       c6 cd		      dec	temp3
  25455  835e		       d0 f1		      bne	checktoohigh
  25456  8360
  25457  8360				   nonetoohigh
  25458  8360		       60		      rts
  25459  8361
  25460  8361
  25461  8361				   shiftnumbers
  25462  8361							; stick current x at end, shift others down
  25463  8361							; if x=4: don't do anything
  25464  8361							; if x=3: swap 3 and 4
  25465  8361							; if x=2: 2=3, 3=4, 4=2
  25466  8361							; if x=1: 1=2, 2=3, 3=4, 4=1
  25467  8361							; if x=0: 0=1, 1=2, 2=3, 3=4, 4=0
  25468  8361							; ldy SpriteGfxIndex,x
  25469  8361				   swaploop
  25470  8361		       e0 04		      cpx	#4
  25471  8363		       f0 08		      beq	shiftdone
  25472  8365		       b5 9e		      lda	SpriteGfxIndex+1,x
  25473  8367		       95 9d		      sta	SpriteGfxIndex,x
  25474  8369		       e8		      inx
  25475  836a		       4c 61 f3 	      jmp	swaploop
  25476  836d				   shiftdone
  25477  836d							; sty SpriteGfxIndex,x
  25478  836d		       60		      rts
  25479  836e
  25480  836e				  -	      ifconst	debugscore
  25481  836e				  -debugcycles
  25482  836e				  -	      ldx	#14
  25483  836e				  -	      lda	INTIM	; display # cycles left in the score
  25484  836e				  -
  25485  836e				  -	      ifconst	mincycles
  25486  836e				  -	      lda	mincycles
  25487  836e				  -	      cmp	INTIM
  25488  836e				  -	      lda	mincycles
  25489  836e				  -	      bcc	nochange
  25490  836e				  -	      lda	INTIM
  25491  836e				  -	      sta	mincycles
  25492  836e				  -nochange
  25493  836e				  -	      endif
  25494  836e				  -
  25495  836e				  -			;   cmp #$2B
  25496  836e				  -			;   bcs no_cycles_left
  25497  836e				  -	      bmi	cycles_left
  25498  836e				  -	      ldx	#64
  25499  836e				  -	      eor	#$ff	;make negative
  25500  836e				  -cycles_left
  25501  836e				  -	      stx	scorecolor
  25502  836e				  -	      and	#$7f	; clear sign bit
  25503  836e				  -	      tax
  25504  836e				  -	      lda	scorebcd,x
  25505  836e				  -	      sta	score+2
  25506  836e				  -	      lda	scorebcd1,x
  25507  836e				  -	      sta	score+1
  25508  836e				  -	      rts
  25509  836e				  -scorebcd
  25510  836e				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
  25511  836e				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
  25512  836e				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
  25513  836e				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
  25514  836e				  -scorebcd1
  25515  836e				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
  25516  836e				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
  25517  836e				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
  25518  836e				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
  25519  836e					      endif
  25520  836e				   start
  25521  836e		       78		      sei
  25522  836f		       d8		      cld
  25523  8370		       a0 00		      ldy	#0
  25524  8372		       a5 d0		      lda	$D0
  25525  8374		       c9 2c		      cmp	#$2C	;check RAM location #1
  25526  8376		       d0 07		      bne	MachineIs2600
  25527  8378		       a5 d1		      lda	$D1
  25528  837a		       c9 a9		      cmp	#$A9	;check RAM location #2
  25529  837c		       d0 01		      bne	MachineIs2600
  25530  837e		       88		      dey
  25531  837f				   MachineIs2600
  25532  837f		       a2 00		      ldx	#0
  25533  8381		       8a		      txa
  25534  8382				   clearmem
  25535  8382		       e8		      inx
  25536  8383		       9a		      txs
  25537  8384		       48		      pha
  25538  8385		       d0 fb		      bne	clearmem
  25539  8387		       84 cb		      sty	temp1
  25540  8389				  -	      ifnconst	multisprite
  25541  8389				  -	      ifconst	pfrowheight
  25542  8389				  -	      lda	#pfrowheight
  25543  8389				  -	      else
  25544  8389				  -	      ifconst	pfres
  25545  8389				  -	      lda	#(96/pfres)
  25546  8389				  -	      else
  25547  8389				  -	      lda	#8
  25548  8389				  -	      endif
  25549  8389				  -	      endif
  25550  8389				  -	      sta	playfieldpos
  25551  8389					      endif
  25552  8389		       a2 05		      ldx	#5
  25553  838b				   initscore
  25554  838b		       a9 74		      lda	#<scoretable
  25555  838d		       95 c5		      sta	scorepointers,x
  25556  838f		       ca		      dex
  25557  8390		       10 f9		      bpl	initscore
  25558  8392		       a9 01		      lda	#1
  25559  8394		       85 0a		      sta	CTRLPF
  25560  8396		       0d 84 02 	      ora	INTIM
  25561  8399		       85 d6		      sta	rand
  25562  839b
  25563  839b					      ifconst	multisprite
  25564  839b		       20 1f f0 	      jsr	multisprite_setup
  25565  839e					      endif
  25566  839e
  25567  839e				  -	      ifnconst	bankswitch
  25568  839e				  -	      jmp	game
  25569  839e					      else
  25570  839e		       a9 0f		      lda	#>(game-1)
  25571  83a0		       48		      pha
  25572  83a1		       a9 ff		      lda	#<(game-1)
  25573  83a3		       48		      pha
  25574  83a4		       48		      pha
  25575  83a5		       48		      pha
  25576  83a6		       a2 01		      ldx	#1
  25577  83a8		       4c eb ff 	      jmp	BS_jsr
  25578  83ab					      endif
  25579  83ab							;standard routines needed for pretty much all games
  25580  83ab							; just the random number generator is left - maybe we should remove this asm file altogether?
  25581  83ab							; repositioning code and score pointer setup moved to overscan
  25582  83ab							; read switches, joysticks now compiler generated (more efficient)
  25583  83ab
  25584  83ab				   randomize
  25585  83ab		       a5 d6		      lda	rand
  25586  83ad		       4a		      lsr
  25587  83ae				  -	      ifconst	rand16
  25588  83ae				  -	      rol	rand16
  25589  83ae					      endif
  25590  83ae		       90 02		      bcc	noeor
  25591  83b0		       49 b4		      eor	#$B4
  25592  83b2				   noeor
  25593  83b2		       85 d6		      sta	rand
  25594  83b4				  -	      ifconst	rand16
  25595  83b4				  -	      eor	rand16
  25596  83b4					      endif
      0  83b4					      RETURN
      1  83b4				  -	      ifnconst	bankswitch
      2  83b4				  -	      rts
      3  83b4					      else
      4  83b4		       4c dd ff 	      jmp	BS_return
      5  83b7					      endif
  25598  83b7							;bB.asm
  25599  83b7							; bB.asm file is split here
  25600  83b7				   .L0881		;  inline playerscores_multi4Reaper.asm
  25601  83b7
------- FILE playerscores_multi4Reaper.asm LEVEL 2 PASS 3
      0  83b7					      include	playerscores_multi4Reaper.asm
      1  83b7							;PlayerScores MiniKernal
      2  83b7							;9 Sept 2007 - Curtis F Kaylor
      3  83b7							;displays two digit score for each of two players
      4  83b7							;
      5  83b7							;Copyright 2007 Curtis F Kaylor
      6  83b7							;Permission is hereby granted to distribute this code with the bAtari Basic
      7  83b7							;compiler, under the terms of the bAtari Basic license.
      8  83b7
      9  83b7				  -	      ifnconst	playerscores
     10  83b7				  -playerscores =	2	;default is two
     11  83b7					      endif
     12  83b7
     13  83b7		       00 c1	   player0score =	lifepointer	; BCD
     14  83b7		       00 c2	   player1score =	lives	; BCD
     15  83b7		       00 c0	   player0scorecolor =	lifecolor
     16  83b7		       00 bf	   player1scorecolor =	statusbarlength
     17  83b7
     18  83b7					      ifconst	noscore
     19  83b7		       00 d2	   player2score =	score	; BCD
     20  83b7		       00 d3	   player3score =	score+1	; BCD
     21  83b7		       00 d4	   player2scorecolor =	score+2
     22  83b7		       00 c9	   player3scorecolor =	$c9
     23  83b7					      endif
     24  83b7
     25  83b7							;assign alternate names for easier coding
     26  83b7		       00 cb	   temp0digit1 =	temp1
     27  83b7		       00 cd	   temp0digit2 =	temp3
     28  83b7		       00 9e	   temp1digit1 =	$9e
     29  83b7		       00 a0	   temp1digit2 =	$a0
     30  83b7				  -	      if	playerscores = 2	;if using only one set of scores
     31  83b7				  -temp0color =	player0scorecolor	;I can reference the color 
     32  83b7				  -temp1color =	player1scorecolor	;variables directly   
     33  83b7					      else		;otherwise
     34  83b7				  -	      ifnconst	temp0color
     35  83b7				  -temp0color =	ballx	;I need to store the intermediate values
     36  83b7					      endif
     37  83b7		       00 8c	   temp1color =	bally	;using aux1 and aux2, making this
     38  83b7							;incompatible with pfheights and pfcolors
     39  83b7							;kernel options
     40  83b7					      endif
     41  83b7
     42  83b7							;Usage: builddigits score digit1pointer digit2pointer	
     43  83b7							;Builds digit pointers from BCD score value
     44  83b7					      MAC	builddigits
     45  83b7							;firsy digit
     46  83b7					      lda	{1}	;3 (3) get score
     47  83b7					      and	#$F0	;2 (5) strip off low digit
     48  83b7					      lsr		;2 (7) divide by two = digit * 8
     49  83b7					      adc	<#scoretable	;2 (9) add to base address 
     50  83b7					      sta	{2}	;3 (12) store address low byte
     51  83b7							;second digit
     52  83b7					      lda	{0}	;3 (15) get score again
     53  83b7					      and	#$0F	;2 (17) strip off high digit
     54  83b7					      asl		;2 (19) multiply by eight
     55  83b7					      asl		;2 (21)
     56  83b7					      asl		;2 (23)
     57  83b7					      adc	<#scoretable	;2 (25) add to base address  
     58  83b7					      sta	{3}	;3 (28) store address low byte
     59  83b7					      ENDM
     60  83b7
     61  83b7				   minikernel		;this is where the kernel JSRs
     62  83b7
     63  83b7							;only need to do this once - first lines
     64  83b7		       a2 ff		      ldx	#>scoretable	;2 (2) score graphics high byte
     65  83b9		       86 cc		      stx	temp0digit1+1	;3 (5)
     66  83bb		       86 ce		      stx	temp0digit2+1	;3 (8)
     67  83bd		       86 9f		      stx	temp1digit1+1	;3 (11)
     68  83bf		       86 a1		      stx	temp1digit2+1	;3 (14)
      0  83c1					      sleep	8
      1  83c1				   .CYCLES    SET	8
      2  83c1
      3  83c1				  -	      IF	.CYCLES < 2
      4  83c1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  83c1				  -	      ERR
      6  83c1					      ENDIF
      7  83c1
      8  83c1				  -	      IF	.CYCLES & 1
      9  83c1				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  83c1				  -	      nop	0
     11  83c1				  -	      ELSE
     12  83c1				  -	      bit	VSYNC
     13  83c1				  -	      ENDIF
     14  83c1				  -.CYCLES    SET	.CYCLES - 3
     15  83c1					      ENDIF
     16  83c1
     17  83c1					      REPEAT	.CYCLES / 2
     18  83c1		       ea		      nop
     17  83c1					      REPEND
     18  83c2		       ea		      nop
     17  83c2					      REPEND
     18  83c3		       ea		      nop
     17  83c3					      REPEND
     18  83c4		       ea		      nop
     19  83c5					      REPEND
     70  83c5
     71  83c5		       a5 c0		      lda	player0scorecolor	;3 (17) if playerscores = 2 this just loads the
     72  83c7		       85 82		      sta	temp0color	;3 (20) colors back into the original locations
     73  83c9		       a5 bf		      lda	player1scorecolor	;3 (23) otherwise it loads them into temporary
     74  83cb		       85 8c		      sta	temp1color	;3 (26) variables
     75  83cd
     76  83cd		       18		      clc		;2  for the ADCs coming up
     77  83ce
     78  83ce		       85 02		      sta	WSYNC	;second line 
      0  83d0					      builddigits	player0score, temp0digit1, temp0digit2	;28 (30)
      1  83d0
      2  83d0		       a5 c1		      lda	player0score
      3  83d2		       29 f0		      and	#$F0
      4  83d4		       4a		      lsr
      5  83d5		       69 74		      adc	<#scoretable
      6  83d7		       85 cb		      sta	temp0digit1
      7  83d9
      8  83d9		       a5 c1		      lda	player0score, temp0digit1, temp0digit2
      9  83db		       29 0f		      and	#$0F
     10  83dd		       0a		      asl
     11  83de		       0a		      asl
     12  83df		       0a		      asl
     13  83e0		       69 74		      adc	<#scoretable
     14  83e2		       85 cd		      sta	temp0digit2
      0  83e4					      builddigits	player1score, temp1digit1, temp1digit2	;28 (58)
      1  83e4
      2  83e4		       a5 c2		      lda	player1score
      3  83e6		       29 f0		      and	#$F0
      4  83e8		       4a		      lsr
      5  83e9		       69 74		      adc	<#scoretable
      6  83eb		       85 9e		      sta	temp1digit1
      7  83ed
      8  83ed		       a5 c2		      lda	player1score, temp1digit1, temp1digit2
      9  83ef		       29 0f		      and	#$0F
     10  83f1		       0a		      asl
     11  83f2		       0a		      asl
     12  83f3		       0a		      asl
     13  83f4		       69 74		      adc	<#scoretable
     14  83f6		       85 a0		      sta	temp1digit2
     81  83f8		       20 3a f4 	      jsr	minikerneldisplay	;6 (64) 9 more lines! 
     82  83fb
     83  83fb					      if	playerscores=4
     84  83fb		       a5 d4		      lda	player2scorecolor	;3 (+3) load colors into
     85  83fd		       85 82		      sta	temp0color	;3 (+6) temporary variables
     86  83ff		       a5 c9		      lda	player3scorecolor	;3 (+9) used by the
     87  8401		       85 8c		      sta	temp1color	;3 (+12) display routine
     88  8403		       18		      clc		;2 (+14) for the ADCs coming up
     89  8404		       85 02		      sta	WSYNC	;3 (+17) looks like there were enough cycles left
      0  8406					      builddigits	player2score, temp0digit1, temp0digit2	;28 (30)
      1  8406
      2  8406		       a5 d2		      lda	player2score
      3  8408		       29 f0		      and	#$F0
      4  840a		       4a		      lsr
      5  840b		       69 74		      adc	<#scoretable
      6  840d		       85 cb		      sta	temp0digit1
      7  840f
      8  840f		       a5 d2		      lda	player2score, temp0digit1, temp0digit2
      9  8411		       29 0f		      and	#$0F
     10  8413		       0a		      asl
     11  8414		       0a		      asl
     12  8415		       0a		      asl
     13  8416		       69 74		      adc	<#scoretable
     14  8418		       85 cd		      sta	temp0digit2
      0  841a					      builddigits	player3score, temp1digit1, temp1digit2	;28 (58)
      1  841a
      2  841a		       a5 d3		      lda	player3score
      3  841c		       29 f0		      and	#$F0
      4  841e		       4a		      lsr
      5  841f		       69 74		      adc	<#scoretable
      6  8421		       85 9e		      sta	temp1digit1
      7  8423
      8  8423		       a5 d3		      lda	player3score, temp1digit1, temp1digit2
      9  8425		       29 0f		      and	#$0F
     10  8427		       0a		      asl
     11  8428		       0a		      asl
     12  8429		       0a		      asl
     13  842a		       69 74		      adc	<#scoretable
     14  842c		       85 a0		      sta	temp1digit2
     92  842e		       20 3a f4 	      jsr	minikerneldisplay	;6 (64) 9 more lines! 
     93  8431					      endif		;playerscores
     94  8431
     95  8431				   endminikernel
     96  8431		       85 02		      sta	WSYNC	; one more scanline to finish things off
     97  8433							; Y is 0 coming out of minikerneldisplay  
     98  8433		       84 04		      sty	NUSIZ0	;3 (3) Reset Player/Missile 0 size 
     99  8435		       84 05		      sty	NUSIZ1	;3 (6) Reset Player/Missile 1 size
    100  8437
    101  8437		       85 02		      sta	WSYNC	;score routine expects to be at the beginning of a line
    102  8439		       60		      rts		;return to the kernel
    103  843a
    104  843a				   minikerneldisplay
    105  843a
    106  843a							;set up the player positions - uses up one line
    107  843a		       85 02		      sta	WSYNC	;wait till the end of the line (count cycles)
    108  843c		       a9 02		      lda	#$02	;2 (2) two copies medium - normal sized
    109  843e		       85 04		      sta	NUSIZ0	;3 (5)  
    110  8440		       85 05		      sta	NUSIZ1	;3 (8) 
    111  8442
    112  8442		       a5 82		      lda	temp0color	;3 (11) not really necessary  
    113  8444		       85 06		      sta	COLUP0	;3 (14) just using up cycles
    114  8446		       85 07		      sta	COLUP1	;3 (20) lines
      0  8448					      sleep	20	;20 (40)
      1  8448				   .CYCLES    SET	20
      2  8448
      3  8448				  -	      IF	.CYCLES < 2
      4  8448				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8448				  -	      ERR
      6  8448					      ENDIF
      7  8448
      8  8448				  -	      IF	.CYCLES & 1
      9  8448				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  8448				  -	      nop	0
     11  8448				  -	      ELSE
     12  8448				  -	      bit	VSYNC
     13  8448				  -	      ENDIF
     14  8448				  -.CYCLES    SET	.CYCLES - 3
     15  8448					      ENDIF
     16  8448
     17  8448					      REPEAT	.CYCLES / 2
     18  8448		       ea		      nop
     17  8448					      REPEND
     18  8449		       ea		      nop
     17  8449					      REPEND
     18  844a		       ea		      nop
     17  844a					      REPEND
     18  844b		       ea		      nop
     17  844b					      REPEND
     18  844c		       ea		      nop
     17  844c					      REPEND
     18  844d		       ea		      nop
     17  844d					      REPEND
     18  844e		       ea		      nop
     17  844e					      REPEND
     18  844f		       ea		      nop
     17  844f					      REPEND
     18  8450		       ea		      nop
     17  8450					      REPEND
     18  8451		       ea		      nop
     19  8452					      REPEND
    116  8452		       85 10		      sta	RESP0	;3 (43) Position Player0 
    117  8454		       85 11		      sta	RESP1	;3 (46) Position Player1
      0  8456					      sleep	4
      1  8456				   .CYCLES    SET	4
      2  8456
      3  8456				  -	      IF	.CYCLES < 2
      4  8456				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8456				  -	      ERR
      6  8456					      ENDIF
      7  8456
      8  8456				  -	      IF	.CYCLES & 1
      9  8456				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  8456				  -	      nop	0
     11  8456				  -	      ELSE
     12  8456				  -	      bit	VSYNC
     13  8456				  -	      ENDIF
     14  8456				  -.CYCLES    SET	.CYCLES - 3
     15  8456					      ENDIF
     16  8456
     17  8456					      REPEAT	.CYCLES / 2
     18  8456		       ea		      nop
     17  8456					      REPEND
     18  8457		       ea		      nop
     19  8458					      REPEND
    119  8458		       a9 e0		      lda	#$E0	;2 (48) Move Two Clocks Right 
    120  845a		       85 20		      sta	HMP0	;3 (51) Set Player 1
    121  845c		       a9 00		      lda	#$00	;2 (53) Turning Off Vertical Delay
    122  845e		       85 21		      sta	HMP1	; 3 (56) No Movement
    123  8460		       85 25		      sta	VDELP0	;3 (59) Displays Player0
    124  8462		       85 26		      sta	VDELP1	;3 (62) and Player1
      0  8464					      sleep	2	;2 (64)
      1  8464				   .CYCLES    SET	2
      2  8464
      3  8464				  -	      IF	.CYCLES < 2
      4  8464				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8464				  -	      ERR
      6  8464					      ENDIF
      7  8464
      8  8464				  -	      IF	.CYCLES & 1
      9  8464				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  8464				  -	      nop	0
     11  8464				  -	      ELSE
     12  8464				  -	      bit	VSYNC
     13  8464				  -	      ENDIF
     14  8464				  -.CYCLES    SET	.CYCLES - 3
     15  8464					      ENDIF
     16  8464
     17  8464					      REPEAT	.CYCLES / 2
     18  8464		       ea		      nop
     19  8465					      REPEND
    126  8465		       a0 07		      ldy	#7	;2 (66) 8 lines in the digits 
    127  8467		       84 d1		      sty	temp7	;3 (69)
    128  8469		       85 2a		      sta	HMOVE	;3 (72) have to do during horizontal blank
    129  846b
    130  846b				   minikernelloop
    131  846b							;this draws two scores - uses up 8 lines
    132  846b		       85 02		      sta	WSYNC	;wait till line starts (count cycles)
    133  846d		       b1 cb		      lda	(temp0digit1),y	;5 (8) get the graphic
    134  846f				  -	      ifconst	onedigitscores
    135  846f				  -	      sleep	3
    136  846f					      else
    137  846f		       85 1b		      sta	GRP0	;3 (11)
    138  8471					      endif
    139  8471		       a6 82		      ldx	temp0color	;3 (3) left player score color
    140  8473		       86 06		      stx	COLUP0	;3 (14) goes in both digits
    141  8475		       b1 cd		      lda	(temp0digit2),y	;5 (19) get the graphic
    142  8477		       85 1c		      sta	GRP1	;3 (22)
    143  8479		       86 07		      stx	COLUP1	;3 (25) 
    144  847b		       b1 a0		      lda	(temp1digit2),y	;5 (30) get graphic
    145  847d		       aa		      tax		;2 (32) store in X
    146  847e		       b1 9e		      lda	(temp1digit1),y	;5 (37) get the graphic
    147  8480		       a4 8c		      ldy	temp1color	;3 (40) right player score color
    148  8482
    149  8482		       84 06		      sty	COLUP0	;3 (45) player 0 color
    150  8484				  -	      ifconst	onedigitscores
    151  8484				  -	      sleep	3
    152  8484					      else
    153  8484		       85 1b		      sta	GRP0	;3 (11)
    154  8486					      endif
    155  8486		       84 07		      sty	COLUP1	;3 (48) player 1 color
    156  8488		       86 1c		      stx	GRP1	;3 (51) player 1 data
    157  848a		       c6 d1		      dec	temp7	;2 (53)
    158  848c		       a4 d1		      ldy	temp7	;3  (56)
    159  848e		       10 db		      bpl	minikernelloop	;2+ (58-59)
    160  8490		       c8		      iny		;2 (60-61) make it 0
    161  8491		       84 1b		      sty	GRP0	;3 (63-64) clear player0
    162  8493		       84 1c		      sty	GRP1	;3 (66-67) clear player1
      0  8495					      sleep	8
      1  8495				   .CYCLES    SET	8
      2  8495
      3  8495				  -	      IF	.CYCLES < 2
      4  8495				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  8495				  -	      ERR
      6  8495					      ENDIF
      7  8495
      8  8495				  -	      IF	.CYCLES & 1
      9  8495				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  8495				  -	      nop	0
     11  8495				  -	      ELSE
     12  8495				  -	      bit	VSYNC
     13  8495				  -	      ENDIF
     14  8495				  -.CYCLES    SET	.CYCLES - 3
     15  8495					      ENDIF
     16  8495
     17  8495					      REPEAT	.CYCLES / 2
     18  8495		       ea		      nop
     17  8495					      REPEND
     18  8496		       ea		      nop
     17  8496					      REPEND
     18  8497		       ea		      nop
     17  8497					      REPEND
     18  8498		       ea		      nop
     19  8499					      REPEND
    164  8499
    165  8499		       60		      rts		;6 (70-71) only 5  or 6 cycles left in the last line
    166  849a
------- FILE E:\BatariBasic\Projects\Reaper\DeathMatch_NTSC_0.40.bas.asm
  25603  849a
  25604  849a				   .L0882		;  asm
  25605  849a
  25606  849a				   Playfield
  25607  849a
  25608  849a
  25609  849a
  25610  849a		       d6 0c 0c 0c*	      .byte.b	$d6, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
  25611  84b1
  25612  84b1				   .L0883		;  vblank
  25613  84b1
  25614  84b1				   vblank_bB_code
  25615  84b1				   .L0884		;  asm
  25616  84b1
  25617  84b1		       a9 00		      lda	#$00
  25618  84b3
  25619  84b3		       85 1f		      sta	$1F
  25620  84b5
  25621  84b5		       85 1e		      sta	$1E
  25622  84b7
  25623  84b7		       85 1e		      sta	ENAM1
  25624  84b9
  25625  84b9		       85 1f		      sta	ENABL
  25626  84bb
  25627  84bb
  25628  84bb
  25629  84bb
  25630  84bb
  25631  84bb				   .L0885		;  if w{0} then goto BullShit bank6 else return
  25632  84bb
  25633  84bb		       a5 ed		      LDA	w
  25634  84bd		       4a		      LSR
  25635  84be		       90 15		      BCC	.skipL0885
  25636  84c0				   .condpart309
  25637  84c0		       85 d1		      sta	temp7
  25638  84c2		       a9 af		      lda	#>(.BullShit-1)
  25639  84c4		       48		      pha
  25640  84c5		       a9 ff		      lda	#<(.BullShit-1)
  25641  84c7		       48		      pha
  25642  84c8		       a5 d1		      lda	temp7
  25643  84ca		       48		      pha
  25644  84cb		       8a		      txa
  25645  84cc		       48		      pha
  25646  84cd		       a2 06		      ldx	#6
  25647  84cf		       4c eb ff 	      jmp	BS_jsr
  25648  84d2		       4c e2 f4 	      jmp	.skipelse26
  25649  84d5				   .skipL0885
  25650  84d5		       ba		      tsx
  25651  84d6		       b5 02		      lda	2,x	; check return address
  25652  84d8		       49 f4		      eor	#(>*)	; vs. current PCH
  25653  84da		       29 e0		      and	#$E0	;  mask off all but top 3 bits
  25654  84dc		       f0 03		      beq	*+5	; if equal, do normal return
  25655  84de		       4c dd ff 	      JMP	BS_return
  25656  84e1		       60		      RTS
  25657  84e2				   .skipelse26
  25658  84e2				   .
  25659  84e2							; 
  25660  84e2
  25661  84e2				   .
  25662  84e2							; 
  25663  84e2
  25664  84e2				  -	      if	(<*) > (<(*+7))
  25665  84e2				  -	      repeat	($100-<*)
  25666  84e2				  -	      .byte	0
  25667  84e2				  -	      repend
  25668  84e2					      endif
  25669  84e2				  -	      if	(<*) < 90
  25670  84e2				  -	      repeat	(90-<*)
  25671  84e2				  -	      .byte	0
  25672  84e2				  -	      repend
  25673  84e2					      endif
  25674  84e2				   playerL0111_1
  25675  84e2		       fc		      .byte.b	%11111100
  25676  84e3		       9c		      .byte.b	%10011100
  25677  84e4		       fc		      .byte.b	%11111100
  25678  84e5		       78		      .byte.b	%01111000
  25679  84e6		       32		      .byte.b	%00110010
  25680  84e7		       32		      .byte.b	%00110010
  25681  84e8		       36		      .byte.b	%00110110
  25682  84e9		       32		      .byte.b	%00110010
  25683  84ea				  -	      if	(<*) > (<(*+7))
  25684  84ea				  -	      repeat	($100-<*)
  25685  84ea				  -	      .byte	0
  25686  84ea				  -	      repend
  25687  84ea					      endif
  25688  84ea				  -	      if	(<*) < 90
  25689  84ea				  -	      repeat	(90-<*)
  25690  84ea				  -	      .byte	0
  25691  84ea				  -	      repend
  25692  84ea					      endif
  25693  84ea				   player38then_2
  25694  84ea		       fc		      .byte.b	%11111100
  25695  84eb		       9c		      .byte.b	%10011100
  25696  84ec		       fc		      .byte.b	%11111100
  25697  84ed		       7c		      .byte.b	%01111100
  25698  84ee		       37		      .byte.b	%00110111
  25699  84ef		       32		      .byte.b	%00110010
  25700  84f0		       35		      .byte.b	%00110101
  25701  84f1		       33		      .byte.b	%00110011
  25702  84f2				  -	      if	(<*) > (<(*+7))
  25703  84f2				  -	      repeat	($100-<*)
  25704  84f2				  -	      .byte	0
  25705  84f2				  -	      repend
  25706  84f2					      endif
  25707  84f2				  -	      if	(<*) < 90
  25708  84f2				  -	      repeat	(90-<*)
  25709  84f2				  -	      .byte	0
  25710  84f2				  -	      repend
  25711  84f2					      endif
  25712  84f2				   player39then_2
  25713  84f2		       ff		      .byte.b	%11111111
  25714  84f3		       8b		      .byte.b	%10001011
  25715  84f4		       ff		      .byte.b	%11111111
  25716  84f5		       7e		      .byte.b	%01111110
  25717  84f6		       42		      .byte.b	%01000010
  25718  84f7		       46		      .byte.b	%01000110
  25719  84f8		       4a		      .byte.b	%01001010
  25720  84f9		       7e		      .byte.b	%01111110
  25721  84fa					      if	(<*) > (<(*+7))
  25722  84fa					      repeat	($100-<*)
  25723  84fa		       00		      .byte.b	0
  25722  84fa					      repend
  25723  84fb		       00		      .byte.b	0
  25722  84fb					      repend
  25723  84fc		       00		      .byte.b	0
  25722  84fc					      repend
  25723  84fd		       00		      .byte.b	0
  25722  84fd					      repend
  25723  84fe		       00		      .byte.b	0
  25722  84fe					      repend
  25723  84ff		       00		      .byte.b	0
  25724  8500					      repend
  25725  8500					      endif
  25726  8500					      if	(<*) < 90
  25727  8500					      repeat	(90-<*)
  25728  8500		       00		      .byte.b	0
  25727  8500					      repend
  25728  8501		       00		      .byte.b	0
  25727  8501					      repend
  25728  8502		       00		      .byte.b	0
  25727  8502					      repend
  25728  8503		       00		      .byte.b	0
  25727  8503					      repend
  25728  8504		       00		      .byte.b	0
  25727  8504					      repend
  25728  8505		       00		      .byte.b	0
  25727  8505					      repend
  25728  8506		       00		      .byte.b	0
  25727  8506					      repend
  25728  8507		       00		      .byte.b	0
  25727  8507					      repend
  25728  8508		       00		      .byte.b	0
  25727  8508					      repend
  25728  8509		       00		      .byte.b	0
  25727  8509					      repend
  25728  850a		       00		      .byte.b	0
  25727  850a					      repend
  25728  850b		       00		      .byte.b	0
  25727  850b					      repend
  25728  850c		       00		      .byte.b	0
  25727  850c					      repend
  25728  850d		       00		      .byte.b	0
  25727  850d					      repend
  25728  850e		       00		      .byte.b	0
  25727  850e					      repend
  25728  850f		       00		      .byte.b	0
  25727  850f					      repend
  25728  8510		       00		      .byte.b	0
  25727  8510					      repend
  25728  8511		       00		      .byte.b	0
  25727  8511					      repend
  25728  8512		       00		      .byte.b	0
  25727  8512					      repend
  25728  8513		       00		      .byte.b	0
  25727  8513					      repend
  25728  8514		       00		      .byte.b	0
  25727  8514					      repend
  25728  8515		       00		      .byte.b	0
  25727  8515					      repend
  25728  8516		       00		      .byte.b	0
  25727  8516					      repend
  25728  8517		       00		      .byte.b	0
  25727  8517					      repend
  25728  8518		       00		      .byte.b	0
  25727  8518					      repend
  25728  8519		       00		      .byte.b	0
  25727  8519					      repend
  25728  851a		       00		      .byte.b	0
  25727  851a					      repend
  25728  851b		       00		      .byte.b	0
  25727  851b					      repend
  25728  851c		       00		      .byte.b	0
  25727  851c					      repend
  25728  851d		       00		      .byte.b	0
  25727  851d					      repend
  25728  851e		       00		      .byte.b	0
  25727  851e					      repend
  25728  851f		       00		      .byte.b	0
  25727  851f					      repend
  25728  8520		       00		      .byte.b	0
  25727  8520					      repend
  25728  8521		       00		      .byte.b	0
  25727  8521					      repend
  25728  8522		       00		      .byte.b	0
  25727  8522					      repend
  25728  8523		       00		      .byte.b	0
  25727  8523					      repend
  25728  8524		       00		      .byte.b	0
  25727  8524					      repend
  25728  8525		       00		      .byte.b	0
  25727  8525					      repend
  25728  8526		       00		      .byte.b	0
  25727  8526					      repend
  25728  8527		       00		      .byte.b	0
  25727  8527					      repend
  25728  8528		       00		      .byte.b	0
  25727  8528					      repend
  25728  8529		       00		      .byte.b	0
  25727  8529					      repend
  25728  852a		       00		      .byte.b	0
  25727  852a					      repend
  25728  852b		       00		      .byte.b	0
  25727  852b					      repend
  25728  852c		       00		      .byte.b	0
  25727  852c					      repend
  25728  852d		       00		      .byte.b	0
  25727  852d					      repend
  25728  852e		       00		      .byte.b	0
  25727  852e					      repend
  25728  852f		       00		      .byte.b	0
  25727  852f					      repend
  25728  8530		       00		      .byte.b	0
  25727  8530					      repend
  25728  8531		       00		      .byte.b	0
  25727  8531					      repend
  25728  8532		       00		      .byte.b	0
  25727  8532					      repend
  25728  8533		       00		      .byte.b	0
  25727  8533					      repend
  25728  8534		       00		      .byte.b	0
  25727  8534					      repend
  25728  8535		       00		      .byte.b	0
  25727  8535					      repend
  25728  8536		       00		      .byte.b	0
  25727  8536					      repend
  25728  8537		       00		      .byte.b	0
  25727  8537					      repend
  25728  8538		       00		      .byte.b	0
  25727  8538					      repend
  25728  8539		       00		      .byte.b	0
  25727  8539					      repend
  25728  853a		       00		      .byte.b	0
  25727  853a					      repend
  25728  853b		       00		      .byte.b	0
  25727  853b					      repend
  25728  853c		       00		      .byte.b	0
  25727  853c					      repend
  25728  853d		       00		      .byte.b	0
  25727  853d					      repend
  25728  853e		       00		      .byte.b	0
  25727  853e					      repend
  25728  853f		       00		      .byte.b	0
  25727  853f					      repend
  25728  8540		       00		      .byte.b	0
  25727  8540					      repend
  25728  8541		       00		      .byte.b	0
  25727  8541					      repend
  25728  8542		       00		      .byte.b	0
  25727  8542					      repend
  25728  8543		       00		      .byte.b	0
  25727  8543					      repend
  25728  8544		       00		      .byte.b	0
  25727  8544					      repend
  25728  8545		       00		      .byte.b	0
  25727  8545					      repend
  25728  8546		       00		      .byte.b	0
  25727  8546					      repend
  25728  8547		       00		      .byte.b	0
  25727  8547					      repend
  25728  8548		       00		      .byte.b	0
  25727  8548					      repend
  25728  8549		       00		      .byte.b	0
  25727  8549					      repend
  25728  854a		       00		      .byte.b	0
  25727  854a					      repend
  25728  854b		       00		      .byte.b	0
  25727  854b					      repend
  25728  854c		       00		      .byte.b	0
  25727  854c					      repend
  25728  854d		       00		      .byte.b	0
  25727  854d					      repend
  25728  854e		       00		      .byte.b	0
  25727  854e					      repend
  25728  854f		       00		      .byte.b	0
  25727  854f					      repend
  25728  8550		       00		      .byte.b	0
  25727  8550					      repend
  25728  8551		       00		      .byte.b	0
  25727  8551					      repend
  25728  8552		       00		      .byte.b	0
  25727  8552					      repend
  25728  8553		       00		      .byte.b	0
  25727  8553					      repend
  25728  8554		       00		      .byte.b	0
  25727  8554					      repend
  25728  8555		       00		      .byte.b	0
  25727  8555					      repend
  25728  8556		       00		      .byte.b	0
  25727  8556					      repend
  25728  8557		       00		      .byte.b	0
  25727  8557					      repend
  25728  8558		       00		      .byte.b	0
  25727  8558					      repend
  25728  8559		       00		      .byte.b	0
  25729  855a					      repend
  25730  855a					      endif
  25731  855a				   playerL0122_3
  25732  855a		       00		      .byte.b	%00000000
  25733  855b		       18		      .byte.b	%00011000
  25734  855c		       3c		      .byte.b	%00111100
  25735  855d		       76		      .byte.b	%01110110
  25736  855e		       eb		      .byte.b	%11101011
  25737  855f		       5c		      .byte.b	%01011100
  25738  8560		       bf		      .byte.b	%10111111
  25739  8561		       66		      .byte.b	%01100110
  25740  8562				  -	      if	(<*) > (<(*+7))
  25741  8562				  -	      repeat	($100-<*)
  25742  8562				  -	      .byte	0
  25743  8562				  -	      repend
  25744  8562					      endif
  25745  8562				  -	      if	(<*) < 90
  25746  8562				  -	      repeat	(90-<*)
  25747  8562				  -	      .byte	0
  25748  8562				  -	      repend
  25749  8562					      endif
  25750  8562				   playerL0123_4
  25751  8562		       3c		      .byte.b	%00111100
  25752  8563		       52		      .byte.b	%01010010
  25753  8564		       7e		      .byte.b	%01111110
  25754  8565		       e7		      .byte.b	%11100111
  25755  8566		       99		      .byte.b	%10011001
  25756  8567		       db		      .byte.b	%11011011
  25757  8568		       ff		      .byte.b	%11111111
  25758  8569		       7e		      .byte.b	%01111110
  25759  856a				  -	      if	(<*) > (<(*+7))
  25760  856a				  -	      repeat	($100-<*)
  25761  856a				  -	      .byte	0
  25762  856a				  -	      repend
  25763  856a					      endif
  25764  856a				  -	      if	(<*) < 90
  25765  856a				  -	      repeat	(90-<*)
  25766  856a				  -	      .byte	0
  25767  856a				  -	      repend
  25768  856a					      endif
  25769  856a				   player50then_5
  25770  856a		       c3		      .byte.b	%11000011
  25771  856b		       d3		      .byte.b	%11010011
  25772  856c		       24		      .byte.b	%00100100
  25773  856d		       18		      .byte.b	%00011000
  25774  856e		       1c		      .byte.b	%00011100
  25775  856f		       24		      .byte.b	%00100100
  25776  8570		       db		      .byte.b	%11011011
  25777  8571		       c3		      .byte.b	%11000011
  25778  8572				  -	      if	(<*) > (<(*+7))
  25779  8572				  -	      repeat	($100-<*)
  25780  8572				  -	      .byte	0
  25781  8572				  -	      repend
  25782  8572					      endif
  25783  8572				  -	      if	(<*) < 90
  25784  8572				  -	      repeat	(90-<*)
  25785  8572				  -	      .byte	0
  25786  8572				  -	      repend
  25787  8572					      endif
  25788  8572				   player52then_5
  25789  8572		       c3		      .byte.b	%11000011
  25790  8573		       91		      .byte.b	%10010001
  25791  8574		       00		      .byte.b	%00000000
  25792  8575		       18		      .byte.b	%00011000
  25793  8576		       04		      .byte.b	%00000100
  25794  8577		       24		      .byte.b	%00100100
  25795  8578		       99		      .byte.b	%10011001
  25796  8579		       c3		      .byte.b	%11000011
  25797  857a				  -	      if	(<*) > (<(*+7))
  25798  857a				  -	      repeat	($100-<*)
  25799  857a				  -	      .byte	0
  25800  857a				  -	      repend
  25801  857a					      endif
  25802  857a				  -	      if	(<*) < 90
  25803  857a				  -	      repeat	(90-<*)
  25804  857a				  -	      .byte	0
  25805  857a				  -	      repend
  25806  857a					      endif
  25807  857a				   player53then_5
  25808  857a		       06		      .byte.b	%00000110
  25809  857b		       09		      .byte.b	%00001001
  25810  857c		       69		      .byte.b	%01101001
  25811  857d		       99		      .byte.b	%10011001
  25812  857e		       b9		      .byte.b	%10111001
  25813  857f		       86		      .byte.b	%10000110
  25814  8580		       90		      .byte.b	%10010000
  25815  8581		       60		      .byte.b	%01100000
  25816  8582				  -	      if	(<*) > (<(*+11))
  25817  8582				  -	      repeat	($100-<*)
  25818  8582				  -	      .byte	0
  25819  8582				  -	      repend
  25820  8582					      endif
  25821  8582				  -	      if	(<*) < 90
  25822  8582				  -	      repeat	(90-<*)
  25823  8582				  -	      .byte	0
  25824  8582				  -	      repend
  25825  8582					      endif
  25826  8582				   playerL0171_0
  25827  8582		       00		      .byte.b	0
  25828  8583		       5f		      .byte.b	%01011111
  25829  8584		       59		      .byte.b	%01011001
  25830  8585		       6d		      .byte.b	%01101101
  25831  8586		       59		      .byte.b	%01011001
  25832  8587		       6e		      .byte.b	%01101110
  25833  8588		       00		      .byte.b	%00000000
  25834  8589		       6e		      .byte.b	%01101110
  25835  858a		       98		      .byte.b	%10011000
  25836  858b		       bc		      .byte.b	%10111100
  25837  858c		       88		      .byte.b	%10001000
  25838  858d		       7f		      .byte.b	%01111111
  25839  858e				  -	      if	(<*) > (<(*+10))
  25840  858e				  -	      repeat	($100-<*)
  25841  858e				  -	      .byte	0
  25842  858e				  -	      repend
  25843  858e					      endif
  25844  858e				  -	      if	(<*) < 90
  25845  858e				  -	      repeat	(90-<*)
  25846  858e				  -	      .byte	0
  25847  858e				  -	      repend
  25848  858e					      endif
  25849  858e				   playerL0172_1
  25850  858e		       72		      .byte.b	%01110010
  25851  858f		       6a		      .byte.b	%01101010
  25852  8590		       ea		      .byte.b	%11101010
  25853  8591		       6d		      .byte.b	%01101101
  25854  8592		       b5		      .byte.b	%10110101
  25855  8593		       00		      .byte.b	%00000000
  25856  8594		       80		      .byte.b	%10000000
  25857  8595		       80		      .byte.b	%10000000
  25858  8596		       80		      .byte.b	%10000000
  25859  8597		       80		      .byte.b	%10000000
  25860  8598		       c0		      .byte.b	%11000000
  25861  8599				  -	      if	(<*) > (<(*+17))
  25862  8599				  -	      repeat	($100-<*)
  25863  8599				  -	      .byte	0
  25864  8599				  -	      repend
  25865  8599					      endif
  25866  8599				  -	      if	(<*) < 90
  25867  8599				  -	      repeat	(90-<*)
  25868  8599				  -	      .byte	0
  25869  8599				  -	      repend
  25870  8599					      endif
  25871  8599				   playerL0411_5
  25872  8599		       18		      .byte.b	%00011000
  25873  859a		       18		      .byte.b	%00011000
  25874  859b		       3c		      .byte.b	%00111100
  25875  859c		       3c		      .byte.b	%00111100
  25876  859d		       3c		      .byte.b	%00111100
  25877  859e		       3c		      .byte.b	%00111100
  25878  859f		       7e		      .byte.b	%01111110
  25879  85a0		       7e		      .byte.b	%01111110
  25880  85a1		       ff		      .byte.b	%11111111
  25881  85a2		       ff		      .byte.b	%11111111
  25882  85a3		       7e		      .byte.b	%01111110
  25883  85a4		       7e		      .byte.b	%01111110
  25884  85a5		       3c		      .byte.b	%00111100
  25885  85a6		       3c		      .byte.b	%00111100
  25886  85a7		       3c		      .byte.b	%00111100
  25887  85a8		       3c		      .byte.b	%00111100
  25888  85a9		       18		      .byte.b	%00011000
  25889  85aa		       18		      .byte.b	%00011000
  25890  85ab				  -	      if	(<*) > (<(*+2))
  25891  85ab				  -	      repeat	($100-<*)
  25892  85ab				  -	      .byte	0
  25893  85ab				  -	      repend
  25894  85ab					      endif
  25895  85ab				  -	      if	(<*) < 90
  25896  85ab				  -	      repeat	(90-<*)
  25897  85ab				  -	      .byte	0
  25898  85ab				  -	      repend
  25899  85ab					      endif
  25900  85ab				   playerL0453_0
  25901  85ab		       00		      .byte.b	0
  25902  85ac		       00		      .byte.b	%00
  25903  85ad		       00		      .byte.b	%00
  25904  85ae				  -	      if	(<*) > (<(*+11))
  25905  85ae				  -	      repeat	($100-<*)
  25906  85ae				  -	      .byte	0
  25907  85ae				  -	      repend
  25908  85ae					      endif
  25909  85ae				  -	      if	(<*) < 90
  25910  85ae				  -	      repeat	(90-<*)
  25911  85ae				  -	      .byte	0
  25912  85ae				  -	      repend
  25913  85ae					      endif
  25914  85ae				   player188then_5
  25915  85ae		       00		      .byte.b	%00000000
  25916  85af		       00		      .byte.b	%00000000
  25917  85b0		       18		      .byte.b	%00011000
  25918  85b1		       7e		      .byte.b	%01111110
  25919  85b2		       5a		      .byte.b	%01011010
  25920  85b3		       7e		      .byte.b	%01111110
  25921  85b4		       e7		      .byte.b	%11100111
  25922  85b5		       99		      .byte.b	%10011001
  25923  85b6		       bd		      .byte.b	%10111101
  25924  85b7		       ff		      .byte.b	%11111111
  25925  85b8		       7e		      .byte.b	%01111110
  25926  85b9		       18		      .byte.b	%00011000
  25927  85ba				  -	      if	(<*) > (<(*+11))
  25928  85ba				  -	      repeat	($100-<*)
  25929  85ba				  -	      .byte	0
  25930  85ba				  -	      repend
  25931  85ba					      endif
  25932  85ba				  -	      if	(<*) < 90
  25933  85ba				  -	      repeat	(90-<*)
  25934  85ba				  -	      .byte	0
  25935  85ba				  -	      repend
  25936  85ba					      endif
  25937  85ba				   playerL0462_5
  25938  85ba		       00		      .byte.b	%00000000
  25939  85bb		       18		      .byte.b	%00011000
  25940  85bc		       7e		      .byte.b	%01111110
  25941  85bd		       42		      .byte.b	%01000010
  25942  85be		       42		      .byte.b	%01000010
  25943  85bf		       7e		      .byte.b	%01111110
  25944  85c0		       e7		      .byte.b	%11100111
  25945  85c1		       99		      .byte.b	%10011001
  25946  85c2		       bd		      .byte.b	%10111101
  25947  85c3		       ff		      .byte.b	%11111111
  25948  85c4		       7e		      .byte.b	%01111110
  25949  85c5		       18		      .byte.b	%00011000
  25950  85c6				  -	      if	(<*) > (<(*+11))
  25951  85c6				  -	      repeat	($100-<*)
  25952  85c6				  -	      .byte	0
  25953  85c6				  -	      repend
  25954  85c6					      endif
  25955  85c6				  -	      if	(<*) < 90
  25956  85c6				  -	      repeat	(90-<*)
  25957  85c6				  -	      .byte	0
  25958  85c6				  -	      repend
  25959  85c6					      endif
  25960  85c6				   player189then_5
  25961  85c6		       18		      .byte.b	%00011000
  25962  85c7		       7e		      .byte.b	%01111110
  25963  85c8		       42		      .byte.b	%01000010
  25964  85c9		       18		      .byte.b	%00011000
  25965  85ca		       42		      .byte.b	%01000010
  25966  85cb		       7e		      .byte.b	%01111110
  25967  85cc		       e7		      .byte.b	%11100111
  25968  85cd		       99		      .byte.b	%10011001
  25969  85ce		       bd		      .byte.b	%10111101
  25970  85cf		       ff		      .byte.b	%11111111
  25971  85d0		       7e		      .byte.b	%01111110
  25972  85d1		       18		      .byte.b	%00011000
  25973  85d2				  -	      if	(<*) > (<(*+6))
  25974  85d2				  -	      repeat	($100-<*)
  25975  85d2				  -	      .byte	0
  25976  85d2				  -	      repend
  25977  85d2					      endif
  25978  85d2				  -	      if	(<*) < 90
  25979  85d2				  -	      repeat	(90-<*)
  25980  85d2				  -	      .byte	0
  25981  85d2				  -	      repend
  25982  85d2					      endif
  25983  85d2				   playerL0508_3
  25984  85d2		       5d		      .byte.b	%1011101
  25985  85d3		       3e		      .byte.b	%0111110
  25986  85d4		       1c		      .byte.b	%0011100
  25987  85d5		       22		      .byte.b	%0100010
  25988  85d6		       3e		      .byte.b	%0111110
  25989  85d7		       2a		      .byte.b	%0101010
  25990  85d8		       1c		      .byte.b	%0011100
  25991  85d9				  -	      if	(<*) > (<(*+6))
  25992  85d9				  -	      repeat	($100-<*)
  25993  85d9				  -	      .byte	0
  25994  85d9				  -	      repend
  25995  85d9					      endif
  25996  85d9				  -	      if	(<*) < 90
  25997  85d9				  -	      repeat	(90-<*)
  25998  85d9				  -	      .byte	0
  25999  85d9				  -	      repend
  26000  85d9					      endif
  26001  85d9				   playerL0510_3
  26002  85d9		       3c		      .byte.b	%0111100
  26003  85da		       3f		      .byte.b	%0111111
  26004  85db		       1c		      .byte.b	%0011100
  26005  85dc		       38		      .byte.b	%0111000
  26006  85dd		       3e		      .byte.b	%0111110
  26007  85de		       34		      .byte.b	%0110100
  26008  85df		       18		      .byte.b	%0011000
  26009  85e0				  -	      if	(<*) > (<(*+6))
  26010  85e0				  -	      repeat	($100-<*)
  26011  85e0				  -	      .byte	0
  26012  85e0				  -	      repend
  26013  85e0					      endif
  26014  85e0				  -	      if	(<*) < 90
  26015  85e0				  -	      repeat	(90-<*)
  26016  85e0				  -	      .byte	0
  26017  85e0				  -	      repend
  26018  85e0					      endif
  26019  85e0				   playerL0512_3
  26020  85e0		       1e		      .byte.b	%0011110
  26021  85e1		       7e		      .byte.b	%1111110
  26022  85e2		       1c		      .byte.b	%0011100
  26023  85e3		       0e		      .byte.b	%0001110
  26024  85e4		       3e		      .byte.b	%0111110
  26025  85e5		       16		      .byte.b	%0010110
  26026  85e6		       0c		      .byte.b	%0001100
  26027  85e7				  -	      if	(<*) > (<(*+6))
  26028  85e7				  -	      repeat	($100-<*)
  26029  85e7				  -	      .byte	0
  26030  85e7				  -	      repend
  26031  85e7					      endif
  26032  85e7				  -	      if	(<*) < 90
  26033  85e7				  -	      repeat	(90-<*)
  26034  85e7				  -	      .byte	0
  26035  85e7				  -	      repend
  26036  85e7					      endif
  26037  85e7				   player197then_3
  26038  85e7		       1c		      .byte.b	%0011100
  26039  85e8		       7f		      .byte.b	%1111111
  26040  85e9		       1c		      .byte.b	%0011100
  26041  85ea		       3e		      .byte.b	%0111110
  26042  85eb		       22		      .byte.b	%0100010
  26043  85ec		       3e		      .byte.b	%0111110
  26044  85ed		       08		      .byte.b	%0001000
  26045  85ee				  -	      if	(<*) > (<(*+11))
  26046  85ee				  -	      repeat	($100-<*)
  26047  85ee				  -	      .byte	0
  26048  85ee				  -	      repend
  26049  85ee					      endif
  26050  85ee				  -	      if	(<*) < 90
  26051  85ee				  -	      repeat	(90-<*)
  26052  85ee				  -	      .byte	0
  26053  85ee				  -	      repend
  26054  85ee					      endif
  26055  85ee				   playerL0518_3
  26056  85ee		       1c		      .byte.b	%00011100
  26057  85ef		       10		      .byte.b	%00010000
  26058  85f0		       10		      .byte.b	%00010000
  26059  85f1		       11		      .byte.b	%00010001
  26060  85f2		       fa		      .byte.b	%11111010
  26061  85f3		       bc		      .byte.b	%10111100
  26062  85f4		       9e		      .byte.b	%10011110
  26063  85f5		       1b		      .byte.b	%00011011
  26064  85f6		       37		      .byte.b	%00110111
  26065  85f7		       4d		      .byte.b	%01001101
  26066  85f8		       0b		      .byte.b	%00001011
  26067  85f9		       06		      .byte.b	%00000110
  26068  85fa					      if	(<*) > (<(*+11))
  26069  85fa					      repeat	($100-<*)
  26070  85fa		       00		      .byte.b	0
  26069  85fa					      repend
  26070  85fb		       00		      .byte.b	0
  26069  85fb					      repend
  26070  85fc		       00		      .byte.b	0
  26069  85fc					      repend
  26070  85fd		       00		      .byte.b	0
  26069  85fd					      repend
  26070  85fe		       00		      .byte.b	0
  26069  85fe					      repend
  26070  85ff		       00		      .byte.b	0
  26071  8600					      repend
  26072  8600					      endif
  26073  8600					      if	(<*) < 90
  26074  8600					      repeat	(90-<*)
  26075  8600		       00		      .byte.b	0
  26074  8600					      repend
  26075  8601		       00		      .byte.b	0
  26074  8601					      repend
  26075  8602		       00		      .byte.b	0
  26074  8602					      repend
  26075  8603		       00		      .byte.b	0
  26074  8603					      repend
  26075  8604		       00		      .byte.b	0
  26074  8604					      repend
  26075  8605		       00		      .byte.b	0
  26074  8605					      repend
  26075  8606		       00		      .byte.b	0
  26074  8606					      repend
  26075  8607		       00		      .byte.b	0
  26074  8607					      repend
  26075  8608		       00		      .byte.b	0
  26074  8608					      repend
  26075  8609		       00		      .byte.b	0
  26074  8609					      repend
  26075  860a		       00		      .byte.b	0
  26074  860a					      repend
  26075  860b		       00		      .byte.b	0
  26074  860b					      repend
  26075  860c		       00		      .byte.b	0
  26074  860c					      repend
  26075  860d		       00		      .byte.b	0
  26074  860d					      repend
  26075  860e		       00		      .byte.b	0
  26074  860e					      repend
  26075  860f		       00		      .byte.b	0
  26074  860f					      repend
  26075  8610		       00		      .byte.b	0
  26074  8610					      repend
  26075  8611		       00		      .byte.b	0
  26074  8611					      repend
  26075  8612		       00		      .byte.b	0
  26074  8612					      repend
  26075  8613		       00		      .byte.b	0
  26074  8613					      repend
  26075  8614		       00		      .byte.b	0
  26074  8614					      repend
  26075  8615		       00		      .byte.b	0
  26074  8615					      repend
  26075  8616		       00		      .byte.b	0
  26074  8616					      repend
  26075  8617		       00		      .byte.b	0
  26074  8617					      repend
  26075  8618		       00		      .byte.b	0
  26074  8618					      repend
  26075  8619		       00		      .byte.b	0
  26074  8619					      repend
  26075  861a		       00		      .byte.b	0
  26074  861a					      repend
  26075  861b		       00		      .byte.b	0
  26074  861b					      repend
  26075  861c		       00		      .byte.b	0
  26074  861c					      repend
  26075  861d		       00		      .byte.b	0
  26074  861d					      repend
  26075  861e		       00		      .byte.b	0
  26074  861e					      repend
  26075  861f		       00		      .byte.b	0
  26074  861f					      repend
  26075  8620		       00		      .byte.b	0
  26074  8620					      repend
  26075  8621		       00		      .byte.b	0
  26074  8621					      repend
  26075  8622		       00		      .byte.b	0
  26074  8622					      repend
  26075  8623		       00		      .byte.b	0
  26074  8623					      repend
  26075  8624		       00		      .byte.b	0
  26074  8624					      repend
  26075  8625		       00		      .byte.b	0
  26074  8625					      repend
  26075  8626		       00		      .byte.b	0
  26074  8626					      repend
  26075  8627		       00		      .byte.b	0
  26074  8627					      repend
  26075  8628		       00		      .byte.b	0
  26074  8628					      repend
  26075  8629		       00		      .byte.b	0
  26074  8629					      repend
  26075  862a		       00		      .byte.b	0
  26074  862a					      repend
  26075  862b		       00		      .byte.b	0
  26074  862b					      repend
  26075  862c		       00		      .byte.b	0
  26074  862c					      repend
  26075  862d		       00		      .byte.b	0
  26074  862d					      repend
  26075  862e		       00		      .byte.b	0
  26074  862e					      repend
  26075  862f		       00		      .byte.b	0
  26074  862f					      repend
  26075  8630		       00		      .byte.b	0
  26074  8630					      repend
  26075  8631		       00		      .byte.b	0
  26074  8631					      repend
  26075  8632		       00		      .byte.b	0
  26074  8632					      repend
  26075  8633		       00		      .byte.b	0
  26074  8633					      repend
  26075  8634		       00		      .byte.b	0
  26074  8634					      repend
  26075  8635		       00		      .byte.b	0
  26074  8635					      repend
  26075  8636		       00		      .byte.b	0
  26074  8636					      repend
  26075  8637		       00		      .byte.b	0
  26074  8637					      repend
  26075  8638		       00		      .byte.b	0
  26074  8638					      repend
  26075  8639		       00		      .byte.b	0
  26074  8639					      repend
  26075  863a		       00		      .byte.b	0
  26074  863a					      repend
  26075  863b		       00		      .byte.b	0
  26074  863b					      repend
  26075  863c		       00		      .byte.b	0
  26074  863c					      repend
  26075  863d		       00		      .byte.b	0
  26074  863d					      repend
  26075  863e		       00		      .byte.b	0
  26074  863e					      repend
  26075  863f		       00		      .byte.b	0
  26074  863f					      repend
  26075  8640		       00		      .byte.b	0
  26074  8640					      repend
  26075  8641		       00		      .byte.b	0
  26074  8641					      repend
  26075  8642		       00		      .byte.b	0
  26074  8642					      repend
  26075  8643		       00		      .byte.b	0
  26074  8643					      repend
  26075  8644		       00		      .byte.b	0
  26074  8644					      repend
  26075  8645		       00		      .byte.b	0
  26074  8645					      repend
  26075  8646		       00		      .byte.b	0
  26074  8646					      repend
  26075  8647		       00		      .byte.b	0
  26074  8647					      repend
  26075  8648		       00		      .byte.b	0
  26074  8648					      repend
  26075  8649		       00		      .byte.b	0
  26074  8649					      repend
  26075  864a		       00		      .byte.b	0
  26074  864a					      repend
  26075  864b		       00		      .byte.b	0
  26074  864b					      repend
  26075  864c		       00		      .byte.b	0
  26074  864c					      repend
  26075  864d		       00		      .byte.b	0
  26074  864d					      repend
  26075  864e		       00		      .byte.b	0
  26074  864e					      repend
  26075  864f		       00		      .byte.b	0
  26074  864f					      repend
  26075  8650		       00		      .byte.b	0
  26074  8650					      repend
  26075  8651		       00		      .byte.b	0
  26074  8651					      repend
  26075  8652		       00		      .byte.b	0
  26074  8652					      repend
  26075  8653		       00		      .byte.b	0
  26074  8653					      repend
  26075  8654		       00		      .byte.b	0
  26074  8654					      repend
  26075  8655		       00		      .byte.b	0
  26074  8655					      repend
  26075  8656		       00		      .byte.b	0
  26074  8656					      repend
  26075  8657		       00		      .byte.b	0
  26074  8657					      repend
  26075  8658		       00		      .byte.b	0
  26074  8658					      repend
  26075  8659		       00		      .byte.b	0
  26076  865a					      repend
  26077  865a					      endif
  26078  865a				   playerL0520_3
  26079  865a		       4e		      .byte.b	%01001110
  26080  865b		       75		      .byte.b	%01110101
  26081  865c		       77		      .byte.b	%01110111
  26082  865d		       75		      .byte.b	%01110101
  26083  865e		       6e		      .byte.b	%01101110
  26084  865f		       78		      .byte.b	%01111000
  26085  8660		       70		      .byte.b	%01110000
  26086  8661		       68		      .byte.b	%01101000
  26087  8662		       46		      .byte.b	%01000110
  26088  8663		       40		      .byte.b	%01000000
  26089  8664		       40		      .byte.b	%01000000
  26090  8665		       70		      .byte.b	%01110000
  26091  8666				  -	      if	(<*) > (<(*+11))
  26092  8666				  -	      repeat	($100-<*)
  26093  8666				  -	      .byte	0
  26094  8666				  -	      repend
  26095  8666					      endif
  26096  8666				  -	      if	(<*) < 90
  26097  8666				  -	      repeat	(90-<*)
  26098  8666				  -	      .byte	0
  26099  8666				  -	      repend
  26100  8666					      endif
  26101  8666				   playerL0522_3
  26102  8666		       70		      .byte.b	%01110000
  26103  8667		       f8		      .byte.b	%11111000
  26104  8668		       fe		      .byte.b	%11111110
  26105  8669		       af		      .byte.b	%10101111
  26106  866a		       6f		      .byte.b	%01101111
  26107  866b		       27		      .byte.b	%00100111
  26108  866c		       0b		      .byte.b	%00001011
  26109  866d		       13		      .byte.b	%00010011
  26110  866e		       07		      .byte.b	%00000111
  26111  866f		       0d		      .byte.b	%00001101
  26112  8670		       51		      .byte.b	%01010001
  26113  8671		       27		      .byte.b	%00100111
  26114  8672				  -	      if	(<*) > (<(*+11))
  26115  8672				  -	      repeat	($100-<*)
  26116  8672				  -	      .byte	0
  26117  8672				  -	      repend
  26118  8672					      endif
  26119  8672				  -	      if	(<*) < 90
  26120  8672				  -	      repeat	(90-<*)
  26121  8672				  -	      .byte	0
  26122  8672				  -	      repend
  26123  8672					      endif
  26124  8672				   playerL0524_3
  26125  8672		       03		      .byte.b	%00000011
  26126  8673		       02		      .byte.b	%00000010
  26127  8674		       22		      .byte.b	%00100010
  26128  8675		       2c		      .byte.b	%00101100
  26129  8676		       3c		      .byte.b	%00111100
  26130  8677		       3a		      .byte.b	%00111010
  26131  8678		       39		      .byte.b	%00111001
  26132  8679		       75		      .byte.b	%01110101
  26133  867a		       89		      .byte.b	%10001001
  26134  867b		       fa		      .byte.b	%11111010
  26135  867c		       a8		      .byte.b	%10101000
  26136  867d		       70		      .byte.b	%01110000
  26137  867e				  -	      if	(<*) > (<(*+6))
  26138  867e				  -	      repeat	($100-<*)
  26139  867e				  -	      .byte	0
  26140  867e				  -	      repend
  26141  867e					      endif
  26142  867e				  -	      if	(<*) < 90
  26143  867e				  -	      repeat	(90-<*)
  26144  867e				  -	      .byte	0
  26145  867e				  -	      repend
  26146  867e					      endif
  26147  867e				   playerL0533_4
  26148  867e		       5d		      .byte.b	%1011101
  26149  867f		       3e		      .byte.b	%0111110
  26150  8680		       1c		      .byte.b	%0011100
  26151  8681		       22		      .byte.b	%0100010
  26152  8682		       3e		      .byte.b	%0111110
  26153  8683		       2a		      .byte.b	%0101010
  26154  8684		       1c		      .byte.b	%0011100
  26155  8685				  -	      if	(<*) > (<(*+6))
  26156  8685				  -	      repeat	($100-<*)
  26157  8685				  -	      .byte	0
  26158  8685				  -	      repend
  26159  8685					      endif
  26160  8685				  -	      if	(<*) < 90
  26161  8685				  -	      repeat	(90-<*)
  26162  8685				  -	      .byte	0
  26163  8685				  -	      repend
  26164  8685					      endif
  26165  8685				   playerL0535_4
  26166  8685		       3c		      .byte.b	%0111100
  26167  8686		       3f		      .byte.b	%0111111
  26168  8687		       1c		      .byte.b	%0011100
  26169  8688		       38		      .byte.b	%0111000
  26170  8689		       3e		      .byte.b	%0111110
  26171  868a		       34		      .byte.b	%0110100
  26172  868b		       18		      .byte.b	%0011000
  26173  868c				  -	      if	(<*) > (<(*+6))
  26174  868c				  -	      repeat	($100-<*)
  26175  868c				  -	      .byte	0
  26176  868c				  -	      repend
  26177  868c					      endif
  26178  868c				  -	      if	(<*) < 90
  26179  868c				  -	      repeat	(90-<*)
  26180  868c				  -	      .byte	0
  26181  868c				  -	      repend
  26182  868c					      endif
  26183  868c				   playerL0537_4
  26184  868c		       1e		      .byte.b	%0011110
  26185  868d		       7e		      .byte.b	%1111110
  26186  868e		       1c		      .byte.b	%0011100
  26187  868f		       0e		      .byte.b	%0001110
  26188  8690		       3e		      .byte.b	%0111110
  26189  8691		       16		      .byte.b	%0010110
  26190  8692		       0c		      .byte.b	%0001100
  26191  8693				  -	      if	(<*) > (<(*+6))
  26192  8693				  -	      repeat	($100-<*)
  26193  8693				  -	      .byte	0
  26194  8693				  -	      repend
  26195  8693					      endif
  26196  8693				  -	      if	(<*) < 90
  26197  8693				  -	      repeat	(90-<*)
  26198  8693				  -	      .byte	0
  26199  8693				  -	      repend
  26200  8693					      endif
  26201  8693				   playerL0539_4
  26202  8693		       1c		      .byte.b	%0011100
  26203  8694		       7f		      .byte.b	%1111111
  26204  8695		       1c		      .byte.b	%0011100
  26205  8696		       3e		      .byte.b	%0111110
  26206  8697		       22		      .byte.b	%0100010
  26207  8698		       3e		      .byte.b	%0111110
  26208  8699		       08		      .byte.b	%0001000
  26209  869a				  -	      if	(<*) > (<(*+11))
  26210  869a				  -	      repeat	($100-<*)
  26211  869a				  -	      .byte	0
  26212  869a				  -	      repend
  26213  869a					      endif
  26214  869a				  -	      if	(<*) < 90
  26215  869a				  -	      repeat	(90-<*)
  26216  869a				  -	      .byte	0
  26217  869a				  -	      repend
  26218  869a					      endif
  26219  869a				   playerL0543_4
  26220  869a		       1c		      .byte.b	%00011100
  26221  869b		       10		      .byte.b	%00010000
  26222  869c		       10		      .byte.b	%00010000
  26223  869d		       11		      .byte.b	%00010001
  26224  869e		       fa		      .byte.b	%11111010
  26225  869f		       bc		      .byte.b	%10111100
  26226  86a0		       9e		      .byte.b	%10011110
  26227  86a1		       1b		      .byte.b	%00011011
  26228  86a2		       37		      .byte.b	%00110111
  26229  86a3		       4d		      .byte.b	%01001101
  26230  86a4		       0b		      .byte.b	%00001011
  26231  86a5		       06		      .byte.b	%00000110
  26232  86a6				  -	      if	(<*) > (<(*+11))
  26233  86a6				  -	      repeat	($100-<*)
  26234  86a6				  -	      .byte	0
  26235  86a6				  -	      repend
  26236  86a6					      endif
  26237  86a6				  -	      if	(<*) < 90
  26238  86a6				  -	      repeat	(90-<*)
  26239  86a6				  -	      .byte	0
  26240  86a6				  -	      repend
  26241  86a6					      endif
  26242  86a6				   playerL0545_4
  26243  86a6		       4e		      .byte.b	%01001110
  26244  86a7		       75		      .byte.b	%01110101
  26245  86a8		       77		      .byte.b	%01110111
  26246  86a9		       75		      .byte.b	%01110101
  26247  86aa		       6e		      .byte.b	%01101110
  26248  86ab		       78		      .byte.b	%01111000
  26249  86ac		       70		      .byte.b	%01110000
  26250  86ad		       68		      .byte.b	%01101000
  26251  86ae		       46		      .byte.b	%01000110
  26252  86af		       40		      .byte.b	%01000000
  26253  86b0		       40		      .byte.b	%01000000
  26254  86b1		       70		      .byte.b	%01110000
  26255  86b2				  -	      if	(<*) > (<(*+11))
  26256  86b2				  -	      repeat	($100-<*)
  26257  86b2				  -	      .byte	0
  26258  86b2				  -	      repend
  26259  86b2					      endif
  26260  86b2				  -	      if	(<*) < 90
  26261  86b2				  -	      repeat	(90-<*)
  26262  86b2				  -	      .byte	0
  26263  86b2				  -	      repend
  26264  86b2					      endif
  26265  86b2				   playerL0547_4
  26266  86b2		       70		      .byte.b	%01110000
  26267  86b3		       f8		      .byte.b	%11111000
  26268  86b4		       fe		      .byte.b	%11111110
  26269  86b5		       af		      .byte.b	%10101111
  26270  86b6		       6f		      .byte.b	%01101111
  26271  86b7		       27		      .byte.b	%00100111
  26272  86b8		       0b		      .byte.b	%00001011
  26273  86b9		       13		      .byte.b	%00010011
  26274  86ba		       07		      .byte.b	%00000111
  26275  86bb		       0d		      .byte.b	%00001101
  26276  86bc		       51		      .byte.b	%01010001
  26277  86bd		       27		      .byte.b	%00100111
  26278  86be				  -	      if	(<*) > (<(*+11))
  26279  86be				  -	      repeat	($100-<*)
  26280  86be				  -	      .byte	0
  26281  86be				  -	      repend
  26282  86be					      endif
  26283  86be				  -	      if	(<*) < 90
  26284  86be				  -	      repeat	(90-<*)
  26285  86be				  -	      .byte	0
  26286  86be				  -	      repend
  26287  86be					      endif
  26288  86be				   playerL0549_4
  26289  86be		       03		      .byte.b	%00000011
  26290  86bf		       02		      .byte.b	%00000010
  26291  86c0		       22		      .byte.b	%00100010
  26292  86c1		       2c		      .byte.b	%00101100
  26293  86c2		       3c		      .byte.b	%00111100
  26294  86c3		       3a		      .byte.b	%00111010
  26295  86c4		       39		      .byte.b	%00111001
  26296  86c5		       75		      .byte.b	%01110101
  26297  86c6		       89		      .byte.b	%10001001
  26298  86c7		       fa		      .byte.b	%11111010
  26299  86c8		       a8		      .byte.b	%10101000
  26300  86c9		       70		      .byte.b	%01110000
  26301  86ca				  -	      if	(<*) > (<(*+24))
  26302  86ca				  -	      repeat	($100-<*)
  26303  86ca				  -	      .byte	0
  26304  86ca				  -	      repend
  26305  86ca					      endif
  26306  86ca				  -	      if	(<*) < 90
  26307  86ca				  -	      repeat	(90-<*)
  26308  86ca				  -	      .byte	0
  26309  86ca				  -	      repend
  26310  86ca					      endif
  26311  86ca				   playerL0583_0
  26312  86ca		       00		      .byte.b	0
  26313  86cb		       ff		      .byte.b	%11111111
  26314  86cc		       fe		      .byte.b	%11111110
  26315  86cd		       fe		      .byte.b	%11111110
  26316  86ce		       7e		      .byte.b	%01111110
  26317  86cf		       5e		      .byte.b	%01011110
  26318  86d0		       5e		      .byte.b	%01011110
  26319  86d1		       5f		      .byte.b	%01011111
  26320  86d2		       58		      .byte.b	%01011000
  26321  86d3		       47		      .byte.b	%01000111
  26322  86d4		       5f		      .byte.b	%01011111
  26323  86d5		       5e		      .byte.b	%01011110
  26324  86d6		       9c		      .byte.b	%10011100
  26325  86d7		       be		      .byte.b	%10111110
  26326  86d8		       b2		      .byte.b	%10110010
  26327  86d9		       b1		      .byte.b	%10110001
  26328  86da		       7b		      .byte.b	%01111011
  26329  86db		       71		      .byte.b	%01110001
  26330  86dc		       5e		      .byte.b	%01011110
  26331  86dd		       40		      .byte.b	%01000000
  26332  86de		       40		      .byte.b	%01000000
  26333  86df		       43		      .byte.b	%01000011
  26334  86e0		       46		      .byte.b	%01000110
  26335  86e1		       4c		      .byte.b	%01001100
  26336  86e2		       78		      .byte.b	%01111000
  26337  86e3				  -	      if	(<*) > (<(*+23))
  26338  86e3				  -	      repeat	($100-<*)
  26339  86e3				  -	      .byte	0
  26340  86e3				  -	      repend
  26341  86e3					      endif
  26342  86e3				  -	      if	(<*) < 90
  26343  86e3				  -	      repeat	(90-<*)
  26344  86e3				  -	      .byte	0
  26345  86e3				  -	      repend
  26346  86e3					      endif
  26347  86e3				   playerL0584_1
  26348  86e3		       ff		      .byte.b	%11111111
  26349  86e4		       fe		      .byte.b	%11111110
  26350  86e5		       fe		      .byte.b	%11111110
  26351  86e6		       7e		      .byte.b	%01111110
  26352  86e7		       5e		      .byte.b	%01011110
  26353  86e8		       5e		      .byte.b	%01011110
  26354  86e9		       5f		      .byte.b	%01011111
  26355  86ea		       58		      .byte.b	%01011000
  26356  86eb		       47		      .byte.b	%01000111
  26357  86ec		       5f		      .byte.b	%01011111
  26358  86ed		       5e		      .byte.b	%01011110
  26359  86ee		       9c		      .byte.b	%10011100
  26360  86ef		       be		      .byte.b	%10111110
  26361  86f0		       b2		      .byte.b	%10110010
  26362  86f1		       b1		      .byte.b	%10110001
  26363  86f2		       7b		      .byte.b	%01111011
  26364  86f3		       71		      .byte.b	%01110001
  26365  86f4		       5e		      .byte.b	%01011110
  26366  86f5		       40		      .byte.b	%01000000
  26367  86f6		       40		      .byte.b	%01000000
  26368  86f7		       43		      .byte.b	%01000011
  26369  86f8		       46		      .byte.b	%01000110
  26370  86f9		       4c		      .byte.b	%01001100
  26371  86fa		       78		      .byte.b	%01111000
  26372  86fb					      if	(<*) > (<(*+59))
  26373  86fb					      repeat	($100-<*)
  26374  86fb		       00		      .byte.b	0
  26373  86fb					      repend
  26374  86fc		       00		      .byte.b	0
  26373  86fc					      repend
  26374  86fd		       00		      .byte.b	0
  26373  86fd					      repend
  26374  86fe		       00		      .byte.b	0
  26373  86fe					      repend
  26374  86ff		       00		      .byte.b	0
  26375  8700					      repend
  26376  8700					      endif
  26377  8700					      if	(<*) < 90
  26378  8700					      repeat	(90-<*)
  26379  8700		       00		      .byte.b	0
  26378  8700					      repend
  26379  8701		       00		      .byte.b	0
  26378  8701					      repend
  26379  8702		       00		      .byte.b	0
  26378  8702					      repend
  26379  8703		       00		      .byte.b	0
  26378  8703					      repend
  26379  8704		       00		      .byte.b	0
  26378  8704					      repend
  26379  8705		       00		      .byte.b	0
  26378  8705					      repend
  26379  8706		       00		      .byte.b	0
  26378  8706					      repend
  26379  8707		       00		      .byte.b	0
  26378  8707					      repend
  26379  8708		       00		      .byte.b	0
  26378  8708					      repend
  26379  8709		       00		      .byte.b	0
  26378  8709					      repend
  26379  870a		       00		      .byte.b	0
  26378  870a					      repend
  26379  870b		       00		      .byte.b	0
  26378  870b					      repend
  26379  870c		       00		      .byte.b	0
  26378  870c					      repend
  26379  870d		       00		      .byte.b	0
  26378  870d					      repend
  26379  870e		       00		      .byte.b	0
  26378  870e					      repend
  26379  870f		       00		      .byte.b	0
  26378  870f					      repend
  26379  8710		       00		      .byte.b	0
  26378  8710					      repend
  26379  8711		       00		      .byte.b	0
  26378  8711					      repend
  26379  8712		       00		      .byte.b	0
  26378  8712					      repend
  26379  8713		       00		      .byte.b	0
  26378  8713					      repend
  26379  8714		       00		      .byte.b	0
  26378  8714					      repend
  26379  8715		       00		      .byte.b	0
  26378  8715					      repend
  26379  8716		       00		      .byte.b	0
  26378  8716					      repend
  26379  8717		       00		      .byte.b	0
  26378  8717					      repend
  26379  8718		       00		      .byte.b	0
  26378  8718					      repend
  26379  8719		       00		      .byte.b	0
  26378  8719					      repend
  26379  871a		       00		      .byte.b	0
  26378  871a					      repend
  26379  871b		       00		      .byte.b	0
  26378  871b					      repend
  26379  871c		       00		      .byte.b	0
  26378  871c					      repend
  26379  871d		       00		      .byte.b	0
  26378  871d					      repend
  26379  871e		       00		      .byte.b	0
  26378  871e					      repend
  26379  871f		       00		      .byte.b	0
  26378  871f					      repend
  26379  8720		       00		      .byte.b	0
  26378  8720					      repend
  26379  8721		       00		      .byte.b	0
  26378  8721					      repend
  26379  8722		       00		      .byte.b	0
  26378  8722					      repend
  26379  8723		       00		      .byte.b	0
  26378  8723					      repend
  26379  8724		       00		      .byte.b	0
  26378  8724					      repend
  26379  8725		       00		      .byte.b	0
  26378  8725					      repend
  26379  8726		       00		      .byte.b	0
  26378  8726					      repend
  26379  8727		       00		      .byte.b	0
  26378  8727					      repend
  26379  8728		       00		      .byte.b	0
  26378  8728					      repend
  26379  8729		       00		      .byte.b	0
  26378  8729					      repend
  26379  872a		       00		      .byte.b	0
  26378  872a					      repend
  26379  872b		       00		      .byte.b	0
  26378  872b					      repend
  26379  872c		       00		      .byte.b	0
  26378  872c					      repend
  26379  872d		       00		      .byte.b	0
  26378  872d					      repend
  26379  872e		       00		      .byte.b	0
  26378  872e					      repend
  26379  872f		       00		      .byte.b	0
  26378  872f					      repend
  26379  8730		       00		      .byte.b	0
  26378  8730					      repend
  26379  8731		       00		      .byte.b	0
  26378  8731					      repend
  26379  8732		       00		      .byte.b	0
  26378  8732					      repend
  26379  8733		       00		      .byte.b	0
  26378  8733					      repend
  26379  8734		       00		      .byte.b	0
  26378  8734					      repend
  26379  8735		       00		      .byte.b	0
  26378  8735					      repend
  26379  8736		       00		      .byte.b	0
  26378  8736					      repend
  26379  8737		       00		      .byte.b	0
  26378  8737					      repend
  26379  8738		       00		      .byte.b	0
  26378  8738					      repend
  26379  8739		       00		      .byte.b	0
  26378  8739					      repend
  26379  873a		       00		      .byte.b	0
  26378  873a					      repend
  26379  873b		       00		      .byte.b	0
  26378  873b					      repend
  26379  873c		       00		      .byte.b	0
  26378  873c					      repend
  26379  873d		       00		      .byte.b	0
  26378  873d					      repend
  26379  873e		       00		      .byte.b	0
  26378  873e					      repend
  26379  873f		       00		      .byte.b	0
  26378  873f					      repend
  26379  8740		       00		      .byte.b	0
  26378  8740					      repend
  26379  8741		       00		      .byte.b	0
  26378  8741					      repend
  26379  8742		       00		      .byte.b	0
  26378  8742					      repend
  26379  8743		       00		      .byte.b	0
  26378  8743					      repend
  26379  8744		       00		      .byte.b	0
  26378  8744					      repend
  26379  8745		       00		      .byte.b	0
  26378  8745					      repend
  26379  8746		       00		      .byte.b	0
  26378  8746					      repend
  26379  8747		       00		      .byte.b	0
  26378  8747					      repend
  26379  8748		       00		      .byte.b	0
  26378  8748					      repend
  26379  8749		       00		      .byte.b	0
  26378  8749					      repend
  26379  874a		       00		      .byte.b	0
  26378  874a					      repend
  26379  874b		       00		      .byte.b	0
  26378  874b					      repend
  26379  874c		       00		      .byte.b	0
  26378  874c					      repend
  26379  874d		       00		      .byte.b	0
  26378  874d					      repend
  26379  874e		       00		      .byte.b	0
  26378  874e					      repend
  26379  874f		       00		      .byte.b	0
  26378  874f					      repend
  26379  8750		       00		      .byte.b	0
  26378  8750					      repend
  26379  8751		       00		      .byte.b	0
  26378  8751					      repend
  26379  8752		       00		      .byte.b	0
  26378  8752					      repend
  26379  8753		       00		      .byte.b	0
  26378  8753					      repend
  26379  8754		       00		      .byte.b	0
  26378  8754					      repend
  26379  8755		       00		      .byte.b	0
  26378  8755					      repend
  26379  8756		       00		      .byte.b	0
  26378  8756					      repend
  26379  8757		       00		      .byte.b	0
  26378  8757					      repend
  26379  8758		       00		      .byte.b	0
  26378  8758					      repend
  26379  8759		       00		      .byte.b	0
  26380  875a					      repend
  26381  875a					      endif
  26382  875a				   playerL0613_1
  26383  875a		       10		      .byte.b	%00010000
  26384  875b		       08		      .byte.b	%00001000
  26385  875c		       08		      .byte.b	%00001000
  26386  875d		       08		      .byte.b	%00001000
  26387  875e		       08		      .byte.b	%00001000
  26388  875f		       90		      .byte.b	%10010000
  26389  8760		       48		      .byte.b	%01001000
  26390  8761		       28		      .byte.b	%00101000
  26391  8762		       10		      .byte.b	%00010000
  26392  8763		       10		      .byte.b	%00010000
  26393  8764		       10		      .byte.b	%00010000
  26394  8765		       08		      .byte.b	%00001000
  26395  8766		       08		      .byte.b	%00001000
  26396  8767		       08		      .byte.b	%00001000
  26397  8768		       05		      .byte.b	%00000101
  26398  8769		       86		      .byte.b	%10000110
  26399  876a		       44		      .byte.b	%01000100
  26400  876b		       28		      .byte.b	%00101000
  26401  876c		       28		      .byte.b	%00101000
  26402  876d		       28		      .byte.b	%00101000
  26403  876e		       19		      .byte.b	%00011001
  26404  876f		       0a		      .byte.b	%00001010
  26405  8770		       0c		      .byte.b	%00001100
  26406  8771		       94		      .byte.b	%10010100
  26407  8772		       58		      .byte.b	%01011000
  26408  8773		       50		      .byte.b	%01010000
  26409  8774		       30		      .byte.b	%00110000
  26410  8775		       10		      .byte.b	%00010000
  26411  8776		       08		      .byte.b	%00001000
  26412  8777		       08		      .byte.b	%00001000
  26413  8778		       04		      .byte.b	%00000100
  26414  8779		       05		      .byte.b	%00000101
  26415  877a		       09		      .byte.b	%00001001
  26416  877b		       0a		      .byte.b	%00001010
  26417  877c		       0c		      .byte.b	%00001100
  26418  877d		       10		      .byte.b	%00010000
  26419  877e		       20		      .byte.b	%00100000
  26420  877f		       20		      .byte.b	%00100000
  26421  8780		       10		      .byte.b	%00010000
  26422  8781		       08		      .byte.b	%00001000
  26423  8782		       88		      .byte.b	%10001000
  26424  8783		       88		      .byte.b	%10001000
  26425  8784		       50		      .byte.b	%01010000
  26426  8785		       50		      .byte.b	%01010000
  26427  8786		       30		      .byte.b	%00110000
  26428  8787		       10		      .byte.b	%00010000
  26429  8788		       09		      .byte.b	%00001001
  26430  8789		       0a		      .byte.b	%00001010
  26431  878a		       04		      .byte.b	%00000100
  26432  878b		       08		      .byte.b	%00001000
  26433  878c		       10		      .byte.b	%00010000
  26434  878d		       10		      .byte.b	%00010000
  26435  878e		       10		      .byte.b	%00010000
  26436  878f		       48		      .byte.b	%01001000
  26437  8790		       c8		      .byte.b	%11001000
  26438  8791		       30		      .byte.b	%00110000
  26439  8792		       10		      .byte.b	%00010000
  26440  8793		       10		      .byte.b	%00010000
  26441  8794		       08		      .byte.b	%00001000
  26442  8795		       08		      .byte.b	%00001000
  26443  8796				  -	      if	(<*) > (<(*+23))
  26444  8796				  -	      repeat	($100-<*)
  26445  8796				  -	      .byte	0
  26446  8796				  -	      repend
  26447  8796					      endif
  26448  8796				  -	      if	(<*) < 90
  26449  8796				  -	      repeat	(90-<*)
  26450  8796				  -	      .byte	0
  26451  8796				  -	      repend
  26452  8796					      endif
  26453  8796				   player234then_1
  26454  8796		       3f		      .byte.b	%00111111
  26455  8797		       2e		      .byte.b	%00101110
  26456  8798		       21		      .byte.b	%00100001
  26457  8799		       28		      .byte.b	%00101000
  26458  879a		       24		      .byte.b	%00100100
  26459  879b		       25		      .byte.b	%00100101
  26460  879c		       3f		      .byte.b	%00111111
  26461  879d		       25		      .byte.b	%00100101
  26462  879e		       3f		      .byte.b	%00111111
  26463  879f		       2d		      .byte.b	%00101101
  26464  87a0		       3e		      .byte.b	%00111110
  26465  87a1		       6c		      .byte.b	%01101100
  26466  87a2		       5e		      .byte.b	%01011110
  26467  87a3		       7e		      .byte.b	%01111110
  26468  87a4		       7f		      .byte.b	%01111111
  26469  87a5		       75		      .byte.b	%01110101
  26470  87a6		       7f		      .byte.b	%01111111
  26471  87a7		       5e		      .byte.b	%01011110
  26472  87a8		       40		      .byte.b	%01000000
  26473  87a9		       40		      .byte.b	%01000000
  26474  87aa		       43		      .byte.b	%01000011
  26475  87ab		       46		      .byte.b	%01000110
  26476  87ac		       4c		      .byte.b	%01001100
  26477  87ad		       78		      .byte.b	%01111000
  26478  87ae				  -	      if	(<*) > (<(*+23))
  26479  87ae				  -	      repeat	($100-<*)
  26480  87ae				  -	      .byte	0
  26481  87ae				  -	      repend
  26482  87ae					      endif
  26483  87ae				  -	      if	(<*) < 90
  26484  87ae				  -	      repeat	(90-<*)
  26485  87ae				  -	      .byte	0
  26486  87ae				  -	      repend
  26487  87ae					      endif
  26488  87ae				   player235then_1
  26489  87ae		       7f		      .byte.b	%01111111
  26490  87af		       3f		      .byte.b	%00111111
  26491  87b0		       3e		      .byte.b	%00111110
  26492  87b1		       24		      .byte.b	%00100100
  26493  87b2		       21		      .byte.b	%00100001
  26494  87b3		       28		      .byte.b	%00101000
  26495  87b4		       32		      .byte.b	%00110010
  26496  87b5		       20		      .byte.b	%00100000
  26497  87b6		       3d		      .byte.b	%00111101
  26498  87b7		       2d		      .byte.b	%00101101
  26499  87b8		       3e		      .byte.b	%00111110
  26500  87b9		       6c		      .byte.b	%01101100
  26501  87ba		       5e		      .byte.b	%01011110
  26502  87bb		       7e		      .byte.b	%01111110
  26503  87bc		       7f		      .byte.b	%01111111
  26504  87bd		       75		      .byte.b	%01110101
  26505  87be		       7f		      .byte.b	%01111111
  26506  87bf		       5e		      .byte.b	%01011110
  26507  87c0		       40		      .byte.b	%01000000
  26508  87c1		       40		      .byte.b	%01000000
  26509  87c2		       43		      .byte.b	%01000011
  26510  87c3		       46		      .byte.b	%01000110
  26511  87c4		       4c		      .byte.b	%01001100
  26512  87c5		       78		      .byte.b	%01111000
  26513  87c6				  -	      if	(<*) > (<(*+23))
  26514  87c6				  -	      repeat	($100-<*)
  26515  87c6				  -	      .byte	0
  26516  87c6				  -	      repend
  26517  87c6					      endif
  26518  87c6				  -	      if	(<*) < 90
  26519  87c6				  -	      repeat	(90-<*)
  26520  87c6				  -	      .byte	0
  26521  87c6				  -	      repend
  26522  87c6					      endif
  26523  87c6				   player236then_1
  26524  87c6		       ff		      .byte.b	%11111111
  26525  87c7		       7f		      .byte.b	%01111111
  26526  87c8		       3f		      .byte.b	%00111111
  26527  87c9		       3f		      .byte.b	%00111111
  26528  87ca		       2e		      .byte.b	%00101110
  26529  87cb		       30		      .byte.b	%00110000
  26530  87cc		       24		      .byte.b	%00100100
  26531  87cd		       22		      .byte.b	%00100010
  26532  87ce		       20		      .byte.b	%00100000
  26533  87cf		       28		      .byte.b	%00101000
  26534  87d0		       22		      .byte.b	%00100010
  26535  87d1		       6c		      .byte.b	%01101100
  26536  87d2		       5e		      .byte.b	%01011110
  26537  87d3		       7e		      .byte.b	%01111110
  26538  87d4		       7f		      .byte.b	%01111111
  26539  87d5		       75		      .byte.b	%01110101
  26540  87d6		       7f		      .byte.b	%01111111
  26541  87d7		       5e		      .byte.b	%01011110
  26542  87d8		       40		      .byte.b	%01000000
  26543  87d9		       40		      .byte.b	%01000000
  26544  87da		       43		      .byte.b	%01000011
  26545  87db		       46		      .byte.b	%01000110
  26546  87dc		       4c		      .byte.b	%01001100
  26547  87dd		       78		      .byte.b	%01111000
  26548  87de				  -	      if	(<*) > (<(*+23))
  26549  87de				  -	      repeat	($100-<*)
  26550  87de				  -	      .byte	0
  26551  87de				  -	      repend
  26552  87de					      endif
  26553  87de				  -	      if	(<*) < 90
  26554  87de				  -	      repeat	(90-<*)
  26555  87de				  -	      .byte	0
  26556  87de				  -	      repend
  26557  87de					      endif
  26558  87de				   player237then_1
  26559  87de		       ff		      .byte.b	%11111111
  26560  87df		       ff		      .byte.b	%11111111
  26561  87e0		       7f		      .byte.b	%01111111
  26562  87e1		       7f		      .byte.b	%01111111
  26563  87e2		       3f		      .byte.b	%00111111
  26564  87e3		       3f		      .byte.b	%00111111
  26565  87e4		       3f		      .byte.b	%00111111
  26566  87e5		       35		      .byte.b	%00110101
  26567  87e6		       3f		      .byte.b	%00111111
  26568  87e7		       3e		      .byte.b	%00111110
  26569  87e8		       20		      .byte.b	%00100000
  26570  87e9		       60		      .byte.b	%01100000
  26571  87ea		       40		      .byte.b	%01000000
  26572  87eb		       40		      .byte.b	%01000000
  26573  87ec		       40		      .byte.b	%01000000
  26574  87ed		       40		      .byte.b	%01000000
  26575  87ee		       40		      .byte.b	%01000000
  26576  87ef		       40		      .byte.b	%01000000
  26577  87f0		       40		      .byte.b	%01000000
  26578  87f1		       40		      .byte.b	%01000000
  26579  87f2		       43		      .byte.b	%01000011
  26580  87f3		       46		      .byte.b	%01000110
  26581  87f4		       4c		      .byte.b	%01001100
  26582  87f5		       78		      .byte.b	%01111000
  26583  87f6				  -	      if	(<*) > (<(*+4))
  26584  87f6				  -	      repeat	($100-<*)
  26585  87f6				  -	      .byte	0
  26586  87f6				  -	      repend
  26587  87f6					      endif
  26588  87f6				  -	      if	(<*) < 90
  26589  87f6				  -	      repeat	(90-<*)
  26590  87f6				  -	      .byte	0
  26591  87f6				  -	      repend
  26592  87f6					      endif
  26593  87f6				   playerL0635_2
  26594  87f6		       d6		      .byte.b	%11010110
  26595  87f7		       ba		      .byte.b	%10111010
  26596  87f8		       bb		      .byte.b	%10111011
  26597  87f9		       b6		      .byte.b	%10110110
  26598  87fa		       d9		      .byte.b	%11011001
  26599  87fb				  -	      if	(<*) > (<(*+4))
  26600  87fb				  -	      repeat	($100-<*)
  26601  87fb				  -	      .byte	0
  26602  87fb				  -	      repend
  26603  87fb					      endif
  26604  87fb				  -	      if	(<*) < 90
  26605  87fb				  -	      repeat	(90-<*)
  26606  87fb				  -	      .byte	0
  26607  87fb				  -	      repend
  26608  87fb					      endif
  26609  87fb				   playerL0636_3
  26610  87fb		       a9		      .byte.b	%10101001
  26611  87fc		       d4		      .byte.b	%11010100
  26612  87fd		       d5		      .byte.b	%11010101
  26613  87fe		       c5		      .byte.b	%11000101
  26614  87ff		       45		      .byte.b	%01000101
  26615  8800				  -	      if	(<*) > (<(*+7))
  26616  8800				  -	      repeat	($100-<*)
  26617  8800				  -	      .byte	0
  26618  8800				  -	      repend
  26619  8800					      endif
  26620  8800					      if	(<*) < 90
  26621  8800					      repeat	(90-<*)
  26622  8800		       00		      .byte.b	0
  26621  8800					      repend
  26622  8801		       00		      .byte.b	0
  26621  8801					      repend
  26622  8802		       00		      .byte.b	0
  26621  8802					      repend
  26622  8803		       00		      .byte.b	0
  26621  8803					      repend
  26622  8804		       00		      .byte.b	0
  26621  8804					      repend
  26622  8805		       00		      .byte.b	0
  26621  8805					      repend
  26622  8806		       00		      .byte.b	0
  26621  8806					      repend
  26622  8807		       00		      .byte.b	0
  26621  8807					      repend
  26622  8808		       00		      .byte.b	0
  26621  8808					      repend
  26622  8809		       00		      .byte.b	0
  26621  8809					      repend
  26622  880a		       00		      .byte.b	0
  26621  880a					      repend
  26622  880b		       00		      .byte.b	0
  26621  880b					      repend
  26622  880c		       00		      .byte.b	0
  26621  880c					      repend
  26622  880d		       00		      .byte.b	0
  26621  880d					      repend
  26622  880e		       00		      .byte.b	0
  26621  880e					      repend
  26622  880f		       00		      .byte.b	0
  26621  880f					      repend
  26622  8810		       00		      .byte.b	0
  26621  8810					      repend
  26622  8811		       00		      .byte.b	0
  26621  8811					      repend
  26622  8812		       00		      .byte.b	0
  26621  8812					      repend
  26622  8813		       00		      .byte.b	0
  26621  8813					      repend
  26622  8814		       00		      .byte.b	0
  26621  8814					      repend
  26622  8815		       00		      .byte.b	0
  26621  8815					      repend
  26622  8816		       00		      .byte.b	0
  26621  8816					      repend
  26622  8817		       00		      .byte.b	0
  26621  8817					      repend
  26622  8818		       00		      .byte.b	0
  26621  8818					      repend
  26622  8819		       00		      .byte.b	0
  26621  8819					      repend
  26622  881a		       00		      .byte.b	0
  26621  881a					      repend
  26622  881b		       00		      .byte.b	0
  26621  881b					      repend
  26622  881c		       00		      .byte.b	0
  26621  881c					      repend
  26622  881d		       00		      .byte.b	0
  26621  881d					      repend
  26622  881e		       00		      .byte.b	0
  26621  881e					      repend
  26622  881f		       00		      .byte.b	0
  26621  881f					      repend
  26622  8820		       00		      .byte.b	0
  26621  8820					      repend
  26622  8821		       00		      .byte.b	0
  26621  8821					      repend
  26622  8822		       00		      .byte.b	0
  26621  8822					      repend
  26622  8823		       00		      .byte.b	0
  26621  8823					      repend
  26622  8824		       00		      .byte.b	0
  26621  8824					      repend
  26622  8825		       00		      .byte.b	0
  26621  8825					      repend
  26622  8826		       00		      .byte.b	0
  26621  8826					      repend
  26622  8827		       00		      .byte.b	0
  26621  8827					      repend
  26622  8828		       00		      .byte.b	0
  26621  8828					      repend
  26622  8829		       00		      .byte.b	0
  26621  8829					      repend
  26622  882a		       00		      .byte.b	0
  26621  882a					      repend
  26622  882b		       00		      .byte.b	0
  26621  882b					      repend
  26622  882c		       00		      .byte.b	0
  26621  882c					      repend
  26622  882d		       00		      .byte.b	0
  26621  882d					      repend
  26622  882e		       00		      .byte.b	0
  26621  882e					      repend
  26622  882f		       00		      .byte.b	0
  26621  882f					      repend
  26622  8830		       00		      .byte.b	0
  26621  8830					      repend
  26622  8831		       00		      .byte.b	0
  26621  8831					      repend
  26622  8832		       00		      .byte.b	0
  26621  8832					      repend
  26622  8833		       00		      .byte.b	0
  26621  8833					      repend
  26622  8834		       00		      .byte.b	0
  26621  8834					      repend
  26622  8835		       00		      .byte.b	0
  26621  8835					      repend
  26622  8836		       00		      .byte.b	0
  26621  8836					      repend
  26622  8837		       00		      .byte.b	0
  26621  8837					      repend
  26622  8838		       00		      .byte.b	0
  26621  8838					      repend
  26622  8839		       00		      .byte.b	0
  26621  8839					      repend
  26622  883a		       00		      .byte.b	0
  26621  883a					      repend
  26622  883b		       00		      .byte.b	0
  26621  883b					      repend
  26622  883c		       00		      .byte.b	0
  26621  883c					      repend
  26622  883d		       00		      .byte.b	0
  26621  883d					      repend
  26622  883e		       00		      .byte.b	0
  26621  883e					      repend
  26622  883f		       00		      .byte.b	0
  26621  883f					      repend
  26622  8840		       00		      .byte.b	0
  26621  8840					      repend
  26622  8841		       00		      .byte.b	0
  26621  8841					      repend
  26622  8842		       00		      .byte.b	0
  26621  8842					      repend
  26622  8843		       00		      .byte.b	0
  26621  8843					      repend
  26622  8844		       00		      .byte.b	0
  26621  8844					      repend
  26622  8845		       00		      .byte.b	0
  26621  8845					      repend
  26622  8846		       00		      .byte.b	0
  26621  8846					      repend
  26622  8847		       00		      .byte.b	0
  26621  8847					      repend
  26622  8848		       00		      .byte.b	0
  26621  8848					      repend
  26622  8849		       00		      .byte.b	0
  26621  8849					      repend
  26622  884a		       00		      .byte.b	0
  26621  884a					      repend
  26622  884b		       00		      .byte.b	0
  26621  884b					      repend
  26622  884c		       00		      .byte.b	0
  26621  884c					      repend
  26622  884d		       00		      .byte.b	0
  26621  884d					      repend
  26622  884e		       00		      .byte.b	0
  26621  884e					      repend
  26622  884f		       00		      .byte.b	0
  26621  884f					      repend
  26622  8850		       00		      .byte.b	0
  26621  8850					      repend
  26622  8851		       00		      .byte.b	0
  26621  8851					      repend
  26622  8852		       00		      .byte.b	0
  26621  8852					      repend
  26622  8853		       00		      .byte.b	0
  26621  8853					      repend
  26622  8854		       00		      .byte.b	0
  26621  8854					      repend
  26622  8855		       00		      .byte.b	0
  26621  8855					      repend
  26622  8856		       00		      .byte.b	0
  26621  8856					      repend
  26622  8857		       00		      .byte.b	0
  26621  8857					      repend
  26622  8858		       00		      .byte.b	0
  26621  8858					      repend
  26622  8859		       00		      .byte.b	0
  26623  885a					      repend
  26624  885a					      endif
  26625  885a				   playerL0639_2
  26626  885a		       fc		      .byte.b	%11111100
  26627  885b		       9c		      .byte.b	%10011100
  26628  885c		       fc		      .byte.b	%11111100
  26629  885d		       78		      .byte.b	%01111000
  26630  885e		       32		      .byte.b	%00110010
  26631  885f		       32		      .byte.b	%00110010
  26632  8860		       36		      .byte.b	%00110110
  26633  8861		       32		      .byte.b	%00110010
  26634  8862				  -	      if	(<*) > (<(*+7))
  26635  8862				  -	      repeat	($100-<*)
  26636  8862				  -	      .byte	0
  26637  8862				  -	      repend
  26638  8862					      endif
  26639  8862				  -	      if	(<*) < 90
  26640  8862				  -	      repeat	(90-<*)
  26641  8862				  -	      .byte	0
  26642  8862				  -	      repend
  26643  8862					      endif
  26644  8862				   player241then_2
  26645  8862		       fc		      .byte.b	%11111100
  26646  8863		       9c		      .byte.b	%10011100
  26647  8864		       fc		      .byte.b	%11111100
  26648  8865		       7c		      .byte.b	%01111100
  26649  8866		       37		      .byte.b	%00110111
  26650  8867		       32		      .byte.b	%00110010
  26651  8868		       35		      .byte.b	%00110101
  26652  8869		       33		      .byte.b	%00110011
  26653  886a				  -	      if	(<*) > (<(*+7))
  26654  886a				  -	      repeat	($100-<*)
  26655  886a				  -	      .byte	0
  26656  886a				  -	      repend
  26657  886a					      endif
  26658  886a				  -	      if	(<*) < 90
  26659  886a				  -	      repeat	(90-<*)
  26660  886a				  -	      .byte	0
  26661  886a				  -	      repend
  26662  886a					      endif
  26663  886a				   player242then_2
  26664  886a		       ff		      .byte.b	%11111111
  26665  886b		       8b		      .byte.b	%10001011
  26666  886c		       ff		      .byte.b	%11111111
  26667  886d		       7e		      .byte.b	%01111110
  26668  886e		       42		      .byte.b	%01000010
  26669  886f		       46		      .byte.b	%01000110
  26670  8870		       4a		      .byte.b	%01001010
  26671  8871		       7e		      .byte.b	%01111110
  26672  8872				  -	      if	(<*) > (<(*+4))
  26673  8872				  -	      repeat	($100-<*)
  26674  8872				  -	      .byte	0
  26675  8872				  -	      repend
  26676  8872					      endif
  26677  8872				  -	      if	(<*) < 90
  26678  8872				  -	      repeat	(90-<*)
  26679  8872				  -	      .byte	0
  26680  8872				  -	      repend
  26681  8872					      endif
  26682  8872				   playerL0643_3
  26683  8872		       52		      .byte.b	%01010010
  26684  8873		       ad		      .byte.b	%10101101
  26685  8874		       ad		      .byte.b	%10101101
  26686  8875		       8d		      .byte.b	%10001101
  26687  8876		       8a		      .byte.b	%10001010
  26688  8877				  -	      if	(<*) > (<(*+4))
  26689  8877				  -	      repeat	($100-<*)
  26690  8877				  -	      .byte	0
  26691  8877				  -	      repend
  26692  8877					      endif
  26693  8877				  -	      if	(<*) < 90
  26694  8877				  -	      repeat	(90-<*)
  26695  8877				  -	      .byte	0
  26696  8877				  -	      repend
  26697  8877					      endif
  26698  8877				   playerL0644_4
  26699  8877		       95		      .byte.b	%10010101
  26700  8878		       90		      .byte.b	%10010000
  26701  8879		       b5		      .byte.b	%10110101
  26702  887a		       d5		      .byte.b	%11010101
  26703  887b		       95		      .byte.b	%10010101
  26704  887c				  -	      if	(<*) > (<(*+18))
  26705  887c				  -	      repeat	($100-<*)
  26706  887c				  -	      .byte	0
  26707  887c				  -	      repend
  26708  887c					      endif
  26709  887c				  -	      if	(<*) < 90
  26710  887c				  -	      repeat	(90-<*)
  26711  887c				  -	      .byte	0
  26712  887c				  -	      repend
  26713  887c					      endif
  26714  887c				   playerL0669_0
  26715  887c		       00		      .byte.b	0
  26716  887d		       fc		      .byte.b	%11111100
  26717  887e		       78		      .byte.b	%01111000
  26718  887f		       78		      .byte.b	%01111000
  26719  8880		       78		      .byte.b	%01111000
  26720  8881		       f2		      .byte.b	%11110010
  26721  8882		       f1		      .byte.b	%11110001
  26722  8883		       a1		      .byte.b	%10100001
  26723  8884		       b9		      .byte.b	%10111001
  26724  8885		       d9		      .byte.b	%11011001
  26725  8886		       5d		      .byte.b	%01011101
  26726  8887		       6b		      .byte.b	%01101011
  26727  8888		       bb		      .byte.b	%10111011
  26728  8889		       fd		      .byte.b	%11111101
  26729  888a		       f4		      .byte.b	%11110100
  26730  888b		       f2		      .byte.b	%11110010
  26731  888c		       f6		      .byte.b	%11110110
  26732  888d		       72		      .byte.b	%01110010
  26733  888e		       3c		      .byte.b	%00111100
  26734  888f				  -	      if	(<*) > (<(*+24))
  26735  888f				  -	      repeat	($100-<*)
  26736  888f				  -	      .byte	0
  26737  888f				  -	      repend
  26738  888f					      endif
  26739  888f				  -	      if	(<*) < 90
  26740  888f				  -	      repeat	(90-<*)
  26741  888f				  -	      .byte	0
  26742  888f				  -	      repend
  26743  888f					      endif
  26744  888f				   player269then_0
  26745  888f		       00		      .byte.b	0
  26746  8890		       ff		      .byte.b	%11111111
  26747  8891		       fe		      .byte.b	%11111110
  26748  8892		       fe		      .byte.b	%11111110
  26749  8893		       7e		      .byte.b	%01111110
  26750  8894		       5e		      .byte.b	%01011110
  26751  8895		       5e		      .byte.b	%01011110
  26752  8896		       5f		      .byte.b	%01011111
  26753  8897		       58		      .byte.b	%01011000
  26754  8898		       47		      .byte.b	%01000111
  26755  8899		       5f		      .byte.b	%01011111
  26756  889a		       5e		      .byte.b	%01011110
  26757  889b		       9c		      .byte.b	%10011100
  26758  889c		       be		      .byte.b	%10111110
  26759  889d		       b2		      .byte.b	%10110010
  26760  889e		       b1		      .byte.b	%10110001
  26761  889f		       7b		      .byte.b	%01111011
  26762  88a0		       71		      .byte.b	%01110001
  26763  88a1		       5e		      .byte.b	%01011110
  26764  88a2		       40		      .byte.b	%01000000
  26765  88a3		       40		      .byte.b	%01000000
  26766  88a4		       43		      .byte.b	%01000011
  26767  88a5		       46		      .byte.b	%01000110
  26768  88a6		       4c		      .byte.b	%01001100
  26769  88a7		       78		      .byte.b	%01111000
  26770  88a8				  -	      if	(<*) > (<(*+20))
  26771  88a8				  -	      repeat	($100-<*)
  26772  88a8				  -	      .byte	0
  26773  88a8				  -	      repend
  26774  88a8					      endif
  26775  88a8				  -	      if	(<*) < 90
  26776  88a8				  -	      repeat	(90-<*)
  26777  88a8				  -	      .byte	0
  26778  88a8				  -	      repend
  26779  88a8					      endif
  26780  88a8				   player270then_0
  26781  88a8		       00		      .byte.b	0
  26782  88a9		       fc		      .byte.b	%11111100
  26783  88aa		       7c		      .byte.b	%01111100
  26784  88ab		       3e		      .byte.b	%00111110
  26785  88ac		       3c		      .byte.b	%00111100
  26786  88ad		       78		      .byte.b	%01111000
  26787  88ae		       78		      .byte.b	%01111000
  26788  88af		       fe		      .byte.b	%11111110
  26789  88b0		       82		      .byte.b	%10000010
  26790  88b1		       de		      .byte.b	%11011110
  26791  88b2		       5c		      .byte.b	%01011100
  26792  88b3		       6c		      .byte.b	%01101100
  26793  88b4		       3c		      .byte.b	%00111100
  26794  88b5		       1c		      .byte.b	%00011100
  26795  88b6		       1a		      .byte.b	%00011010
  26796  88b7		       79		      .byte.b	%01111001
  26797  88b8		       7d		      .byte.b	%01111101
  26798  88b9		       f9		      .byte.b	%11111001
  26799  88ba		       fe		      .byte.b	%11111110
  26800  88bb		       f0		      .byte.b	%11110000
  26801  88bc		       00		      .byte.b	%00000000
  26802  88bd				  -	      if	(<*) > (<(*+18))
  26803  88bd				  -	      repeat	($100-<*)
  26804  88bd				  -	      .byte	0
  26805  88bd				  -	      repend
  26806  88bd					      endif
  26807  88bd				  -	      if	(<*) < 90
  26808  88bd				  -	      repeat	(90-<*)
  26809  88bd				  -	      .byte	0
  26810  88bd				  -	      repend
  26811  88bd					      endif
  26812  88bd				   player271then_0
  26813  88bd		       00		      .byte.b	0
  26814  88be		       fc		      .byte.b	%11111100
  26815  88bf		       78		      .byte.b	%01111000
  26816  88c0		       78		      .byte.b	%01111000
  26817  88c1		       30		      .byte.b	%00110000
  26818  88c2		       70		      .byte.b	%01110000
  26819  88c3		       f0		      .byte.b	%11110000
  26820  88c4		       f8		      .byte.b	%11111000
  26821  88c5		       f8		      .byte.b	%11111000
  26822  88c6		       47		      .byte.b	%01000111
  26823  88c7		       7c		      .byte.b	%01111100
  26824  88c8		       3c		      .byte.b	%00111100
  26825  88c9		       58		      .byte.b	%01011000
  26826  88ca		       fc		      .byte.b	%11111100
  26827  88cb		       fa		      .byte.b	%11111010
  26828  88cc		       f9		      .byte.b	%11111001
  26829  88cd		       fb		      .byte.b	%11111011
  26830  88ce		       79		      .byte.b	%01111001
  26831  88cf		       1e		      .byte.b	%00011110
  26832  88d0				  -	      if	(<*) > (<(*+18))
  26833  88d0				  -	      repeat	($100-<*)
  26834  88d0				  -	      .byte	0
  26835  88d0				  -	      repend
  26836  88d0					      endif
  26837  88d0				  -	      if	(<*) < 90
  26838  88d0				  -	      repeat	(90-<*)
  26839  88d0				  -	      .byte	0
  26840  88d0				  -	      repend
  26841  88d0					      endif
  26842  88d0				   player272then_0
  26843  88d0		       00		      .byte.b	0
  26844  88d1		       b8		      .byte.b	%10111000
  26845  88d2		       fc		      .byte.b	%11111100
  26846  88d3		       f8		      .byte.b	%11111000
  26847  88d4		       74		      .byte.b	%01110100
  26848  88d5		       f2		      .byte.b	%11110010
  26849  88d6		       a2		      .byte.b	%10100010
  26850  88d7		       b2		      .byte.b	%10110010
  26851  88d8		       b9		      .byte.b	%10111001
  26852  88d9		       d5		      .byte.b	%11010101
  26853  88da		       db		      .byte.b	%11011011
  26854  88db		       79		      .byte.b	%01111001
  26855  88dc		       38		      .byte.b	%00111000
  26856  88dd		       fe		      .byte.b	%11111110
  26857  88de		       fa		      .byte.b	%11111010
  26858  88df		       f9		      .byte.b	%11111001
  26859  88e0		       7b		      .byte.b	%01111011
  26860  88e1		       39		      .byte.b	%00111001
  26861  88e2		       1e		      .byte.b	%00011110
  26862  88e3				  -	      if	(<*) > (<(*+18))
  26863  88e3				  -	      repeat	($100-<*)
  26864  88e3				  -	      .byte	0
  26865  88e3				  -	      repend
  26866  88e3					      endif
  26867  88e3				  -	      if	(<*) < 90
  26868  88e3				  -	      repeat	(90-<*)
  26869  88e3				  -	      .byte	0
  26870  88e3				  -	      repend
  26871  88e3					      endif
  26872  88e3				   player273then_0
  26873  88e3		       00		      .byte.b	0
  26874  88e4		       f8		      .byte.b	%11111000
  26875  88e5		       e4		      .byte.b	%11100100
  26876  88e6		       72		      .byte.b	%01110010
  26877  88e7		       e1		      .byte.b	%11100001
  26878  88e8		       e6		      .byte.b	%11100110
  26879  88e9		       d8		      .byte.b	%11011000
  26880  88ea		       a0		      .byte.b	%10100000
  26881  88eb		       b0		      .byte.b	%10110000
  26882  88ec		       b8		      .byte.b	%10111000
  26883  88ed		       d8		      .byte.b	%11011000
  26884  88ee		       fc		      .byte.b	%11111100
  26885  88ef		       7e		      .byte.b	%01111110
  26886  88f0		       fa		      .byte.b	%11111010
  26887  88f1		       f9		      .byte.b	%11111001
  26888  88f2		       fb		      .byte.b	%11111011
  26889  88f3		       79		      .byte.b	%01111001
  26890  88f4		       1e		      .byte.b	%00011110
  26891  88f5		       00		      .byte.b	%00000000
  26892  88f6					      if	(<*) > (<(*+18))
  26893  88f6					      repeat	($100-<*)
  26894  88f6		       00		      .byte.b	0
  26893  88f6					      repend
  26894  88f7		       00		      .byte.b	0
  26893  88f7					      repend
  26894  88f8		       00		      .byte.b	0
  26893  88f8					      repend
  26894  88f9		       00		      .byte.b	0
  26893  88f9					      repend
  26894  88fa		       00		      .byte.b	0
  26893  88fa					      repend
  26894  88fb		       00		      .byte.b	0
  26893  88fb					      repend
  26894  88fc		       00		      .byte.b	0
  26893  88fc					      repend
  26894  88fd		       00		      .byte.b	0
  26893  88fd					      repend
  26894  88fe		       00		      .byte.b	0
  26893  88fe					      repend
  26894  88ff		       00		      .byte.b	0
  26895  8900					      repend
  26896  8900					      endif
  26897  8900					      if	(<*) < 90
  26898  8900					      repeat	(90-<*)
  26899  8900		       00		      .byte.b	0
  26898  8900					      repend
  26899  8901		       00		      .byte.b	0
  26898  8901					      repend
  26899  8902		       00		      .byte.b	0
  26898  8902					      repend
  26899  8903		       00		      .byte.b	0
  26898  8903					      repend
  26899  8904		       00		      .byte.b	0
  26898  8904					      repend
  26899  8905		       00		      .byte.b	0
  26898  8905					      repend
  26899  8906		       00		      .byte.b	0
  26898  8906					      repend
  26899  8907		       00		      .byte.b	0
  26898  8907					      repend
  26899  8908		       00		      .byte.b	0
  26898  8908					      repend
  26899  8909		       00		      .byte.b	0
  26898  8909					      repend
  26899  890a		       00		      .byte.b	0
  26898  890a					      repend
  26899  890b		       00		      .byte.b	0
  26898  890b					      repend
  26899  890c		       00		      .byte.b	0
  26898  890c					      repend
  26899  890d		       00		      .byte.b	0
  26898  890d					      repend
  26899  890e		       00		      .byte.b	0
  26898  890e					      repend
  26899  890f		       00		      .byte.b	0
  26898  890f					      repend
  26899  8910		       00		      .byte.b	0
  26898  8910					      repend
  26899  8911		       00		      .byte.b	0
  26898  8911					      repend
  26899  8912		       00		      .byte.b	0
  26898  8912					      repend
  26899  8913		       00		      .byte.b	0
  26898  8913					      repend
  26899  8914		       00		      .byte.b	0
  26898  8914					      repend
  26899  8915		       00		      .byte.b	0
  26898  8915					      repend
  26899  8916		       00		      .byte.b	0
  26898  8916					      repend
  26899  8917		       00		      .byte.b	0
  26898  8917					      repend
  26899  8918		       00		      .byte.b	0
  26898  8918					      repend
  26899  8919		       00		      .byte.b	0
  26898  8919					      repend
  26899  891a		       00		      .byte.b	0
  26898  891a					      repend
  26899  891b		       00		      .byte.b	0
  26898  891b					      repend
  26899  891c		       00		      .byte.b	0
  26898  891c					      repend
  26899  891d		       00		      .byte.b	0
  26898  891d					      repend
  26899  891e		       00		      .byte.b	0
  26898  891e					      repend
  26899  891f		       00		      .byte.b	0
  26898  891f					      repend
  26899  8920		       00		      .byte.b	0
  26898  8920					      repend
  26899  8921		       00		      .byte.b	0
  26898  8921					      repend
  26899  8922		       00		      .byte.b	0
  26898  8922					      repend
  26899  8923		       00		      .byte.b	0
  26898  8923					      repend
  26899  8924		       00		      .byte.b	0
  26898  8924					      repend
  26899  8925		       00		      .byte.b	0
  26898  8925					      repend
  26899  8926		       00		      .byte.b	0
  26898  8926					      repend
  26899  8927		       00		      .byte.b	0
  26898  8927					      repend
  26899  8928		       00		      .byte.b	0
  26898  8928					      repend
  26899  8929		       00		      .byte.b	0
  26898  8929					      repend
  26899  892a		       00		      .byte.b	0
  26898  892a					      repend
  26899  892b		       00		      .byte.b	0
  26898  892b					      repend
  26899  892c		       00		      .byte.b	0
  26898  892c					      repend
  26899  892d		       00		      .byte.b	0
  26898  892d					      repend
  26899  892e		       00		      .byte.b	0
  26898  892e					      repend
  26899  892f		       00		      .byte.b	0
  26898  892f					      repend
  26899  8930		       00		      .byte.b	0
  26898  8930					      repend
  26899  8931		       00		      .byte.b	0
  26898  8931					      repend
  26899  8932		       00		      .byte.b	0
  26898  8932					      repend
  26899  8933		       00		      .byte.b	0
  26898  8933					      repend
  26899  8934		       00		      .byte.b	0
  26898  8934					      repend
  26899  8935		       00		      .byte.b	0
  26898  8935					      repend
  26899  8936		       00		      .byte.b	0
  26898  8936					      repend
  26899  8937		       00		      .byte.b	0
  26898  8937					      repend
  26899  8938		       00		      .byte.b	0
  26898  8938					      repend
  26899  8939		       00		      .byte.b	0
  26898  8939					      repend
  26899  893a		       00		      .byte.b	0
  26898  893a					      repend
  26899  893b		       00		      .byte.b	0
  26898  893b					      repend
  26899  893c		       00		      .byte.b	0
  26898  893c					      repend
  26899  893d		       00		      .byte.b	0
  26898  893d					      repend
  26899  893e		       00		      .byte.b	0
  26898  893e					      repend
  26899  893f		       00		      .byte.b	0
  26898  893f					      repend
  26899  8940		       00		      .byte.b	0
  26898  8940					      repend
  26899  8941		       00		      .byte.b	0
  26898  8941					      repend
  26899  8942		       00		      .byte.b	0
  26898  8942					      repend
  26899  8943		       00		      .byte.b	0
  26898  8943					      repend
  26899  8944		       00		      .byte.b	0
  26898  8944					      repend
  26899  8945		       00		      .byte.b	0
  26898  8945					      repend
  26899  8946		       00		      .byte.b	0
  26898  8946					      repend
  26899  8947		       00		      .byte.b	0
  26898  8947					      repend
  26899  8948		       00		      .byte.b	0
  26898  8948					      repend
  26899  8949		       00		      .byte.b	0
  26898  8949					      repend
  26899  894a		       00		      .byte.b	0
  26898  894a					      repend
  26899  894b		       00		      .byte.b	0
  26898  894b					      repend
  26899  894c		       00		      .byte.b	0
  26898  894c					      repend
  26899  894d		       00		      .byte.b	0
  26898  894d					      repend
  26899  894e		       00		      .byte.b	0
  26898  894e					      repend
  26899  894f		       00		      .byte.b	0
  26898  894f					      repend
  26899  8950		       00		      .byte.b	0
  26898  8950					      repend
  26899  8951		       00		      .byte.b	0
  26898  8951					      repend
  26899  8952		       00		      .byte.b	0
  26898  8952					      repend
  26899  8953		       00		      .byte.b	0
  26898  8953					      repend
  26899  8954		       00		      .byte.b	0
  26898  8954					      repend
  26899  8955		       00		      .byte.b	0
  26898  8955					      repend
  26899  8956		       00		      .byte.b	0
  26898  8956					      repend
  26899  8957		       00		      .byte.b	0
  26898  8957					      repend
  26899  8958		       00		      .byte.b	0
  26898  8958					      repend
  26899  8959		       00		      .byte.b	0
  26900  895a					      repend
  26901  895a					      endif
  26902  895a				   player274then_0
  26903  895a		       00		      .byte.b	0
  26904  895b		       bf		      .byte.b	%10111111
  26905  895c		       de		      .byte.b	%11011110
  26906  895d		       3e		      .byte.b	%00111110
  26907  895e		       1a		      .byte.b	%00011010
  26908  895f		       3e		      .byte.b	%00111110
  26909  8960		       6e		      .byte.b	%01101110
  26910  8961		       36		      .byte.b	%00110110
  26911  8962		       36		      .byte.b	%00110110
  26912  8963		       16		      .byte.b	%00010110
  26913  8964		       54		      .byte.b	%01010100
  26914  8965		       fc		      .byte.b	%11111100
  26915  8966		       f8		      .byte.b	%11111000
  26916  8967		       fe		      .byte.b	%11111110
  26917  8968		       fd		      .byte.b	%11111101
  26918  8969		       fa		      .byte.b	%11111010
  26919  896a		       f1		      .byte.b	%11110001
  26920  896b		       76		      .byte.b	%01110110
  26921  896c		       3c		      .byte.b	%00111100
  26922  896d				  -	      if	(<*) > (<(*+18))
  26923  896d				  -	      repeat	($100-<*)
  26924  896d				  -	      .byte	0
  26925  896d				  -	      repend
  26926  896d					      endif
  26927  896d				  -	      if	(<*) < 90
  26928  896d				  -	      repeat	(90-<*)
  26929  896d				  -	      .byte	0
  26930  896d				  -	      repend
  26931  896d					      endif
  26932  896d				   player275then_0
  26933  896d		       00		      .byte.b	0
  26934  896e		       f8		      .byte.b	%11111000
  26935  896f		       fc		      .byte.b	%11111100
  26936  8970		       7c		      .byte.b	%01111100
  26937  8971		       f8		      .byte.b	%11111000
  26938  8972		       f4		      .byte.b	%11110100
  26939  8973		       a4		      .byte.b	%10100100
  26940  8974		       bc		      .byte.b	%10111100
  26941  8975		       b0		      .byte.b	%10110000
  26942  8976		       bc		      .byte.b	%10111100
  26943  8977		       de		      .byte.b	%11011110
  26944  8978		       79		      .byte.b	%01111001
  26945  8979		       3a		      .byte.b	%00111010
  26946  897a		       79		      .byte.b	%01111001
  26947  897b		       7b		      .byte.b	%01111011
  26948  897c		       f9		      .byte.b	%11111001
  26949  897d		       fe		      .byte.b	%11111110
  26950  897e		       f8		      .byte.b	%11111000
  26951  897f		       e0		      .byte.b	%11100000
  26952  8980				  -	      if	(<*) > (<(*+18))
  26953  8980				  -	      repeat	($100-<*)
  26954  8980				  -	      .byte	0
  26955  8980				  -	      repend
  26956  8980					      endif
  26957  8980				  -	      if	(<*) < 90
  26958  8980				  -	      repeat	(90-<*)
  26959  8980				  -	      .byte	0
  26960  8980				  -	      repend
  26961  8980					      endif
  26962  8980				   player276then_0
  26963  8980		       00		      .byte.b	0
  26964  8981		       ff		      .byte.b	%11111111
  26965  8982		       7f		      .byte.b	%01111111
  26966  8983		       7e		      .byte.b	%01111110
  26967  8984		       76		      .byte.b	%01110110
  26968  8985		       96		      .byte.b	%10010110
  26969  8986		       9a		      .byte.b	%10011010
  26970  8987		       1a		      .byte.b	%00011010
  26971  8988		       16		      .byte.b	%00010110
  26972  8989		       bc		      .byte.b	%10111100
  26973  898a		       f8		      .byte.b	%11111000
  26974  898b		       f8		      .byte.b	%11111000
  26975  898c		       fc		      .byte.b	%11111100
  26976  898d		       f2		      .byte.b	%11110010
  26977  898e		       f1		      .byte.b	%11110001
  26978  898f		       7b		      .byte.b	%01111011
  26979  8990		       79		      .byte.b	%01111001
  26980  8991		       3f		      .byte.b	%00111111
  26981  8992		       1c		      .byte.b	%00011100
  26982  8993				  -	      if	(<*) > (<(*+18))
  26983  8993				  -	      repeat	($100-<*)
  26984  8993				  -	      .byte	0
  26985  8993				  -	      repend
  26986  8993					      endif
  26987  8993				  -	      if	(<*) < 90
  26988  8993				  -	      repeat	(90-<*)
  26989  8993				  -	      .byte	0
  26990  8993				  -	      repend
  26991  8993					      endif
  26992  8993				   player277then_0
  26993  8993		       00		      .byte.b	0
  26994  8994		       fc		      .byte.b	%11111100
  26995  8995		       7e		      .byte.b	%01111110
  26996  8996		       7f		      .byte.b	%01111111
  26997  8997		       5f		      .byte.b	%01011111
  26998  8998		       6e		      .byte.b	%01101110
  26999  8999		       36		      .byte.b	%00110110
  27000  899a		       16		      .byte.b	%00010110
  27001  899b		       36		      .byte.b	%00110110
  27002  899c		       7c		      .byte.b	%01111100
  27003  899d		       7c		      .byte.b	%01111100
  27004  899e		       f8		      .byte.b	%11111000
  27005  899f		       f6		      .byte.b	%11110110
  27006  89a0		       f3		      .byte.b	%11110011
  27007  89a1		       f9		      .byte.b	%11111001
  27008  89a2		       ff		      .byte.b	%11111111
  27009  89a3		       ff		      .byte.b	%11111111
  27010  89a4		       3c		      .byte.b	%00111100
  27011  89a5		       00		      .byte.b	%00000000
  27012  89a6				  -	      if	(<*) > (<(*+18))
  27013  89a6				  -	      repeat	($100-<*)
  27014  89a6				  -	      .byte	0
  27015  89a6				  -	      repend
  27016  89a6					      endif
  27017  89a6				  -	      if	(<*) < 90
  27018  89a6				  -	      repeat	(90-<*)
  27019  89a6				  -	      .byte	0
  27020  89a6				  -	      repend
  27021  89a6					      endif
  27022  89a6				   playerL0682_0
  27023  89a6		       00		      .byte.b	0
  27024  89a7		       00		      .byte.b	%00000000
  27025  89a8		       df		      .byte.b	%11011111
  27026  89a9		       9f		      .byte.b	%10011111
  27027  89aa		       4f		      .byte.b	%01001111
  27028  89ab		       56		      .byte.b	%01010110
  27029  89ac		       54		      .byte.b	%01010100
  27030  89ad		       7c		      .byte.b	%01111100
  27031  89ae		       de		      .byte.b	%11011110
  27032  89af		       dd		      .byte.b	%11011101
  27033  89b0		       5f		      .byte.b	%01011111
  27034  89b1		       5d		      .byte.b	%01011101
  27035  89b2		       3f		      .byte.b	%00111111
  27036  89b3		       20		      .byte.b	%00100000
  27037  89b4		       20		      .byte.b	%00100000
  27038  89b5		       20		      .byte.b	%00100000
  27039  89b6		       21		      .byte.b	%00100001
  27040  89b7		       62		      .byte.b	%01100010
  27041  89b8		       3c		      .byte.b	%00111100
  27042  89b9				  -	      if	(<*) > (<(*+25))
  27043  89b9				  -	      repeat	($100-<*)
  27044  89b9				  -	      .byte	0
  27045  89b9				  -	      repend
  27046  89b9					      endif
  27047  89b9				  -	      if	(<*) < 90
  27048  89b9				  -	      repeat	(90-<*)
  27049  89b9				  -	      .byte	0
  27050  89b9				  -	      repend
  27051  89b9					      endif
  27052  89b9				   player278then_0
  27053  89b9		       00		      .byte.b	0
  27054  89ba		       f0		      .byte.b	%11110000
  27055  89bb		       f0		      .byte.b	%11110000
  27056  89bc		       fc		      .byte.b	%11111100
  27057  89bd		       7e		      .byte.b	%01111110
  27058  89be		       3e		      .byte.b	%00111110
  27059  89bf		       3e		      .byte.b	%00111110
  27060  89c0		       7c		      .byte.b	%01111100
  27061  89c1		       7c		      .byte.b	%01111100
  27062  89c2		       78		      .byte.b	%01111000
  27063  89c3		       b0		      .byte.b	%10110000
  27064  89c4		       b8		      .byte.b	%10111000
  27065  89c5		       8c		      .byte.b	%10001100
  27066  89c6		       7c		      .byte.b	%01111100
  27067  89c7		       78		      .byte.b	%01111000
  27068  89c8		       bc		      .byte.b	%10111100
  27069  89c9		       be		      .byte.b	%10111110
  27070  89ca		       bd		      .byte.b	%10111101
  27071  89cb		       7f		      .byte.b	%01111111
  27072  89cc		       7d		      .byte.b	%01111101
  27073  89cd		       5e		      .byte.b	%01011110
  27074  89ce		       40		      .byte.b	%01000000
  27075  89cf		       40		      .byte.b	%01000000
  27076  89d0		       41		      .byte.b	%01000001
  27077  89d1		       62		      .byte.b	%01100010
  27078  89d2		       fc		      .byte.b	%11111100
  27079  89d3				  -	      if	(<*) > (<(*+25))
  27080  89d3				  -	      repeat	($100-<*)
  27081  89d3				  -	      .byte	0
  27082  89d3				  -	      repend
  27083  89d3					      endif
  27084  89d3				  -	      if	(<*) < 90
  27085  89d3				  -	      repeat	(90-<*)
  27086  89d3				  -	      .byte	0
  27087  89d3				  -	      repend
  27088  89d3					      endif
  27089  89d3				   player279then_0
  27090  89d3		       00		      .byte.b	0
  27091  89d4		       3f		      .byte.b	%00111111
  27092  89d5		       3e		      .byte.b	%00111110
  27093  89d6		       1f		      .byte.b	%00011111
  27094  89d7		       1f		      .byte.b	%00011111
  27095  89d8		       37		      .byte.b	%00110111
  27096  89d9		       36		      .byte.b	%00110110
  27097  89da		       36		      .byte.b	%00110110
  27098  89db		       34		      .byte.b	%00110100
  27099  89dc		       64		      .byte.b	%01100100
  27100  89dd		       44		      .byte.b	%01000100
  27101  89de		       48		      .byte.b	%01001000
  27102  89df		       4c		      .byte.b	%01001100
  27103  89e0		       4c		      .byte.b	%01001100
  27104  89e1		       68		      .byte.b	%01101000
  27105  89e2		       2e		      .byte.b	%00101110
  27106  89e3		       5d		      .byte.b	%01011101
  27107  89e4		       df		      .byte.b	%11011111
  27108  89e5		       dd		      .byte.b	%11011101
  27109  89e6		       fe		      .byte.b	%11111110
  27110  89e7		       60		      .byte.b	%01100000
  27111  89e8		       20		      .byte.b	%00100000
  27112  89e9		       40		      .byte.b	%01000000
  27113  89ea		       40		      .byte.b	%01000000
  27114  89eb		       e1		      .byte.b	%11100001
  27115  89ec		       7e		      .byte.b	%01111110
  27116  89ed					      if	(<*) > (<(*+25))
  27117  89ed					      repeat	($100-<*)
  27118  89ed		       00		      .byte.b	0
  27117  89ed					      repend
  27118  89ee		       00		      .byte.b	0
  27117  89ee					      repend
  27118  89ef		       00		      .byte.b	0
  27117  89ef					      repend
  27118  89f0		       00		      .byte.b	0
  27117  89f0					      repend
  27118  89f1		       00		      .byte.b	0
  27117  89f1					      repend
  27118  89f2		       00		      .byte.b	0
  27117  89f2					      repend
  27118  89f3		       00		      .byte.b	0
  27117  89f3					      repend
  27118  89f4		       00		      .byte.b	0
  27117  89f4					      repend
  27118  89f5		       00		      .byte.b	0
  27117  89f5					      repend
  27118  89f6		       00		      .byte.b	0
  27117  89f6					      repend
  27118  89f7		       00		      .byte.b	0
  27117  89f7					      repend
  27118  89f8		       00		      .byte.b	0
  27117  89f8					      repend
  27118  89f9		       00		      .byte.b	0
  27117  89f9					      repend
  27118  89fa		       00		      .byte.b	0
  27117  89fa					      repend
  27118  89fb		       00		      .byte.b	0
  27117  89fb					      repend
  27118  89fc		       00		      .byte.b	0
  27117  89fc					      repend
  27118  89fd		       00		      .byte.b	0
  27117  89fd					      repend
  27118  89fe		       00		      .byte.b	0
  27117  89fe					      repend
  27118  89ff		       00		      .byte.b	0
  27119  8a00					      repend
  27120  8a00					      endif
  27121  8a00					      if	(<*) < 90
  27122  8a00					      repeat	(90-<*)
  27123  8a00		       00		      .byte.b	0
  27122  8a00					      repend
  27123  8a01		       00		      .byte.b	0
  27122  8a01					      repend
  27123  8a02		       00		      .byte.b	0
  27122  8a02					      repend
  27123  8a03		       00		      .byte.b	0
  27122  8a03					      repend
  27123  8a04		       00		      .byte.b	0
  27122  8a04					      repend
  27123  8a05		       00		      .byte.b	0
  27122  8a05					      repend
  27123  8a06		       00		      .byte.b	0
  27122  8a06					      repend
  27123  8a07		       00		      .byte.b	0
  27122  8a07					      repend
  27123  8a08		       00		      .byte.b	0
  27122  8a08					      repend
  27123  8a09		       00		      .byte.b	0
  27122  8a09					      repend
  27123  8a0a		       00		      .byte.b	0
  27122  8a0a					      repend
  27123  8a0b		       00		      .byte.b	0
  27122  8a0b					      repend
  27123  8a0c		       00		      .byte.b	0
  27122  8a0c					      repend
  27123  8a0d		       00		      .byte.b	0
  27122  8a0d					      repend
  27123  8a0e		       00		      .byte.b	0
  27122  8a0e					      repend
  27123  8a0f		       00		      .byte.b	0
  27122  8a0f					      repend
  27123  8a10		       00		      .byte.b	0
  27122  8a10					      repend
  27123  8a11		       00		      .byte.b	0
  27122  8a11					      repend
  27123  8a12		       00		      .byte.b	0
  27122  8a12					      repend
  27123  8a13		       00		      .byte.b	0
  27122  8a13					      repend
  27123  8a14		       00		      .byte.b	0
  27122  8a14					      repend
  27123  8a15		       00		      .byte.b	0
  27122  8a15					      repend
  27123  8a16		       00		      .byte.b	0
  27122  8a16					      repend
  27123  8a17		       00		      .byte.b	0
  27122  8a17					      repend
  27123  8a18		       00		      .byte.b	0
  27122  8a18					      repend
  27123  8a19		       00		      .byte.b	0
  27122  8a19					      repend
  27123  8a1a		       00		      .byte.b	0
  27122  8a1a					      repend
  27123  8a1b		       00		      .byte.b	0
  27122  8a1b					      repend
  27123  8a1c		       00		      .byte.b	0
  27122  8a1c					      repend
  27123  8a1d		       00		      .byte.b	0
  27122  8a1d					      repend
  27123  8a1e		       00		      .byte.b	0
  27122  8a1e					      repend
  27123  8a1f		       00		      .byte.b	0
  27122  8a1f					      repend
  27123  8a20		       00		      .byte.b	0
  27122  8a20					      repend
  27123  8a21		       00		      .byte.b	0
  27122  8a21					      repend
  27123  8a22		       00		      .byte.b	0
  27122  8a22					      repend
  27123  8a23		       00		      .byte.b	0
  27122  8a23					      repend
  27123  8a24		       00		      .byte.b	0
  27122  8a24					      repend
  27123  8a25		       00		      .byte.b	0
  27122  8a25					      repend
  27123  8a26		       00		      .byte.b	0
  27122  8a26					      repend
  27123  8a27		       00		      .byte.b	0
  27122  8a27					      repend
  27123  8a28		       00		      .byte.b	0
  27122  8a28					      repend
  27123  8a29		       00		      .byte.b	0
  27122  8a29					      repend
  27123  8a2a		       00		      .byte.b	0
  27122  8a2a					      repend
  27123  8a2b		       00		      .byte.b	0
  27122  8a2b					      repend
  27123  8a2c		       00		      .byte.b	0
  27122  8a2c					      repend
  27123  8a2d		       00		      .byte.b	0
  27122  8a2d					      repend
  27123  8a2e		       00		      .byte.b	0
  27122  8a2e					      repend
  27123  8a2f		       00		      .byte.b	0
  27122  8a2f					      repend
  27123  8a30		       00		      .byte.b	0
  27122  8a30					      repend
  27123  8a31		       00		      .byte.b	0
  27122  8a31					      repend
  27123  8a32		       00		      .byte.b	0
  27122  8a32					      repend
  27123  8a33		       00		      .byte.b	0
  27122  8a33					      repend
  27123  8a34		       00		      .byte.b	0
  27122  8a34					      repend
  27123  8a35		       00		      .byte.b	0
  27122  8a35					      repend
  27123  8a36		       00		      .byte.b	0
  27122  8a36					      repend
  27123  8a37		       00		      .byte.b	0
  27122  8a37					      repend
  27123  8a38		       00		      .byte.b	0
  27122  8a38					      repend
  27123  8a39		       00		      .byte.b	0
  27122  8a39					      repend
  27123  8a3a		       00		      .byte.b	0
  27122  8a3a					      repend
  27123  8a3b		       00		      .byte.b	0
  27122  8a3b					      repend
  27123  8a3c		       00		      .byte.b	0
  27122  8a3c					      repend
  27123  8a3d		       00		      .byte.b	0
  27122  8a3d					      repend
  27123  8a3e		       00		      .byte.b	0
  27122  8a3e					      repend
  27123  8a3f		       00		      .byte.b	0
  27122  8a3f					      repend
  27123  8a40		       00		      .byte.b	0
  27122  8a40					      repend
  27123  8a41		       00		      .byte.b	0
  27122  8a41					      repend
  27123  8a42		       00		      .byte.b	0
  27122  8a42					      repend
  27123  8a43		       00		      .byte.b	0
  27122  8a43					      repend
  27123  8a44		       00		      .byte.b	0
  27122  8a44					      repend
  27123  8a45		       00		      .byte.b	0
  27122  8a45					      repend
  27123  8a46		       00		      .byte.b	0
  27122  8a46					      repend
  27123  8a47		       00		      .byte.b	0
  27122  8a47					      repend
  27123  8a48		       00		      .byte.b	0
  27122  8a48					      repend
  27123  8a49		       00		      .byte.b	0
  27122  8a49					      repend
  27123  8a4a		       00		      .byte.b	0
  27122  8a4a					      repend
  27123  8a4b		       00		      .byte.b	0
  27122  8a4b					      repend
  27123  8a4c		       00		      .byte.b	0
  27122  8a4c					      repend
  27123  8a4d		       00		      .byte.b	0
  27122  8a4d					      repend
  27123  8a4e		       00		      .byte.b	0
  27122  8a4e					      repend
  27123  8a4f		       00		      .byte.b	0
  27122  8a4f					      repend
  27123  8a50		       00		      .byte.b	0
  27122  8a50					      repend
  27123  8a51		       00		      .byte.b	0
  27122  8a51					      repend
  27123  8a52		       00		      .byte.b	0
  27122  8a52					      repend
  27123  8a53		       00		      .byte.b	0
  27122  8a53					      repend
  27123  8a54		       00		      .byte.b	0
  27122  8a54					      repend
  27123  8a55		       00		      .byte.b	0
  27122  8a55					      repend
  27123  8a56		       00		      .byte.b	0
  27122  8a56					      repend
  27123  8a57		       00		      .byte.b	0
  27122  8a57					      repend
  27123  8a58		       00		      .byte.b	0
  27122  8a58					      repend
  27123  8a59		       00		      .byte.b	0
  27124  8a5a					      repend
  27125  8a5a					      endif
  27126  8a5a				   player280then_0
  27127  8a5a		       00		      .byte.b	0
  27128  8a5b		       f8		      .byte.b	%11111000
  27129  8a5c		       fc		      .byte.b	%11111100
  27130  8a5d		       fc		      .byte.b	%11111100
  27131  8a5e		       fc		      .byte.b	%11111100
  27132  8a5f		       7c		      .byte.b	%01111100
  27133  8a60		       7c		      .byte.b	%01111100
  27134  8a61		       f8		      .byte.b	%11111000
  27135  8a62		       f8		      .byte.b	%11111000
  27136  8a63		       f8		      .byte.b	%11111000
  27137  8a64		       f0		      .byte.b	%11110000
  27138  8a65		       b8		      .byte.b	%10111000
  27139  8a66		       bc		      .byte.b	%10111100
  27140  8a67		       cc		      .byte.b	%11001100
  27141  8a68		       d8		      .byte.b	%11011000
  27142  8a69		       fc		      .byte.b	%11111100
  27143  8a6a		       fc		      .byte.b	%11111100
  27144  8a6b		       fe		      .byte.b	%11111110
  27145  8a6c		       fd		      .byte.b	%11111101
  27146  8a6d		       ff		      .byte.b	%11111111
  27147  8a6e		       fd		      .byte.b	%11111101
  27148  8a6f		       9f		      .byte.b	%10011111
  27149  8a70		       81		      .byte.b	%10000001
  27150  8a71		       4e		      .byte.b	%01001110
  27151  8a72		       78		      .byte.b	%01111000
  27152  8a73		       e0		      .byte.b	%11100000
  27153  8a74				  -	      if	(<*) > (<(*+25))
  27154  8a74				  -	      repeat	($100-<*)
  27155  8a74				  -	      .byte	0
  27156  8a74				  -	      repend
  27157  8a74					      endif
  27158  8a74				  -	      if	(<*) < 90
  27159  8a74				  -	      repeat	(90-<*)
  27160  8a74				  -	      .byte	0
  27161  8a74				  -	      repend
  27162  8a74					      endif
  27163  8a74				   playerL0688_0
  27164  8a74		       00		      .byte.b	0
  27165  8a75		       fc		      .byte.b	%11111100
  27166  8a76		       78		      .byte.b	%01111000
  27167  8a77		       78		      .byte.b	%01111000
  27168  8a78		       f8		      .byte.b	%11111000
  27169  8a79		       f8		      .byte.b	%11111000
  27170  8a7a		       b8		      .byte.b	%10111000
  27171  8a7b		       b8		      .byte.b	%10111000
  27172  8a7c		       bb		      .byte.b	%10111011
  27173  8a7d		       ef		      .byte.b	%11101111
  27174  8a7e		       9f		      .byte.b	%10011111
  27175  8a7f		       b1		      .byte.b	%10110001
  27176  8a80		       78		      .byte.b	%01111000
  27177  8a81		       f8		      .byte.b	%11111000
  27178  8a82		       f4		      .byte.b	%11110100
  27179  8a83		       e4		      .byte.b	%11100100
  27180  8a84		       ec		      .byte.b	%11101100
  27181  8a85		       e4		      .byte.b	%11100100
  27182  8a86		       b8		      .byte.b	%10111000
  27183  8a87		       80		      .byte.b	%10000000
  27184  8a88		       80		      .byte.b	%10000000
  27185  8a89		       80		      .byte.b	%10000000
  27186  8a8a		       80		      .byte.b	%10000000
  27187  8a8b		       82		      .byte.b	%10000010
  27188  8a8c		       c4		      .byte.b	%11000100
  27189  8a8d		       f8		      .byte.b	%11111000
  27190  8a8e				  -	      if	(<*) > (<(*+25))
  27191  8a8e				  -	      repeat	($100-<*)
  27192  8a8e				  -	      .byte	0
  27193  8a8e				  -	      repend
  27194  8a8e					      endif
  27195  8a8e				  -	      if	(<*) < 90
  27196  8a8e				  -	      repeat	(90-<*)
  27197  8a8e				  -	      .byte	0
  27198  8a8e				  -	      repend
  27199  8a8e					      endif
  27200  8a8e				   playerL0690_0
  27201  8a8e		       00		      .byte.b	0
  27202  8a8f		       fc		      .byte.b	%11111100
  27203  8a90		       78		      .byte.b	%01111000
  27204  8a91		       78		      .byte.b	%01111000
  27205  8a92		       f8		      .byte.b	%11111000
  27206  8a93		       f8		      .byte.b	%11111000
  27207  8a94		       b8		      .byte.b	%10111000
  27208  8a95		       b8		      .byte.b	%10111000
  27209  8a96		       b8		      .byte.b	%10111000
  27210  8a97		       ed		      .byte.b	%11101101
  27211  8a98		       9f		      .byte.b	%10011111
  27212  8a99		       b7		      .byte.b	%10110111
  27213  8a9a		       7b		      .byte.b	%01111011
  27214  8a9b		       fb		      .byte.b	%11111011
  27215  8a9c		       fa		      .byte.b	%11111010
  27216  8a9d		       e4		      .byte.b	%11100100
  27217  8a9e		       d4		      .byte.b	%11010100
  27218  8a9f		       c8		      .byte.b	%11001000
  27219  8aa0		       b0		      .byte.b	%10110000
  27220  8aa1		       80		      .byte.b	%10000000
  27221  8aa2		       80		      .byte.b	%10000000
  27222  8aa3		       80		      .byte.b	%10000000
  27223  8aa4		       80		      .byte.b	%10000000
  27224  8aa5		       82		      .byte.b	%10000010
  27225  8aa6		       c4		      .byte.b	%11000100
  27226  8aa7		       f8		      .byte.b	%11111000
  27227  8aa8				  -	      if	(<*) > (<(*+25))
  27228  8aa8				  -	      repeat	($100-<*)
  27229  8aa8				  -	      .byte	0
  27230  8aa8				  -	      repend
  27231  8aa8					      endif
  27232  8aa8				  -	      if	(<*) < 90
  27233  8aa8				  -	      repeat	(90-<*)
  27234  8aa8				  -	      .byte	0
  27235  8aa8				  -	      repend
  27236  8aa8					      endif
  27237  8aa8				   playerL0692_0
  27238  8aa8		       00		      .byte.b	0
  27239  8aa9		       10		      .byte.b	%00010000
  27240  8aaa		       2c		      .byte.b	%00101100
  27241  8aab		       3e		      .byte.b	%00111110
  27242  8aac		       3e		      .byte.b	%00111110
  27243  8aad		       7f		      .byte.b	%01111111
  27244  8aae		       1f		      .byte.b	%00011111
  27245  8aaf		       0f		      .byte.b	%00001111
  27246  8ab0		       1e		      .byte.b	%00011110
  27247  8ab1		       1d		      .byte.b	%00011101
  27248  8ab2		       3d		      .byte.b	%00111101
  27249  8ab3		       7d		      .byte.b	%01111101
  27250  8ab4		       7f		      .byte.b	%01111111
  27251  8ab5		       3e		      .byte.b	%00111110
  27252  8ab6		       3a		      .byte.b	%00111010
  27253  8ab7		       5a		      .byte.b	%01011010
  27254  8ab8		       f6		      .byte.b	%11110110
  27255  8ab9		       f4		      .byte.b	%11110100
  27256  8aba		       e8		      .byte.b	%11101000
  27257  8abb		       ec		      .byte.b	%11101100
  27258  8abc		       5a		      .byte.b	%01011010
  27259  8abd		       72		      .byte.b	%01110010
  27260  8abe		       ac		      .byte.b	%10101100
  27261  8abf		       98		      .byte.b	%10011000
  27262  8ac0		       42		      .byte.b	%01000010
  27263  8ac1		       3c		      .byte.b	%00111100
  27264  8ac2				  -	      if	(<*) > (<(*+25))
  27265  8ac2				  -	      repeat	($100-<*)
  27266  8ac2				  -	      .byte	0
  27267  8ac2				  -	      repend
  27268  8ac2					      endif
  27269  8ac2				  -	      if	(<*) < 90
  27270  8ac2				  -	      repeat	(90-<*)
  27271  8ac2				  -	      .byte	0
  27272  8ac2				  -	      repend
  27273  8ac2					      endif
  27274  8ac2				   playerL0694_0
  27275  8ac2		       00		      .byte.b	0
  27276  8ac3		       38		      .byte.b	%00111000
  27277  8ac4		       7f		      .byte.b	%01111111
  27278  8ac5		       ff		      .byte.b	%11111111
  27279  8ac6		       7f		      .byte.b	%01111111
  27280  8ac7		       9f		      .byte.b	%10011111
  27281  8ac8		       9f		      .byte.b	%10011111
  27282  8ac9		       7f		      .byte.b	%01111111
  27283  8aca		       63		      .byte.b	%01100011
  27284  8acb		       3d		      .byte.b	%00111101
  27285  8acc		       5e		      .byte.b	%01011110
  27286  8acd		       5e		      .byte.b	%01011110
  27287  8ace		       52		      .byte.b	%01010010
  27288  8acf		       75		      .byte.b	%01110101
  27289  8ad0		       3b		      .byte.b	%00111011
  27290  8ad1		       17		      .byte.b	%00010111
  27291  8ad2		       16		      .byte.b	%00010110
  27292  8ad3		       16		      .byte.b	%00010110
  27293  8ad4		       1c		      .byte.b	%00011100
  27294  8ad5		       3c		      .byte.b	%00111100
  27295  8ad6		       3c		      .byte.b	%00111100
  27296  8ad7		       02		      .byte.b	%00000010
  27297  8ad8		       02		      .byte.b	%00000010
  27298  8ad9		       82		      .byte.b	%10000010
  27299  8ada		       43		      .byte.b	%01000011
  27300  8adb		       3f		      .byte.b	%00111111
  27301  8adc				  -	      if	(<*) > (<(*+22))
  27302  8adc				  -	      repeat	($100-<*)
  27303  8adc				  -	      .byte	0
  27304  8adc				  -	      repend
  27305  8adc					      endif
  27306  8adc				  -	      if	(<*) < 90
  27307  8adc				  -	      repeat	(90-<*)
  27308  8adc				  -	      .byte	0
  27309  8adc				  -	      repend
  27310  8adc					      endif
  27311  8adc				   playerL0696_0
  27312  8adc		       00		      .byte.b	0
  27313  8add		       fc		      .byte.b	%11111100
  27314  8ade		       c2		      .byte.b	%11000010
  27315  8adf		       99		      .byte.b	%10011001
  27316  8ae0		       9d		      .byte.b	%10011101
  27317  8ae1		       be		      .byte.b	%10111110
  27318  8ae2		       be		      .byte.b	%10111110
  27319  8ae3		       be		      .byte.b	%10111110
  27320  8ae4		       be		      .byte.b	%10111110
  27321  8ae5		       be		      .byte.b	%10111110
  27322  8ae6		       ec		      .byte.b	%11101100
  27323  8ae7		       94		      .byte.b	%10010100
  27324  8ae8		       ba		      .byte.b	%10111010
  27325  8ae9		       fe		      .byte.b	%11111110
  27326  8aea		       9c		      .byte.b	%10011100
  27327  8aeb		       a2		      .byte.b	%10100010
  27328  8aec		       b6		      .byte.b	%10110110
  27329  8aed		       a2		      .byte.b	%10100010
  27330  8aee		       be		      .byte.b	%10111110
  27331  8aef		       be		      .byte.b	%10111110
  27332  8af0		       9c		      .byte.b	%10011100
  27333  8af1		       9c		      .byte.b	%10011100
  27334  8af2		       08		      .byte.b	%00001000
  27335  8af3					      if	(<*) > (<(*+25))
  27336  8af3					      repeat	($100-<*)
  27337  8af3		       00		      .byte.b	0
  27336  8af3					      repend
  27337  8af4		       00		      .byte.b	0
  27336  8af4					      repend
  27337  8af5		       00		      .byte.b	0
  27336  8af5					      repend
  27337  8af6		       00		      .byte.b	0
  27336  8af6					      repend
  27337  8af7		       00		      .byte.b	0
  27336  8af7					      repend
  27337  8af8		       00		      .byte.b	0
  27336  8af8					      repend
  27337  8af9		       00		      .byte.b	0
  27336  8af9					      repend
  27337  8afa		       00		      .byte.b	0
  27336  8afa					      repend
  27337  8afb		       00		      .byte.b	0
  27336  8afb					      repend
  27337  8afc		       00		      .byte.b	0
  27336  8afc					      repend
  27337  8afd		       00		      .byte.b	0
  27336  8afd					      repend
  27337  8afe		       00		      .byte.b	0
  27336  8afe					      repend
  27337  8aff		       00		      .byte.b	0
  27338  8b00					      repend
  27339  8b00					      endif
  27340  8b00					      if	(<*) < 90
  27341  8b00					      repeat	(90-<*)
  27342  8b00		       00		      .byte.b	0
  27341  8b00					      repend
  27342  8b01		       00		      .byte.b	0
  27341  8b01					      repend
  27342  8b02		       00		      .byte.b	0
  27341  8b02					      repend
  27342  8b03		       00		      .byte.b	0
  27341  8b03					      repend
  27342  8b04		       00		      .byte.b	0
  27341  8b04					      repend
  27342  8b05		       00		      .byte.b	0
  27341  8b05					      repend
  27342  8b06		       00		      .byte.b	0
  27341  8b06					      repend
  27342  8b07		       00		      .byte.b	0
  27341  8b07					      repend
  27342  8b08		       00		      .byte.b	0
  27341  8b08					      repend
  27342  8b09		       00		      .byte.b	0
  27341  8b09					      repend
  27342  8b0a		       00		      .byte.b	0
  27341  8b0a					      repend
  27342  8b0b		       00		      .byte.b	0
  27341  8b0b					      repend
  27342  8b0c		       00		      .byte.b	0
  27341  8b0c					      repend
  27342  8b0d		       00		      .byte.b	0
  27341  8b0d					      repend
  27342  8b0e		       00		      .byte.b	0
  27341  8b0e					      repend
  27342  8b0f		       00		      .byte.b	0
  27341  8b0f					      repend
  27342  8b10		       00		      .byte.b	0
  27341  8b10					      repend
  27342  8b11		       00		      .byte.b	0
  27341  8b11					      repend
  27342  8b12		       00		      .byte.b	0
  27341  8b12					      repend
  27342  8b13		       00		      .byte.b	0
  27341  8b13					      repend
  27342  8b14		       00		      .byte.b	0
  27341  8b14					      repend
  27342  8b15		       00		      .byte.b	0
  27341  8b15					      repend
  27342  8b16		       00		      .byte.b	0
  27341  8b16					      repend
  27342  8b17		       00		      .byte.b	0
  27341  8b17					      repend
  27342  8b18		       00		      .byte.b	0
  27341  8b18					      repend
  27342  8b19		       00		      .byte.b	0
  27341  8b19					      repend
  27342  8b1a		       00		      .byte.b	0
  27341  8b1a					      repend
  27342  8b1b		       00		      .byte.b	0
  27341  8b1b					      repend
  27342  8b1c		       00		      .byte.b	0
  27341  8b1c					      repend
  27342  8b1d		       00		      .byte.b	0
  27341  8b1d					      repend
  27342  8b1e		       00		      .byte.b	0
  27341  8b1e					      repend
  27342  8b1f		       00		      .byte.b	0
  27341  8b1f					      repend
  27342  8b20		       00		      .byte.b	0
  27341  8b20					      repend
  27342  8b21		       00		      .byte.b	0
  27341  8b21					      repend
  27342  8b22		       00		      .byte.b	0
  27341  8b22					      repend
  27342  8b23		       00		      .byte.b	0
  27341  8b23					      repend
  27342  8b24		       00		      .byte.b	0
  27341  8b24					      repend
  27342  8b25		       00		      .byte.b	0
  27341  8b25					      repend
  27342  8b26		       00		      .byte.b	0
  27341  8b26					      repend
  27342  8b27		       00		      .byte.b	0
  27341  8b27					      repend
  27342  8b28		       00		      .byte.b	0
  27341  8b28					      repend
  27342  8b29		       00		      .byte.b	0
  27341  8b29					      repend
  27342  8b2a		       00		      .byte.b	0
  27341  8b2a					      repend
  27342  8b2b		       00		      .byte.b	0
  27341  8b2b					      repend
  27342  8b2c		       00		      .byte.b	0
  27341  8b2c					      repend
  27342  8b2d		       00		      .byte.b	0
  27341  8b2d					      repend
  27342  8b2e		       00		      .byte.b	0
  27341  8b2e					      repend
  27342  8b2f		       00		      .byte.b	0
  27341  8b2f					      repend
  27342  8b30		       00		      .byte.b	0
  27341  8b30					      repend
  27342  8b31		       00		      .byte.b	0
  27341  8b31					      repend
  27342  8b32		       00		      .byte.b	0
  27341  8b32					      repend
  27342  8b33		       00		      .byte.b	0
  27341  8b33					      repend
  27342  8b34		       00		      .byte.b	0
  27341  8b34					      repend
  27342  8b35		       00		      .byte.b	0
  27341  8b35					      repend
  27342  8b36		       00		      .byte.b	0
  27341  8b36					      repend
  27342  8b37		       00		      .byte.b	0
  27341  8b37					      repend
  27342  8b38		       00		      .byte.b	0
  27341  8b38					      repend
  27342  8b39		       00		      .byte.b	0
  27341  8b39					      repend
  27342  8b3a		       00		      .byte.b	0
  27341  8b3a					      repend
  27342  8b3b		       00		      .byte.b	0
  27341  8b3b					      repend
  27342  8b3c		       00		      .byte.b	0
  27341  8b3c					      repend
  27342  8b3d		       00		      .byte.b	0
  27341  8b3d					      repend
  27342  8b3e		       00		      .byte.b	0
  27341  8b3e					      repend
  27342  8b3f		       00		      .byte.b	0
  27341  8b3f					      repend
  27342  8b40		       00		      .byte.b	0
  27341  8b40					      repend
  27342  8b41		       00		      .byte.b	0
  27341  8b41					      repend
  27342  8b42		       00		      .byte.b	0
  27341  8b42					      repend
  27342  8b43		       00		      .byte.b	0
  27341  8b43					      repend
  27342  8b44		       00		      .byte.b	0
  27341  8b44					      repend
  27342  8b45		       00		      .byte.b	0
  27341  8b45					      repend
  27342  8b46		       00		      .byte.b	0
  27341  8b46					      repend
  27342  8b47		       00		      .byte.b	0
  27341  8b47					      repend
  27342  8b48		       00		      .byte.b	0
  27341  8b48					      repend
  27342  8b49		       00		      .byte.b	0
  27341  8b49					      repend
  27342  8b4a		       00		      .byte.b	0
  27341  8b4a					      repend
  27342  8b4b		       00		      .byte.b	0
  27341  8b4b					      repend
  27342  8b4c		       00		      .byte.b	0
  27341  8b4c					      repend
  27342  8b4d		       00		      .byte.b	0
  27341  8b4d					      repend
  27342  8b4e		       00		      .byte.b	0
  27341  8b4e					      repend
  27342  8b4f		       00		      .byte.b	0
  27341  8b4f					      repend
  27342  8b50		       00		      .byte.b	0
  27341  8b50					      repend
  27342  8b51		       00		      .byte.b	0
  27341  8b51					      repend
  27342  8b52		       00		      .byte.b	0
  27341  8b52					      repend
  27342  8b53		       00		      .byte.b	0
  27341  8b53					      repend
  27342  8b54		       00		      .byte.b	0
  27341  8b54					      repend
  27342  8b55		       00		      .byte.b	0
  27341  8b55					      repend
  27342  8b56		       00		      .byte.b	0
  27341  8b56					      repend
  27342  8b57		       00		      .byte.b	0
  27341  8b57					      repend
  27342  8b58		       00		      .byte.b	0
  27341  8b58					      repend
  27342  8b59		       00		      .byte.b	0
  27343  8b5a					      repend
  27344  8b5a					      endif
  27345  8b5a				   playerL0719_0
  27346  8b5a		       00		      .byte.b	0
  27347  8b5b		       60		      .byte.b	%01100000
  27348  8b5c		       7c		      .byte.b	%01111100
  27349  8b5d		       7e		      .byte.b	%01111110
  27350  8b5e		       3e		      .byte.b	%00111110
  27351  8b5f		       7c		      .byte.b	%01111100
  27352  8b60		       f8		      .byte.b	%11111000
  27353  8b61		       f0		      .byte.b	%11110000
  27354  8b62		       e0		      .byte.b	%11100000
  27355  8b63		       f0		      .byte.b	%11110000
  27356  8b64		       50		      .byte.b	%01010000
  27357  8b65		       d0		      .byte.b	%11010000
  27358  8b66		       d8		      .byte.b	%11011000
  27359  8b67		       d4		      .byte.b	%11010100
  27360  8b68		       dc		      .byte.b	%11011100
  27361  8b69		       54		      .byte.b	%01010100
  27362  8b6a		       b8		      .byte.b	%10111000
  27363  8b6b		       a0		      .byte.b	%10100000
  27364  8b6c		       60		      .byte.b	%01100000
  27365  8b6d		       40		      .byte.b	%01000000
  27366  8b6e		       40		      .byte.b	%01000000
  27367  8b6f		       40		      .byte.b	%01000000
  27368  8b70		       40		      .byte.b	%01000000
  27369  8b71		       41		      .byte.b	%01000001
  27370  8b72		       62		      .byte.b	%01100010
  27371  8b73		       fc		      .byte.b	%11111100
  27372  8b74				  -	      if	(<*) > (<(*+18))
  27373  8b74				  -	      repeat	($100-<*)
  27374  8b74				  -	      .byte	0
  27375  8b74				  -	      repend
  27376  8b74					      endif
  27377  8b74				  -	      if	(<*) < 90
  27378  8b74				  -	      repeat	(90-<*)
  27379  8b74				  -	      .byte	0
  27380  8b74				  -	      repend
  27381  8b74					      endif
  27382  8b74				   playerL0721_0
  27383  8b74		       00		      .byte.b	0
  27384  8b75		       00		      .byte.b	%00000000
  27385  8b76		       30		      .byte.b	%00110000
  27386  8b77		       78		      .byte.b	%01111000
  27387  8b78		       7c		      .byte.b	%01111100
  27388  8b79		       7e		      .byte.b	%01111110
  27389  8b7a		       3e		      .byte.b	%00111110
  27390  8b7b		       7c		      .byte.b	%01111100
  27391  8b7c		       f8		      .byte.b	%11111000
  27392  8b7d		       f0		      .byte.b	%11110000
  27393  8b7e		       f0		      .byte.b	%11110000
  27394  8b7f		       df		      .byte.b	%11011111
  27395  8b80		       70		      .byte.b	%01110000
  27396  8b81		       f0		      .byte.b	%11110000
  27397  8b82		       f8		      .byte.b	%11111000
  27398  8b83		       f4		      .byte.b	%11110100
  27399  8b84		       7c		      .byte.b	%01111100
  27400  8b85		       74		      .byte.b	%01110100
  27401  8b86		       78		      .byte.b	%01111000
  27402  8b87				  -	      if	(<*) > (<(*+25))
  27403  8b87				  -	      repeat	($100-<*)
  27404  8b87				  -	      .byte	0
  27405  8b87				  -	      repend
  27406  8b87					      endif
  27407  8b87				  -	      if	(<*) < 90
  27408  8b87				  -	      repeat	(90-<*)
  27409  8b87				  -	      .byte	0
  27410  8b87				  -	      repend
  27411  8b87					      endif
  27412  8b87				   playerL0723_0
  27413  8b87		       00		      .byte.b	0
  27414  8b88		       3c		      .byte.b	%00111100
  27415  8b89		       58		      .byte.b	%01011000
  27416  8b8a		       88		      .byte.b	%10001000
  27417  8b8b		       88		      .byte.b	%10001000
  27418  8b8c		       88		      .byte.b	%10001000
  27419  8b8d		       08		      .byte.b	%00001000
  27420  8b8e		       08		      .byte.b	%00001000
  27421  8b8f		       10		      .byte.b	%00010000
  27422  8b90		       30		      .byte.b	%00110000
  27423  8b91		       68		      .byte.b	%01101000
  27424  8b92		       5c		      .byte.b	%01011100
  27425  8b93		       5e		      .byte.b	%01011110
  27426  8b94		       3e		      .byte.b	%00111110
  27427  8b95		       5c		      .byte.b	%01011100
  27428  8b96		       d8		      .byte.b	%11011000
  27429  8b97		       d0		      .byte.b	%11010000
  27430  8b98		       d0		      .byte.b	%11010000
  27431  8b99		       d0		      .byte.b	%11010000
  27432  8b9a		       70		      .byte.b	%01110000
  27433  8b9b		       f0		      .byte.b	%11110000
  27434  8b9c		       f8		      .byte.b	%11111000
  27435  8b9d		       f4		      .byte.b	%11110100
  27436  8b9e		       7c		      .byte.b	%01111100
  27437  8b9f		       74		      .byte.b	%01110100
  27438  8ba0		       78		      .byte.b	%01111000
  27439  8ba1				  -	      if	(<*) > (<(*+18))
  27440  8ba1				  -	      repeat	($100-<*)
  27441  8ba1				  -	      .byte	0
  27442  8ba1				  -	      repend
  27443  8ba1					      endif
  27444  8ba1				  -	      if	(<*) < 90
  27445  8ba1				  -	      repeat	(90-<*)
  27446  8ba1				  -	      .byte	0
  27447  8ba1				  -	      repend
  27448  8ba1					      endif
  27449  8ba1				   playerL0725_0
  27450  8ba1		       00		      .byte.b	0
  27451  8ba2		       00		      .byte.b	%00000000
  27452  8ba3		       18		      .byte.b	%00011000
  27453  8ba4		       3e		      .byte.b	%00111110
  27454  8ba5		       7e		      .byte.b	%01111110
  27455  8ba6		       3f		      .byte.b	%00111111
  27456  8ba7		       1f		      .byte.b	%00011111
  27457  8ba8		       1e		      .byte.b	%00011110
  27458  8ba9		       3e		      .byte.b	%00111110
  27459  8baa		       3c		      .byte.b	%00111100
  27460  8bab		       3c		      .byte.b	%00111100
  27461  8bac		       e4		      .byte.b	%11100100
  27462  8bad		       1c		      .byte.b	%00011100
  27463  8bae		       3c		      .byte.b	%00111100
  27464  8baf		       3e		      .byte.b	%00111110
  27465  8bb0		       3d		      .byte.b	%00111101
  27466  8bb1		       1f		      .byte.b	%00011111
  27467  8bb2		       1d		      .byte.b	%00011101
  27468  8bb3		       1e		      .byte.b	%00011110
  27469  8bb4				  -	      if	(<*) > (<(*+18))
  27470  8bb4				  -	      repeat	($100-<*)
  27471  8bb4				  -	      .byte	0
  27472  8bb4				  -	      repend
  27473  8bb4					      endif
  27474  8bb4				  -	      if	(<*) < 90
  27475  8bb4				  -	      repeat	(90-<*)
  27476  8bb4				  -	      .byte	0
  27477  8bb4				  -	      repend
  27478  8bb4					      endif
  27479  8bb4				   playerL0727_0
  27480  8bb4		       00		      .byte.b	0
  27481  8bb5		       3f		      .byte.b	%00111111
  27482  8bb6		       75		      .byte.b	%01110101
  27483  8bb7		       f7		      .byte.b	%11110111
  27484  8bb8		       ff		      .byte.b	%11111111
  27485  8bb9		       f3		      .byte.b	%11110011
  27486  8bba		       fd		      .byte.b	%11111101
  27487  8bbb		       d9		      .byte.b	%11011001
  27488  8bbc		       bd		      .byte.b	%10111101
  27489  8bbd		       3d		      .byte.b	%00111101
  27490  8bbe		       13		      .byte.b	%00010011
  27491  8bbf		       3f		      .byte.b	%00111111
  27492  8bc0		       3f		      .byte.b	%00111111
  27493  8bc1		       3f		      .byte.b	%00111111
  27494  8bc2		       bd		      .byte.b	%10111101
  27495  8bc3		       f9		      .byte.b	%11111001
  27496  8bc4		       bb		      .byte.b	%10111011
  27497  8bc5		       47		      .byte.b	%01000111
  27498  8bc6		       38		      .byte.b	%00111000
  27499  8bc7				  -	      if	(<*) > (<(*+18))
  27500  8bc7				  -	      repeat	($100-<*)
  27501  8bc7				  -	      .byte	0
  27502  8bc7				  -	      repend
  27503  8bc7					      endif
  27504  8bc7				  -	      if	(<*) < 90
  27505  8bc7				  -	      repeat	(90-<*)
  27506  8bc7				  -	      .byte	0
  27507  8bc7				  -	      repend
  27508  8bc7					      endif
  27509  8bc7				   playerL0729_0
  27510  8bc7		       00		      .byte.b	0
  27511  8bc8		       75		      .byte.b	%01110101
  27512  8bc9		       fd		      .byte.b	%11111101
  27513  8bca		       fd		      .byte.b	%11111101
  27514  8bcb		       f1		      .byte.b	%11110001
  27515  8bcc		       cd		      .byte.b	%11001101
  27516  8bcd		       ff		      .byte.b	%11111111
  27517  8bce		       f6		      .byte.b	%11110110
  27518  8bcf		       fa		      .byte.b	%11111010
  27519  8bd0		       fa		      .byte.b	%11111010
  27520  8bd1		       ea		      .byte.b	%11101010
  27521  8bd2		       aa		      .byte.b	%10101010
  27522  8bd3		       72		      .byte.b	%01110010
  27523  8bd4		       02		      .byte.b	%00000010
  27524  8bd5		       02		      .byte.b	%00000010
  27525  8bd6		       82		      .byte.b	%10000010
  27526  8bd7		       82		      .byte.b	%10000010
  27527  8bd8		       46		      .byte.b	%01000110
  27528  8bd9		       3f		      .byte.b	%00111111
  27529  8bda				  -	      if	(<*) > (<(*+11))
  27530  8bda				  -	      repeat	($100-<*)
  27531  8bda				  -	      .byte	0
  27532  8bda				  -	      repend
  27533  8bda					      endif
  27534  8bda				  -	      if	(<*) < 90
  27535  8bda				  -	      repeat	(90-<*)
  27536  8bda				  -	      .byte	0
  27537  8bda				  -	      repend
  27538  8bda					      endif
  27539  8bda				   playerL0827_1
  27540  8bda		       44		      .byte.b	%01000100
  27541  8bdb		       6a		      .byte.b	%01101010
  27542  8bdc		       18		      .byte.b	%00011000
  27543  8bdd		       38		      .byte.b	%00111000
  27544  8bde		       3e		      .byte.b	%00111110
  27545  8bdf		       38		      .byte.b	%00111000
  27546  8be0		       38		      .byte.b	%00111000
  27547  8be1		       1c		      .byte.b	%00011100
  27548  8be2		       38		      .byte.b	%00111000
  27549  8be3		       3e		      .byte.b	%00111110
  27550  8be4		       34		      .byte.b	%00110100
  27551  8be5		       18		      .byte.b	%00011000
  27552  8be6				  -	      if	(<*) > (<(*+11))
  27553  8be6				  -	      repeat	($100-<*)
  27554  8be6				  -	      .byte	0
  27555  8be6				  -	      repend
  27556  8be6					      endif
  27557  8be6				  -	      if	(<*) < 90
  27558  8be6				  -	      repeat	(90-<*)
  27559  8be6				  -	      .byte	0
  27560  8be6				  -	      repend
  27561  8be6					      endif
  27562  8be6				   playerL0829_1
  27563  8be6		       3c		      .byte.b	%00111100
  27564  8be7		       28		      .byte.b	%00101000
  27565  8be8		       38		      .byte.b	%00111000
  27566  8be9		       3c		      .byte.b	%00111100
  27567  8bea		       38		      .byte.b	%00111000
  27568  8beb		       1c		      .byte.b	%00011100
  27569  8bec		       1c		      .byte.b	%00011100
  27570  8bed		       38		      .byte.b	%00111000
  27571  8bee		       3e		      .byte.b	%00111110
  27572  8bef		       34		      .byte.b	%00110100
  27573  8bf0		       18		      .byte.b	%00011000
  27574  8bf1		       00		      .byte.b	%00000000
  27575  8bf2				  -	      if	(<*) > (<(*+11))
  27576  8bf2				  -	      repeat	($100-<*)
  27577  8bf2				  -	      .byte	0
  27578  8bf2				  -	      repend
  27579  8bf2					      endif
  27580  8bf2				  -	      if	(<*) < 90
  27581  8bf2				  -	      repeat	(90-<*)
  27582  8bf2				  -	      .byte	0
  27583  8bf2				  -	      repend
  27584  8bf2					      endif
  27585  8bf2				   playerL0831_1
  27586  8bf2		       1c		      .byte.b	%00011100
  27587  8bf3		       18		      .byte.b	%00011000
  27588  8bf4		       38		      .byte.b	%00111000
  27589  8bf5		       3c		      .byte.b	%00111100
  27590  8bf6		       3a		      .byte.b	%00111010
  27591  8bf7		       3c		      .byte.b	%00111100
  27592  8bf8		       1c		      .byte.b	%00011100
  27593  8bf9		       0e		      .byte.b	%00001110
  27594  8bfa		       1c		      .byte.b	%00011100
  27595  8bfb		       1f		      .byte.b	%00011111
  27596  8bfc		       1a		      .byte.b	%00011010
  27597  8bfd		       0c		      .byte.b	%00001100
  27598  8bfe					      if	(<*) > (<(*+11))
  27599  8bfe					      repeat	($100-<*)
  27600  8bfe		       00		      .byte.b	0
  27599  8bfe					      repend
  27600  8bff		       00		      .byte.b	0
  27601  8c00					      repend
  27602  8c00					      endif
  27603  8c00					      if	(<*) < 90
  27604  8c00					      repeat	(90-<*)
  27605  8c00		       00		      .byte.b	0
  27604  8c00					      repend
  27605  8c01		       00		      .byte.b	0
  27604  8c01					      repend
  27605  8c02		       00		      .byte.b	0
  27604  8c02					      repend
  27605  8c03		       00		      .byte.b	0
  27604  8c03					      repend
  27605  8c04		       00		      .byte.b	0
  27604  8c04					      repend
  27605  8c05		       00		      .byte.b	0
  27604  8c05					      repend
  27605  8c06		       00		      .byte.b	0
  27604  8c06					      repend
  27605  8c07		       00		      .byte.b	0
  27604  8c07					      repend
  27605  8c08		       00		      .byte.b	0
  27604  8c08					      repend
  27605  8c09		       00		      .byte.b	0
  27604  8c09					      repend
  27605  8c0a		       00		      .byte.b	0
  27604  8c0a					      repend
  27605  8c0b		       00		      .byte.b	0
  27604  8c0b					      repend
  27605  8c0c		       00		      .byte.b	0
  27604  8c0c					      repend
  27605  8c0d		       00		      .byte.b	0
  27604  8c0d					      repend
  27605  8c0e		       00		      .byte.b	0
  27604  8c0e					      repend
  27605  8c0f		       00		      .byte.b	0
  27604  8c0f					      repend
  27605  8c10		       00		      .byte.b	0
  27604  8c10					      repend
  27605  8c11		       00		      .byte.b	0
  27604  8c11					      repend
  27605  8c12		       00		      .byte.b	0
  27604  8c12					      repend
  27605  8c13		       00		      .byte.b	0
  27604  8c13					      repend
  27605  8c14		       00		      .byte.b	0
  27604  8c14					      repend
  27605  8c15		       00		      .byte.b	0
  27604  8c15					      repend
  27605  8c16		       00		      .byte.b	0
  27604  8c16					      repend
  27605  8c17		       00		      .byte.b	0
  27604  8c17					      repend
  27605  8c18		       00		      .byte.b	0
  27604  8c18					      repend
  27605  8c19		       00		      .byte.b	0
  27604  8c19					      repend
  27605  8c1a		       00		      .byte.b	0
  27604  8c1a					      repend
  27605  8c1b		       00		      .byte.b	0
  27604  8c1b					      repend
  27605  8c1c		       00		      .byte.b	0
  27604  8c1c					      repend
  27605  8c1d		       00		      .byte.b	0
  27604  8c1d					      repend
  27605  8c1e		       00		      .byte.b	0
  27604  8c1e					      repend
  27605  8c1f		       00		      .byte.b	0
  27604  8c1f					      repend
  27605  8c20		       00		      .byte.b	0
  27604  8c20					      repend
  27605  8c21		       00		      .byte.b	0
  27604  8c21					      repend
  27605  8c22		       00		      .byte.b	0
  27604  8c22					      repend
  27605  8c23		       00		      .byte.b	0
  27604  8c23					      repend
  27605  8c24		       00		      .byte.b	0
  27604  8c24					      repend
  27605  8c25		       00		      .byte.b	0
  27604  8c25					      repend
  27605  8c26		       00		      .byte.b	0
  27604  8c26					      repend
  27605  8c27		       00		      .byte.b	0
  27604  8c27					      repend
  27605  8c28		       00		      .byte.b	0
  27604  8c28					      repend
  27605  8c29		       00		      .byte.b	0
  27604  8c29					      repend
  27605  8c2a		       00		      .byte.b	0
  27604  8c2a					      repend
  27605  8c2b		       00		      .byte.b	0
  27604  8c2b					      repend
  27605  8c2c		       00		      .byte.b	0
  27604  8c2c					      repend
  27605  8c2d		       00		      .byte.b	0
  27604  8c2d					      repend
  27605  8c2e		       00		      .byte.b	0
  27604  8c2e					      repend
  27605  8c2f		       00		      .byte.b	0
  27604  8c2f					      repend
  27605  8c30		       00		      .byte.b	0
  27604  8c30					      repend
  27605  8c31		       00		      .byte.b	0
  27604  8c31					      repend
  27605  8c32		       00		      .byte.b	0
  27604  8c32					      repend
  27605  8c33		       00		      .byte.b	0
  27604  8c33					      repend
  27605  8c34		       00		      .byte.b	0
  27604  8c34					      repend
  27605  8c35		       00		      .byte.b	0
  27604  8c35					      repend
  27605  8c36		       00		      .byte.b	0
  27604  8c36					      repend
  27605  8c37		       00		      .byte.b	0
  27604  8c37					      repend
  27605  8c38		       00		      .byte.b	0
  27604  8c38					      repend
  27605  8c39		       00		      .byte.b	0
  27604  8c39					      repend
  27605  8c3a		       00		      .byte.b	0
  27604  8c3a					      repend
  27605  8c3b		       00		      .byte.b	0
  27604  8c3b					      repend
  27605  8c3c		       00		      .byte.b	0
  27604  8c3c					      repend
  27605  8c3d		       00		      .byte.b	0
  27604  8c3d					      repend
  27605  8c3e		       00		      .byte.b	0
  27604  8c3e					      repend
  27605  8c3f		       00		      .byte.b	0
  27604  8c3f					      repend
  27605  8c40		       00		      .byte.b	0
  27604  8c40					      repend
  27605  8c41		       00		      .byte.b	0
  27604  8c41					      repend
  27605  8c42		       00		      .byte.b	0
  27604  8c42					      repend
  27605  8c43		       00		      .byte.b	0
  27604  8c43					      repend
  27605  8c44		       00		      .byte.b	0
  27604  8c44					      repend
  27605  8c45		       00		      .byte.b	0
  27604  8c45					      repend
  27605  8c46		       00		      .byte.b	0
  27604  8c46					      repend
  27605  8c47		       00		      .byte.b	0
  27604  8c47					      repend
  27605  8c48		       00		      .byte.b	0
  27604  8c48					      repend
  27605  8c49		       00		      .byte.b	0
  27604  8c49					      repend
  27605  8c4a		       00		      .byte.b	0
  27604  8c4a					      repend
  27605  8c4b		       00		      .byte.b	0
  27604  8c4b					      repend
  27605  8c4c		       00		      .byte.b	0
  27604  8c4c					      repend
  27605  8c4d		       00		      .byte.b	0
  27604  8c4d					      repend
  27605  8c4e		       00		      .byte.b	0
  27604  8c4e					      repend
  27605  8c4f		       00		      .byte.b	0
  27604  8c4f					      repend
  27605  8c50		       00		      .byte.b	0
  27604  8c50					      repend
  27605  8c51		       00		      .byte.b	0
  27604  8c51					      repend
  27605  8c52		       00		      .byte.b	0
  27604  8c52					      repend
  27605  8c53		       00		      .byte.b	0
  27604  8c53					      repend
  27605  8c54		       00		      .byte.b	0
  27604  8c54					      repend
  27605  8c55		       00		      .byte.b	0
  27604  8c55					      repend
  27605  8c56		       00		      .byte.b	0
  27604  8c56					      repend
  27605  8c57		       00		      .byte.b	0
  27604  8c57					      repend
  27605  8c58		       00		      .byte.b	0
  27604  8c58					      repend
  27605  8c59		       00		      .byte.b	0
  27606  8c5a					      repend
  27607  8c5a					      endif
  27608  8c5a				   playerL0833_1
  27609  8c5a		       30		      .byte.b	%00110000
  27610  8c5b		       2c		      .byte.b	%00101100
  27611  8c5c		       38		      .byte.b	%00111000
  27612  8c5d		       38		      .byte.b	%00111000
  27613  8c5e		       3c		      .byte.b	%00111100
  27614  8c5f		       38		      .byte.b	%00111000
  27615  8c60		       34		      .byte.b	%00110100
  27616  8c61		       38		      .byte.b	%00111000
  27617  8c62		       70		      .byte.b	%01110000
  27618  8c63		       7c		      .byte.b	%01111100
  27619  8c64		       68		      .byte.b	%01101000
  27620  8c65		       30		      .byte.b	%00110000
  27621  8c66				  -	      if	(<*) > (<(*+11))
  27622  8c66				  -	      repeat	($100-<*)
  27623  8c66				  -	      .byte	0
  27624  8c66				  -	      repend
  27625  8c66					      endif
  27626  8c66				  -	      if	(<*) < 90
  27627  8c66				  -	      repeat	(90-<*)
  27628  8c66				  -	      .byte	0
  27629  8c66				  -	      repend
  27630  8c66					      endif
  27631  8c66				   playerL0843_2
  27632  8c66		       44		      .byte.b	%01000100
  27633  8c67		       6a		      .byte.b	%01101010
  27634  8c68		       18		      .byte.b	%00011000
  27635  8c69		       38		      .byte.b	%00111000
  27636  8c6a		       3e		      .byte.b	%00111110
  27637  8c6b		       38		      .byte.b	%00111000
  27638  8c6c		       38		      .byte.b	%00111000
  27639  8c6d		       1c		      .byte.b	%00011100
  27640  8c6e		       38		      .byte.b	%00111000
  27641  8c6f		       3e		      .byte.b	%00111110
  27642  8c70		       34		      .byte.b	%00110100
  27643  8c71		       18		      .byte.b	%00011000
  27644  8c72				  -	      if	(<*) > (<(*+11))
  27645  8c72				  -	      repeat	($100-<*)
  27646  8c72				  -	      .byte	0
  27647  8c72				  -	      repend
  27648  8c72					      endif
  27649  8c72				  -	      if	(<*) < 90
  27650  8c72				  -	      repeat	(90-<*)
  27651  8c72				  -	      .byte	0
  27652  8c72				  -	      repend
  27653  8c72					      endif
  27654  8c72				   playerL0845_2
  27655  8c72		       3c		      .byte.b	%00111100
  27656  8c73		       28		      .byte.b	%00101000
  27657  8c74		       38		      .byte.b	%00111000
  27658  8c75		       3c		      .byte.b	%00111100
  27659  8c76		       38		      .byte.b	%00111000
  27660  8c77		       1c		      .byte.b	%00011100
  27661  8c78		       1c		      .byte.b	%00011100
  27662  8c79		       38		      .byte.b	%00111000
  27663  8c7a		       3e		      .byte.b	%00111110
  27664  8c7b		       34		      .byte.b	%00110100
  27665  8c7c		       18		      .byte.b	%00011000
  27666  8c7d		       00		      .byte.b	%00000000
  27667  8c7e				  -	      if	(<*) > (<(*+11))
  27668  8c7e				  -	      repeat	($100-<*)
  27669  8c7e				  -	      .byte	0
  27670  8c7e				  -	      repend
  27671  8c7e					      endif
  27672  8c7e				  -	      if	(<*) < 90
  27673  8c7e				  -	      repeat	(90-<*)
  27674  8c7e				  -	      .byte	0
  27675  8c7e				  -	      repend
  27676  8c7e					      endif
  27677  8c7e				   playerL0847_2
  27678  8c7e		       1c		      .byte.b	%00011100
  27679  8c7f		       18		      .byte.b	%00011000
  27680  8c80		       38		      .byte.b	%00111000
  27681  8c81		       3c		      .byte.b	%00111100
  27682  8c82		       3a		      .byte.b	%00111010
  27683  8c83		       3c		      .byte.b	%00111100
  27684  8c84		       1c		      .byte.b	%00011100
  27685  8c85		       0e		      .byte.b	%00001110
  27686  8c86		       1c		      .byte.b	%00011100
  27687  8c87		       1f		      .byte.b	%00011111
  27688  8c88		       1a		      .byte.b	%00011010
  27689  8c89		       0c		      .byte.b	%00001100
  27690  8c8a				  -	      if	(<*) > (<(*+11))
  27691  8c8a				  -	      repeat	($100-<*)
  27692  8c8a				  -	      .byte	0
  27693  8c8a				  -	      repend
  27694  8c8a					      endif
  27695  8c8a				  -	      if	(<*) < 90
  27696  8c8a				  -	      repeat	(90-<*)
  27697  8c8a				  -	      .byte	0
  27698  8c8a				  -	      repend
  27699  8c8a					      endif
  27700  8c8a				   playerL0849_2
  27701  8c8a		       30		      .byte.b	%00110000
  27702  8c8b		       2c		      .byte.b	%00101100
  27703  8c8c		       38		      .byte.b	%00111000
  27704  8c8d		       38		      .byte.b	%00111000
  27705  8c8e		       3c		      .byte.b	%00111100
  27706  8c8f		       38		      .byte.b	%00111000
  27707  8c90		       34		      .byte.b	%00110100
  27708  8c91		       38		      .byte.b	%00111000
  27709  8c92		       70		      .byte.b	%01110000
  27710  8c93		       7c		      .byte.b	%01111100
  27711  8c94		       68		      .byte.b	%01101000
  27712  8c95		       30		      .byte.b	%00110000
  27713  8c96				  -	      if	(<*) > (<(*+7))
  27714  8c96				  -	      repeat	($100-<*)
  27715  8c96				  -	      .byte	0
  27716  8c96				  -	      repend
  27717  8c96					      endif
  27718  8c96				  -	      if	(<*) < 90
  27719  8c96				  -	      repeat	(90-<*)
  27720  8c96				  -	      .byte	0
  27721  8c96				  -	      repend
  27722  8c96					      endif
  27723  8c96				   playerL0856_5
  27724  8c96		       c3		      .byte.b	%11000011
  27725  8c97		       91		      .byte.b	%10010001
  27726  8c98		       00		      .byte.b	%00000000
  27727  8c99		       18		      .byte.b	%00011000
  27728  8c9a		       04		      .byte.b	%00000100
  27729  8c9b		       24		      .byte.b	%00100100
  27730  8c9c		       99		      .byte.b	%10011001
  27731  8c9d		       c3		      .byte.b	%11000011
  27732  8c9e				  -	      if	(<*) > (<(*+7))
  27733  8c9e				  -	      repeat	($100-<*)
  27734  8c9e				  -	      .byte	0
  27735  8c9e				  -	      repend
  27736  8c9e					      endif
  27737  8c9e				  -	      if	(<*) < 90
  27738  8c9e				  -	      repeat	(90-<*)
  27739  8c9e				  -	      .byte	0
  27740  8c9e				  -	      repend
  27741  8c9e					      endif
  27742  8c9e				   playerL0859_5
  27743  8c9e		       db		      .byte.b	%11011011
  27744  8c9f		       bd		      .byte.b	%10111101
  27745  8ca0		       52		      .byte.b	%01010010
  27746  8ca1		       df		      .byte.b	%11011111
  27747  8ca2		       fb		      .byte.b	%11111011
  27748  8ca3		       4a		      .byte.b	%01001010
  27749  8ca4		       bd		      .byte.b	%10111101
  27750  8ca5		       db		      .byte.b	%11011011
  27751  8ca6				  -	      if	(<*) > (<(*+7))
  27752  8ca6				  -	      repeat	($100-<*)
  27753  8ca6				  -	      .byte	0
  27754  8ca6				  -	      repend
  27755  8ca6					      endif
  27756  8ca6				  -	      if	(<*) < 90
  27757  8ca6				  -	      repeat	(90-<*)
  27758  8ca6				  -	      .byte	0
  27759  8ca6				  -	      repend
  27760  8ca6					      endif
  27761  8ca6				   playerL0861_5
  27762  8ca6		       c3		      .byte.b	%11000011
  27763  8ca7		       f9		      .byte.b	%11111001
  27764  8ca8		       45		      .byte.b	%01000101
  27765  8ca9		       32		      .byte.b	%00110010
  27766  8caa		       0d		      .byte.b	%00001101
  27767  8cab		       48		      .byte.b	%01001000
  27768  8cac		       b1		      .byte.b	%10110001
  27769  8cad		       c3		      .byte.b	%11000011
  27770  8cae				  -	      if	(<*) > (<(*+7))
  27771  8cae				  -	      repeat	($100-<*)
  27772  8cae				  -	      .byte	0
  27773  8cae				  -	      repend
  27774  8cae					      endif
  27775  8cae				  -	      if	(<*) < 90
  27776  8cae				  -	      repeat	(90-<*)
  27777  8cae				  -	      .byte	0
  27778  8cae				  -	      repend
  27779  8cae					      endif
  27780  8cae				   playerL0863_5
  27781  8cae		       c3		      .byte.b	%11000011
  27782  8caf		       a1		      .byte.b	%10100001
  27783  8cb0		       48		      .byte.b	%01001000
  27784  8cb1		       92		      .byte.b	%10010010
  27785  8cb2		       92		      .byte.b	%10010010
  27786  8cb3		       48		      .byte.b	%01001000
  27787  8cb4		       a1		      .byte.b	%10100001
  27788  8cb5		       c3		      .byte.b	%11000011
  27789  8cb6				  -	      if	(<*) > (<(*+7))
  27790  8cb6				  -	      repeat	($100-<*)
  27791  8cb6				  -	      .byte	0
  27792  8cb6				  -	      repend
  27793  8cb6					      endif
  27794  8cb6				  -	      if	(<*) < 90
  27795  8cb6				  -	      repeat	(90-<*)
  27796  8cb6				  -	      .byte	0
  27797  8cb6				  -	      repend
  27798  8cb6					      endif
  27799  8cb6				   playerL0865_5
  27800  8cb6		       d3		      .byte.b	%11010011
  27801  8cb7		       bd		      .byte.b	%10111101
  27802  8cb8		       02		      .byte.b	%00000010
  27803  8cb9		       22		      .byte.b	%00100010
  27804  8cba		       44		      .byte.b	%01000100
  27805  8cbb		       40		      .byte.b	%01000000
  27806  8cbc		       bd		      .byte.b	%10111101
  27807  8cbd		       cb		      .byte.b	%11001011
  27808  8cbe				  -	      if	(<*) > (<(*+7))
  27809  8cbe				  -	      repeat	($100-<*)
  27810  8cbe				  -	      .byte	0
  27811  8cbe				  -	      repend
  27812  8cbe					      endif
  27813  8cbe				  -	      if	(<*) < 90
  27814  8cbe				  -	      repeat	(90-<*)
  27815  8cbe				  -	      .byte	0
  27816  8cbe				  -	      repend
  27817  8cbe					      endif
  27818  8cbe				   playerL0867_5
  27819  8cbe		       c3		      .byte.b	%11000011
  27820  8cbf		       99		      .byte.b	%10011001
  27821  8cc0		       24		      .byte.b	%00100100
  27822  8cc1		       db		      .byte.b	%11011011
  27823  8cc2		       fb		      .byte.b	%11111011
  27824  8cc3		       2c		      .byte.b	%00101100
  27825  8cc4		       99		      .byte.b	%10011001
  27826  8cc5		       c3		      .byte.b	%11000011
  27827  8cc6				  -	      if	(<*) > (<(*+7))
  27828  8cc6				  -	      repeat	($100-<*)
  27829  8cc6				  -	      .byte	0
  27830  8cc6				  -	      repend
  27831  8cc6					      endif
  27832  8cc6				  -	      if	(<*) < 90
  27833  8cc6				  -	      repeat	(90-<*)
  27834  8cc6				  -	      .byte	0
  27835  8cc6				  -	      repend
  27836  8cc6					      endif
  27837  8cc6				   playerL0869_5
  27838  8cc6		       c3		      .byte.b	%11000011
  27839  8cc7		       bd		      .byte.b	%10111101
  27840  8cc8		       18		      .byte.b	%00011000
  27841  8cc9		       e7		      .byte.b	%11100111
  27842  8cca		       5a		      .byte.b	%01011010
  27843  8ccb		       5a		      .byte.b	%01011010
  27844  8ccc		       a5		      .byte.b	%10100101
  27845  8ccd		       c3		      .byte.b	%11000011
  27846  8cce				  -	      if	(<*) > (<(*+7))
  27847  8cce				  -	      repeat	($100-<*)
  27848  8cce				  -	      .byte	0
  27849  8cce				  -	      repend
  27850  8cce					      endif
  27851  8cce				  -	      if	(<*) < 90
  27852  8cce				  -	      repeat	(90-<*)
  27853  8cce				  -	      .byte	0
  27854  8cce				  -	      repend
  27855  8cce					      endif
  27856  8cce				   playerL0871_5
  27857  8cce		       c3		      .byte.b	%11000011
  27858  8ccf		       a5		      .byte.b	%10100101
  27859  8cd0		       3c		      .byte.b	%00111100
  27860  8cd1		       5a		      .byte.b	%01011010
  27861  8cd2		       5a		      .byte.b	%01011010
  27862  8cd3		       3c		      .byte.b	%00111100
  27863  8cd4		       99		      .byte.b	%10011001
  27864  8cd5		       c3		      .byte.b	%11000011
  27865  8cd6				  -	      if	(<*) > (<(*+7))
  27866  8cd6				  -	      repeat	($100-<*)
  27867  8cd6				  -	      .byte	0
  27868  8cd6				  -	      repend
  27869  8cd6					      endif
  27870  8cd6				  -	      if	(<*) < 90
  27871  8cd6				  -	      repeat	(90-<*)
  27872  8cd6				  -	      .byte	0
  27873  8cd6				  -	      repend
  27874  8cd6					      endif
  27875  8cd6				   playerL0873_5
  27876  8cd6		       c3		      .byte.b	%11000011
  27877  8cd7		       99		      .byte.b	%10011001
  27878  8cd8		       24		      .byte.b	%00100100
  27879  8cd9		       db		      .byte.b	%11011011
  27880  8cda		       7e		      .byte.b	%01111110
  27881  8cdb		       3c		      .byte.b	%00111100
  27882  8cdc		       99		      .byte.b	%10011001
  27883  8cdd		       c3		      .byte.b	%11000011
  27884  8cde				  -	      if	((>(*+22)) > (>*))
  27885  8cde				  -	      ALIGN	256
  27886  8cde					      endif
  27887  8cde				   PF1_data0
  27888  8cde		       10		      .byte.b	%00010000
  27889  8cdf		       0f		      .byte.b	%00001111
  27890  8ce0		       04		      .byte.b	%00000100
  27891  8ce1		       07		      .byte.b	%00000111
  27892  8ce2		       04		      .byte.b	%00000100
  27893  8ce3		       07		      .byte.b	%00000111
  27894  8ce4		       04		      .byte.b	%00000100
  27895  8ce5		       07		      .byte.b	%00000111
  27896  8ce6		       06		      .byte.b	%00000110
  27897  8ce7		       08		      .byte.b	%00001000
  27898  8ce8		       10		      .byte.b	%00010000
  27899  8ce9		       11		      .byte.b	%00010001
  27900  8cea		       0f		      .byte.b	%00001111
  27901  8ceb		       1e		      .byte.b	%00011110
  27902  8cec		       37		      .byte.b	%00110111
  27903  8ced		       3b		      .byte.b	%00111011
  27904  8cee		       7f		      .byte.b	%01111111
  27905  8cef		       7f		      .byte.b	%01111111
  27906  8cf0		       7f		      .byte.b	%01111111
  27907  8cf1		       1f		      .byte.b	%00011111
  27908  8cf2		       07		      .byte.b	%00000111
  27909  8cf3		       00		      .byte.b	%00000000
  27910  8cf4					      if	((>(*+22)) > (>*))
  27911  8d00		       00 00 00 00*	      ALIGN	256
  27912  8d00					      endif
  27913  8d00				   PF2_data0
  27914  8d00		       00		      .byte.b	%00000000
  27915  8d01		       01		      .byte.b	%00000001
  27916  8d02		       02		      .byte.b	%00000010
  27917  8d03		       03		      .byte.b	%00000011
  27918  8d04		       04		      .byte.b	%00000100
  27919  8d05		       07		      .byte.b	%00000111
  27920  8d06		       06		      .byte.b	%00000110
  27921  8d07		       01		      .byte.b	%00000001
  27922  8d08		       00		      .byte.b	%00000000
  27923  8d09		       00		      .byte.b	%00000000
  27924  8d0a		       00		      .byte.b	%00000000
  27925  8d0b		       07		      .byte.b	%00000111
  27926  8d0c		       0a		      .byte.b	%00001010
  27927  8d0d		       00		      .byte.b	%00000000
  27928  8d0e		       0a		      .byte.b	%00001010
  27929  8d0f		       0f		      .byte.b	%00001111
  27930  8d10		       05		      .byte.b	%00000101
  27931  8d11		       09		      .byte.b	%00001001
  27932  8d12		       09		      .byte.b	%00001001
  27933  8d13		       07		      .byte.b	%00000111
  27934  8d14		       03		      .byte.b	%00000011
  27935  8d15		       00		      .byte.b	%00000000
  27936  8d16				  -	      if	((>(*+22)) > (>*))
  27937  8d16				  -	      ALIGN	256
  27938  8d16					      endif
  27939  8d16				   PF1_data1
  27940  8d16		       7f		      .byte.b	%01111111
  27941  8d17		       26		      .byte.b	%00100110
  27942  8d18		       26		      .byte.b	%00100110
  27943  8d19		       3e		      .byte.b	%00111110
  27944  8d1a		       2a		      .byte.b	%00101010
  27945  8d1b		       3e		      .byte.b	%00111110
  27946  8d1c		       2a		      .byte.b	%00101010
  27947  8d1d		       3e		      .byte.b	%00111110
  27948  8d1e		       2a		      .byte.b	%00101010
  27949  8d1f		       3e		      .byte.b	%00111110
  27950  8d20		       2a		      .byte.b	%00101010
  27951  8d21		       3e		      .byte.b	%00111110
  27952  8d22		       2a		      .byte.b	%00101010
  27953  8d23		       3e		      .byte.b	%00111110
  27954  8d24		       2a		      .byte.b	%00101010
  27955  8d25		       3e		      .byte.b	%00111110
  27956  8d26		       06		      .byte.b	%00000110
  27957  8d27		       00		      .byte.b	%00000000
  27958  8d28		       00		      .byte.b	%00000000
  27959  8d29		       00		      .byte.b	%00000000
  27960  8d2a		       00		      .byte.b	%00000000
  27961  8d2b		       00		      .byte.b	%00000000
  27962  8d2c				  -	      if	((>(*+22)) > (>*))
  27963  8d2c				  -	      ALIGN	256
  27964  8d2c					      endif
  27965  8d2c				   PF2_data1
  27966  8d2c		       ff		      .byte.b	%11111111
  27967  8d2d		       26		      .byte.b	%00100110
  27968  8d2e		       26		      .byte.b	%00100110
  27969  8d2f		       3e		      .byte.b	%00111110
  27970  8d30		       2a		      .byte.b	%00101010
  27971  8d31		       3e		      .byte.b	%00111110
  27972  8d32		       2a		      .byte.b	%00101010
  27973  8d33		       3e		      .byte.b	%00111110
  27974  8d34		       2a		      .byte.b	%00101010
  27975  8d35		       3e		      .byte.b	%00111110
  27976  8d36		       2a		      .byte.b	%00101010
  27977  8d37		       3e		      .byte.b	%00111110
  27978  8d38		       2a		      .byte.b	%00101010
  27979  8d39		       3e		      .byte.b	%00111110
  27980  8d3a		       2a		      .byte.b	%00101010
  27981  8d3b		       3e		      .byte.b	%00111110
  27982  8d3c		       06		      .byte.b	%00000110
  27983  8d3d		       02		      .byte.b	%00000010
  27984  8d3e		       00		      .byte.b	%00000000
  27985  8d3f		       00		      .byte.b	%00000000
  27986  8d40		       00		      .byte.b	%00000000
  27987  8d41		       00		      .byte.b	%00000000
  27988  8d42				  -	      if	((>(*+22)) > (>*))
  27989  8d42				  -	      ALIGN	256
  27990  8d42					      endif
  27991  8d42				   PF1_data2
  27992  8d42		       7f		      .byte.b	%01111111
  27993  8d43		       26		      .byte.b	%00100110
  27994  8d44		       26		      .byte.b	%00100110
  27995  8d45		       3e		      .byte.b	%00111110
  27996  8d46		       2a		      .byte.b	%00101010
  27997  8d47		       3e		      .byte.b	%00111110
  27998  8d48		       2a		      .byte.b	%00101010
  27999  8d49		       3e		      .byte.b	%00111110
  28000  8d4a		       2a		      .byte.b	%00101010
  28001  8d4b		       3e		      .byte.b	%00111110
  28002  8d4c		       2a		      .byte.b	%00101010
  28003  8d4d		       3e		      .byte.b	%00111110
  28004  8d4e		       2a		      .byte.b	%00101010
  28005  8d4f		       3e		      .byte.b	%00111110
  28006  8d50		       2a		      .byte.b	%00101010
  28007  8d51		       3e		      .byte.b	%00111110
  28008  8d52		       06		      .byte.b	%00000110
  28009  8d53		       00		      .byte.b	%00000000
  28010  8d54		       00		      .byte.b	%00000000
  28011  8d55		       00		      .byte.b	%00000000
  28012  8d56		       00		      .byte.b	%00000000
  28013  8d57		       00		      .byte.b	%00000000
  28014  8d58				  -	      if	((>(*+22)) > (>*))
  28015  8d58				  -	      ALIGN	256
  28016  8d58					      endif
  28017  8d58				   PF2_data2
  28018  8d58		       ff		      .byte.b	%11111111
  28019  8d59		       26		      .byte.b	%00100110
  28020  8d5a		       26		      .byte.b	%00100110
  28021  8d5b		       3e		      .byte.b	%00111110
  28022  8d5c		       2a		      .byte.b	%00101010
  28023  8d5d		       3e		      .byte.b	%00111110
  28024  8d5e		       2a		      .byte.b	%00101010
  28025  8d5f		       3e		      .byte.b	%00111110
  28026  8d60		       2a		      .byte.b	%00101010
  28027  8d61		       3e		      .byte.b	%00111110
  28028  8d62		       2a		      .byte.b	%00101010
  28029  8d63		       3e		      .byte.b	%00111110
  28030  8d64		       2a		      .byte.b	%00101010
  28031  8d65		       3e		      .byte.b	%00111110
  28032  8d66		       2a		      .byte.b	%00101010
  28033  8d67		       3e		      .byte.b	%00111110
  28034  8d68		       06		      .byte.b	%00000110
  28035  8d69		       02		      .byte.b	%00000010
  28036  8d6a		       00		      .byte.b	%00000000
  28037  8d6b		       00		      .byte.b	%00000000
  28038  8d6c		       00		      .byte.b	%00000000
  28039  8d6d		       00		      .byte.b	%00000000
  28040  8d6e				  -	      if	((>(*+22)) > (>*))
  28041  8d6e				  -	      ALIGN	256
  28042  8d6e					      endif
  28043  8d6e				   PF1_data3
  28044  8d6e		       00		      .byte.b	%00000000
  28045  8d6f		       00		      .byte.b	%00000000
  28046  8d70		       00		      .byte.b	%00000000
  28047  8d71		       00		      .byte.b	%00000000
  28048  8d72		       00		      .byte.b	%00000000
  28049  8d73		       00		      .byte.b	%00000000
  28050  8d74		       00		      .byte.b	%00000000
  28051  8d75		       00		      .byte.b	%00000000
  28052  8d76		       00		      .byte.b	%00000000
  28053  8d77		       00		      .byte.b	%00000000
  28054  8d78		       00		      .byte.b	%00000000
  28055  8d79		       00		      .byte.b	%00000000
  28056  8d7a		       00		      .byte.b	%00000000
  28057  8d7b		       00		      .byte.b	%00000000
  28058  8d7c		       00		      .byte.b	%00000000
  28059  8d7d		       00		      .byte.b	%00000000
  28060  8d7e		       00		      .byte.b	%00000000
  28061  8d7f		       00		      .byte.b	%00000000
  28062  8d80		       00		      .byte.b	%00000000
  28063  8d81		       00		      .byte.b	%00000000
  28064  8d82		       00		      .byte.b	%00000000
  28065  8d83		       00		      .byte.b	%00000000
  28066  8d84				  -	      if	((>(*+22)) > (>*))
  28067  8d84				  -	      ALIGN	256
  28068  8d84					      endif
  28069  8d84				   PF2_data3
  28070  8d84		       00		      .byte.b	%00000000
  28071  8d85		       00		      .byte.b	%00000000
  28072  8d86		       00		      .byte.b	%00000000
  28073  8d87		       00		      .byte.b	%00000000
  28074  8d88		       00		      .byte.b	%00000000
  28075  8d89		       00		      .byte.b	%00000000
  28076  8d8a		       00		      .byte.b	%00000000
  28077  8d8b		       00		      .byte.b	%00000000
  28078  8d8c		       00		      .byte.b	%00000000
  28079  8d8d		       00		      .byte.b	%00000000
  28080  8d8e		       00		      .byte.b	%00000000
  28081  8d8f		       00		      .byte.b	%00000000
  28082  8d90		       00		      .byte.b	%00000000
  28083  8d91		       00		      .byte.b	%00000000
  28084  8d92		       00		      .byte.b	%00000000
  28085  8d93		       00		      .byte.b	%00000000
  28086  8d94		       00		      .byte.b	%00000000
  28087  8d95		       00		      .byte.b	%00000000
  28088  8d96		       00		      .byte.b	%00000000
  28089  8d97		       00		      .byte.b	%00000000
  28090  8d98		       00		      .byte.b	%00000000
  28091  8d99		       00		      .byte.b	%00000000
  28092  8d9a				  -	      if	((>(*+22)) > (>*))
  28093  8d9a				  -	      ALIGN	256
  28094  8d9a					      endif
  28095  8d9a				   PF1_data4
  28096  8d9a		       7f		      .byte.b	%01111111
  28097  8d9b		       26		      .byte.b	%00100110
  28098  8d9c		       26		      .byte.b	%00100110
  28099  8d9d		       3e		      .byte.b	%00111110
  28100  8d9e		       2a		      .byte.b	%00101010
  28101  8d9f		       3e		      .byte.b	%00111110
  28102  8da0		       2a		      .byte.b	%00101010
  28103  8da1		       3e		      .byte.b	%00111110
  28104  8da2		       2a		      .byte.b	%00101010
  28105  8da3		       3e		      .byte.b	%00111110
  28106  8da4		       2a		      .byte.b	%00101010
  28107  8da5		       3e		      .byte.b	%00111110
  28108  8da6		       2a		      .byte.b	%00101010
  28109  8da7		       3e		      .byte.b	%00111110
  28110  8da8		       2a		      .byte.b	%00101010
  28111  8da9		       3e		      .byte.b	%00111110
  28112  8daa		       06		      .byte.b	%00000110
  28113  8dab		       00		      .byte.b	%00000000
  28114  8dac		       00		      .byte.b	%00000000
  28115  8dad		       00		      .byte.b	%00000000
  28116  8dae		       00		      .byte.b	%00000000
  28117  8daf		       00		      .byte.b	%00000000
  28118  8db0				  -	      if	((>(*+22)) > (>*))
  28119  8db0				  -	      ALIGN	256
  28120  8db0					      endif
  28121  8db0				   PF2_data4
  28122  8db0		       ff		      .byte.b	%11111111
  28123  8db1		       26		      .byte.b	%00100110
  28124  8db2		       26		      .byte.b	%00100110
  28125  8db3		       3e		      .byte.b	%00111110
  28126  8db4		       2a		      .byte.b	%00101010
  28127  8db5		       3e		      .byte.b	%00111110
  28128  8db6		       2a		      .byte.b	%00101010
  28129  8db7		       3e		      .byte.b	%00111110
  28130  8db8		       2a		      .byte.b	%00101010
  28131  8db9		       3e		      .byte.b	%00111110
  28132  8dba		       2a		      .byte.b	%00101010
  28133  8dbb		       3e		      .byte.b	%00111110
  28134  8dbc		       2a		      .byte.b	%00101010
  28135  8dbd		       3e		      .byte.b	%00111110
  28136  8dbe		       2a		      .byte.b	%00101010
  28137  8dbf		       3e		      .byte.b	%00111110
  28138  8dc0		       06		      .byte.b	%00000110
  28139  8dc1		       02		      .byte.b	%00000010
  28140  8dc2		       00		      .byte.b	%00000000
  28141  8dc3		       00		      .byte.b	%00000000
  28142  8dc4		       00		      .byte.b	%00000000
  28143  8dc5		       00		      .byte.b	%00000000
  28144  8dc6				  -	      if	((>(*+22)) > (>*))
  28145  8dc6				  -	      ALIGN	256
  28146  8dc6					      endif
  28147  8dc6				   PF1_data5
  28148  8dc6		       7f		      .byte.b	%01111111
  28149  8dc7		       3e		      .byte.b	%00111110
  28150  8dc8		       2a		      .byte.b	%00101010
  28151  8dc9		       3e		      .byte.b	%00111110
  28152  8dca		       2a		      .byte.b	%00101010
  28153  8dcb		       3e		      .byte.b	%00111110
  28154  8dcc		       2a		      .byte.b	%00101010
  28155  8dcd		       3e		      .byte.b	%00111110
  28156  8dce		       2a		      .byte.b	%00101010
  28157  8dcf		       3e		      .byte.b	%00111110
  28158  8dd0		       2a		      .byte.b	%00101010
  28159  8dd1		       3e		      .byte.b	%00111110
  28160  8dd2		       2a		      .byte.b	%00101010
  28161  8dd3		       3e		      .byte.b	%00111110
  28162  8dd4		       06		      .byte.b	%00000110
  28163  8dd5		       00		      .byte.b	%00000000
  28164  8dd6		       00		      .byte.b	%00000000
  28165  8dd7		       00		      .byte.b	%00000000
  28166  8dd8		       00		      .byte.b	%00000000
  28167  8dd9		       00		      .byte.b	%00000000
  28168  8dda		       00		      .byte.b	%00000000
  28169  8ddb		       00		      .byte.b	%00000000
  28170  8ddc				  -	      if	((>(*+22)) > (>*))
  28171  8ddc				  -	      ALIGN	256
  28172  8ddc					      endif
  28173  8ddc				   PF2_data5
  28174  8ddc		       ff		      .byte.b	%11111111
  28175  8ddd		       3e		      .byte.b	%00111110
  28176  8dde		       2a		      .byte.b	%00101010
  28177  8ddf		       3e		      .byte.b	%00111110
  28178  8de0		       2a		      .byte.b	%00101010
  28179  8de1		       3e		      .byte.b	%00111110
  28180  8de2		       2a		      .byte.b	%00101010
  28181  8de3		       3e		      .byte.b	%00111110
  28182  8de4		       2a		      .byte.b	%00101010
  28183  8de5		       3e		      .byte.b	%00111110
  28184  8de6		       2a		      .byte.b	%00101010
  28185  8de7		       3e		      .byte.b	%00111110
  28186  8de8		       2a		      .byte.b	%00101010
  28187  8de9		       3e		      .byte.b	%00111110
  28188  8dea		       06		      .byte.b	%00000110
  28189  8deb		       02		      .byte.b	%00000010
  28190  8dec		       00		      .byte.b	%00000000
  28191  8ded		       00		      .byte.b	%00000000
  28192  8dee		       00		      .byte.b	%00000000
  28193  8def		       00		      .byte.b	%00000000
  28194  8df0		       00		      .byte.b	%00000000
  28195  8df1		       00		      .byte.b	%00000000
  28196  8df2					      if	((>(*+22)) > (>*))
  28197  8e00		       00 00 00 00*	      ALIGN	256
  28198  8e00					      endif
  28199  8e00				   PF1_data6
  28200  8e00		       7f		      .byte.b	%01111111
  28201  8e01		       3e		      .byte.b	%00111110
  28202  8e02		       2a		      .byte.b	%00101010
  28203  8e03		       3e		      .byte.b	%00111110
  28204  8e04		       2a		      .byte.b	%00101010
  28205  8e05		       3e		      .byte.b	%00111110
  28206  8e06		       2a		      .byte.b	%00101010
  28207  8e07		       3e		      .byte.b	%00111110
  28208  8e08		       2a		      .byte.b	%00101010
  28209  8e09		       3e		      .byte.b	%00111110
  28210  8e0a		       2a		      .byte.b	%00101010
  28211  8e0b		       3e		      .byte.b	%00111110
  28212  8e0c		       06		      .byte.b	%00000110
  28213  8e0d		       00		      .byte.b	%00000000
  28214  8e0e		       00		      .byte.b	%00000000
  28215  8e0f		       00		      .byte.b	%00000000
  28216  8e10		       00		      .byte.b	%00000000
  28217  8e11		       00		      .byte.b	%00000000
  28218  8e12		       00		      .byte.b	%00000000
  28219  8e13		       00		      .byte.b	%00000000
  28220  8e14		       00		      .byte.b	%00000000
  28221  8e15		       00		      .byte.b	%00000000
  28222  8e16				  -	      if	((>(*+22)) > (>*))
  28223  8e16				  -	      ALIGN	256
  28224  8e16					      endif
  28225  8e16				   PF2_data6
  28226  8e16		       ff		      .byte.b	%11111111
  28227  8e17		       3e		      .byte.b	%00111110
  28228  8e18		       2a		      .byte.b	%00101010
  28229  8e19		       3e		      .byte.b	%00111110
  28230  8e1a		       2a		      .byte.b	%00101010
  28231  8e1b		       3e		      .byte.b	%00111110
  28232  8e1c		       2a		      .byte.b	%00101010
  28233  8e1d		       3e		      .byte.b	%00111110
  28234  8e1e		       2a		      .byte.b	%00101010
  28235  8e1f		       3e		      .byte.b	%00111110
  28236  8e20		       2a		      .byte.b	%00101010
  28237  8e21		       3e		      .byte.b	%00111110
  28238  8e22		       06		      .byte.b	%00000110
  28239  8e23		       02		      .byte.b	%00000010
  28240  8e24		       00		      .byte.b	%00000000
  28241  8e25		       00		      .byte.b	%00000000
  28242  8e26		       00		      .byte.b	%00000000
  28243  8e27		       00		      .byte.b	%00000000
  28244  8e28		       00		      .byte.b	%00000000
  28245  8e29		       00		      .byte.b	%00000000
  28246  8e2a		       00		      .byte.b	%00000000
  28247  8e2b		       00		      .byte.b	%00000000
  28248  8e2c				  -	      if	((>(*+22)) > (>*))
  28249  8e2c				  -	      ALIGN	256
  28250  8e2c					      endif
  28251  8e2c				   PF1_data7
  28252  8e2c		       7f		      .byte.b	%01111111
  28253  8e2d		       3e		      .byte.b	%00111110
  28254  8e2e		       2a		      .byte.b	%00101010
  28255  8e2f		       3e		      .byte.b	%00111110
  28256  8e30		       2a		      .byte.b	%00101010
  28257  8e31		       3e		      .byte.b	%00111110
  28258  8e32		       2a		      .byte.b	%00101010
  28259  8e33		       3e		      .byte.b	%00111110
  28260  8e34		       2a		      .byte.b	%00101010
  28261  8e35		       3e		      .byte.b	%00111110
  28262  8e36		       06		      .byte.b	%00000110
  28263  8e37		       00		      .byte.b	%00000000
  28264  8e38		       00		      .byte.b	%00000000
  28265  8e39		       00		      .byte.b	%00000000
  28266  8e3a		       00		      .byte.b	%00000000
  28267  8e3b		       00		      .byte.b	%00000000
  28268  8e3c		       00		      .byte.b	%00000000
  28269  8e3d		       00		      .byte.b	%00000000
  28270  8e3e		       00		      .byte.b	%00000000
  28271  8e3f		       00		      .byte.b	%00000000
  28272  8e40		       00		      .byte.b	%00000000
  28273  8e41		       00		      .byte.b	%00000000
  28274  8e42				  -	      if	((>(*+22)) > (>*))
  28275  8e42				  -	      ALIGN	256
  28276  8e42					      endif
  28277  8e42				   PF2_data7
  28278  8e42		       ff		      .byte.b	%11111111
  28279  8e43		       3e		      .byte.b	%00111110
  28280  8e44		       2a		      .byte.b	%00101010
  28281  8e45		       3e		      .byte.b	%00111110
  28282  8e46		       2a		      .byte.b	%00101010
  28283  8e47		       3e		      .byte.b	%00111110
  28284  8e48		       2a		      .byte.b	%00101010
  28285  8e49		       3e		      .byte.b	%00111110
  28286  8e4a		       2a		      .byte.b	%00101010
  28287  8e4b		       3e		      .byte.b	%00111110
  28288  8e4c		       06		      .byte.b	%00000110
  28289  8e4d		       02		      .byte.b	%00000010
  28290  8e4e		       00		      .byte.b	%00000000
  28291  8e4f		       00		      .byte.b	%00000000
  28292  8e50		       00		      .byte.b	%00000000
  28293  8e51		       00		      .byte.b	%00000000
  28294  8e52		       00		      .byte.b	%00000000
  28295  8e53		       00		      .byte.b	%00000000
  28296  8e54		       00		      .byte.b	%00000000
  28297  8e55		       00		      .byte.b	%00000000
  28298  8e56		       00		      .byte.b	%00000000
  28299  8e57		       00		      .byte.b	%00000000
  28300  8e58				  -	      if	((>(*+22)) > (>*))
  28301  8e58				  -	      ALIGN	256
  28302  8e58					      endif
  28303  8e58				   PF1_data8
  28304  8e58		       7f		      .byte.b	%01111111
  28305  8e59		       3e		      .byte.b	%00111110
  28306  8e5a		       2a		      .byte.b	%00101010
  28307  8e5b		       3e		      .byte.b	%00111110
  28308  8e5c		       2a		      .byte.b	%00101010
  28309  8e5d		       3e		      .byte.b	%00111110
  28310  8e5e		       2a		      .byte.b	%00101010
  28311  8e5f		       3e		      .byte.b	%00111110
  28312  8e60		       06		      .byte.b	%00000110
  28313  8e61		       00		      .byte.b	%00000000
  28314  8e62		       00		      .byte.b	%00000000
  28315  8e63		       00		      .byte.b	%00000000
  28316  8e64		       00		      .byte.b	%00000000
  28317  8e65		       00		      .byte.b	%00000000
  28318  8e66		       00		      .byte.b	%00000000
  28319  8e67		       00		      .byte.b	%00000000
  28320  8e68		       00		      .byte.b	%00000000
  28321  8e69		       00		      .byte.b	%00000000
  28322  8e6a		       00		      .byte.b	%00000000
  28323  8e6b		       00		      .byte.b	%00000000
  28324  8e6c		       00		      .byte.b	%00000000
  28325  8e6d		       00		      .byte.b	%00000000
  28326  8e6e				  -	      if	((>(*+22)) > (>*))
  28327  8e6e				  -	      ALIGN	256
  28328  8e6e					      endif
  28329  8e6e				   PF2_data8
  28330  8e6e		       ff		      .byte.b	%11111111
  28331  8e6f		       3e		      .byte.b	%00111110
  28332  8e70		       2a		      .byte.b	%00101010
  28333  8e71		       3e		      .byte.b	%00111110
  28334  8e72		       2a		      .byte.b	%00101010
  28335  8e73		       3e		      .byte.b	%00111110
  28336  8e74		       2a		      .byte.b	%00101010
  28337  8e75		       3e		      .byte.b	%00111110
  28338  8e76		       06		      .byte.b	%00000110
  28339  8e77		       02		      .byte.b	%00000010
  28340  8e78		       00		      .byte.b	%00000000
  28341  8e79		       00		      .byte.b	%00000000
  28342  8e7a		       00		      .byte.b	%00000000
  28343  8e7b		       00		      .byte.b	%00000000
  28344  8e7c		       00		      .byte.b	%00000000
  28345  8e7d		       00		      .byte.b	%00000000
  28346  8e7e		       00		      .byte.b	%00000000
  28347  8e7f		       00		      .byte.b	%00000000
  28348  8e80		       00		      .byte.b	%00000000
  28349  8e81		       00		      .byte.b	%00000000
  28350  8e82		       00		      .byte.b	%00000000
  28351  8e83		       00		      .byte.b	%00000000
  28352  8e84				  -	      if	((>(*+22)) > (>*))
  28353  8e84				  -	      ALIGN	256
  28354  8e84					      endif
  28355  8e84				   PF1_data9
  28356  8e84		       7f		      .byte.b	%01111111
  28357  8e85		       3e		      .byte.b	%00111110
  28358  8e86		       2a		      .byte.b	%00101010
  28359  8e87		       3e		      .byte.b	%00111110
  28360  8e88		       2a		      .byte.b	%00101010
  28361  8e89		       3e		      .byte.b	%00111110
  28362  8e8a		       06		      .byte.b	%00000110
  28363  8e8b		       00		      .byte.b	%00000000
  28364  8e8c		       00		      .byte.b	%00000000
  28365  8e8d		       00		      .byte.b	%00000000
  28366  8e8e		       00		      .byte.b	%00000000
  28367  8e8f		       00		      .byte.b	%00000000
  28368  8e90		       00		      .byte.b	%00000000
  28369  8e91		       00		      .byte.b	%00000000
  28370  8e92		       00		      .byte.b	%00000000
  28371  8e93		       00		      .byte.b	%00000000
  28372  8e94		       00		      .byte.b	%00000000
  28373  8e95		       00		      .byte.b	%00000000
  28374  8e96		       00		      .byte.b	%00000000
  28375  8e97		       00		      .byte.b	%00000000
  28376  8e98		       00		      .byte.b	%00000000
  28377  8e99		       00		      .byte.b	%00000000
  28378  8e9a				  -	      if	((>(*+22)) > (>*))
  28379  8e9a				  -	      ALIGN	256
  28380  8e9a					      endif
  28381  8e9a				   PF2_data9
  28382  8e9a		       ff		      .byte.b	%11111111
  28383  8e9b		       3e		      .byte.b	%00111110
  28384  8e9c		       2a		      .byte.b	%00101010
  28385  8e9d		       3e		      .byte.b	%00111110
  28386  8e9e		       2a		      .byte.b	%00101010
  28387  8e9f		       3e		      .byte.b	%00111110
  28388  8ea0		       06		      .byte.b	%00000110
  28389  8ea1		       02		      .byte.b	%00000010
  28390  8ea2		       00		      .byte.b	%00000000
  28391  8ea3		       00		      .byte.b	%00000000
  28392  8ea4		       00		      .byte.b	%00000000
  28393  8ea5		       00		      .byte.b	%00000000
  28394  8ea6		       00		      .byte.b	%00000000
  28395  8ea7		       00		      .byte.b	%00000000
  28396  8ea8		       00		      .byte.b	%00000000
  28397  8ea9		       00		      .byte.b	%00000000
  28398  8eaa		       00		      .byte.b	%00000000
  28399  8eab		       00		      .byte.b	%00000000
  28400  8eac		       00		      .byte.b	%00000000
  28401  8ead		       00		      .byte.b	%00000000
  28402  8eae		       00		      .byte.b	%00000000
  28403  8eaf		       00		      .byte.b	%00000000
  28404  8eb0				  -	      if	((>(*+22)) > (>*))
  28405  8eb0				  -	      ALIGN	256
  28406  8eb0					      endif
  28407  8eb0				   PF1_data10
  28408  8eb0		       7f		      .byte.b	%01111111
  28409  8eb1		       3e		      .byte.b	%00111110
  28410  8eb2		       2a		      .byte.b	%00101010
  28411  8eb3		       3e		      .byte.b	%00111110
  28412  8eb4		       06		      .byte.b	%00000110
  28413  8eb5		       00		      .byte.b	%00000000
  28414  8eb6		       00		      .byte.b	%00000000
  28415  8eb7		       00		      .byte.b	%00000000
  28416  8eb8		       00		      .byte.b	%00000000
  28417  8eb9		       00		      .byte.b	%00000000
  28418  8eba		       00		      .byte.b	%00000000
  28419  8ebb		       00		      .byte.b	%00000000
  28420  8ebc		       00		      .byte.b	%00000000
  28421  8ebd		       00		      .byte.b	%00000000
  28422  8ebe		       00		      .byte.b	%00000000
  28423  8ebf		       00		      .byte.b	%00000000
  28424  8ec0		       00		      .byte.b	%00000000
  28425  8ec1		       00		      .byte.b	%00000000
  28426  8ec2		       00		      .byte.b	%00000000
  28427  8ec3		       00		      .byte.b	%00000000
  28428  8ec4		       00		      .byte.b	%00000000
  28429  8ec5		       00		      .byte.b	%00000000
  28430  8ec6				  -	      if	((>(*+22)) > (>*))
  28431  8ec6				  -	      ALIGN	256
  28432  8ec6					      endif
  28433  8ec6				   PF2_data10
  28434  8ec6		       ff		      .byte.b	%11111111
  28435  8ec7		       3e		      .byte.b	%00111110
  28436  8ec8		       2a		      .byte.b	%00101010
  28437  8ec9		       3e		      .byte.b	%00111110
  28438  8eca		       06		      .byte.b	%00000110
  28439  8ecb		       02		      .byte.b	%00000010
  28440  8ecc		       00		      .byte.b	%00000000
  28441  8ecd		       00		      .byte.b	%00000000
  28442  8ece		       00		      .byte.b	%00000000
  28443  8ecf		       00		      .byte.b	%00000000
  28444  8ed0		       00		      .byte.b	%00000000
  28445  8ed1		       00		      .byte.b	%00000000
  28446  8ed2		       00		      .byte.b	%00000000
  28447  8ed3		       00		      .byte.b	%00000000
  28448  8ed4		       00		      .byte.b	%00000000
  28449  8ed5		       00		      .byte.b	%00000000
  28450  8ed6		       00		      .byte.b	%00000000
  28451  8ed7		       00		      .byte.b	%00000000
  28452  8ed8		       00		      .byte.b	%00000000
  28453  8ed9		       00		      .byte.b	%00000000
  28454  8eda		       00		      .byte.b	%00000000
  28455  8edb		       00		      .byte.b	%00000000
  28456  8edc				  -	      if	((>(*+22)) > (>*))
  28457  8edc				  -	      ALIGN	256
  28458  8edc					      endif
  28459  8edc				   PF1_data11
  28460  8edc		       7f		      .byte.b	%01111111
  28461  8edd		       3e		      .byte.b	%00111110
  28462  8ede		       06		      .byte.b	%00000110
  28463  8edf		       00		      .byte.b	%00000000
  28464  8ee0		       00		      .byte.b	%00000000
  28465  8ee1		       00		      .byte.b	%00000000
  28466  8ee2		       00		      .byte.b	%00000000
  28467  8ee3		       00		      .byte.b	%00000000
  28468  8ee4		       00		      .byte.b	%00000000
  28469  8ee5		       00		      .byte.b	%00000000
  28470  8ee6		       00		      .byte.b	%00000000
  28471  8ee7		       00		      .byte.b	%00000000
  28472  8ee8		       00		      .byte.b	%00000000
  28473  8ee9		       00		      .byte.b	%00000000
  28474  8eea		       00		      .byte.b	%00000000
  28475  8eeb		       00		      .byte.b	%00000000
  28476  8eec		       00		      .byte.b	%00000000
  28477  8eed		       00		      .byte.b	%00000000
  28478  8eee		       00		      .byte.b	%00000000
  28479  8eef		       00		      .byte.b	%00000000
  28480  8ef0		       00		      .byte.b	%00000000
  28481  8ef1		       00		      .byte.b	%00000000
  28482  8ef2					      if	((>(*+22)) > (>*))
  28483  8f00		       00 00 00 00*	      ALIGN	256
  28484  8f00					      endif
  28485  8f00				   PF2_data11
  28486  8f00		       ff		      .byte.b	%11111111
  28487  8f01		       3e		      .byte.b	%00111110
  28488  8f02		       06		      .byte.b	%00000110
  28489  8f03		       02		      .byte.b	%00000010
  28490  8f04		       00		      .byte.b	%00000000
  28491  8f05		       00		      .byte.b	%00000000
  28492  8f06		       00		      .byte.b	%00000000
  28493  8f07		       00		      .byte.b	%00000000
  28494  8f08		       00		      .byte.b	%00000000
  28495  8f09		       00		      .byte.b	%00000000
  28496  8f0a		       00		      .byte.b	%00000000
  28497  8f0b		       00		      .byte.b	%00000000
  28498  8f0c		       00		      .byte.b	%00000000
  28499  8f0d		       00		      .byte.b	%00000000
  28500  8f0e		       00		      .byte.b	%00000000
  28501  8f0f		       00		      .byte.b	%00000000
  28502  8f10		       00		      .byte.b	%00000000
  28503  8f11		       00		      .byte.b	%00000000
  28504  8f12		       00		      .byte.b	%00000000
  28505  8f13		       00		      .byte.b	%00000000
  28506  8f14		       00		      .byte.b	%00000000
  28507  8f15		       00		      .byte.b	%00000000
  28508  8f16					      if	ECHOFIRST
      94 bytes of ROM space left in bank 8
  28509  8f16					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 8")
  28510  8f16					      endif
  28511  8f16		       00 01	   ECHOFIRST  =	1
  28512  8f16
  28513  8f16
  28514  8f16				   ﻿			; feel free to modify the score graphics - just keep each digit 8 high
  28515  8f16							; and keep the conditional compilation stuff intact
  28516  8f16				  -	      ifconst	ROM2k
  28517  8f16				  -	      ORG	$F7AC-8
  28518  8f16					      else
  28519  8f16					      ifconst	bankswitch
  28520  8f16				  -	      if	bankswitch == 8
  28521  8f16				  -	      ORG	$2F94-bscode_length
  28522  8f16				  -	      RORG	$FF94-bscode_length
  28523  8f16					      endif
  28524  8f16				  -	      if	bankswitch == 16
  28525  8f16				  -	      ORG	$4F94-bscode_length
  28526  8f16				  -	      RORG	$FF94-bscode_length
  28527  8f16					      endif
  28528  8f16					      if	bankswitch == 32
  28529  8f74					      ORG	$8F94-bscode_length
  28530  8f74					      RORG	$FF94-bscode_length
  28531  8f74					      endif
  28532  8f74				  -	      if	bankswitch == 64
  28533  8f74				  -	      ORG	$10F80-bscode_length
  28534  8f74				  -	      RORG	$1FF80-bscode_length
  28535  8f74					      endif
  28536  8f74				  -	      else
  28537  8f74				  -	      ORG	$FF9C
  28538  8f74					      endif
  28539  8f74					      endif
  28540  8f74
  28541  8f74							; font equates
  28542  8f74		       00 01	   .21stcentury =	1
  28543  8f74		       00 02	   alarmclock =	2
  28544  8f74		       00 03	   handwritten =	3
  28545  8f74		       00 04	   interrupted =	4
  28546  8f74		       00 05	   retroputer =	5
  28547  8f74		       00 06	   whimsey    =	6
  28548  8f74		       00 07	   tiny       =	7
  28549  8f74
  28550  8f74				   scoretable
  28551  8f74
  28552  8f74				  -	      ifconst	font
  28553  8f74				  -	      if	font == .21stcentury
  28554  8f74				  -	      include	"score_graphics.asm.21stcentury"
  28555  8f74				  -	      endif
  28556  8f74				  -	      if	font == alarmclock
  28557  8f74				  -	      include	"score_graphics.asm.alarmclock"
  28558  8f74				  -	      endif
  28559  8f74				  -	      if	font == handwritten
  28560  8f74				  -	      include	"score_graphics.asm.handwritten"
  28561  8f74				  -	      endif
  28562  8f74				  -	      if	font == interrupted
  28563  8f74				  -	      include	"score_graphics.asm.interrupted"
  28564  8f74				  -	      endif
  28565  8f74				  -	      if	font == retroputer
  28566  8f74				  -	      include	"score_graphics.asm.retroputer"
  28567  8f74				  -	      endif
  28568  8f74				  -	      if	font == whimsey
  28569  8f74				  -	      include	"score_graphics.asm.whimsey"
  28570  8f74				  -	      endif
  28571  8f74				  -	      if	font == tiny
  28572  8f74				  -	      include	"score_graphics.asm.tiny"
  28573  8f74				  -	      endif
  28574  8f74					      else		; default font
  28575  8f74
  28576  8f74		       7e		      .byte.b	%01111110
  28577  8f75		       4a		      .byte.b	%01001010
  28578  8f76		       7e		      .byte.b	%01111110
  28579  8f77		       a5		      .byte.b	%10100101
  28580  8f78		       99		      .byte.b	%10011001
  28581  8f79		       99		      .byte.b	%10011001
  28582  8f7a		       ff		      .byte.b	%11111111
  28583  8f7b		       7e		      .byte.b	%01111110
  28584  8f7c
  28585  8f7c		       0c		      .byte.b	%00001100
  28586  8f7d		       0c		      .byte.b	%00001100
  28587  8f7e		       08		      .byte.b	%00001000
  28588  8f7f		       04		      .byte.b	%00000100
  28589  8f80		       0c		      .byte.b	%00001100
  28590  8f81		       6c		      .byte.b	%01101100
  28591  8f82		       3c		      .byte.b	%00111100
  28592  8f83		       0e		      .byte.b	%00001110
  28593  8f84
  28594  8f84		       ff		      .byte.b	%11111111
  28595  8f85		       72		      .byte.b	%01110010
  28596  8f86		       18		      .byte.b	%00011000
  28597  8f87		       0e		      .byte.b	%00001110
  28598  8f88		       66		      .byte.b	%01100110
  28599  8f89		       c3		      .byte.b	%11000011
  28600  8f8a		       c3		      .byte.b	%11000011
  28601  8f8b		       7e		      .byte.b	%01111110
  28602  8f8c
  28603  8f8c		       7e		      .byte.b	%01111110
  28604  8f8d		       e7		      .byte.b	%11100111
  28605  8f8e		       86		      .byte.b	%10000110
  28606  8f8f		       1c		      .byte.b	%00011100
  28607  8f90		       1c		      .byte.b	%00011100
  28608  8f91		       86		      .byte.b	%10000110
  28609  8f92		       e7		      .byte.b	%11100111
  28610  8f93		       7e		      .byte.b	%01111110
  28611  8f94
  28612  8f94		       70		      .byte.b	%01110000
  28613  8f95		       31		      .byte.b	%00110001
  28614  8f96		       1f		      .byte.b	%00011111
  28615  8f97		       7e		      .byte.b	%01111110
  28616  8f98		       c6		      .byte.b	%11000110
  28617  8f99		       76		      .byte.b	%01110110
  28618  8f9a		       1f		      .byte.b	%00011111
  28619  8f9b		       07		      .byte.b	%00000111
  28620  8f9c
  28621  8f9c		       3c		      .byte.b	%00111100
  28622  8f9d		       62		      .byte.b	%01100010
  28623  8f9e		       c1		      .byte.b	%11000001
  28624  8f9f		       03		      .byte.b	%00000011
  28625  8fa0		       7e		      .byte.b	%01111110
  28626  8fa1		       f0		      .byte.b	%11110000
  28627  8fa2		       e0		      .byte.b	%11100000
  28628  8fa3		       7c		      .byte.b	%01111100
  28629  8fa4
  28630  8fa4		       7e		      .byte.b	%01111110
  28631  8fa5		       c7		      .byte.b	%11000111
  28632  8fa6		       83		      .byte.b	%10000011
  28633  8fa7		       df		      .byte.b	%11011111
  28634  8fa8		       e0		      .byte.b	%11100000
  28635  8fa9		       e1		      .byte.b	%11100001
  28636  8faa		       c7		      .byte.b	%11000111
  28637  8fab		       7e		      .byte.b	%01111110
  28638  8fac
  28639  8fac		       60		      .byte.b	%01100000
  28640  8fad		       65		      .byte.b	%01100101
  28641  8fae		       62		      .byte.b	%01100010
  28642  8faf		       67		      .byte.b	%01100111
  28643  8fb0		       62		      .byte.b	%01100010
  28644  8fb1		       52		      .byte.b	%01010010
  28645  8fb2		       ff		      .byte.b	%11111111
  28646  8fb3		       60		      .byte.b	%01100000
  28647  8fb4
  28648  8fb4		       7e		      .byte.b	%01111110
  28649  8fb5		       c3		      .byte.b	%11000011
  28650  8fb6		       a5		      .byte.b	%10100101
  28651  8fb7		       e7		      .byte.b	%11100111
  28652  8fb8		       7e		      .byte.b	%01111110
  28653  8fb9		       a5		      .byte.b	%10100101
  28654  8fba		       c3		      .byte.b	%11000011
  28655  8fbb		       7e		      .byte.b	%01111110
  28656  8fbc
  28657  8fbc		       3e		      .byte.b	%00111110
  28658  8fbd		       e7		      .byte.b	%11100111
  28659  8fbe		       83		      .byte.b	%10000011
  28660  8fbf		       07		      .byte.b	%00000111
  28661  8fc0		       7e		      .byte.b	%01111110
  28662  8fc1		       e2		      .byte.b	%11100010
  28663  8fc2		       c3		      .byte.b	%11000011
  28664  8fc3		       7e		      .byte.b	%01111110
  28665  8fc4
  28666  8fc4					      endif
  28667  8fc4
  28668  8fc4					      endif
  28669  8fc4
  28670  8fc4				  -	      ifconst	ROM2k
  28671  8fc4				  -	      ORG	$F7FC
  28672  8fc4					      else
  28673  8fc4					      ifconst	bankswitch
  28674  8fc4				  -	      if	bankswitch == 8
  28675  8fc4				  -	      ORG	$2FF4-bscode_length
  28676  8fc4				  -	      RORG	$FFF4-bscode_length
  28677  8fc4					      endif
  28678  8fc4				  -	      if	bankswitch == 16
  28679  8fc4				  -	      ORG	$4FF4-bscode_length
  28680  8fc4				  -	      RORG	$FFF4-bscode_length
  28681  8fc4					      endif
  28682  8fc4					      if	bankswitch == 32
  28683  8fd4					      ORG	$8FF4-bscode_length
  28684  8fd4					      RORG	$FFF4-bscode_length
  28685  8fd4					      endif
  28686  8fd4				  -	      if	bankswitch == 64
  28687  8fd4				  -	      ORG	$10FE0-bscode_length
  28688  8fd4				  -	      RORG	$1FFE0-bscode_length
  28689  8fd4					      endif
  28690  8fd4				  -	      else
  28691  8fd4				  -	      ORG	$FFFC
  28692  8fd4					      endif
  28693  8fd4					      endif
  28694  8fd4							; every bank has this stuff at the same place
  28695  8fd4							; this code can switch to/from any bank at any entry point
  28696  8fd4							; and can preserve register values
  28697  8fd4							; note: lines not starting with a space are not placed in all banks
  28698  8fd4							;
  28699  8fd4							; line below tells the compiler how long this is - do not remove
  28700  8fd4							;size=32
  28701  8fd4
  28702  8fd4				   begin_bscode
  28703  8fd4		       a2 ff		      ldx	#$ff
  28704  8fd6				  -	      ifconst	FASTFETCH	; using DPC+
  28705  8fd6				  -	      stx	FASTFETCH
  28706  8fd6					      endif
  28707  8fd6		       9a		      txs
  28708  8fd7				  -	      if	bankswitch == 64
  28709  8fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
  28710  8fd7					      else
  28711  8fd7		       a9 f3		      lda	#>(start-1)
  28712  8fd9					      endif
  28713  8fd9		       48		      pha
  28714  8fda		       a9 6d		      lda	#<(start-1)
  28715  8fdc		       48		      pha
  28716  8fdd
  28717  8fdd				   BS_return
  28718  8fdd		       48		      pha
  28719  8fde		       8a		      txa
  28720  8fdf		       48		      pha
  28721  8fe0		       ba		      tsx
  28722  8fe1
  28723  8fe1					      if	bankswitch != 64
  28724  8fe1		       b5 04		      lda	4,x	; get high byte of return address
  28725  8fe3
  28726  8fe3		       2a		      rol
  28727  8fe4		       2a		      rol
  28728  8fe5		       2a		      rol
  28729  8fe6		       2a		      rol
  28730  8fe7		       29 07		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
  28731  8fe9		       aa		      tax
  28732  8fea		       e8		      inx
  28733  8feb				  -	      else
  28734  8feb				  -	      lda	4,x	; get high byte of return address
  28735  8feb				  -	      tay
  28736  8feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
  28737  8feb				  -	      sta	4,x
  28738  8feb				  -	      tya
  28739  8feb				  -	      lsr
  28740  8feb				  -	      lsr
  28741  8feb				  -	      lsr
  28742  8feb				  -	      lsr
  28743  8feb				  -	      tax
  28744  8feb				  -	      inx
  28745  8feb					      endif
  28746  8feb
  28747  8feb				   BS_jsr
  28748  8feb		       bd f3 1f 	      lda	bankswitch_hotspot-1,x
  28749  8fee		       68		      pla
  28750  8fef		       aa		      tax
  28751  8ff0		       68		      pla
  28752  8ff1		       60		      rts
  28753  8ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
  28754  8ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
  28755  8ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
  28756  8ff2					      endif
  28757  8ff2					      ifconst	bankswitch
  28758  8ff2				  -	      if	bankswitch == 8
  28759  8ff2				  -	      ORG	$2FFC
  28760  8ff2				  -	      RORG	$FFFC
  28761  8ff2					      endif
  28762  8ff2				  -	      if	bankswitch == 16
  28763  8ff2				  -	      ORG	$4FFC
  28764  8ff2				  -	      RORG	$FFFC
  28765  8ff2					      endif
  28766  8ff2					      if	bankswitch == 32
  28767  8ffc					      ORG	$8FFC
  28768  8ffc					      RORG	$FFFC
  28769  8ffc					      endif
  28770  8ffc				  -	      if	bankswitch == 64
  28771  8ffc				  -	      ORG	$10FF0
  28772  8ffc				  -	      RORG	$1FFF0
  28773  8ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
  28774  8ffc				  -	      ORG	$10FF8
  28775  8ffc				  -	      RORG	$1FFF8
  28776  8ffc				  -	      ifconst	superchip
  28777  8ffc				  -	      .byte	"E","F","S","C"
  28778  8ffc				  -	      else
  28779  8ffc				  -	      .byte	"E","F","E","F"
  28780  8ffc				  -	      endif
  28781  8ffc				  -	      ORG	$10FFC
  28782  8ffc				  -	      RORG	$1FFFC
  28783  8ffc					      endif
  28784  8ffc				  -	      else
  28785  8ffc				  -	      ifconst	ROM2k
  28786  8ffc				  -	      ORG	$F7FC
  28787  8ffc				  -	      else
  28788  8ffc				  -	      ORG	$FFFC
  28789  8ffc				  -	      endif
  28790  8ffc					      endif
  28791  8ffc		       6e f3		      .word.w	start
  28792  8ffe		       6e f3		      .word.w	start
